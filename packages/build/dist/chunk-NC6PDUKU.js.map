{"version":3,"sources":["../src/classes/baseApp/fileContent/componentMap.ts"],"sourcesContent":["import { UlldPlugin } from \"../../plugin.js\";\n\n// TODO: Create a generated name in the embeddable class itself to use throughout the build process for consistency and stability. Don't generate one here.\nconst getImportsForPlugin = (\n    plugin: UlldPlugin,\n): { content: string; pluginNames: string[] } => {\n    if (!plugin.embeddables) return { content: \"\", pluginNames: [] };\n    let s = \"\";\n    let pluginNames: string[] = [];\n    for (const k of plugin.embeddables) {\n        s += `import ${k.generatedComponentName} from \"${plugin.name}/${k.export}\"`;\n        pluginNames.push(k.generatedComponentName);\n    }\n    return {\n        content: s,\n        pluginNames,\n    };\n};\n\nconst getImports = (\n    plugins: UlldPlugin[],\n): { content: string; pluginNames: string[] } => {\n    let data = plugins\n        .filter((p) => p.embeddables && p.embeddables.length)\n        .map((p) => getImportsForPlugin(p));\n    let pluginNames = data.map((d) => d.pluginNames).flat();\n    return {\n        content: data.map((d) => d.content).join(\";\\n\"),\n        pluginNames,\n    };\n};\n\nconst getComponentData = (plugins: UlldPlugin[]) => {\n    let embeddables: (typeof plugins)[number][\"embeddables\"] = [];\n    for (const k of plugins) {\n        if (k.embeddables) {\n            embeddables = embeddables.concat(k.embeddables);\n        }\n    }\n    let items: string[] = [];\n    for (const k of embeddables) {\n        items.push(`    {\n        regex: new RegExp(\"${k?.regexToInclude}\"),\n        component: ${k?.generatedComponentName},\n        label: \"${k?.label}\"\n    }`);\n    }\n    return items.join(\",\\n\");\n};\n\nexport const getComponentMapContent = (plugins: UlldPlugin[]): string => {\n    let s = `import { AdditionalComponents } from \"@ulld/component-map/types\";\n${getImports(plugins).content}\n\nexport const generatedComponentMap: AdditionalComponents<any> = [\n${getComponentData(plugins)}\n]\n`;\n\n    return s;\n};\n"],"mappings":";;;;;AAAA;AAGA,IAAM,sBAAsB,CACxB,WAC6C;AAC7C,MAAI,CAAC,OAAO;AAAa,WAAO,EAAE,SAAS,IAAI,aAAa,CAAC,EAAE;AAC/D,MAAI,IAAI;AACR,MAAI,cAAwB,CAAC;AAC7B,aAAW,KAAK,OAAO,aAAa;AAChC,SAAK,UAAU,EAAE,sBAAsB,UAAU,OAAO,IAAI,IAAI,EAAE,MAAM;AACxE,gBAAY,KAAK,EAAE,sBAAsB;AAAA,EAC7C;AACA,SAAO;AAAA,IACH,SAAS;AAAA,IACT;AAAA,EACJ;AACJ;AAEA,IAAM,aAAa,CACf,YAC6C;AAC7C,MAAI,OAAO,QACN,OAAO,CAAC,MAAM,EAAE,eAAe,EAAE,YAAY,MAAM,EACnD,IAAI,CAAC,MAAM,oBAAoB,CAAC,CAAC;AACtC,MAAI,cAAc,KAAK,IAAI,CAAC,MAAM,EAAE,WAAW,EAAE,KAAK;AACtD,SAAO;AAAA,IACH,SAAS,KAAK,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK,KAAK;AAAA,IAC9C;AAAA,EACJ;AACJ;AAEA,IAAM,mBAAmB,CAAC,YAA0B;AAChD,MAAI,cAAuD,CAAC;AAC5D,aAAW,KAAK,SAAS;AACrB,QAAI,EAAE,aAAa;AACf,oBAAc,YAAY,OAAO,EAAE,WAAW;AAAA,IAClD;AAAA,EACJ;AACA,MAAI,QAAkB,CAAC;AACvB,aAAW,KAAK,aAAa;AACzB,UAAM,KAAK;AAAA,6BACU,GAAG,cAAc;AAAA,qBACzB,GAAG,sBAAsB;AAAA,kBAC5B,GAAG,KAAK;AAAA,MACpB;AAAA,EACF;AACA,SAAO,MAAM,KAAK,KAAK;AAC3B;AAEO,IAAM,yBAAyB,CAAC,YAAkC;AACrE,MAAI,IAAI;AAAA,EACV,WAAW,OAAO,EAAE,OAAO;AAAA;AAAA;AAAA,EAG3B,iBAAiB,OAAO,CAAC;AAAA;AAAA;AAIvB,SAAO;AACX;","names":[]}