{"version":3,"sources":["../src/stages/verifyDirectory.ts"],"sourcesContent":["import {\n    getCurrentDir,\n    getDirectoryCompletionFromString,\n} from \"../utils/locationUtils.js\";\nimport chalk from \"chalk\";\nimport enq from \"enquirer\";\nimport fs from 'fs'\nimport path from 'path'\nimport { UlldBuildProcess } from \"../classes/build.js\";\nimport { BuildOptionsType } from \"../utils/options.js\";\nimport { getBuildDataOutputPath } from \"../utils/getXdgPaths.js\";\nimport { JsonFile } from \"@ulld/utilities/jsonFileClass\";\nimport { BuildOutputData } from \"../types.js\";\nimport shellJs from \"shelljs\"\n// import { getBranchSelection } from \"./selectBranch.js\";\n\nconst { prompt } = enq;\n\nexport const verifyDirectory = async (opts: BuildOptionsType, branch: string = \"main\") => {\n    const currentDir = getCurrentDir();\n\n    if(opts.clean){\n        let buildOutputPath = getBuildDataOutputPath()\n        let f = new JsonFile<BuildOutputData>(buildOutputPath)\n        if(f.exists()){\n            let content = f.getJsonContent()\n            if(content.buildOutputPath){\n                shellJs.rm(\"-f -R\", content.buildOutputPath)\n                return new UlldBuildProcess(content.buildOutputPath.endsWith(\"/ulldApp\") ? path.dirname(content.buildOutputPath) : content.buildOutputPath, branch)\n            }\n        }\n    }\n\n    if (opts.here) {\n        return new UlldBuildProcess(currentDir, branch);\n    }\n\n    let useCurrentDir = await prompt({\n        type: \"confirm\",\n        name: \"useCurrentDir\",\n        message: `You're currently in the ${currentDir} directory.\nIs this where you'd like to build ${chalk.hex(\"#0ba5e9\")(\"U\")}LLD?`,\n        initial: true,\n    });\n    if (\"useCurrentDir\" in useCurrentDir && useCurrentDir.useCurrentDir) {\n        return new UlldBuildProcess(currentDir, branch);\n    }\n\n\n    const newPath: {path: string} = await prompt({\n        type: \"autocomplete\",\n        name: \"path\",\n        message: `Where would you like to build ${chalk.hex(\"#0ba5e9\")(\"U\")}LLD?`,\n        choices: [],\n\n        /* @ts-ignore */\n        highlight: chalk.hex(\"#0ba5e9\"),\n        /* @ts-ignore */\n        limit: 10,\n        /* @ts-ignore */\n        suggest: (data: string): {message: string}[] => {\n            // console.log(\"data: \", data);\n            return getDirectoryCompletionFromString(data).map((f) => ({message: f, value: f}))\n        },\n        // initial: currentDir,\n    });\n    if (!newPath.path || !fs.existsSync(newPath.path)) {\n            console.log(`You need to specify a directory to continue.`);\n            process.exit(1);\n    }\n    return new UlldBuildProcess(newPath.path, branch)\n};\n"],"mappings":";;;;;;;;;;;;;;;AAAA;AAIA,OAAO,WAAW;AAClB,OAAO,SAAS;AAChB,OAAO,QAAQ;AACf,OAAO,UAAU;AAIjB,SAAS,gBAAgB;AAEzB,OAAO,aAAa;AAGpB,IAAM,EAAE,OAAO,IAAI;AAEZ,IAAM,kBAAkB,OAAO,MAAwB,SAAiB,WAAW;AACtF,QAAM,aAAa,cAAc;AAEjC,MAAG,KAAK,OAAM;AACV,QAAI,kBAAkB,uBAAuB;AAC7C,QAAI,IAAI,IAAI,SAA0B,eAAe;AACrD,QAAG,EAAE,OAAO,GAAE;AACV,UAAI,UAAU,EAAE,eAAe;AAC/B,UAAG,QAAQ,iBAAgB;AACvB,gBAAQ,GAAG,SAAS,QAAQ,eAAe;AAC3C,eAAO,IAAI,iBAAiB,QAAQ,gBAAgB,SAAS,UAAU,IAAI,KAAK,QAAQ,QAAQ,eAAe,IAAI,QAAQ,iBAAiB,MAAM;AAAA,MACtJ;AAAA,IACJ;AAAA,EACJ;AAEA,MAAI,KAAK,MAAM;AACX,WAAO,IAAI,iBAAiB,YAAY,MAAM;AAAA,EAClD;AAEA,MAAI,gBAAgB,MAAM,OAAO;AAAA,IAC7B,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS,2BAA2B,UAAU;AAAA,oCAClB,MAAM,IAAI,SAAS,EAAE,GAAG,CAAC;AAAA,IACrD,SAAS;AAAA,EACb,CAAC;AACD,MAAI,mBAAmB,iBAAiB,cAAc,eAAe;AACjE,WAAO,IAAI,iBAAiB,YAAY,MAAM;AAAA,EAClD;AAGA,QAAM,UAA0B,MAAM,OAAO;AAAA,IACzC,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS,iCAAiC,MAAM,IAAI,SAAS,EAAE,GAAG,CAAC;AAAA,IACnE,SAAS,CAAC;AAAA;AAAA,IAGV,WAAW,MAAM,IAAI,SAAS;AAAA;AAAA,IAE9B,OAAO;AAAA;AAAA,IAEP,SAAS,CAAC,SAAsC;AAE5C,aAAO,iCAAiC,IAAI,EAAE,IAAI,CAAC,OAAO,EAAC,SAAS,GAAG,OAAO,EAAC,EAAE;AAAA,IACrF;AAAA;AAAA,EAEJ,CAAC;AACD,MAAI,CAAC,QAAQ,QAAQ,CAAC,GAAG,WAAW,QAAQ,IAAI,GAAG;AAC3C,YAAQ,IAAI,8CAA8C;AAC1D,YAAQ,KAAK,CAAC;AAAA,EACtB;AACA,SAAO,IAAI,iBAAiB,QAAQ,MAAM,MAAM;AACpD;","names":[]}