{"version":3,"sources":["../src/classes/slot.ts"],"sourcesContent":["import { PluginComponent } from \"./component.js\";\nimport slotMap from \"@ulld/utilities/slotMap.json\"  with {type: \"json\"};\nimport { TargetPaths } from \"./paths.js\";\nimport { AnySubSlotKey, PluginSlotKey } from \"@ulld/configschema/slotMapType\";\n\ntype SlotRecord = {[K in AnySubSlotKey]?: PluginComponent}\n\n\nexport class PluginSlot {\n    subSlotComponents: PluginComponent[]\n    slots: SlotRecord\n    constructor(\n        public pluginName: string,\n        public slot: PluginSlotKey,\n        components: PluginComponent[],\n        public paths: TargetPaths\n    ) {\n        this.subSlotComponents = components.filter((f) => f.subSlot)\n        let tempSlots = {} as SlotRecord\n        for (const k of this.subSlotComponents) {\n            if(k.subSlotKey){\n                tempSlots[k.subSlotKey as keyof typeof tempSlots] = k\n            }\n        }\n        this.slots = tempSlots\n    }\n    occupiesAllSlots(){\n        return Object.keys(slotMap[this.slot]).every((x) => x in this.slots)\n    }\n}\n"],"mappings":";;;;;AAAA;AACA,OAAO,aAAa;AAOb,IAAM,aAAN,MAAiB;AAAA,EAGpB,YACW,YACA,MACP,YACO,OACT;AAJS;AACA;AAEA;AAEP,SAAK,oBAAoB,WAAW,OAAO,CAAC,MAAM,EAAE,OAAO;AAC3D,QAAI,YAAY,CAAC;AACjB,eAAW,KAAK,KAAK,mBAAmB;AACpC,UAAG,EAAE,YAAW;AACZ,kBAAU,EAAE,UAAoC,IAAI;AAAA,MACxD;AAAA,IACJ;AACA,SAAK,QAAQ;AAAA,EACjB;AAAA,EAhBA;AAAA,EACA;AAAA,EAgBA,mBAAkB;AACd,WAAO,OAAO,KAAK,QAAQ,KAAK,IAAI,CAAC,EAAE,MAAM,CAAC,MAAM,KAAK,KAAK,KAAK;AAAA,EACvE;AACJ;","names":[]}