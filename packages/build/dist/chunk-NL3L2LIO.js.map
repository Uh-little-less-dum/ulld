{"version":3,"sources":["../src/classes/prompter.ts"],"sourcesContent":["import { UlldPlugin } from \"./plugin.js\";\nimport enq from \"enquirer\";\nimport { SlotConflict } from \"./slotConflict.js\";\nimport { PageConflict } from \"./pageConflict.js\";\nimport { GitManager } from \"./baseClasses/gitManager.js\";\nimport { BranchValue } from \"../utils/options.js\";\n\nexport class Prompter extends GitManager {\n    constructor(targetDirectory: string, gitBranch: BranchValue) {\n        super(targetDirectory, gitBranch);\n    }\n    async confirmContinueWithInvalidPlugins(\n        invalidPlugins: UlldPlugin[],\n    ): Promise<boolean> {\n        this.log(\n            \"There are some errors related to the following plugins, so they aren't able to be installed.\",\n        );\n        for (const k of invalidPlugins) {\n            console.log(k.name);\n        }\n        let response = await enq.prompt({\n            type: \"confirm\",\n            message: \"Would you like to continue?\",\n            name: \"shouldContinue\",\n        });\n        if (\"shouldContinue\" in response && response.shouldContinue) {\n            return true;\n        }\n        return false;\n    }\n    async getPagePreferences(pageConflicts: PageConflict[]){\n        let opts = pageConflicts.map((s) => s.getSurveyPromptData());\n        const response: Record<string, string> = await enq.prompt(opts);\n        for (const k of pageConflicts) {\n            if (k.surveyKey in response) {\n                k.resolveSlotConflict(response[k.surveyKey]);\n            }\n        }\n    }\n    async getSlotPreferences(slotConflicts: SlotConflict[]) {\n        let opts = slotConflicts.map((s) => s.getSurveyPromptData());\n        const response: Record<string, string> = await enq.prompt(opts);\n        for (const k of slotConflicts) {\n            if (k.surveyKey in response) {\n                k.resolveSlotConflict(response[k.surveyKey]);\n            }\n        }\n    }\n    async promptForPackageManager() {\n        let response = await enq.prompt({\n            type: \"select\",\n            name: \"packageManager\",\n            message: \"Which package manager are you using?\",\n            choices: [\"npm\", \"pnpm\", \"yarn\"],\n        });\n        return \"packageManager\" in response ? response.packageManager : undefined;\n    }\n    kBye() {\n        console.log(`No worries. We can try this again later.`);\n        process.exit(1);\n    }\n}\n"],"mappings":";;;;;;;;AAAA;AACA,OAAO,SAAS;AAMT,IAAM,WAAN,cAAuB,WAAW;AAAA,EACrC,YAAY,iBAAyB,WAAwB;AACzD,UAAM,iBAAiB,SAAS;AAAA,EACpC;AAAA,EACA,MAAM,kCACF,gBACgB;AAChB,SAAK;AAAA,MACD;AAAA,IACJ;AACA,eAAW,KAAK,gBAAgB;AAC5B,cAAQ,IAAI,EAAE,IAAI;AAAA,IACtB;AACA,QAAI,WAAW,MAAM,IAAI,OAAO;AAAA,MAC5B,MAAM;AAAA,MACN,SAAS;AAAA,MACT,MAAM;AAAA,IACV,CAAC;AACD,QAAI,oBAAoB,YAAY,SAAS,gBAAgB;AACzD,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA,EACA,MAAM,mBAAmB,eAA8B;AACnD,QAAI,OAAO,cAAc,IAAI,CAAC,MAAM,EAAE,oBAAoB,CAAC;AAC3D,UAAM,WAAmC,MAAM,IAAI,OAAO,IAAI;AAC9D,eAAW,KAAK,eAAe;AAC3B,UAAI,EAAE,aAAa,UAAU;AACzB,UAAE,oBAAoB,SAAS,EAAE,SAAS,CAAC;AAAA,MAC/C;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,MAAM,mBAAmB,eAA+B;AACpD,QAAI,OAAO,cAAc,IAAI,CAAC,MAAM,EAAE,oBAAoB,CAAC;AAC3D,UAAM,WAAmC,MAAM,IAAI,OAAO,IAAI;AAC9D,eAAW,KAAK,eAAe;AAC3B,UAAI,EAAE,aAAa,UAAU;AACzB,UAAE,oBAAoB,SAAS,EAAE,SAAS,CAAC;AAAA,MAC/C;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,MAAM,0BAA0B;AAC5B,QAAI,WAAW,MAAM,IAAI,OAAO;AAAA,MAC5B,MAAM;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,MACT,SAAS,CAAC,OAAO,QAAQ,MAAM;AAAA,IACnC,CAAC;AACD,WAAO,oBAAoB,WAAW,SAAS,iBAAiB;AAAA,EACpE;AAAA,EACA,OAAO;AACH,YAAQ,IAAI,0CAA0C;AACtD,YAAQ,KAAK,CAAC;AAAA,EAClB;AACJ;","names":[]}