{"version":3,"sources":["../src/classes/baseApp/baseApp.ts"],"sourcesContent":["import fs from \"fs-extra\";\nimport path from \"path\";\nimport sm from \"@ulld/utilities/slotMap.json\" with { type: \"json\" };\nimport { ParserKey, parserKeyList } from \"@ulld/configschema/developer\";\nimport { EventMethodKey } from \"../../types.js\";\nimport { flattenSlotMap } from \"../../utils/slotMapUtils.js\";\nimport { AdditionalSources } from \"../additionalSources.js\";\nimport { FileManager } from \"../baseClasses/fileManager.js\";\nimport { ShellManager } from \"../baseClasses/shell.js\";\nimport { UlldBuildProcess } from \"../build.js\";\nimport { TargetPaths } from \"../paths.js\";\nimport { UlldPlugin } from \"../plugin.js\";\nimport { TemplateFile } from \"../templateFile.js\";\nimport { BuildStaticData } from \"./buildStaticData.js\";\nimport { BuildCleanup } from \"./cleanup.js\";\nimport { getComponentMapContent } from \"./fileContent/componentMap.js\";\nimport { getEventMethodListContent } from \"./fileContent/eventMethodList.js\";\nimport { BuildOptionsType } from \"../../utils/options.js\";\nimport type { pathKeys} from \"@ulld/utilities/buildUtils\"\n// import { SlotMapInternalType } from \"@ulld/configschema/slotMapInternalType\";\n\ninterface ParserFunctionData {\n    importName: string;\n    importString: string;\n}\n\nexport class BaseApp extends ShellManager {\n    paths: TargetPaths;\n    slotMap: any; // SlotMapInternalType, but causes build error. Need to fix while on wifi.\n    buildStaticData: BuildStaticData;\n    buildCleanup: BuildCleanup;\n    constructor(\n        public build: UlldBuildProcess,\n        public options: BuildOptionsType,\n    ) {\n        super();\n        this.paths = build.paths;\n        this.slotMap = sm as any;\n        this.buildStaticData = new BuildStaticData(this.paths, this.build);\n        this.buildCleanup = new BuildCleanup(this.paths, this.build.packageManager);\n    }\n    writeFile(location: typeof pathKeys[number], content: string) {\n        return fs.writeFileSync(this.paths[location], content, {\n            encoding: \"utf-8\",\n        });\n    }\n    generate() {\n        this.logVerbose(\"Creating component map...\");\n        this.createComponentMap(this.build.plugins);\n        // NOTE: Do not copy for now. THe mathjax/node version issue seems to have been resolved and the mathjax files that were copied were causing issues with better-react-mathjax.\n        // this.logVerbose(\"Copying mathjax files to public directory...\")\n        // this.copyMathjax()\n        this.logVerbose(\"Applying component slots...\");\n        this.applySlots();\n        this.logVerbose(\"Writing temporary target paths...\");\n        this.writeTemporaryTargetPaths();\n        this.logVerbose(\"Generating unified event methods...\");\n        this.createEventFunctions();\n        this.logVerbose(\"Generating note type paths...\");\n        this.writeNoteTypePages();\n        this.logVerbose(\"Generating plugin setting pages...\");\n        this.writePluginSettingPages();\n        this.logVerbose(\"Copying additional sources...\");\n        this.copyAdditionalSources();\n        this.logVerbose(\"Gathering parsers...\");\n        this.writeUnifiedParsingFunctions();\n        this.logVerbose(\"Writing static build data...\");\n        this.buildStaticData.writeOutput();\n        this.logVerbose(\"Copying component documentation...\");\n        this.copyComponentDocs();\n        this.copyPluginDocs();\n        this.logVerbose(\"Generating database schema...\");\n        this.writePrismaSchema();\n        this.runOnBuild();\n        this.logVerbose(\"Wrapping up build...\");\n        this.onBuild();\n    }\n    createComponentMap(plugins: UlldPlugin[]) {\n        this.log(`Generating component map...`);\n        let content = getComponentMapContent(plugins);\n        this.log(`Writing component map...`);\n        this.writeFile(\"componentMap\", content);\n        this.log(\"wrote embeddable component map successfully!\");\n    }\n    applySlots() {\n        const componentSlotMap = this.build.getComponentSlotMap();\n        let flattenedMap = flattenSlotMap(componentSlotMap);\n        for (const k of flattenedMap) {\n            k.data.writeToFile();\n        }\n    }\n    writeTemporaryTargetPaths() {\n        let file = FileManager.fromAbsolutePath(\n            this.paths.tempTargetPaths,\n            this.paths,\n            false,\n        );\n        let content = JSON.stringify(this.paths.toJson());\n        file.writeContent(content);\n    }\n    createEventFunctions() {\n        let pluginsWithEventMethods = this.build.plugins.filter((f) =>\n            Boolean(f.events && f.events.hasEvents),\n        );\n        pluginsWithEventMethods.forEach((a, i) => a.events?.applyIndex(i));\n        let byMethodType: Record<EventMethodKey, string> = {\n            onBackup: \"\",\n            onRestore: \"\",\n            onSync: \"\",\n            onBuild: \"\",\n        };\n        for (const k in byMethodType) {\n            let filteredPlugins = pluginsWithEventMethods.filter((f) =>\n                f.events?.hasEventType(k as EventMethodKey),\n            );\n            let content = getEventMethodListContent(\n                filteredPlugins || [],\n                k as EventMethodKey,\n            );\n            const file = FileManager.fromPathKey(\n                `${k as EventMethodKey}MethodList`,\n                this.paths,\n            );\n            file.writeContent(content);\n        }\n    }\n    writeNoteTypePages() {\n        for (const n of this.build.noteTypes) {\n            n.writePage();\n        }\n    }\n    writePrismaSchema() {\n        this.build.db.writePrismaSchema();\n    }\n    copyAdditionalSources() {\n        let additionalSources = new AdditionalSources(this.paths);\n        if (additionalSources.hasContent) {\n            additionalSources.write();\n        }\n    }\n    writePluginSettingPages() {\n        let pluginsWithSettingPage = this.build.plugins.filter(\n            (f) => f.settingsPage && f.settingsPage.hasContent,\n        );\n        for (const p of pluginsWithSettingPage) {\n            if (p.settingsPage?.outputData) {\n                p.settingsPage?.writePage();\n                this.buildStaticData.settingPageData.push(\n                    p.settingsPage.settingsPageData,\n                );\n            }\n        }\n    }\n    writeUnifiedParsingFunctions() {\n        let parserData: Record<ParserKey, ParserFunctionData[]> = {\n            mdx: [],\n        };\n        let pluginsWithParsingFunctions = this.build.plugins.filter((f) =>\n            Boolean(f.parsers && f.parsers.length),\n        );\n        let idx = 1;\n        for (const parserKey of parserKeyList) {\n            for (const plugin of pluginsWithParsingFunctions) {\n                let data = plugin.parsers.find((p) => p.parserType === parserKey);\n                if (data) {\n                    data.applyIndex(idx);\n                    idx += 1;\n                    parserData[parserKey].push({\n                        importName: data.importName,\n                        importString: data.getImportString(),\n                    });\n                }\n            }\n        }\n        for (const k in parserData) {\n            let items = parserData[k as keyof typeof parserData];\n            if (items.length) {\n                let fileContent = `import { UnifiedParserOfType } from \"@ulld/api/types\";\n${items.map((x) => x.importString).join(\"\\n\")}\n\nconst unifiedParserList: UnifiedParserOfType<\"${k}\">[] = [\n${items.map((x) => `    ${x.importName}`).join(\",\\n\")}\n]\n\nexport default unifiedParserList\n`;\n                let targetPath = this.paths.getParserListOutputPath(k as ParserKey);\n                let f = FileManager.fromAbsolutePath(targetPath, this.paths, false);\n                f.writeContent(fileContent);\n            }\n        }\n    }\n    copyComponentDocs() {\n        for (const k of this.build.plugins) {\n            for (const comp of k.components) {\n                if (comp.hasDocsData) {\n                    comp.copyDocsData();\n                }\n            }\n        }\n    }\n    copyPluginDocs() {\n        for (const k of this.build.plugins) {\n            if (k.hasDocumentation) {\n                k.copyDocumentation();\n            }\n        }\n    }\n    writeGitIgnore() {\n        this.logVerbose(\"Writing .gitignore file...\");\n        let tf = new TemplateFile(\"gitignore\");\n        let templateString = tf.getNewContent({});\n        let f = new FileManager(\".gitignore\", this.paths, false);\n        f.writeContent(templateString);\n    }\n    onBuild() {\n        this.writeGitIgnore();\n        this.build.env.writeEnvLocal();\n        this.build.db.generate(\n            this.build.appConfig,\n            this.build.packageManager,\n            this.options.genDatabase,\n        );\n        this.log(\"Almost done! Running the last phase of the build script.\")\n        this.execPackageJsonScript(\n            this.build.packageManager,\n            \"build\",\n            this.paths.projectRoot,\n        );\n    }\n    private runOnBuild() {\n        this.execPackageJsonScript(\n            this.build.packageManager,\n            \"runOnBuild\",\n            this.paths.projectRoot,\n        );\n    }\n    cleanUp() {\n        this.logVerbose(\"Just cleaning things up a bit...\");\n        this.buildCleanup.runCleanup();\n    }\n}\n"],"mappings":"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","names":[]}