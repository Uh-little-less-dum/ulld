import { UlldAppConfigManager } from "./appConfig.js";
import { NoteType } from "./noteType.js";
import { TargetPaths } from "./paths.js";
import { TargetPackageJson } from "./pkgJson.js";
import { UlldPlugin } from "./plugin.js";
import { BuildStaticDataInput } from "@ulld/configschema/buildTypes";
import { PackageManagers } from "../types.js";
import { Prompter } from "./prompter.js";
import { PluginSlot } from "./slot.js";
import { SlotConflict } from "./slotConflict.js";
import { PluginPage } from "./page.js";
import { PageConflict } from "./pageConflict.js";
import { GitManager } from "./baseClasses/gitManager.js";
import { PluginComponent } from "./component.js";
import { EnvManager } from "./envManager.js";
import { BuildHealthCheck } from "./healthCheck.js";
import { DatabaseBuildManager } from "./databaseManager.js";
import { BuildOptionsType } from "../utils/options.js";
import type { SlotMapOfType } from "@ulld/configschema/slotMapInternalType";
export declare class UlldBuildProcess extends Prompter {
    targetDir: string;
    branch: string;
    plugins: UlldPlugin[];
    noteTypes: NoteType[];
    env: EnvManager;
    health: BuildHealthCheck;
    appConfig: UlldAppConfigManager;
    paths: TargetPaths;
    applicationDir: string;
    packageJson: TargetPackageJson;
    isLocalDev: boolean;
    db: DatabaseBuildManager;
    packageManager: PackageManagers;
    slotConflicts: SlotConflict[];
    pageConflicts: PageConflict[];
    git: GitManager;
    componentImportMap: Record<string, boolean>;
    alreadyProvidedPackageManager: boolean;
    constructor(targetDir: string, branch?: string);
    /** Returns true if a project exists at the targetDir and if that project is a ULLD app. */
    projectExists(): boolean;
    private validateImportName;
    validateImportNames(): void;
    gatherPlugins(): Promise<void>;
    applyPluginsToPackageJson(): void;
    gatherAppConfig(): Promise<void>;
    checkPluginValidity(): Promise<void>;
    getAllSlots(): PluginSlot[];
    gatherPageConflicts(): Promise<void>;
    applyPackageManagerOptions(opts: BuildOptionsType): void;
    resolvePageConflicts(): Promise<void>;
    getFlatComponentDocs(): BuildStaticDataInput["componentDocs"];
    getFlatNavigationLinks(): {
        label: string;
        href: string;
        category: "calendar" | "code" | "database" | "school" | "search" | "math" | "snippets" | "AI" | "ML" | "writing" | "notebooks" | "work" | "organization" | "task-management" | "academic" | "research" | "project-planning" | "general";
        icon?: string | undefined;
        pluginName?: string | undefined;
    }[];
    getFlatPluginSettingPages(): {
        href: string;
        pluginName: string;
        title?: string | undefined;
        subtitle?: string | undefined;
    }[];
    gatherSlotConflicts(): void;
    removeSlotConflicts(): void;
    removePageConflicts(): void;
    resolveSlotConflicts(): Promise<void>;
    createBaseProject(): Promise<boolean>;
    removeUnusablePlugins(): void;
    convertSlotsToPlugins(): void;
    getComponentSlotMap(): SlotMapOfType<PluginComponent | PluginPage>;
    getSlotComponents(): PluginComponent[];
    getSlotPages(): PluginPage[];
    getFlattenedPages(): PluginPage[];
    getFlattenedComponents(): PluginComponent[];
    applyPages(): Promise<void>;
    getTailwindSources(): string[];
    revalidatePluginConfigs(): void;
    getPackagesToTranspile(): string[];
}
