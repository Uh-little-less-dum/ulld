import { pathKeys } from "@ulld/utilities/buildUtils";
import type { ParserKey } from "@ulld/configschema/developer";
import type { XDGAppPaths } from 'xdg-app-paths';
import { MethodListPathKeys } from "@ulld/utilities/buildTypes";
import { PluginEventsConfig } from "@ulld/configschema/pluginEventsConfig";
export declare class TargetPaths implements Record<typeof pathKeys[number] | MethodListPathKeys, string> {
    targetDir: string;
    isLocalDev: boolean;
    public: string;
    styles: string;
    packageJson: string;
    app: string;
    projectRoot: string;
    componentDocumentation: string;
    fullComponentDocumentation: string;
    shortComponentDocumentation: string;
    node_modules: string;
    src: string;
    appDir: string;
    nextConfig: string;
    tailwind: string;
    ulldBuildData: string;
    appConfig: string;
    componentMap: string;
    onBackupMethodList: string;
    onRestoreMethodList: string;
    onSyncMethodList: string;
    onBuildMethodList: string;
    methods: string;
    mdxParserList: string;
    tempTargetPaths: string;
    tempBuildFiles: string;
    userDefinedStyles: string;
    unifiedUserDefinedScss: string;
    prismaSchema: string;
    gitignore: string;
    envLocal: string;
    pluginDocumentation: string;
    xdgPaths: XDGAppPaths;
    constructor(targetDir: string, isLocalDev: boolean);
    update(targetDir: string): void;
    getParserListOutputPath(parserKey: ParserKey): string;
    targetDirExists(): boolean;
    getPathInNodeModule(packageName: string, subPath: string): string;
    joinPath(pathKey: typeof pathKeys[number], ...joinWith: string[]): string;
    exists(_key: typeof pathKeys[number]): boolean;
    getEventMethodListPath(type: keyof PluginEventsConfig): string;
    fromRootRelativeToAbsolute(rootRelativePath: string): string;
    makeSubPath(absolutePath: string): string;
    makeXdgConfigDir(): void;
    getNoteTypePathsFromTargetUrl(url: string): {
        page: string;
        individualNotePage: string;
    };
    toJson(): Record<"public" | "styles" | "packageJson" | "app" | "envLocal" | "projectRoot" | "componentDocumentation" | "fullComponentDocumentation" | "node_modules" | "shortComponentDocumentation" | "src" | "appDir" | "nextConfig" | "tailwind" | "ulldBuildData" | "appConfig" | "methods" | "tempTargetPaths" | "mdxParserList" | "componentMap" | "unifiedUserDefinedScss" | "gitignore" | "prismaSchema" | "userDefinedStyles" | "pluginDocumentation" | "tempBuildFiles", string>;
}
