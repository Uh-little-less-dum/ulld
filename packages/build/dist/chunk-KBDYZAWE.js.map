{"version":3,"sources":["../src/classes/slotConflict.ts"],"sourcesContent":["import { SubSlot } from \"./subslot.js\";\nimport { ConflictBaseClass } from \"./baseClasses/conflict.js\";\nimport { PluginSlotKey } from \"@ulld/configschema/slotMapType\";\n\n\nexport class SlotConflict extends ConflictBaseClass {\n    constructor(\n        public slot: PluginSlotKey,\n        public subslot: string,\n        public slots: SubSlot[],\n    ) {\n        super()\n    }\n\n    getName() {\n        return `${this.slot} -> ${this.subslot}`;\n    }\n\n    getSurveyPromptData() {\n        return {\n            type: \"select\" as \"select\",\n            name: this.surveyKey,\n            message: `${this.slot} > ${this.subslot}`,\n            choices: this.slots.map((s) => s.pluginName),\n        }\n    }\n\n    resolveSlotConflict(acceptedSlot: string) {\n        for (const k of this.slots) {\n            if (acceptedSlot !== k.pluginName) {\n                k.cancel();\n            }\n        }\n    }\n\n}\n"],"mappings":";;;;;;;;AAAA;AAKO,IAAM,eAAN,cAA2B,kBAAkB;AAAA,EAChD,YACW,MACA,SACA,OACT;AACE,UAAM;AAJC;AACA;AACA;AAAA,EAGX;AAAA,EAEA,UAAU;AACN,WAAO,GAAG,KAAK,IAAI,OAAO,KAAK,OAAO;AAAA,EAC1C;AAAA,EAEA,sBAAsB;AAClB,WAAO;AAAA,MACH,MAAM;AAAA,MACN,MAAM,KAAK;AAAA,MACX,SAAS,GAAG,KAAK,IAAI,MAAM,KAAK,OAAO;AAAA,MACvC,SAAS,KAAK,MAAM,IAAI,CAAC,MAAM,EAAE,UAAU;AAAA,IAC/C;AAAA,EACJ;AAAA,EAEA,oBAAoB,cAAsB;AACtC,eAAW,KAAK,KAAK,OAAO;AACxB,UAAI,iBAAiB,EAAE,YAAY;AAC/B,UAAE,OAAO;AAAA,MACb;AAAA,IACJ;AAAA,EACJ;AAEJ;","names":[]}