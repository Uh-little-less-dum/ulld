{"version":3,"sources":["../src/classes/baseApp/buildStaticData.ts"],"sourcesContent":["import { BuildStaticDataInput, BuildStaticDataOutput } from \"@ulld/configschema/buildTypes\";\nimport { ArrayUtilities } from \"@ulld/utilities/arrayUtilities\";\nimport { FileManager } from \"../baseClasses/fileManager.js\";\nimport { UlldBuildProcess } from \"../build.js\";\nimport { TargetPaths } from \"../paths.js\";\nimport buildData from \"@ulld/utilities/buildStaticData.json\"  with {type: \"json\"};\n\ntype HasSetKey = \"settingsData\"\n\ntype HasSetBuildStaticData = Record<HasSetKey, boolean>\n\nexport class BuildStaticData {\n    settingPageData: BuildStaticDataOutput[\"settingPages\"] = []\n    transpilePackages: string[] = buildData.internalPackageNames\n    hasSet: HasSetBuildStaticData = {\n        settingsData: false\n    } \n    constructor(public paths: TargetPaths, public build: UlldBuildProcess){\n    }\n    setHasSetData(k: HasSetKey, value: boolean = true){\n        this.hasSet[k] = value\n    }\n    hasSetAll(){\n        return Object.values(this.hasSet).every((a) => a)\n    }\n    getData(): BuildStaticDataInput {\n        if(!this.build.appConfig.config?.fsRoot){\n            throw new Error(`Cannot generate build output. No fsRoot property was defined in your configuration file.`)\n        }\n        let toTranspile = this.build.getPackagesToTranspile()\n        this.transpilePackages = ArrayUtilities.concatWithoutDuplicates(this.transpilePackages, toTranspile)\n        for (const item of toTranspile) {\n            // TODO: Handle this better it this is the source of the build issue by creating a list of separate packages and apps, not just a single list.\n            if(!this.transpilePackages.includes(item) && (!(item.includes(\"sandbox\") || item.includes(\"website\")))){\n                this.transpilePackages.push(item)\n            }\n        }\n        // Weird typing to make sure all keys are implemented.\n        let data: {[K in keyof BuildStaticDataInput]: BuildStaticDataInput[K]} = {\n            fsRoot: this.build.appConfig.config.fsRoot,\n            navigationLinks: this.build.getFlatNavigationLinks(),\n            componentDocs: this.build.getFlatComponentDocs(),\n            settingPages: this.build.getFlatPluginSettingPages(),\n            transpilePackages: this.transpilePackages,\n            tailwindSources: this.build.getTailwindSources()\n        }\n        return data\n    }\n    writeOutput(){\n        let data = this.getData()\n        let outputFile = FileManager.fromAbsolutePath(this.paths.joinPath(\"projectRoot\", \"ulldBuildData.json\"), this.paths, false)\n        outputFile.writeContent(JSON.stringify(data, null, 4))\n    }\n}\n"],"mappings":";;;;;;;;AAAA;AACA,SAAS,sBAAsB;AAI/B,OAAO,eAAe;AAMf,IAAM,kBAAN,MAAsB;AAAA,EAMzB,YAAmB,OAA2B,OAAwB;AAAnD;AAA2B;AAAA,EAC9C;AAAA,EANA,kBAAyD,CAAC;AAAA,EAC1D,oBAA8B,UAAU;AAAA,EACxC,SAAgC;AAAA,IAC5B,cAAc;AAAA,EAClB;AAAA,EAGA,cAAc,GAAc,QAAiB,MAAK;AAC9C,SAAK,OAAO,CAAC,IAAI;AAAA,EACrB;AAAA,EACA,YAAW;AACP,WAAO,OAAO,OAAO,KAAK,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC;AAAA,EACpD;AAAA,EACA,UAAgC;AAC5B,QAAG,CAAC,KAAK,MAAM,UAAU,QAAQ,QAAO;AACpC,YAAM,IAAI,MAAM,0FAA0F;AAAA,IAC9G;AACA,QAAI,cAAc,KAAK,MAAM,uBAAuB;AACpD,SAAK,oBAAoB,eAAe,wBAAwB,KAAK,mBAAmB,WAAW;AACnG,eAAW,QAAQ,aAAa;AAE5B,UAAG,CAAC,KAAK,kBAAkB,SAAS,IAAI,KAAM,EAAE,KAAK,SAAS,SAAS,KAAK,KAAK,SAAS,SAAS,IAAI;AACnG,aAAK,kBAAkB,KAAK,IAAI;AAAA,MACpC;AAAA,IACJ;AAEA,QAAI,OAAqE;AAAA,MACrE,QAAQ,KAAK,MAAM,UAAU,OAAO;AAAA,MACpC,iBAAiB,KAAK,MAAM,uBAAuB;AAAA,MACnD,eAAe,KAAK,MAAM,qBAAqB;AAAA,MAC/C,cAAc,KAAK,MAAM,0BAA0B;AAAA,MACnD,mBAAmB,KAAK;AAAA,MACxB,iBAAiB,KAAK,MAAM,mBAAmB;AAAA,IACnD;AACA,WAAO;AAAA,EACX;AAAA,EACA,cAAa;AACT,QAAI,OAAO,KAAK,QAAQ;AACxB,QAAI,aAAa,YAAY,iBAAiB,KAAK,MAAM,SAAS,eAAe,oBAAoB,GAAG,KAAK,OAAO,KAAK;AACzH,eAAW,aAAa,KAAK,UAAU,MAAM,MAAM,CAAC,CAAC;AAAA,EACzD;AACJ;","names":[]}