{"version":3,"sources":["../src/classes/appConfig.ts"],"sourcesContent":["import { AppConfigSchemaOutput } from \"@ulld/configschema/zod/main\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport enq from \"enquirer\";\nimport { NoteType } from \"./noteType.js\";\nimport { log } from \"console\";\nimport { ShellManager } from \"./baseClasses/shell.js\";\nimport chalk from \"chalk\";\nimport { TargetPaths } from \"./paths.js\";\n\nconst { prompt } = enq;\n\ninterface PathItem {\n  path: string;\n  exists: boolean;\n}\n\nexport class UlldAppConfigManager extends ShellManager {\n  _config?: AppConfigSchemaOutput;\n  preferredConfig: \"env\" | \"directory\";\n  exists: boolean = true;\n  envConfigPath?: PathItem;\n  directoryConfigPath?: PathItem;\n  selectedConfig?: string;\n  directoryConfigPathTemplate: string;\n  constructor(\n    public targetDir: string,\n    public isLocalDev: boolean,\n    public paths: TargetPaths,\n  ) {\n    super();\n    let _env = process.env.ULLD_ADDITIONAL_SOURCES;\n    if (_env) {\n      let configEnv = path.join(_env, \"appConfig.ulld.json\");\n      this.envConfigPath = {\n        path: configEnv,\n        exists: fs.existsSync(configEnv),\n      };\n    }\n\n    this.directoryConfigPathTemplate = path.join(\n      targetDir,\n      \"appConfig.ulld.json\",\n    );\n    this.directoryConfigPath = {\n      path: this.directoryConfigPathTemplate,\n      exists: fs.existsSync(this.directoryConfigPathTemplate),\n    };\n    this.preferredConfig = Boolean(\n      this.envConfigPath && this.envConfigPath.exists,\n    )\n      ? \"env\"\n      : \"directory\";\n    this.exists = Boolean(\n      (this.envConfigPath && this.envConfigPath.exists) ||\n        (this.directoryConfigPath && this.directoryConfigPath.exists),\n    );\n  }\n  get config() {\n    // if (!this._config) {\n    //   let c = this.gather(false);\n    //   this._config = c;\n    //   return c;\n    // }\n    return this._config;\n  }\n  set config(data: AppConfigSchemaOutput | undefined) {\n    this._config = data;\n  }\n  gather(setConfig: boolean = true): AppConfigSchemaOutput | undefined {\n    console.log(`Looking for ${chalk.hex(\"#0ba5e9\")(\"U\")}LLD appConfig...`);\n    let configPath = this.getConfigPath();\n    if (!configPath || !fs.existsSync(configPath)) {\n      log(`We couldn't a valid configuration file. Please add one to the app's directory at the path below and try again.\n\n${this.targetDir}\n\n`);\n    }\n    if (configPath) {\n      this.log(`Parsing ${chalk.hex(\"#0ba5e9\")(\"U\")}LLD appConfig...`);\n      let d = fs.readFileSync(configPath, { encoding: \"utf-8\" });\n      let data = JSON.parse(d) as AppConfigSchemaOutput;\n      if (setConfig) {\n        this.config = data;\n      }\n      this.log(\n        `Successfully gathered ${chalk.hex(\"#0ba5e9\")(\"U\")}LLD appConfig data.`,\n      );\n      return data as AppConfigSchemaOutput;\n    }\n  }\n  checkDirectoryConfig() {\n    let dirPath = path.join(this.targetDir, \"appConfig.ulld.json\");\n    let exists = fs.existsSync(dirPath);\n    this.directoryConfigPath = {\n      path: dirPath,\n      exists: exists,\n    };\n    return exists;\n  }\n  getConfigPath() {\n    if (this.preferredConfig === \"env\" && this.envConfigPath?.exists) {\n      return this.envConfigPath.path;\n    }\n    if (\n      this.directoryConfigPath?.path &&\n      fs.existsSync(this.directoryConfigPath.path)\n    ) {\n      return this.directoryConfigPath.path;\n    }\n  }\n  getValidConfigPaths() {\n    return [this.envConfigPath, this.directoryConfigPath].filter(\n      (j) => j?.exists,\n    );\n  }\n  async getSelectedConfigPath() {\n    if (this.selectedConfig) {\n      return this.selectedConfig;\n    }\n    let configPaths = this.getValidConfigPaths();\n    if (configPaths.length > 1) {\n      let selectedPath = await prompt({\n        type: \"select\",\n        /* @ts-ignore */\n        options: configPaths.map((f) => ({ message: f, value: f })),\n        name: \"selectedConfig\",\n      });\n      if (\"selectedConfig\" in selectedPath && selectedPath.selectedConfig) {\n        this.selectedConfig = selectedPath.selectedConfig as string;\n        return selectedPath.selectedConfig;\n      }\n    }\n    this.selectedConfig = configPaths[0]?.path as string;\n    return configPaths[0]?.path as string;\n  }\n  foundMultiple() {\n    return this.getValidConfigPaths().length > 1;\n  }\n  getNoteTypes(): NoteType[] {\n    if (!this.config) {\n      throw new Error(`No config was found while gathering NoteType classes.`);\n    }\n    return this.config.noteTypes.map((t) => new NoteType(t, this.paths));\n  }\n  // TODO:\n  // getCss(): string {}\n}\n"],"mappings":"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","names":[]}