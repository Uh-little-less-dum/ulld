{"version":3,"sources":["../src/classes/pluginSettingsPage.ts"],"sourcesContent":["import { DeveloperConfigOutput } from \"@ulld/configschema/developer\";\nimport { TargetPaths } from \"./paths.js\";\nimport { ShellManager } from \"./baseClasses/shell.js\";\nimport { BuildStaticDataOutput } from \"@ulld/configschema/buildTypes\";\nimport { TemplateFile } from \"./templateFile.js\";\nimport { FileManager } from \"./baseClasses/fileManager.js\";\n\ninterface OutputData {\n        filePath: string\n        url: string\n    }\n\nconst protectedSettingPages = [\n    \"autoSettings\"\n]\n\nexport class PluginSettingsPage extends ShellManager {\n    settingsConfig: DeveloperConfigOutput[\"settings\"]\n    hasContent: boolean = false\n    outputData?: OutputData\n    settingsPageData: BuildStaticDataOutput[\"settingPages\"][number]\n    constructor(public paths: TargetPaths, public pluginConfig: DeveloperConfigOutput){\n        super()\n        this.settingsConfig = pluginConfig.settings\n        this.hasContent = Boolean(this.settingsConfig)\n        this.outputData = this.getOutputPath()\n        this.settingsPageData = {\n            title: this.pluginConfig.settings!.title,\n            subtitle: this.pluginConfig.settings!.subtitle,\n            href: this.outputData.url,\n            pluginName: this.pluginConfig.pluginName,\n        }\n    }\n    private validatePluginName(){\n        if(protectedSettingPages.includes(this.pluginConfig.pluginName)){\n            throw new Error(`Cannot apply the settings page for ${this.pluginConfig.pluginName} as it's trying to overwrite a required page.`)\n        }\n        return encodeURI(this.pluginConfig.pluginName)\n    }\n    private getOutputPath(): OutputData {\n        const url = `settings/${this.validatePluginName()}`\n         return {\n            filePath: `src/app/${url}/page.tsx`,\n            url\n        }\n    }\n    writePage(){\n        if(!this.settingsConfig) {\n            throw new Error(`No settings config was found. Not writing settings page for ${this.pluginConfig.pluginName}`)\n        }\n        if(!this.outputData){\n            throw new Error(`No setting output data was found. Not writing settings page for ${this.pluginConfig.pluginName}`)\n        }\n        let template = new TemplateFile(\"settingsPage\")\n        let content = template.getNewContent({\n            PLUGIN_NAME: this.pluginConfig.pluginName,\n            PLUGIN_SETTING_PAGE_EXPORT: this.settingsConfig.settingPageExport\n        })\n        let targetFile = new FileManager(this.outputData.filePath, this.paths, false)\n        targetFile.writeContent(content)\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;AAAA;AAYA,IAAM,wBAAwB;AAAA,EAC1B;AACJ;AAEO,IAAM,qBAAN,cAAiC,aAAa;AAAA,EAKjD,YAAmB,OAA2B,cAAoC;AAC9E,UAAM;AADS;AAA2B;AAE1C,SAAK,iBAAiB,aAAa;AACnC,SAAK,aAAa,QAAQ,KAAK,cAAc;AAC7C,SAAK,aAAa,KAAK,cAAc;AACrC,SAAK,mBAAmB;AAAA,MACpB,OAAO,KAAK,aAAa,SAAU;AAAA,MACnC,UAAU,KAAK,aAAa,SAAU;AAAA,MACtC,MAAM,KAAK,WAAW;AAAA,MACtB,YAAY,KAAK,aAAa;AAAA,IAClC;AAAA,EACJ;AAAA,EAfA;AAAA,EACA,aAAsB;AAAA,EACtB;AAAA,EACA;AAAA,EAaQ,qBAAoB;AACxB,QAAG,sBAAsB,SAAS,KAAK,aAAa,UAAU,GAAE;AAC5D,YAAM,IAAI,MAAM,sCAAsC,KAAK,aAAa,UAAU,+CAA+C;AAAA,IACrI;AACA,WAAO,UAAU,KAAK,aAAa,UAAU;AAAA,EACjD;AAAA,EACQ,gBAA4B;AAChC,UAAM,MAAM,YAAY,KAAK,mBAAmB,CAAC;AAChD,WAAO;AAAA,MACJ,UAAU,WAAW,GAAG;AAAA,MACxB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,YAAW;AACP,QAAG,CAAC,KAAK,gBAAgB;AACrB,YAAM,IAAI,MAAM,+DAA+D,KAAK,aAAa,UAAU,EAAE;AAAA,IACjH;AACA,QAAG,CAAC,KAAK,YAAW;AAChB,YAAM,IAAI,MAAM,mEAAmE,KAAK,aAAa,UAAU,EAAE;AAAA,IACrH;AACA,QAAI,WAAW,IAAI,aAAa,cAAc;AAC9C,QAAI,UAAU,SAAS,cAAc;AAAA,MACjC,aAAa,KAAK,aAAa;AAAA,MAC/B,4BAA4B,KAAK,eAAe;AAAA,IACpD,CAAC;AACD,QAAI,aAAa,IAAI,YAAY,KAAK,WAAW,UAAU,KAAK,OAAO,KAAK;AAC5E,eAAW,aAAa,OAAO;AAAA,EACnC;AACJ;","names":[]}