{"version":3,"sources":["../src/classes/plugin.ts"],"sourcesContent":["import { PackageJsonType } from \"@ulld/developer-schemas/fullPackageJson\";\nimport { DeveloperConfigOutput, ParserKey } from \"@ulld/configschema/developer\";\nimport path from \"path\";\nimport { PluginSlot } from \"./slot.js\";\nimport { PluginComponent } from \"./component.js\";\nimport { PluginPage } from \"./page.js\";\nimport { PluginParser } from \"./parser.js\";\nimport { PluginEvents } from \"./pluginEvents.js\";\nimport { TargetPaths } from \"./paths.js\";\nimport { ShellManager } from \"./baseClasses/shell.js\";\nimport { PackageJson } from \"./baseClasses/pkgJson.js\";\nimport { PluginSettingsPage } from \"./pluginSettingsPage.js\";\nimport { Path } from \"./utilityClasses/Path.js\";\nimport { JsonFile } from \"@ulld/utilities/jsonFileClass\";\nimport devData from \"../../staticDevelopmentData.json\"  with {type: \"json\"};\nimport { AnySubSlotKey, PluginSlotKey } from \"@ulld/configschema/slotMapType\";\n\nexport class UlldPlugin extends ShellManager {\n    pluginConfig: DeveloperConfigOutput | \"Unusable\" = \"Unusable\";\n    inConfigAsSlot: boolean = false;\n    packageRoot: string;\n    hasConfig: boolean = false;\n    slot?: PluginSlot;\n    components: PluginComponent[] = [];\n    parsers: PluginParser<any>[] = [];\n    pages: PluginPage[] = [];\n    events?: PluginEvents;\n    targetDir: string;\n    packageJson?: PackageJson;\n    settingsPage?: PluginSettingsPage;\n    includeInTailwindSources: boolean = false;\n    hasDocumentation: boolean = false;\n    embeddables?: (NonNullable<\n        (typeof this.components)[number][\"data\"][\"embeddable\"]\n    >[number] & {\n        export: string;\n        componentName: string;\n        generatedComponentName: string;\n    })[];\n    constructor(\n        public paths: TargetPaths,\n        public name: string,\n        public version: string = \"latest\",\n        public baseAppGitBranch: string,\n    ) {\n        super();\n        this.targetDir = paths.targetDir;\n        this.packageRoot = path.join(this.targetDir, \"node_modules\", this.name);\n        this.gatherConfig(true);\n    }\n    gatherConfig(noError?: boolean) {\n        let configPath = path.join(this.packageRoot, \"pluginConfig.ulld.json\");\n        this.logDebug(`Looking for ${this.name} config at ${configPath}`);\n        let configFile = new JsonFile<DeveloperConfigOutput>(configPath);\n        let pkgJsonFile = new JsonFile<{\n            \"ulld-pluginConfig\": DeveloperConfigOutput;\n        }>(path.join(path.join(this.packageRoot, \"package.json\")));\n        let pkgExists = pkgJsonFile.exists()\n        let pkgContent = pkgExists ? pkgJsonFile.getJsonContent() : {}\n        if (!pkgExists && !noError) {\n            throw new Error(\n                `Could not locate package.json file for the ${this.name} plugin. This is likely an error in the build process, not the plugin.`\n            );\n        }\n        this.packageJson = new PackageJson(\n            this.paths.projectRoot,\n            pkgJsonFile.path,\n            this.baseAppGitBranch,\n        );\n        let foundConfig = false;\n        if (configFile.exists()) {\n            this.pluginConfig = configFile.getJsonContent();\n            foundConfig = true;\n            this.hasConfig = true\n        } else {\n                if (\"ulld-pluginConfig\" in pkgContent) {\n                    this.pluginConfig = (pkgContent as any)[\"ulld-pluginConfig\"];\n                    foundConfig = true;\n                    this.hasConfig = true\n                }\n        }\n        if (!this.packageJson) {\n            this.noPackageJsonError(noError);\n            return;\n        }\n        if(this.pluginConfig === \"Unusable\") {\n            return\n        }\n        if ((this.pluginConfig as any) !== \"Unusable\") {\n            this.events = new PluginEvents(\n                this.pluginConfig.events || {},\n                this.paths,\n                this.name,\n            );\n            this.components = this.pluginConfig.components.map(\n                (f) =>\n                    new PluginComponent(\n                        f,\n                        {\n                            parentSlot: (this.pluginConfig as DeveloperConfigOutput)?.slot,\n                            pluginName: this.name,\n                        },\n                        this.paths,\n                        this.packageJson!,\n                    ),\n            );\n            if (this.pluginConfig?.slot) {\n                this.slot = new PluginSlot(\n                    this.name,\n                    this.pluginConfig.slot as PluginSlotKey,\n                    this.components,\n                    this.paths,\n                );\n            }\n            if (this.pluginConfig.parsers) {\n                for (const parserKey in this.pluginConfig.parsers) {\n                    this.parsers.push(\n                        new PluginParser(\n                            parserKey as ParserKey,\n                            this.pluginConfig,\n                            this.paths,\n                        ),\n                    );\n                }\n            }\n            this.pages = this.pluginConfig.pages.map(\n                (p, i) =>\n                    new PluginPage(\n                        p,\n                        this.name,\n                        i,\n                        this.paths,\n                        this.slot?.slot,\n                        p.slot as AnySubSlotKey,\n                    ),\n            );\n        }\n        if (this.pluginConfig.settings) {\n            this.settingsPage = new PluginSettingsPage(this.paths, this.pluginConfig);\n        }\n        this.hasDocumentation = Boolean(this.pluginConfig.documentation);\n        this.embeddables = this.getEmbeddables();\n        this.includeInTailwindSources = this.name.startsWith(\"@ulld\") ? false : (devData.includeInTailwindSources.includes(this.name) || [\n            this.embeddables,\n            this.pages,\n            this.components,\n        ].some((x) => Boolean(x && x.length)));\n    }\n    noPackageJsonError(noError?: boolean) {\n        this.hasConfig = false;\n        if (noError) return;\n        this.logError(\n            `No package.json was found for the ${this.name} plugin. This plugin will be overridden.`,\n        );\n    }\n    noConfigError(noError?: boolean) {\n        this.hasConfig = false;\n        if (noError) return;\n        this.log(\n            `No plugin configuration was found for the ${this.name} plugin. This plugin will be overridden.`,\n        );\n    }\n    removeUnusedPages() {\n        this.pages = this.pages.filter((f) => f.shouldUse);\n    }\n    removeRejectedSlots() {\n        this.components = this.components.filter((c) => {\n            if (c.subSlot && c.subSlot.shouldUse) {\n                return false;\n            }\n            return true;\n        });\n    }\n\n    private getEmbeddables() {\n        let em: typeof this.embeddables = [];\n        let componentsWithEmbeddable = this.components.filter(\n            (f) => f.data.embeddable,\n        );\n        for (const component of componentsWithEmbeddable) {\n            if (component && component.data.embeddable) {\n                for (const embeddable of component.data.embeddable) {\n                    em.push({\n                        ...embeddable,\n                        export: component.data.export,\n                        componentName: component.data.componentName,\n                        generatedComponentName: `${component.data.componentName[0].toUpperCase()}${component.data.componentName.slice(1)}`,\n                    });\n                }\n            }\n        }\n        // this.embeddables = em;\n        return em;\n    }\n\n    getUniqueEmbeddableComponents() {\n        let ems = this.embeddables;\n        let embeddables: typeof ems = [];\n        if (!ems) {\n            return embeddables;\n        }\n        for (const k of ems) {\n            if (!embeddables.find((f) => f.componentName === k.componentName)) {\n                embeddables.push(k);\n            }\n        }\n        return embeddables;\n    }\n\n    getComponentMapImports() {\n        let embeddables = this.getUniqueEmbeddableComponents();\n        let s = \"\";\n        for (const k of embeddables) {\n            s += `import ${k.componentName} from \"${this.name}/${k.export}\";\n`;\n        }\n        return s;\n    }\n    getComponentMapItemsAsString() {\n        let embeddables = this.embeddables;\n        let data: string[] = [];\n        if (!embeddables) {\n            return \"\";\n        }\n        for (const k of embeddables) {\n            data.push(`    {\n        regex: new RegExp(\"${k.regexToInclude}\"),\n        component: ${k.componentName},\n        label: \"${k.label}\",\n    }\n`);\n        }\n        return data.join(\",\\n\");\n    }\n    removeRejectedPages() {\n        this.pages = this.pages.filter((p) => p.shouldUse);\n    }\n    isValid() {\n        return this.hasConfig;\n    }\n    copyDocumentation() {\n        if (\n            !this.pluginConfig ||\n            this.pluginConfig === \"Unusable\" ||\n            !this.pluginConfig.documentation ||\n            !this.packageJson\n        ) {\n            return;\n        }\n        let exportPath = this.pluginConfig.documentation as string;\n        if (!exportPath) {\n            return undefined;\n        }\n        let subPath = this.packageJson.getSubPathByExport(exportPath);\n        if (!subPath) {\n            return undefined;\n        }\n        let inputPathString = this.paths.getPathInNodeModule(this.name, subPath);\n        let inputPath = new Path(inputPathString);\n        let outputPath = new Path(\n            this.paths.joinPath(\"pluginDocumentation\", `${encodeURI(this.name)}.mdx`),\n        );\n        if (inputPath.getExists()) {\n            inputPath.copyContentTo(outputPath);\n        }\n    }\n    applyDependency(pkg: PackageJsonType): {\n        pkg: PackageJsonType;\n        isNew: boolean;\n    } {\n        let isNew = this.name! in pkg.dependencies;\n        pkg.dependencies = {\n            ...pkg.dependencies,\n            [this.name]: this.version || \"latest\",\n        };\n        return { pkg: pkg, isNew };\n    }\n}\n"],"mappings":"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","names":[]}