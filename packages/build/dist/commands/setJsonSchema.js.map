{"version":3,"sources":["../../src/commands/setJsonSchema.ts"],"sourcesContent":["import { Command, Config } from \"@oclif/core\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { JsonFile } from \"@ulld/utilities/jsonFileClass\";\n\nexport default class RunUlldApp extends Command {\n    static state: \"beta\";\n    static summary =\n        \"Set the config json schema to your global appConfig.ulld.json file to enable autocomplete.\";\n    static description = \"Set the config jsonSchema.\";\n    static help = `Sets the schema field in your global appConfig.ulld.json file to enable autocomplete when working inside of most IDEs.\nThis command requires that the ULLD_ADDITIONAL_SOURCES environment variable is set.`;\n    static strict = false;\n    static aliases: string[] = [\"jsonSchema\", \"setSchema\"];\n    static flags = {};\n    static args = {};\n\n    // static examples = [`$ ulld-dev append-router ./some/path/to/router.ts`];\n    // static usage = \"ulld-dev append-router <Path-to-router>\";\n\n    constructor(argv: string[], config: Config) {\n        super(argv, config);\n    }\n\n    getSchemaPath() {\n        let jsonSchemaPath = path.join(\n            import.meta.dirname,\n            \"../../configJsonSchemas/appConfigJsonSchema.json\",\n        );\n        console.log(\"jsonSchemaPath: \", jsonSchemaPath);\n        return jsonSchemaPath;\n    }\n\n    async run(): Promise<void> {\n        const { args, flags } = await this.parse(RunUlldApp);\n        let envVar = process.env.ULLD_ADDITIONAL_SOURCES;\n        if (!envVar) {\n            console.error(\n                `Cannot continue without the ULLD_ADDITIONAL_SOURCES environment variable.`,\n            );\n            process.exit(1);\n        }\n        let appConfigPath = path.join(envVar, \"appConfig.ulld.json\");\n        if (!fs.existsSync(appConfigPath)) {\n            console.error(\n                `Could not find your appConfig.ulld.json file. Make sure one exists inside where your ULLD_ADDITIONAL_SOURCES variable points to:\n${envVar}`,\n            );\n            process.exit(1);\n        }\n        let jsonFile = new JsonFile(appConfigPath);\n        let content = jsonFile.getJsonContent();\n        delete (content as any).$schema\n        let newContent = {\n            $schema: this.getSchemaPath(),\n            ...content,\n        };\n        jsonFile.writeContent(newContent);\n        console.log(\n            `Successfully set your appConfigs schema path to a local json schema file. You should now have autocomplete functionality in most IDEs.`,\n        );\n    }\n}\n"],"mappings":";;;;;;AAAA;AAAA,SAAS,eAAuB;AAChC,OAAO,UAAU;AACjB,OAAO,QAAQ;AACf,SAAS,gBAAgB;AAEzB,IAAqB,aAArB,MAAqB,oBAAmB,QAAQ;AAAA,EAC5C,OAAO;AAAA,EACP,OAAO,UACH;AAAA,EACJ,OAAO,cAAc;AAAA,EACrB,OAAO,OAAO;AAAA;AAAA,EAEd,OAAO,SAAS;AAAA,EAChB,OAAO,UAAoB,CAAC,cAAc,WAAW;AAAA,EACrD,OAAO,QAAQ,CAAC;AAAA,EAChB,OAAO,OAAO,CAAC;AAAA;AAAA;AAAA,EAKf,YAAY,MAAgB,QAAgB;AACxC,UAAM,MAAM,MAAM;AAAA,EACtB;AAAA,EAEA,gBAAgB;AACZ,QAAI,iBAAiB,KAAK;AAAA,MACtB,YAAY;AAAA,MACZ;AAAA,IACJ;AACA,YAAQ,IAAI,oBAAoB,cAAc;AAC9C,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,MAAqB;AACvB,UAAM,EAAE,MAAM,MAAM,IAAI,MAAM,KAAK,MAAM,WAAU;AACnD,QAAI,SAAS,QAAQ,IAAI;AACzB,QAAI,CAAC,QAAQ;AACT,cAAQ;AAAA,QACJ;AAAA,MACJ;AACA,cAAQ,KAAK,CAAC;AAAA,IAClB;AACA,QAAI,gBAAgB,KAAK,KAAK,QAAQ,qBAAqB;AAC3D,QAAI,CAAC,GAAG,WAAW,aAAa,GAAG;AAC/B,cAAQ;AAAA,QACJ;AAAA,EACd,MAAM;AAAA,MACI;AACA,cAAQ,KAAK,CAAC;AAAA,IAClB;AACA,QAAI,WAAW,IAAI,SAAS,aAAa;AACzC,QAAI,UAAU,SAAS,eAAe;AACtC,WAAQ,QAAgB;AACxB,QAAI,aAAa;AAAA,MACb,SAAS,KAAK,cAAc;AAAA,MAC5B,GAAG;AAAA,IACP;AACA,aAAS,aAAa,UAAU;AAChC,YAAQ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;","names":[]}