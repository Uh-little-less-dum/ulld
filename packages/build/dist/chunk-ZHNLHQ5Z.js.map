{"version":3,"sources":["../src/utils/slotMapIsFull.ts"],"sourcesContent":["import { AnySubSlotKey, PluginSlotKey } from \"@ulld/configschema/slotMapType\";\nimport { flattenSlotMap, forceFullSlotMap, walkSlotMap } from \"./slotMapUtils.js\";\nimport { SlotMapOfType } from \"@ulld/configschema/slotMapInternalType\";\n\ninterface MissingItem {\n    slot: PluginSlotKey;\n    subSlot: AnySubSlotKey;\n}\n\nexport const slotMapIsFull = (\n    data: SlotMapOfType<any>,\n): {\n    passed: boolean;\n    missingItems: MissingItem[];\n} => {\n    let mapData = forceFullSlotMap(data, false);\n    let walkedData = walkSlotMap(mapData, (x) => Boolean(x));\n    let flattenedMap = flattenSlotMap(walkedData);\n    let missingKeys: MissingItem[] = [];\n    for (const k of flattenedMap) {\n        if (!k.data) {\n            missingKeys.push({\n                slot: k.slot,\n                subSlot: k.subSlot,\n            });\n        }\n    }\n    return {\n        passed: missingKeys.length === 0,\n        missingItems: missingKeys,\n    };\n};\n"],"mappings":";;;;;;;;;;AAAA;AASO,IAAM,gBAAgB,CACzB,SAIC;AACD,MAAI,UAAU,iBAAiB,MAAM,KAAK;AAC1C,MAAI,aAAa,YAAY,SAAS,CAAC,MAAM,QAAQ,CAAC,CAAC;AACvD,MAAI,eAAe,eAAe,UAAU;AAC5C,MAAI,cAA6B,CAAC;AAClC,aAAW,KAAK,cAAc;AAC1B,QAAI,CAAC,EAAE,MAAM;AACT,kBAAY,KAAK;AAAA,QACb,MAAM,EAAE;AAAA,QACR,SAAS,EAAE;AAAA,MACf,CAAC;AAAA,IACL;AAAA,EACJ;AACA,SAAO;AAAA,IACH,QAAQ,YAAY,WAAW;AAAA,IAC/B,cAAc;AAAA,EAClB;AACJ;","names":[]}