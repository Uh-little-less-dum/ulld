{"version":3,"sources":["../src/main.ts"],"sourcesContent":["import { log } from \"console\";\nimport { BuildOptionsType, optionMap } from \"./utils/options.js\";\nimport { BuildConfig } from \"./types.js\";\nimport { cleanAfterConflictResolution } from \"./stages/cleanAfterConflictResolution.js\";\nimport { createBaseProject } from \"./stages/createBaseProject.js\";\nimport { gatherAppConfig } from \"./stages/gatherConfig.js\";\nimport { generate } from \"./stages/generate.js\";\n// import { installDependencies } from \"./stages/preModuleInstall.js\";\n// import { prepareToGenerate } from \"./stages/prepareToGenerate.js\";\n// import { resolveConflicts } from \"./stages/resolveConflicts.js\";\n// import { verifyDirectory } from \"./stages/verifyDirectory.js\";\nimport notifier from \"node-notifier\"\nimport path from 'path'\n\ninterface AvoidConfig {\n    opts?: (keyof typeof optionMap)[];\n    other?: boolean[];\n    options: BuildOptionsType;\n}\n\nconst avoidIfInOpts = ({ opts, other, options }: AvoidConfig): boolean => {\n    if (other && other.length && other.some((x) => x)) {\n        return false;\n    }\n    if (!opts || !opts.length) {\n        return true;\n    }\n    return !opts.some((x) => options[x]);\n};\n\nexport const runUlldBuild = async (\n    options: BuildOptionsType,\n    buildParams: BuildConfig,\n) => {\n    try {\n        // let build = await verifyDirectory(options, buildParams.branch);\n        // build.applyPackageManagerOptions(options);\n        // build.logDebug(`creating base project`);\n        // await createBaseProject(build, options);\n        // build.logDebug(`gatherAppConfig`);\n        // await gatherAppConfig(build, options);\n        // build.logDebug(`installDependencies`);\n        // await installDependencies(build, options);\n        // build.logDebug(`resolveConflicts`);\n        // await resolveConflicts(build, options);\n        // build.logDebug(\"cleanAfterConflictResolution\");\n        // await cleanAfterConflictResolution(build, options);\n        // build.logDebug(\"prepareToGenerate\");\n        // await prepareToGenerate(build, options);\n\n        if (avoidIfInOpts({ opts: [], options })) {\n            let baseApp = await generate(build, options);\n            baseApp.cleanUp();\n        }\n        notifier.notify({\n            title: \"Woah\",\n            message: `I know that was a lot, but you're all set! You can now run your app with the 'ulld run' command. Checkout the docs for more information.`,\n            sound: true,\n            icon: path.join(__dirname, \"ulldLogo.png\"),\n            wait: true\n        })\n    } catch (err) {\n        if (!err) {\n            log(`No worries. We can handle this later.`);\n        }\n    }\n};\n"],"mappings":";;;;;;;;;AAAA;AAAA,SAAS,WAAW;AAWpB,OAAO,cAAc;AACrB,OAAO,UAAU;AAQjB,IAAM,gBAAgB,CAAC,EAAE,MAAM,OAAO,QAAQ,MAA4B;AACtE,MAAI,SAAS,MAAM,UAAU,MAAM,KAAK,CAAC,MAAM,CAAC,GAAG;AAC/C,WAAO;AAAA,EACX;AACA,MAAI,CAAC,QAAQ,CAAC,KAAK,QAAQ;AACvB,WAAO;AAAA,EACX;AACA,SAAO,CAAC,KAAK,KAAK,CAAC,MAAM,QAAQ,CAAC,CAAC;AACvC;AAEO,IAAM,eAAe,OACxB,SACA,gBACC;AACD,MAAI;AAgBA,QAAI,cAAc,EAAE,MAAM,CAAC,GAAG,QAAQ,CAAC,GAAG;AACtC,UAAI,UAAU,MAAM,SAAS,OAAO,OAAO;AAC3C,cAAQ,QAAQ;AAAA,IACpB;AACA,aAAS,OAAO;AAAA,MACZ,OAAO;AAAA,MACP,SAAS;AAAA,MACT,OAAO;AAAA,MACP,MAAM,KAAK,KAAK,WAAW,cAAc;AAAA,MACzC,MAAM;AAAA,IACV,CAAC;AAAA,EACL,SAAS,KAAK;AACV,QAAI,CAAC,KAAK;AACN,UAAI,uCAAuC;AAAA,IAC/C;AAAA,EACJ;AACJ;","names":[]}