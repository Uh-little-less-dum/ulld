{"version":3,"sources":["../src/classes/paths.ts"],"sourcesContent":["import path from \"path\";\nimport fs from \"fs\";\nimport { pathKeys} from \"@ulld/utilities/buildUtils\"\nimport { removeLeadingDotSlash } from \"../utils/removeLeadingDotSlash.js\";\nimport type { ParserKey } from \"@ulld/configschema/developer\";\nimport xdgAppPaths from 'xdg-app-paths';\nimport type { Options, XDGAppPaths } from 'xdg-app-paths';\nimport {MethodListPathKeys, PathKeys} from \"@ulld/utilities/buildTypes\"\nimport { PluginEventsConfig } from \"@ulld/configschema/pluginEventsConfig\";\nimport { xdgOpts } from \"../utils/getXdgPaths.js\";\n\nexport class TargetPaths\n    implements Record<typeof pathKeys[number] | MethodListPathKeys, string> {\n    public: string;\n    styles: string;\n    packageJson: string;\n    app: string;\n    projectRoot: string;\n    componentDocumentation: string;\n    fullComponentDocumentation: string;\n    shortComponentDocumentation: string;\n    node_modules: string;\n    src: string;\n    appDir: string;\n    nextConfig: string;\n    tailwind: string;\n    ulldBuildData: string;\n    appConfig: string;\n    componentMap: string;\n    onBackupMethodList: string;\n    onRestoreMethodList: string;\n    onSyncMethodList: string;\n    onBuildMethodList: string;\n    methods: string;\n    mdxParserList: string;\n    tempTargetPaths: string;\n    tempBuildFiles: string;\n    userDefinedStyles: string;\n    unifiedUserDefinedScss: string;\n    prismaSchema: string;\n    gitignore: string;\n    envLocal: string\n    pluginDocumentation: string\n    xdgPaths: XDGAppPaths\n    constructor(\n        public targetDir: string,\n        public isLocalDev: boolean,\n    ) {\n        this.xdgPaths = (xdgAppPaths as any)(xdgOpts)\n        this.public = path.join(targetDir, \"public\");\n        this.node_modules = path.join(targetDir, \"node_modules\");\n        this.gitignore = path.join(targetDir, \".gitignore\");\n        this.styles = path.join(targetDir, \"src\", \"styles\");\n        this.unifiedUserDefinedScss = path.join(this.styles, \"index.scss\");\n        this.userDefinedStyles = path.join(this.styles, \"userProvided\");\n        this.app = path.join(targetDir, \"src\", \"app\");\n        this.envLocal = path.join(targetDir, \".env.local\")\n        this.projectRoot = targetDir;\n        this.packageJson = path.join(targetDir, \"package.json\");\n        this.packageJson = path.join(targetDir, \"package.json\");\n        this.node_modules = path.join(targetDir, \"node_modules\");\n        this.src = path.join(targetDir, \"src\");\n        this.appDir = path.join(targetDir, \"src/app\");\n        this.nextConfig = path.join(targetDir, \"next.config.mjs\");\n        this.tailwind = path.join(targetDir, \"tailwind.config.ts\");\n        this.ulldBuildData = path.join(targetDir, \"ulldBuildData.json\");\n        this.appConfig = path.join(targetDir, \"appConfig.ulld.json\");\n        this.prismaSchema = path.join(targetDir, \"src/database/schema.prisma\");\n        this.componentMap = path.join(targetDir, \"src/internal/componentMap.ts\");\n        this.methods = path.join(targetDir, \"src/methods\");\n        this.mdxParserList = path.join(\n            targetDir,\n            \"src/methods/parsers/parserLists/mdx.ts\",\n        );\n        this.onBuildMethodList = path.join(\n            targetDir,\n            \"buildUtils/__TEMP__/onBuildMethodList.ts\",\n        );\n        this.tempTargetPaths = path.join(\n            targetDir,\n            \"buildUtils/__TEMP__/buildTargetPaths.json\",\n        );\n        this.tempBuildFiles = path.join(targetDir, \"buildUtils/__TEMP__/\");\n        this.onBackupMethodList = path.join(\n            this.methods,\n            \"events/methodLists/backupMethods.ts\",\n        );\n        this.onRestoreMethodList = path.join(\n            this.methods,\n            \"events/methodLists/restoreMethods.ts\",\n        );\n        this.onSyncMethodList = path.join(\n            this.methods,\n            \"events/methodLists/syncMethods.ts\",\n        );\n        this.componentDocumentation = path.join(\n            targetDir,\n            \"generatedMarkdown/componentDocs\",\n        );\n        this.pluginDocumentation = path.join(targetDir, \"generatedMarkdown/pluginDocs\")\n        this.fullComponentDocumentation = path.join(\n            this.componentDocumentation,\n            \"full\",\n        );\n        this.shortComponentDocumentation = path.join(\n            this.componentDocumentation,\n            \"short\",\n        );\n    }\n    update(targetDir: string) {\n        this.public = path.join(targetDir, \"public\");\n        this.styles = path.join(targetDir, \"src/styles\");\n        this.packageJson = path.join(targetDir, \"package.json\");\n    }\n    getParserListOutputPath(parserKey: ParserKey) {\n        return this[`${parserKey}ParserList`];\n    }\n    targetDirExists(): boolean {\n        return fs.existsSync(this.targetDir);\n    }\n    getPathInNodeModule(packageName: string, subPath: string) {\n        return this.joinPath(\"node_modules\", `${packageName}/${subPath}`);\n    }\n    joinPath(pathKey: typeof pathKeys[number], ...joinWith: string[]) {\n        return path.join(this[pathKey], ...joinWith);\n    }\n    exists(_key: typeof pathKeys[number]) {\n        return fs.existsSync(this[_key]);\n    }\n    getEventMethodListPath(type: keyof PluginEventsConfig) {\n        return this[`${type}MethodList`];\n    }\n    fromRootRelativeToAbsolute(rootRelativePath: string) {\n        return path.join(this.targetDir, rootRelativePath);\n    }\n    makeSubPath(absolutePath: string) {\n        return absolutePath.replace(`${this.projectRoot}/`, \"\");\n    }\n    getNoteTypePathsFromTargetUrl(url: string) {\n        let items = removeLeadingDotSlash(url).split(path.sep);\n        let dirPath = this.joinPath(\"appDir\", ...items);\n        return {\n            page: path.join(dirPath, \"page.tsx\"),\n            individualNotePage: path.join(dirPath, \"[...slug]\", \"page.tsx\"),\n        };\n    }\n    toJson() {\n        let data: Record<PathKeys, string> = {} as Record<PathKeys, string>;\n        for (const k of pathKeys) {\n            data[k] = this[k];\n        }\n        return data;\n    }\n}\n"],"mappings":";;;;;;;;;;;AAAA;AAAA,OAAO,UAAU;AACjB,OAAO,QAAQ;AACf,SAAS,gBAAe;AAGxB,OAAO,iBAAiB;AAMjB,IAAM,cAAN,MACqE;AAAA,EAgCxE,YACW,WACA,YACT;AAFS;AACA;AAEP,SAAK,WAAY,YAAoB,OAAO;AAC5C,SAAK,SAAS,KAAK,KAAK,WAAW,QAAQ;AAC3C,SAAK,eAAe,KAAK,KAAK,WAAW,cAAc;AACvD,SAAK,YAAY,KAAK,KAAK,WAAW,YAAY;AAClD,SAAK,SAAS,KAAK,KAAK,WAAW,OAAO,QAAQ;AAClD,SAAK,yBAAyB,KAAK,KAAK,KAAK,QAAQ,YAAY;AACjE,SAAK,oBAAoB,KAAK,KAAK,KAAK,QAAQ,cAAc;AAC9D,SAAK,MAAM,KAAK,KAAK,WAAW,OAAO,KAAK;AAC5C,SAAK,WAAW,KAAK,KAAK,WAAW,YAAY;AACjD,SAAK,cAAc;AACnB,SAAK,cAAc,KAAK,KAAK,WAAW,cAAc;AACtD,SAAK,cAAc,KAAK,KAAK,WAAW,cAAc;AACtD,SAAK,eAAe,KAAK,KAAK,WAAW,cAAc;AACvD,SAAK,MAAM,KAAK,KAAK,WAAW,KAAK;AACrC,SAAK,SAAS,KAAK,KAAK,WAAW,SAAS;AAC5C,SAAK,aAAa,KAAK,KAAK,WAAW,iBAAiB;AACxD,SAAK,WAAW,KAAK,KAAK,WAAW,oBAAoB;AACzD,SAAK,gBAAgB,KAAK,KAAK,WAAW,oBAAoB;AAC9D,SAAK,YAAY,KAAK,KAAK,WAAW,qBAAqB;AAC3D,SAAK,eAAe,KAAK,KAAK,WAAW,4BAA4B;AACrE,SAAK,eAAe,KAAK,KAAK,WAAW,8BAA8B;AACvE,SAAK,UAAU,KAAK,KAAK,WAAW,aAAa;AACjD,SAAK,gBAAgB,KAAK;AAAA,MACtB;AAAA,MACA;AAAA,IACJ;AACA,SAAK,oBAAoB,KAAK;AAAA,MAC1B;AAAA,MACA;AAAA,IACJ;AACA,SAAK,kBAAkB,KAAK;AAAA,MACxB;AAAA,MACA;AAAA,IACJ;AACA,SAAK,iBAAiB,KAAK,KAAK,WAAW,sBAAsB;AACjE,SAAK,qBAAqB,KAAK;AAAA,MAC3B,KAAK;AAAA,MACL;AAAA,IACJ;AACA,SAAK,sBAAsB,KAAK;AAAA,MAC5B,KAAK;AAAA,MACL;AAAA,IACJ;AACA,SAAK,mBAAmB,KAAK;AAAA,MACzB,KAAK;AAAA,MACL;AAAA,IACJ;AACA,SAAK,yBAAyB,KAAK;AAAA,MAC/B;AAAA,MACA;AAAA,IACJ;AACA,SAAK,sBAAsB,KAAK,KAAK,WAAW,8BAA8B;AAC9E,SAAK,6BAA6B,KAAK;AAAA,MACnC,KAAK;AAAA,MACL;AAAA,IACJ;AACA,SAAK,8BAA8B,KAAK;AAAA,MACpC,KAAK;AAAA,MACL;AAAA,IACJ;AAAA,EACJ;AAAA,EA/FA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAkEA,OAAO,WAAmB;AACtB,SAAK,SAAS,KAAK,KAAK,WAAW,QAAQ;AAC3C,SAAK,SAAS,KAAK,KAAK,WAAW,YAAY;AAC/C,SAAK,cAAc,KAAK,KAAK,WAAW,cAAc;AAAA,EAC1D;AAAA,EACA,wBAAwB,WAAsB;AAC1C,WAAO,KAAK,GAAG,SAAS,YAAY;AAAA,EACxC;AAAA,EACA,kBAA2B;AACvB,WAAO,GAAG,WAAW,KAAK,SAAS;AAAA,EACvC;AAAA,EACA,oBAAoB,aAAqB,SAAiB;AACtD,WAAO,KAAK,SAAS,gBAAgB,GAAG,WAAW,IAAI,OAAO,EAAE;AAAA,EACpE;AAAA,EACA,SAAS,YAAqC,UAAoB;AAC9D,WAAO,KAAK,KAAK,KAAK,OAAO,GAAG,GAAG,QAAQ;AAAA,EAC/C;AAAA,EACA,OAAO,MAA+B;AAClC,WAAO,GAAG,WAAW,KAAK,IAAI,CAAC;AAAA,EACnC;AAAA,EACA,uBAAuB,MAAgC;AACnD,WAAO,KAAK,GAAG,IAAI,YAAY;AAAA,EACnC;AAAA,EACA,2BAA2B,kBAA0B;AACjD,WAAO,KAAK,KAAK,KAAK,WAAW,gBAAgB;AAAA,EACrD;AAAA,EACA,YAAY,cAAsB;AAC9B,WAAO,aAAa,QAAQ,GAAG,KAAK,WAAW,KAAK,EAAE;AAAA,EAC1D;AAAA,EACA,8BAA8B,KAAa;AACvC,QAAI,QAAQ,sBAAsB,GAAG,EAAE,MAAM,KAAK,GAAG;AACrD,QAAI,UAAU,KAAK,SAAS,UAAU,GAAG,KAAK;AAC9C,WAAO;AAAA,MACH,MAAM,KAAK,KAAK,SAAS,UAAU;AAAA,MACnC,oBAAoB,KAAK,KAAK,SAAS,aAAa,UAAU;AAAA,IAClE;AAAA,EACJ;AAAA,EACA,SAAS;AACL,QAAI,OAAiC,CAAC;AACtC,eAAW,KAAK,UAAU;AACtB,WAAK,CAAC,IAAI,KAAK,CAAC;AAAA,IACpB;AACA,WAAO;AAAA,EACX;AACJ;","names":[]}