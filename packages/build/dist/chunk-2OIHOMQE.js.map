{"version":3,"sources":["../src/classes/component.ts"],"sourcesContent":["import { DeveloperConfigOutput } from \"@ulld/configschema/developer\";\nimport { SubSlot } from \"./subslot.js\";\nimport { ShellManager } from \"./baseClasses/shell.js\";\nimport { TargetPaths } from \"./paths.js\";\nimport { PackageJson } from \"./baseClasses/pkgJson.js\";\nimport fs from \"fs\";\nimport { Path } from \"./utilityClasses/Path.js\";\nimport { PluginComponentProps } from \"../types.js\";\nimport { BuildStaticDataInput } from \"@ulld/configschema/buildTypes\";\nimport { makeValidId } from \"@ulld/utilities/identity\";\nimport { AnySubSlotKey, PluginSlotKey } from \"@ulld/configschema/slotMapType\";\n\nexport class PluginComponent extends ShellManager {\n    subSlot?: SubSlot;\n    subSlotKey?: AnySubSlotKey;\n    slotKey?: PluginSlotKey;\n    pluginName: string;\n    formattedExport: string;\n    formattedImportName: string;\n    formattedComponentName: string;\n    haveModifiedImportName: boolean = false;\n    formattedPluginName: string;\n    initialComponentImport: string;\n    hasDocsData: boolean = false;\n    docsData: NonNullable<BuildStaticDataInput[\"componentDocs\"]>[number];\n    inputFilePaths: {\n        short?: string;\n        full?: string;\n    } = {};\n    constructor(\n        public data: DeveloperConfigOutput[\"components\"][number],\n        props: PluginComponentProps,\n        public paths: TargetPaths,\n        public packageJson: PackageJson,\n    ) {\n        super();\n        if (props.parentSlot) {\n            this.slotKey = props.parentSlot;\n        }\n        if (data.slot && props.parentSlot) {\n            this.subSlot = new SubSlot(\n                props.pluginName,\n                props.parentSlot,\n                data.slot as AnySubSlotKey,\n                this.paths,\n                this.data.exportedPropsName\n            );\n            this.subSlotKey = data.slot as AnySubSlotKey;\n        }\n        this.pluginName = props.pluginName;\n        this.formattedExport = `${this.pluginName}/${this.data.export}`;\n        this.formattedImportName = encodeURI(this.data.componentName);\n        this.formattedComponentName = encodeURI(this.data.componentName);\n        this.formattedPluginName = encodeURI(this.pluginName);\n        this.initialComponentImport = `${this.data.componentName}`;\n        this.inputFilePaths = {\n            short: this.getInputFilePathOfType(\"short\"),\n            full: this.getInputFilePathOfType(\"full\"),\n        };\n        this.docsData = this.getDocsData();\n    }\n    getInputFilePathOfType(type: \"full\" | \"short\") {\n        let exportPath =\n            type === \"full\" ? this.data.fullDocsExport : this.data.docsExport;\n        if (!exportPath) {\n            return undefined;\n        }\n        let subPath = this.packageJson.getSubPathByExport(exportPath);\n        if (!subPath) {\n            return undefined;\n        }\n        let inputPath = this.paths.getPathInNodeModule(this.pluginName, subPath);\n\n        if (fs.existsSync(inputPath)) {\n            this.hasDocsData = true;\n            return inputPath;\n        }\n    }\n    getOutputFilePath(type: \"short\" | \"full\") {\n        return `/generatedMarkdown/componentDocs/${type}/${makeValidId(this.initialComponentImport)}`;\n    }\n\n    getDocsData(): NonNullable<BuildStaticDataInput[\"componentDocs\"]>[number] {\n        let embeddableSyntax =\n            this.data.embeddable?.map((e) => e.regexToInclude) || [];\n        let data: NonNullable<BuildStaticDataInput[\"componentDocs\"]>[number] = {\n            pluginName: this.pluginName,\n            componentName: this.formattedImportName,\n            embeddableSyntax: embeddableSyntax,\n            componentId: this.data.componentId,\n            urls: {\n                short: this.data.docsExport\n                    ? `/componentDocs/${this.formattedPluginName}/${this.formattedComponentName}?full=false`\n                    : undefined,\n                full: this.data.fullDocsExport\n                    ? `/componentDocs/${this.formattedPluginName}/${this.formattedComponentName}?full=true`\n                    : undefined,\n            },\n            filePaths: {\n                short: this.data.docsExport\n                    ? this.getOutputFilePath(\"short\")\n                    : undefined,\n                full: this.data.fullDocsExport\n                    ? this.getOutputFilePath(\"full\")\n                    : undefined,\n            },\n        };\n        return data;\n    }\n    logWriteToFile() {\n        if (this.slotKey && this.subSlotKey) {\n            this.logVerbose(`Writing ${this.slotKey} -> ${this.subSlotKey} to file.`);\n        } else {\n            this.logVerbose(\n                `Writing component from ${this.formattedExport} to file.`,\n            );\n        }\n    }\n    writeToFile() {\n        if (this.subSlot) {\n            this.logWriteToFile();\n            this.subSlot.writeToFile(\n                this.formattedExport,\n                this.formattedComponentName,\n            );\n        } else {\n            console.log(\n                `No subslot found for ${this.initialComponentImport} in ${this.pluginName}`,\n            );\n        }\n    }\n    copyDocsData() {\n        if (!this.hasDocsData) return;\n        if (this.inputFilePaths.full) {\n            let inputPath = new Path(this.inputFilePaths.full);\n            let outputPath = new Path(this.getOutputFilePath(\"full\"));\n            inputPath.copyContentTo(outputPath);\n        }\n        if (this.inputFilePaths.short) {\n            let inputPath = new Path(this.inputFilePaths.short);\n            let outputPath = new Path(this.getOutputFilePath(\"short\"));\n            inputPath.copyContentTo(outputPath);\n        }\n    }\n}\n"],"mappings":"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","names":[]}