{"version":3,"sources":["../src/classes/baseApp/templateContent.ts"],"sourcesContent":["import { makeValidId } from \"@ulld/utilities/identity\";\nimport { FileManager } from \"../baseClasses/fileManager.js\";\nimport { TargetPaths } from \"../paths.js\";\nimport { SlotDataType } from \"@ulld/utilities/slotDataType\";\n\nexport class TemplateContent extends FileManager {\n    replaceMeRegex: RegExp = /REPLACEME(\\<[^\\>]*>)?/gm\n    constructor(public subPath: string, public paths: TargetPaths){\n        super(subPath, paths)\n    }\n    getPropsName(componentName: string){\n        let validID = makeValidId(componentName)\n        return `${validID[0].toUpperCase()}${validID.slice(1)}`\n    }\n    appendExportedType(componentName: string, exportedType: string) {\n        let re = /^interface\\s+TemporaryComponentProps\\s*\\{/gm\n        let propsName = this.getPropsName(componentName)\n        let lines = this.getLines().map((l) => {\n            let t = l.trim()\n            if(re.test(t)){\n                return `interface ${propsName} extends ${exportedType} {}`\n            }\n            return l.replaceAll(\"TemporaryComponentProps\", propsName)\n        })\n        this.content = lines.join(\"\\n\")\n    }\n    removeREPLACEMEImport(){\n       let re = /^import\\s+REPLACEME/\n        this.filterLines((l) => !re.test(l))\n    }\n    appendImport(importString: string){\n        let importLines = this.getImportLines()\n        let _importString = importString.trim()\n        if(importLines.some((s) => s.content === _importString)){\n            return\n        }\n        let lastImportLine = importLines[importLines.length - 1]\n        importLines.push({\n            content: importString,\n            index: lastImportLine.index,\n            appendLine: true\n        })\n        this.replaceLinesByIndex(importLines)\n    }\n    replaceREPLACEME(componentName: string){\n        this.content = this.content?.replaceAll(this.replaceMeRegex, componentName)\n    }\n    generate(componentImport: string, formattedExport: string, itemData: SlotDataType, exportedProps?: string){\n        this.throwIfNotExists()\n        console.log(`Did not throw...`)\n        if(exportedProps){\n            this.appendExportedType(componentImport, exportedProps)\n        }\n        this.removeREPLACEMEImport()\n        this.appendImport(`import ${componentImport} from \"${formattedExport}\"`)\n        this.replaceREPLACEME(componentImport)\n        this.writeContent()\n    }\n}\n"],"mappings":";;;;;;;;AAAA;AAAA,SAAS,mBAAmB;AAKrB,IAAM,kBAAN,cAA8B,YAAY;AAAA,EAE7C,YAAmB,SAAwB,OAAmB;AAC1D,UAAM,SAAS,KAAK;AADL;AAAwB;AAAA,EAE3C;AAAA,EAHA,iBAAyB;AAAA,EAIzB,aAAa,eAAsB;AAC/B,QAAI,UAAU,YAAY,aAAa;AACvC,WAAO,GAAG,QAAQ,CAAC,EAAE,YAAY,CAAC,GAAG,QAAQ,MAAM,CAAC,CAAC;AAAA,EACzD;AAAA,EACA,mBAAmB,eAAuB,cAAsB;AAC5D,QAAI,KAAK;AACT,QAAI,YAAY,KAAK,aAAa,aAAa;AAC/C,QAAI,QAAQ,KAAK,SAAS,EAAE,IAAI,CAAC,MAAM;AACnC,UAAI,IAAI,EAAE,KAAK;AACf,UAAG,GAAG,KAAK,CAAC,GAAE;AACV,eAAO,aAAa,SAAS,YAAY,YAAY;AAAA,MACzD;AACA,aAAO,EAAE,WAAW,2BAA2B,SAAS;AAAA,IAC5D,CAAC;AACD,SAAK,UAAU,MAAM,KAAK,IAAI;AAAA,EAClC;AAAA,EACA,wBAAuB;AACpB,QAAI,KAAK;AACR,SAAK,YAAY,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC,CAAC;AAAA,EACvC;AAAA,EACA,aAAa,cAAqB;AAC9B,QAAI,cAAc,KAAK,eAAe;AACtC,QAAI,gBAAgB,aAAa,KAAK;AACtC,QAAG,YAAY,KAAK,CAAC,MAAM,EAAE,YAAY,aAAa,GAAE;AACpD;AAAA,IACJ;AACA,QAAI,iBAAiB,YAAY,YAAY,SAAS,CAAC;AACvD,gBAAY,KAAK;AAAA,MACb,SAAS;AAAA,MACT,OAAO,eAAe;AAAA,MACtB,YAAY;AAAA,IAChB,CAAC;AACD,SAAK,oBAAoB,WAAW;AAAA,EACxC;AAAA,EACA,iBAAiB,eAAsB;AACnC,SAAK,UAAU,KAAK,SAAS,WAAW,KAAK,gBAAgB,aAAa;AAAA,EAC9E;AAAA,EACA,SAAS,iBAAyB,iBAAyB,UAAwB,eAAuB;AACtG,SAAK,iBAAiB;AACtB,YAAQ,IAAI,kBAAkB;AAC9B,QAAG,eAAc;AACb,WAAK,mBAAmB,iBAAiB,aAAa;AAAA,IAC1D;AACA,SAAK,sBAAsB;AAC3B,SAAK,aAAa,UAAU,eAAe,UAAU,eAAe,GAAG;AACvE,SAAK,iBAAiB,eAAe;AACrC,SAAK,aAAa;AAAA,EACtB;AACJ;","names":[]}