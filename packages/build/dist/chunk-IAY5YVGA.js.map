{"version":3,"sources":["../src/classes/baseClasses/pkgJson.ts"],"sourcesContent":["import { PackageJsonType } from \"@ulld/developer-schemas/fullPackageJson\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { DeveloperConfigOutput } from \"@ulld/configschema/developer\";\nimport { transformExportString } from \"@ulld/utilities/transformExportString\";\nimport { PackageManagers } from \"../../types.js\";\nimport { Prompter } from \"../prompter.js\";\n\n\n\ninterface ExportItem {\n    export: string;\n    /** Made more consistent using the same function applied to export fileds in the developer config schema. */\n    transformedExport: string;\n    subPath: string;\n}\n\nexport class PackageJson extends Prompter {\n    data?: PackageJsonType;\n    path: string;\n    constructor(\n        public applicationDir: string,\n        targetDir: string | undefined,\n        gitBranch: string,\n    ) {\n        super(applicationDir, gitBranch);\n        this.path = path.join(targetDir || applicationDir, \"package.json\");\n    }\n    applyScript(newScript: Record<string, string>) {\n        if (!this.data) {\n            this.logError(\n                `No package.json file found while attempting to write script`,\n            );\n            throw new Error(\n                \"No package.json file found while attempting to write script\",\n            );\n        }\n        if (\"scripts\" in this.data) {\n            this.data.scripts = {\n                ...this.data.scripts,\n                ...newScript,\n            };\n        } else {\n            this.data.scripts = newScript;\n        }\n        this.data.scripts;\n    }\n    private getPackageManagerScripts(m: PackageManagers): Record<string, string> {\n        return {\n            postinstall: `${m} run db:generate`,\n            prebuild: `${m} run db:generate`,\n            predev: `${m} run db:generate`,\n        };\n    }\n    setPackageManagerScripts(m: PackageManagers) {\n        this.applyScript(this.getPackageManagerScripts(m));\n    }\n    gather() {\n        if (fs.existsSync(this.path)) {\n            let pkg = fs.readFileSync(this.path, { encoding: \"utf-8\" });\n            this.data = JSON.parse(pkg) as PackageJsonType;\n        }\n    }\n    exists() {\n        return fs.existsSync(this.path);\n    }\n    getData() {\n        if (!this.data) {\n            this.gather();\n        }\n        return this.data;\n    }\n    consistentlyFormatExport(exportString: string) {\n        return transformExportString(exportString);\n    }\n    write(p: PackageManagers) {\n        this.log(`Writing your modified package.json...`);\n        this.setPackageManagerScripts(p);\n        fs.writeFileSync(this.path, JSON.stringify(this.data, null, 4), {\n            encoding: \"utf-8\",\n        });\n        this.log(`Wrote modified package.json successfully.`);\n    }\n    getExports() {\n        let data: ExportItem[] = [];\n        let pData = this.getData();\n        if (!pData) return data;\n        for (const k in pData.exports) {\n            data.push({\n                export: k,\n                transformedExport: transformExportString(k),\n                subPath: pData.exports[k],\n            });\n        }\n        return data;\n    }\n    getPluginConfig(): DeveloperConfigOutput | undefined {\n        let data = this.getData();\n        return data?.[\"ulld-pluginConfig\"] as DeveloperConfigOutput | undefined;\n    }\n    getSubPathByExport(exportKey: string) {\n        let transformedExportKey = transformExportString(exportKey);\n        let exports = this.getExports();\n        let k = this.consistentlyFormatExport(exportKey);\n        let foundExport = exports.find((f) => f.transformedExport === k);\n        if (foundExport) {\n            return transformExportString(foundExport.subPath);\n        }\n    }\n}\n"],"mappings":";;;;;;;;AAAA;AACA,OAAO,UAAU;AACjB,OAAO,QAAQ;AAEf,SAAS,6BAA6B;AAa/B,IAAM,cAAN,cAA0B,SAAS;AAAA,EAGtC,YACW,gBACP,WACA,WACF;AACE,UAAM,gBAAgB,SAAS;AAJxB;AAKP,SAAK,OAAO,KAAK,KAAK,aAAa,gBAAgB,cAAc;AAAA,EACrE;AAAA,EATA;AAAA,EACA;AAAA,EASA,YAAY,WAAmC;AAC3C,QAAI,CAAC,KAAK,MAAM;AACZ,WAAK;AAAA,QACD;AAAA,MACJ;AACA,YAAM,IAAI;AAAA,QACN;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,aAAa,KAAK,MAAM;AACxB,WAAK,KAAK,UAAU;AAAA,QAChB,GAAG,KAAK,KAAK;AAAA,QACb,GAAG;AAAA,MACP;AAAA,IACJ,OAAO;AACH,WAAK,KAAK,UAAU;AAAA,IACxB;AACA,SAAK,KAAK;AAAA,EACd;AAAA,EACQ,yBAAyB,GAA4C;AACzE,WAAO;AAAA,MACH,aAAa,GAAG,CAAC;AAAA,MACjB,UAAU,GAAG,CAAC;AAAA,MACd,QAAQ,GAAG,CAAC;AAAA,IAChB;AAAA,EACJ;AAAA,EACA,yBAAyB,GAAoB;AACzC,SAAK,YAAY,KAAK,yBAAyB,CAAC,CAAC;AAAA,EACrD;AAAA,EACA,SAAS;AACL,QAAI,GAAG,WAAW,KAAK,IAAI,GAAG;AAC1B,UAAI,MAAM,GAAG,aAAa,KAAK,MAAM,EAAE,UAAU,QAAQ,CAAC;AAC1D,WAAK,OAAO,KAAK,MAAM,GAAG;AAAA,IAC9B;AAAA,EACJ;AAAA,EACA,SAAS;AACL,WAAO,GAAG,WAAW,KAAK,IAAI;AAAA,EAClC;AAAA,EACA,UAAU;AACN,QAAI,CAAC,KAAK,MAAM;AACZ,WAAK,OAAO;AAAA,IAChB;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,yBAAyB,cAAsB;AAC3C,WAAO,sBAAsB,YAAY;AAAA,EAC7C;AAAA,EACA,MAAM,GAAoB;AACtB,SAAK,IAAI,uCAAuC;AAChD,SAAK,yBAAyB,CAAC;AAC/B,OAAG,cAAc,KAAK,MAAM,KAAK,UAAU,KAAK,MAAM,MAAM,CAAC,GAAG;AAAA,MAC5D,UAAU;AAAA,IACd,CAAC;AACD,SAAK,IAAI,2CAA2C;AAAA,EACxD;AAAA,EACA,aAAa;AACT,QAAI,OAAqB,CAAC;AAC1B,QAAI,QAAQ,KAAK,QAAQ;AACzB,QAAI,CAAC;AAAO,aAAO;AACnB,eAAW,KAAK,MAAM,SAAS;AAC3B,WAAK,KAAK;AAAA,QACN,QAAQ;AAAA,QACR,mBAAmB,sBAAsB,CAAC;AAAA,QAC1C,SAAS,MAAM,QAAQ,CAAC;AAAA,MAC5B,CAAC;AAAA,IACL;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAAqD;AACjD,QAAI,OAAO,KAAK,QAAQ;AACxB,WAAO,OAAO,mBAAmB;AAAA,EACrC;AAAA,EACA,mBAAmB,WAAmB;AAClC,QAAI,uBAAuB,sBAAsB,SAAS;AAC1D,QAAI,UAAU,KAAK,WAAW;AAC9B,QAAI,IAAI,KAAK,yBAAyB,SAAS;AAC/C,QAAI,cAAc,QAAQ,KAAK,CAAC,MAAM,EAAE,sBAAsB,CAAC;AAC/D,QAAI,aAAa;AACb,aAAO,sBAAsB,YAAY,OAAO;AAAA,IACpD;AAAA,EACJ;AACJ;","names":[]}