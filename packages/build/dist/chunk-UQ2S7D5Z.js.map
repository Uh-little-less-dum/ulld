{"version":3,"sources":["../src/classes/build.ts"],"sourcesContent":["import chalk from \"chalk\";\nimport { UlldAppConfigManager } from \"./appConfig.js\";\nimport { NoteType } from \"./noteType.js\";\nimport { TargetPaths } from \"./paths.js\";\nimport { TargetPackageJson } from \"./pkgJson.js\";\nimport { UlldPlugin } from \"./plugin.js\";\nimport path from \"path\";\nimport enq from \"enquirer\";\nimport { appData } from \"@ulld/utilities/appData\";\nimport terminalLink from \"terminal-link\";\nimport { log } from \"console\";\nimport { DeveloperConfigOutput } from \"@ulld/configschema/developer\";\nimport { BuildStaticDataInput } from \"@ulld/configschema/buildTypes\";\nimport { PackageManagers } from \"../types.js\";\nimport { Prompter } from \"./prompter.js\";\nimport { SubSlot } from \"./subslot.js\";\nimport { PluginSlot } from \"./slot.js\";\nimport { SlotConflict } from \"./slotConflict.js\";\nimport { PluginPage } from \"./page.js\";\nimport { PageConflict } from \"./pageConflict.js\";\nimport { GitManager } from \"./baseClasses/gitManager.js\";\nimport { PluginComponent } from \"./component.js\";\nimport { generateSlotMapOfType } from \"../utils/slotMapUtils.js\";\nimport { slotMapIsFull } from \"../utils/slotMapIsFull.js\";\nimport { modifyNameRandomly } from \"../utils/randomization.js\";\nimport { AdditionalSources } from \"./additionalSources.js\";\nimport { EnvManager } from \"./envManager.js\";\nimport { BuildHealthCheck } from \"./healthCheck.js\";\nimport { DatabaseBuildManager } from \"./databaseManager.js\";\nimport { BuildOptionsType } from \"../utils/options.js\";\nimport { getInternalTailwindSources } from \"../utils/getInternalTailwindSources.js\";\nimport { SlotMap } from \"@ulld/configschema/slotMapRootType\";\nimport type { SlotMapOfType } from \"@ulld/configschema/slotMapInternalType\";\n\nconst { prompt } = enq;\n\ntype PluginSlotKey = keyof SlotMap;\n\nexport class UlldBuildProcess extends Prompter {\n    plugins: UlldPlugin[] = [];\n    noteTypes: NoteType[] = [];\n    env: EnvManager;\n    health: BuildHealthCheck;\n    appConfig: UlldAppConfigManager;\n    paths: TargetPaths;\n    applicationDir: string;\n    packageJson: TargetPackageJson;\n    isLocalDev: boolean;\n    db: DatabaseBuildManager;\n    packageManager: PackageManagers = \"pnpm\";\n    slotConflicts: SlotConflict[] = [];\n    pageConflicts: PageConflict[] = [];\n    git: GitManager;\n    componentImportMap: Record<string, boolean> = {};\n    alreadyProvidedPackageManager: boolean = false;\n    constructor(\n        public targetDir: string,\n        public branch: string = \"main\",\n    ) {\n        super(targetDir, branch);\n        this.git = new GitManager(targetDir, this.branch);\n        this.isLocalDev = process.env.LOCAL_DEVELOPMENT === \"true\";\n        this.applicationDir = path.join(\n            targetDir,\n            appData.templateRepo.buildDirName,\n        );\n        this.paths = new TargetPaths(this.applicationDir, this.isLocalDev);\n        this.env = new EnvManager(this.paths);\n        this.health = new BuildHealthCheck(this.paths, this.env);\n        this.db = new DatabaseBuildManager(this.paths, this.env, this.health);\n        this.packageJson = new TargetPackageJson(\n            this.applicationDir,\n            this.isLocalDev,\n            this.branch,\n        );\n        let additionalSources = new AdditionalSources(this.paths);\n        let globalAppConfig = additionalSources.getAppConfig();\n        this.appConfig =\n            globalAppConfig ||\n            new UlldAppConfigManager(\n                this.applicationDir,\n                this.isLocalDev,\n                this.paths,\n            );\n        this.appConfig.gather();\n        this.gatherSlotConflicts();\n        this.gatherPageConflicts();\n        this.noteTypes = this.appConfig.getNoteTypes();\n    }\n    /** Returns true if a project exists at the targetDir and if that project is a ULLD app. */\n    projectExists() {\n        if (this.paths.targetDirExists() && this.packageJson.exists()) {\n            this.packageJson.gather();\n            return this.packageJson.includesUlldDependencies();\n        }\n        return false;\n    }\n    private validateImportName(plugin: PluginComponent | PluginPage): void {\n        if (plugin.formattedImportName in this.componentImportMap) {\n            plugin.formattedImportName = modifyNameRandomly(\n                plugin.formattedImportName,\n                plugin.haveModifiedImportName,\n            );\n            return this.validateImportName(plugin);\n        } else {\n            this.componentImportMap[plugin.formattedImportName] = true;\n        }\n    }\n    validateImportNames() {\n        this.getFlattenedComponents().forEach((c) => this.validateImportName(c));\n        this.getFlattenedPages().forEach((p) => this.validateImportName(p));\n    }\n    async gatherPlugins() {\n        this.log(\n            `Gathering ${chalk.hex(\"#0ba5e9\")(\"U\")}LLD plugins from your appConfig...`,\n        );\n        if (!this.appConfig.config) {\n            this.logError(\"No appConfig was found. Can not continue.\");\n            throw new Error(\n                `No app configuration was found during the gatherPlugins phase.`,\n            );\n        }\n        let newPlugins: UlldPlugin[] = [];\n        let fromConfigPlugins =\n            this.appConfig.config?.plugins?.map(\n                (c) => new UlldPlugin(this.paths, c.name, c.version, this.branch),\n            ) || ([] as UlldPlugin[]);\n        this.logVerbose(\n            `Found ${fromConfigPlugins.length} plugin${fromConfigPlugins.length > 1 ? \"s\" : \"\"} in your config.`,\n        );\n        for (const k in this.appConfig.config.slots) {\n            let newSlot =\n                this.appConfig.config.slots[\n                k as keyof typeof this.appConfig.config.slots\n                ];\n            if (Array.isArray(newSlot)) {\n                for (const l of newSlot) {\n                    newPlugins.push(\n                        new UlldPlugin(this.paths, l.name, l.version, this.branch),\n                    );\n                }\n            } else {\n                this.logDebug(`Found a slot that was not added to plugins:\n${JSON.stringify(k, null, 4)}\n`);\n            }\n        }\n        this.plugins = [...newPlugins, ...fromConfigPlugins];\n        this.log(`Found ${this.plugins.length} plugins:`);\n        for (const k of this.plugins) {\n            this.log(k.name);\n        }\n        this.applyPluginsToPackageJson();\n        this.packageJson.write(this.packageManager);\n    }\n    applyPluginsToPackageJson() {\n        this.log(\n            `Generating a package.json file specific to your configuration...`,\n        );\n        let pkg = this.packageJson.data;\n        if (!pkg) {\n            process.exit(`UNDEFINED_PKG_DATA\n\nIt's not you it's me. Something broked.\n`);\n        }\n        let hasNew = false;\n        for (const k of this.plugins) {\n            let pkgRes = k.applyDependency(pkg);\n            pkg = pkgRes.pkg;\n            if (pkgRes.isNew && !hasNew) {\n                hasNew = true;\n            }\n        }\n        this.packageJson.data = pkg;\n    }\n    async gatherAppConfig() {\n        if (!this.appConfig.exists) {\n            const shouldContinue = await prompt({\n                type: \"confirm\",\n                name: \"addedConfig\",\n                initial: true,\n                message: `We couldn't find a configuration file in either your app's\ndirectory or through the ULLD_APP_CONFIG environment variable. \nDrop a configuration file in the app directory now at\n${this.applicationDir}\nand continue when that file is in place.`,\n            });\n            if (\"addedConfig\" in shouldContinue && shouldContinue.addedConfig) {\n                let nowValid = this.appConfig.checkDirectoryConfig();\n                if (!nowValid) {\n                    log(\n                        \"We still can't find your config. Please look over the docs \" +\n                        terminalLink(\"here\", \"https://uhlittlelessdum.com/docs/user\"),\n                    );\n                    process.exit(1);\n                }\n            }\n        }\n        this.appConfig.gather();\n    }\n    async checkPluginValidity() {\n        this.log(`Checking to make sure plugins provided are valid...`);\n        let invalidPlugins: UlldPlugin[] = [];\n        for (const k of this.plugins) {\n            if (!k.isValid()) {\n                invalidPlugins.push(k);\n            }\n        }\n        if (invalidPlugins.length) {\n            let shouldContinue =\n                await this.confirmContinueWithInvalidPlugins(invalidPlugins);\n            if (!shouldContinue) {\n                this.kBye();\n            }\n        }\n    }\n    getAllSlots() {\n        if (!this.plugins) return [];\n        return this.plugins\n            .filter((f) => f.slot)\n            .map((f) => f.slot) as PluginSlot[];\n    }\n    async gatherPageConflicts() {\n        let pageMap: Record<string, PluginPage[]> = {};\n        for (const p of this.plugins) {\n            for (const k of p.pages) {\n                if (k.data.targetUrl) {\n                    if (!pageMap[k.data.targetUrl]) {\n                        pageMap[k.data.targetUrl] = [];\n                    }\n                    pageMap[k.data.targetUrl].push(k);\n                }\n            }\n        }\n        for (const l in pageMap) {\n            if (pageMap[l].length > 1) {\n                this.pageConflicts.push(new PageConflict(l, pageMap[l]));\n            }\n        }\n    }\n    applyPackageManagerOptions(opts: BuildOptionsType) {\n        if (opts.npm) {\n            this.packageManager = \"npm\";\n            this.alreadyProvidedPackageManager = true;\n        }\n        if (opts.pnpm) {\n            this.packageManager = \"pnpm\";\n            this.alreadyProvidedPackageManager = true;\n        }\n        if (opts.yarn) {\n            this.packageManager = \"yarn\";\n            this.alreadyProvidedPackageManager = true;\n        }\n    }\n    async resolvePageConflicts() {\n        if (this.slotConflicts.length > 0) {\n            await this.getPagePreferences(this.pageConflicts);\n            this.removePageConflicts();\n        } else {\n            this.log(\n                this.slotConflicts.length === 0\n                    ? `More great news! No page conflicts were found either!`\n                    : `Good news! No page conflicts were found.`,\n            );\n        }\n    }\n    getFlatComponentDocs(): BuildStaticDataInput[\"componentDocs\"] {\n        let docs: BuildStaticDataInput[\"componentDocs\"] = [];\n        for (const k of this.plugins) {\n            for (const p of k.components) {\n                if (p.hasDocsData) {\n                    docs.push({\n                        pluginName: p.pluginName,\n                        componentName: p.data.componentName,\n                        componentId: p.data.componentId,\n                        tags: p.data.tags,\n                        embeddableSyntax:\n                            p.data.embeddable?.map((e) => e.regexToInclude) || [],\n                        urls: {\n                            short: p.data.docsExport\n                                ? `/componentDocs/${encodeURI(p.pluginName)}/${encodeURI(p.data.componentName)}?full=false`\n                                : undefined,\n                            full: p.data.fullDocsExport\n                                ? `/componentDocs/${encodeURI(p.pluginName)}/${encodeURI(p.data.componentName)}?full=true`\n                                : undefined,\n                        },\n                        filePaths: {\n                            short: p.getOutputFilePath(\"short\"),\n                            full: p.getOutputFilePath(\"full\"),\n                        },\n                    });\n                }\n            }\n        }\n        return docs;\n    }\n    getFlatNavigationLinks() {\n        let data: DeveloperConfigOutput[\"navigationLinks\"] = [];\n        for (const k of this.plugins) {\n            if (k.pluginConfig !== \"Unusable\" && k.pluginConfig.navigationLinks) {\n                data = data.concat(k.pluginConfig.navigationLinks);\n            }\n        }\n        return data;\n    }\n    getFlatPluginSettingPages() {\n        let data: BuildStaticDataInput[\"settingPages\"] = [];\n        for (const k of this.plugins) {\n            if (k.settingsPage) {\n                data.push(k.settingsPage.settingsPageData);\n            }\n        }\n        return data;\n    }\n    gatherSlotConflicts() {\n        // let allSlots = this.getAllSlots();\n        let slotMap: Record<\n            PluginSlotKey,\n            Record<string, SubSlot[]>\n        > = {} as Record<PluginSlotKey, Record<string, SubSlot[]>>;\n        let p = this.plugins.filter((f) => f.slot);\n        for (const plugin of p) {\n            for (const component of plugin.components) {\n                if (component.subSlot) {\n                    if (!slotMap[component.subSlot.parentSlot]) {\n                        slotMap[component.subSlot.parentSlot] = {};\n                    }\n                    if (\n                        !slotMap[component.subSlot.parentSlot][component.subSlot.subSlot]\n                    ) {\n                        slotMap[component.subSlot.parentSlot][component.subSlot.subSlot] =\n                            [];\n                    }\n                    slotMap[component.subSlot.parentSlot][component.subSlot.subSlot].push(\n                        component.subSlot,\n                    );\n                }\n            }\n        }\n        for (const w in slotMap) {\n            for (const z in slotMap[w as PluginSlotKey]) {\n                if (slotMap[w as PluginSlotKey][z].length > 1) {\n                    this.slotConflicts.push(\n                        new SlotConflict(\n                            w as PluginSlotKey,\n                            z,\n                            slotMap[w as PluginSlotKey][z],\n                        ),\n                    );\n                }\n            }\n        }\n    }\n    removeSlotConflicts() {\n        this.plugins.forEach((p) => p.removeRejectedSlots());\n    }\n    removePageConflicts() {\n        for (const k of this.plugins) {\n            k.removeUnusedPages();\n        }\n    }\n    async resolveSlotConflicts() {\n        if (this.slotConflicts.length > 0) {\n            await this.getSlotPreferences(this.slotConflicts);\n            this.removeSlotConflicts();\n        } else {\n            this.log(`Great news! No slot conflicts were found.`);\n        }\n    }\n    async createBaseProject() {\n        let exists = this.projectExists();\n        let success = false;\n        if (!exists) {\n            success = await this.clone();\n        } else {\n            success = await this.gitPull();\n        }\n        if (success) {\n            this.log(`We have a baseline ${this.ulld()} app now!`);\n        }\n        return success;\n    }\n    removeUnusablePlugins() {\n        let pluginData: {\n            usable: UlldPlugin[];\n            unusable: UlldPlugin[];\n        } = {\n            usable: [],\n            unusable: [],\n        };\n        for (const k of this.plugins) {\n            pluginData[k.pluginConfig === \"Unusable\" ? \"unusable\" : \"usable\"].push(k);\n        }\n        if (pluginData.unusable.length === 0) {\n            this.log(\n                `Checked for issues with your plugins and found none! Continuing with the build process.`,\n            );\n        } else {\n            for (const l of pluginData.unusable) {\n                this.log(`Removing unsable plugin ${l.name}`);\n            }\n        }\n        this.plugins = pluginData.usable;\n    }\n    convertSlotsToPlugins() {\n        let slots = this.appConfig.config?.slots;\n        if (!slots) return;\n        let currentPluginNames = this.plugins.map((p) => p.name);\n        for (const slotKey in slots) {\n            let itemData = slots[slotKey as keyof typeof slots];\n            if (Array.isArray(itemData)) {\n                for (const slotItem of itemData) {\n                    if (!currentPluginNames.includes(slotItem.name)) {\n                        this.plugins.push(\n                            new UlldPlugin(\n                                this.paths,\n                                slotItem.name,\n                                slotItem.version,\n                                this.branch,\n                            ),\n                        );\n                        currentPluginNames.push(slotItem.name);\n                    }\n                }\n            }\n        }\n    }\n    getComponentSlotMap(): SlotMapOfType<PluginComponent | PluginPage> {\n        let slotComponents = this.getSlotComponents();\n        let slotPages = this.getSlotPages();\n        let slotComponentMap = generateSlotMapOfType((slotKey, subSlotKey) => {\n            let slotPage = slotPages.find(\n                (f) => f.subSlotKey === subSlotKey && f.parentSlotKey === slotKey,\n            );\n            if (slotPage) {\n                return slotPage;\n            }\n            return (\n                slotComponents.find(\n                    (f) => f.slotKey === slotKey && f.subSlotKey === subSlotKey,\n                ) || false\n            );\n        });\n        let fullSlotMap = slotMapIsFull(slotComponentMap);\n        if (!fullSlotMap.passed) {\n            this\n                .logDebug(`Your slot map is incomplete! You're missing the following slots:\n\n${fullSlotMap.missingItems.map((k, i) => `${i + 1}. ${k.slot} -> ${k.subSlot}`).join(\"\\n\")}`);\n        }\n        return slotComponentMap as SlotMapOfType<PluginComponent | PluginPage>;\n    }\n\n    getSlotComponents(): PluginComponent[] {\n        let slotComponents: PluginComponent[] = [];\n        for (const k of this.plugins) {\n            for (const l of k.components) {\n                if (l.subSlot) {\n                    slotComponents.push(l);\n                }\n            }\n        }\n        return slotComponents;\n    }\n    getSlotPages(): PluginPage[] {\n        let data: PluginPage[] = [];\n        for (const k of this.plugins) {\n            for (const l of k.pages) {\n                if (l.data.slot) {\n                    data.push(l);\n                }\n            }\n        }\n        return data;\n    }\n    getFlattenedPages() {\n        let d: PluginPage[] = [];\n        for (const k of this.plugins) {\n            d = d.concat(k.pages);\n        }\n        return d;\n    }\n    getFlattenedComponents() {\n        let d: PluginComponent[] = [];\n        for (const k of this.plugins) {\n            d = d.concat(k.components);\n        }\n        return d;\n    }\n    async applyPages() {\n        for await (const k of this.plugins) {\n            this.logError(\n                `Attempting to apply extra pages. This method is not yet handled. If you are a user, send me a strongly worded email about this...`,\n            );\n            // await k.applyPages();\n        }\n    }\n    getTailwindSources(): string[] {\n        let items = getInternalTailwindSources();\n        let additionalItems = this.plugins\n            .filter((f) => f.includeInTailwindSources)\n            .map((p) => `./node_modules/${p.name}/src/**/*.{js,ts,jsx,tsx,mdx}`);\n        for (const k of additionalItems) {\n            if (!items.includes(k)) {\n                items.push(k);\n            }\n        }\n        return items;\n    }\n    revalidatePluginConfigs() {\n        for (const plugin of this.plugins) {\n            plugin.gatherConfig();\n        }\n    }\n    getPackagesToTranspile(): string[] {\n        return this.plugins.map((p) => p.name);\n    }\n}\n"],"mappings":"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","names":[]}