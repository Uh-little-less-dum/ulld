{"version":3,"sources":["../src/classes/baseClasses/gitManager.ts"],"sourcesContent":["import { appData } from \"@ulld/utilities/appData\";\nimport type {\n    SimpleGitOptions,\n    SimpleGit,\n    SimpleGitProgressEvent,\n} from \"simple-git\";\nimport simpleGit from \"simple-git\"\nimport { MultiBar, SingleBar } from \"cli-progress\";\nimport path from \"path\";\nimport { BranchValue } from \"../../utils/options.js\";\nimport { ShellManager } from \"./shell.js\";\n\n\nexport class GitManager extends ShellManager {\n    status: \"notSent\" | \"pending\" | \"success\" | \"fail\" = \"notSent\";\n    showProgress: boolean = false;\n    constructor(public targetDirectory: string, public branch: BranchValue) {\n        super();\n    }\n    progress({ method, stage, progress, ...props }: SimpleGitProgressEvent) {\n        let bars: MultiBar | null = null;\n        let remoteBar: SingleBar | null = null;\n        let receivingBar: SingleBar | null = null;\n        if (!bars) {\n            bars = new MultiBar({\n                clearOnComplete: false,\n                hideCursor: true,\n                barCompleteChar: \"\\u2588\",\n                barIncompleteChar: \"\\u2591\",\n                format: \" {bar} | {value}% \",\n            });\n            remoteBar = bars.create(100, 0);\n            receivingBar = bars.create(100, 0);\n        }\n        if (stage === \"remote:\") {\n            remoteBar?.update(progress);\n        }\n        if (stage === \"receiving\") {\n            remoteBar?.update(100);\n            receivingBar?.update(progress);\n        }\n    }\n    async gitPull() {\n        this.log(\n            `It looks like a ${this.ulld()} project already exists in this directory. Let's just try to update it.`,\n        );\n        this.status = \"pending\";\n        const options: Partial<SimpleGitOptions> = {\n            binary: \"git\",\n            maxConcurrentProcesses: 10,\n            trimmed: false,\n            progress: this.showProgress ? this.progress : undefined,\n        };\n        const git: SimpleGit = simpleGit(options);\n        await git.pull({\n            \"-C\": this.targetDirectory,\n        });\n        // await git.pull(\n        //     appData.templateRepo.url,\n        //     `${this.targetDirectory}/ulldApp`,\n        //     {\n        //         // \"-b\": \"main\",\n        //     },\n        //     (err, data) => {\n        //         if (err) {\n        //             console.error(err);\n        //         }\n        //         console.log(data);\n        //     },\n        // );\n        this.status = \"success\";\n        return true;\n    }\n\n    async clone() {\n        this.log(\n            `Great! Give me a second to clone the ${this.ulld()} code base onto your machine. This might take a minute or two.`,\n        );\n        this.status = \"pending\";\n        const options: Partial<SimpleGitOptions> = {\n            binary: \"git\",\n            maxConcurrentProcesses: 10,\n            trimmed: false,\n            progress: this.showProgress ? this.progress : undefined,\n        };\n        const git: SimpleGit = (simpleGit as any)(options);\n        await git.clone(\n            appData.templateRepo.url,\n            `${this.targetDirectory}/ulldApp`,\n            {\n                \"--branch\": this.branch,\n            },\n            (err, data) => {\n                if (err) {\n                    console.error(err);\n                }\n                console.log(data);\n            },\n        );\n        await git.raw(\n            \"-C\",\n            path.join(this.targetDirectory, appData.templateRepo.buildDirName),\n            \"remote\",\n            \"add\",\n            \"ulld\",\n            appData.templateRepo.url,\n        );\n        this.status = \"success\";\n        return true;\n    }\n}\n"],"mappings":";;;;;;;;AAAA;AAAA,SAAS,eAAe;AAMxB,OAAO,eAAe;AACtB,SAAS,gBAA2B;AACpC,OAAO,UAAU;AAKV,IAAM,aAAN,cAAyB,aAAa;AAAA,EAGzC,YAAmB,iBAAgC,QAAqB;AACpE,UAAM;AADS;AAAgC;AAAA,EAEnD;AAAA,EAJA,SAAqD;AAAA,EACrD,eAAwB;AAAA,EAIxB,SAAS,EAAE,QAAQ,OAAO,UAAU,GAAG,MAAM,GAA2B;AACpE,QAAI,OAAwB;AAC5B,QAAI,YAA8B;AAClC,QAAI,eAAiC;AACrC,QAAI,CAAC,MAAM;AACP,aAAO,IAAI,SAAS;AAAA,QAChB,iBAAiB;AAAA,QACjB,YAAY;AAAA,QACZ,iBAAiB;AAAA,QACjB,mBAAmB;AAAA,QACnB,QAAQ;AAAA,MACZ,CAAC;AACD,kBAAY,KAAK,OAAO,KAAK,CAAC;AAC9B,qBAAe,KAAK,OAAO,KAAK,CAAC;AAAA,IACrC;AACA,QAAI,UAAU,WAAW;AACrB,iBAAW,OAAO,QAAQ;AAAA,IAC9B;AACA,QAAI,UAAU,aAAa;AACvB,iBAAW,OAAO,GAAG;AACrB,oBAAc,OAAO,QAAQ;AAAA,IACjC;AAAA,EACJ;AAAA,EACA,MAAM,UAAU;AACZ,SAAK;AAAA,MACD,mBAAmB,KAAK,KAAK,CAAC;AAAA,IAClC;AACA,SAAK,SAAS;AACd,UAAM,UAAqC;AAAA,MACvC,QAAQ;AAAA,MACR,wBAAwB;AAAA,MACxB,SAAS;AAAA,MACT,UAAU,KAAK,eAAe,KAAK,WAAW;AAAA,IAClD;AACA,UAAM,MAAiB,UAAU,OAAO;AACxC,UAAM,IAAI,KAAK;AAAA,MACX,MAAM,KAAK;AAAA,IACf,CAAC;AAcD,SAAK,SAAS;AACd,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,QAAQ;AACV,SAAK;AAAA,MACD,wCAAwC,KAAK,KAAK,CAAC;AAAA,IACvD;AACA,SAAK,SAAS;AACd,UAAM,UAAqC;AAAA,MACvC,QAAQ;AAAA,MACR,wBAAwB;AAAA,MACxB,SAAS;AAAA,MACT,UAAU,KAAK,eAAe,KAAK,WAAW;AAAA,IAClD;AACA,UAAM,MAAkB,UAAkB,OAAO;AACjD,UAAM,IAAI;AAAA,MACN,QAAQ,aAAa;AAAA,MACrB,GAAG,KAAK,eAAe;AAAA,MACvB;AAAA,QACI,YAAY,KAAK;AAAA,MACrB;AAAA,MACA,CAAC,KAAK,SAAS;AACX,YAAI,KAAK;AACL,kBAAQ,MAAM,GAAG;AAAA,QACrB;AACA,gBAAQ,IAAI,IAAI;AAAA,MACpB;AAAA,IACJ;AACA,UAAM,IAAI;AAAA,MACN;AAAA,MACA,KAAK,KAAK,KAAK,iBAAiB,QAAQ,aAAa,YAAY;AAAA,MACjE;AAAA,MACA;AAAA,MACA;AAAA,MACA,QAAQ,aAAa;AAAA,IACzB;AACA,SAAK,SAAS;AACd,WAAO;AAAA,EACX;AACJ;","names":[]}