declare module "trpcTypes/valueTableSearch" {
    import type { DocTypes } from "@ulld/configschema/configUtilityTypes/docTypes";
    export interface ValueSearchTableItem {
        href: string;
        title: string;
        rootRelativePath: string;
        noteType: DocTypes | "none";
        importantValues: number[];
        firstSync: Date | null;
        lastSync: Date | null;
    }
}
declare module "trpc/trpc" {
    export const trpcRoot: {
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        procedure: import("@trpc/server").ProcedureBuilder<{
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _ctx_out: object;
            _input_in: typeof import("@trpc/server").unsetMarker;
            _input_out: typeof import("@trpc/server").unsetMarker;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
            _meta: object;
        }>;
        middleware: <TNewParams extends import("@trpc/server").ProcedureParams<import("@trpc/server").AnyRootConfig, unknown, unknown, unknown, unknown, unknown, unknown>>(fn: import("@trpc/server").MiddlewareFunction<{
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _ctx_out: {};
            _input_out: unknown;
            _input_in: unknown;
            _output_in: unknown;
            _output_out: unknown;
            _meta: object;
        }, TNewParams>) => import("@trpc/server").MiddlewareBuilder<{
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _ctx_out: {};
            _input_out: unknown;
            _input_in: unknown;
            _output_in: unknown;
            _output_out: unknown;
            _meta: object;
        }, TNewParams>;
        router: <TProcRouterRecord extends import("@trpc/server").ProcedureRouterRecord>(procedures: TProcRouterRecord) => import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, TProcRouterRecord>;
        mergeRouters: typeof import("@trpc/server").mergeRouters;
    };
    export const router: <TProcRouterRecord extends import("@trpc/server").ProcedureRouterRecord>(procedures: TProcRouterRecord) => import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
        ctx: object;
        meta: object;
        errorShape: import("@trpc/server").DefaultErrorShape;
        transformer: import("@trpc/server").DefaultDataTransformer;
    }>, TProcRouterRecord>;
    export const publicProcedure: import("@trpc/server").ProcedureBuilder<{
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        _ctx_out: object;
        _input_in: typeof import("@trpc/server").unsetMarker;
        _input_out: typeof import("@trpc/server").unsetMarker;
        _output_in: typeof import("@trpc/server").unsetMarker;
        _output_out: typeof import("@trpc/server").unsetMarker;
        _meta: object;
    }>;
    export type UlldRouterType = typeof router;
}
declare module "trpcInternalMethods/backup/nonFileSystem/equations" {
    export const backupEquations: () => Promise<void>;
}
declare module "trpcInternalMethods/backup/nonFileSystem/snippets" {
    export const backupSnippets: () => Promise<void>;
}
declare module "trpcInternalMethods/backup/nonFileSystem/qa" {
    export const backupQAPairAndExams: () => Promise<void>;
}
declare module "trpcInternalMethods/backup/nonFileSystem/settings" {
    export const backupSettings: () => Promise<void>;
}
declare module "trpcInternalMethods/backup/nonFileSystem/autoSettings" {
    export const backupAutoSettings: () => Promise<void>;
}
declare module "trpcInternalMethods/backup/nonFileSystem/readingLists" {
    export const backupReadingLists: () => Promise<void>;
}
declare module "trpcInternalMethods/backup/nonFileSystem/bib" {
    export const backupBib: () => Promise<void>;
}
declare module "trpcInternalMethods/backup/nonFileSystem/googleAuth" {
    export const backupGoogleAuth: () => Promise<void>;
}
declare module "trpcInternalMethods/backup/nonFileSystem/quotes" {
    export const backupQuotes: () => Promise<void>;
}
declare module "trpcInternalMethods/backup/nonFileSystem/dailyFocus" {
    export const dailyFocus: () => Promise<void>;
}
declare module "trpc/routers/sync" {
    export const syncRouter: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
        ctx: object;
        meta: object;
        errorShape: import("@trpc/server").DefaultErrorShape;
        transformer: import("@trpc/server").DefaultDataTransformer;
    }>, {
        backupNonFileSystemDB: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _ctx_out: object;
            _input_in: typeof import("@trpc/server").unsetMarker;
            _input_out: typeof import("@trpc/server").unsetMarker;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
            _meta: object;
        }, void>;
    }>;
}
declare module "schemas/formTrpcRelationships/autoPropertyFormSchema" {
    import { z } from "zod";
    export const AutoPropertyFormSchema: z.ZodObject<{
        glob: z.ZodString;
        value: z.ZodString;
        type: z.ZodNativeEnum<{
            tag: "tag";
            topic: "topic";
            subject: "subject";
        }>;
        id: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "tag" | "topic" | "subject";
        value: string;
        glob: string;
        id?: number | undefined;
    }, {
        type: "tag" | "topic" | "subject";
        value: string;
        glob: string;
        id?: number | undefined;
    }>;
}
declare module "trpcInternalMethods/settings/autoSettings/autoSettingEqualityTest" {
    import type { AutoSettingType } from "@ulld/utilities/types";
    export const autoSettingEquality: (a: AutoSettingType, b: AutoSettingType) => boolean;
}
declare module "trpcInternalMethods/settings/autoSettings/getDbAutosetting" {
    import type { PrismaClient, autoSetting } from "@ulld/database";
    export const getDbAutoSettings: (prisma: PrismaClient, type?: autoSetting) => Promise<{
        id: number;
        type: import(".prisma/client").$Enums.autoSetting;
        glob: string;
        value: string;
    }[]>;
}
declare module "trpcInternalMethods/settings/autoSettings/getAutosettingWithRegex" {
    import { AppConfigSchemaOutput } from "@ulld/configschema/types";
    import { AutoSettingWithRegex } from "../../../trpc/types";
    import type { PrismaClient, autoSetting } from "@ulld/database";
    export const getConfigAutoSettings: (config: AppConfigSchemaOutput) => {
        glob: string;
        value: string;
        type: autoSetting;
        id?: number;
    }[];
    export const getAutoSettingsWithRegex: (prisma: PrismaClient, appConfig: AppConfigSchemaOutput, type?: autoSetting) => Promise<AutoSettingWithRegex[]>;
}
declare module "trpcInternalMethods/settings/autoSettings/syncAutoSettings" {
    import { PrismaClient } from "@ulld/database";
    import { AppConfigSchemaOutput } from "@ulld/configschema/types";
    export const syncAutoSettings: (prisma: PrismaClient, appConfig: AppConfigSchemaOutput) => Promise<void>;
}
declare module "trpc/routers/autoSettings" {
    import { autoSetting } from "@ulld/database/internalDatabaseTypes";
    export const autoSettingRouter: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
        ctx: object;
        meta: object;
        errorShape: import("@trpc/server").DefaultErrorShape;
        transformer: import("@trpc/server").DefaultDataTransformer;
    }>, {
        setAutoSettingsFromConfig: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _ctx_out: object;
            _input_in: typeof import("@trpc/server").unsetMarker;
            _input_out: typeof import("@trpc/server").unsetMarker;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
            _meta: object;
        }, void>;
        getAutoSettings: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                type?: "tag" | "topic" | "subject" | undefined;
                withRegex?: boolean | undefined;
            };
            _input_out: {
                withRegex: boolean;
                type?: "tag" | "topic" | "subject" | undefined;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, import("trpc/types").AutoSettingWithRegex[] | {
            id?: number;
            glob: string;
            value: string;
            type: autoSetting;
        }[] | undefined>;
        deleteAutoSettingById: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: number;
            _input_out: number;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            id: number;
            type: import(".prisma/client").$Enums.autoSetting;
            glob: string;
            value: string;
        }>;
        addAutoSetting: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                type: "tag" | "topic" | "subject";
                value: string;
                glob: string;
                id?: number | undefined;
            };
            _input_out: {
                type: "tag" | "topic" | "subject";
                value: string;
                glob: string;
                id?: number | undefined;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            id: number;
            type: import(".prisma/client").$Enums.autoSetting;
            glob: string;
            value: string;
        }>;
    }>;
}
declare module "schemas/dictionary/main" {
    import { z } from "zod";
    export const dictionaryDefinitionReturnType: z.ZodObject<{
        id: z.ZodString;
        label: z.ZodOptional<z.ZodString>;
        content: z.ZodOptional<z.ZodString>;
        mdxNoteId: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        mdxNoteId: number | null;
        label?: string | undefined;
        content?: string | undefined;
    }, {
        id: string;
        mdxNoteId: number | null;
        label?: string | undefined;
        content?: string | undefined;
    }>;
    export type DictionaryDefinitionReturnType = z.output<typeof dictionaryDefinitionReturnType>;
}
declare module "schemas/taggable/tagTopicSubjectList" {
    import { z } from 'zod';
    export const tagTopicSubjectList: z.ZodObject<{
        tags: z.ZodArray<z.ZodString, "many">;
        subjects: z.ZodArray<z.ZodString, "many">;
        topics: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        tags: string[];
        topics: string[];
        subjects: string[];
    }, {
        tags: string[];
        topics: string[];
        subjects: string[];
    }>;
    export type TagTopicSubjectList = z.infer<typeof tagTopicSubjectList>;
}
declare module "trpcInternalMethods/taggable/getUniqueTaggables" {
    export const getUniqueTags: () => Promise<string[]>;
    export const getUniqueSubjects: () => Promise<string[]>;
    export const getUniqueTopics: () => Promise<string[]>;
}
declare module "trpc/routers/search" {
    export const advancedSearchRouter: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
        ctx: object;
        meta: object;
        errorShape: import("@trpc/server").DefaultErrorShape;
        transformer: import("@trpc/server").DefaultDataTransformer;
    }>, {
        getNoteHrefFromDefinitionId: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: string;
            _input_out: string;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, string | undefined>;
        getSequentialIdListByKey: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: string;
            _input_out: string;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            href: string;
            title: string;
            sequentialIndex: number | null;
        }[]>;
        getDefinitionList: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _ctx_out: object;
            _input_in: typeof import("@trpc/server").unsetMarker;
            _input_out: typeof import("@trpc/server").unsetMarker;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
            _meta: object;
        }, {
            id: string;
            mdxNoteId: number | null;
            label?: string | undefined;
            content?: string | undefined;
        }[]>;
        rootRelativePathIsBookmarked: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: string;
            _input_out: string;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, boolean>;
        getUniqueTags: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _ctx_out: object;
            _input_in: typeof import("@trpc/server").unsetMarker;
            _input_out: typeof import("@trpc/server").unsetMarker;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
            _meta: object;
        }, string[]>;
        getUniqueTagTopicAndSubjects: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: "tag" | "topic" | "subject" | null | undefined;
            _input_out: "tag" | "topic" | "subject" | null | undefined;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, string[] | {
            tags: string[];
            topics: string[];
            subjects: string[];
        }>;
        getBookmarked: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _ctx_out: object;
            _input_in: typeof import("@trpc/server").unsetMarker;
            _input_out: typeof import("@trpc/server").unsetMarker;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
            _meta: object;
        }, {
            mdxNotes: {
                id: number;
                href: string;
                summary: string | null;
                title: string;
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                noteType: string;
                topics: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                subjects: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                firstSync: Date;
                lastSync: Date;
                latexTitle: string | null;
                rootRelativePath: string;
                sequentialIndex: number | null;
                citations: {
                    id: string;
                    htmlCitation: string | null;
                }[];
                definitions: {
                    id: string;
                    label: string | null;
                    content: string | null;
                    alphabeticalLabel: string | null;
                    mdxNoteId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
            }[];
        }>;
        findUnknownDBNoteTypeFromRootRelativePath: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: string;
            _input_out: string;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            markdown: {
                id: number;
                rootRelativePath: string;
            } | null;
            notebook: {
                id: number;
                rootRelativePath: string;
            } | null;
        }>;
    }>;
}
declare module "trpcInternalMethods/notes/ipynb/main" {
    export const getRemoteIpynbFromPathname: (pathname: string) => Promise<({
        equations: never;
        tags: {
            value: string;
            kanbanId: number | null;
            createdAt: Date;
            lastAccess: Date;
        }[];
        toDo: never;
        ReadingList: never;
        topics: {
            value: string;
            kanbanId: number | null;
            createdAt: Date;
            lastAccess: Date;
        }[];
        subjects: {
            value: string;
            kanbanId: number | null;
            createdAt: Date;
            lastAccess: Date;
        }[];
        _count: {
            tags: number;
            topics: number;
            subjects: number;
            citations: number;
            sequentialList: number;
            readingList: number;
        };
        citations: {
            id: string;
            BibId: number | null;
            OwnWork: boolean;
            ColleaguesWork: boolean;
            read: boolean;
            htmlCitation: string | null;
            PdfPath: string | null;
            address: string | null;
            annote: string | null;
            author: string | null;
            booktitle: string | null;
            chapter: string | null;
            crossref: string | null;
            doi: string | null;
            edition: string | null;
            editor: string | null;
            email: string | null;
            howpublished: string | null;
            institution: string | null;
            journal: string | null;
            month: string | null;
            note: string | null;
            number: string | null;
            organization: string | null;
            pages: string | null;
            publisher: string | null;
            school: string | null;
            series: string | null;
            title: string | null;
            volume: string | null;
            type: string | null;
            year: string | null;
            numpages: string | null;
            url: string | null;
            issue: string | null;
            issn: string | null;
            abstract: string | null;
            urldate: string | null;
            keywords: string | null;
            copyright: string | null;
            createdAt: Date;
            lastAccess: Date;
        }[];
        sequentialList: {
            sequentialKey: string;
        } | null;
        definitions: never;
    } & {
        id: number;
        rootRelativePath: string;
        isProtected: boolean | null;
        title: string;
        latexTitle: string | null;
        citationsListOrder: string[];
        importantValues: number[];
        href: string;
        outgoingQuickLinks: string[];
        raw: Buffer;
        sequentialKey: string | null;
        sequentialIndex: number | null;
        bookmarked: boolean;
        firstSync: Date;
        lastSync: Date;
        lastAccess: Date;
    }) | null>;
}
declare module "trpcInternalMethods/filesystem/shouldIgnoreFilepath" {
    import type { AppConfigSchemaOutput } from "@ulld/configschema/types";
    /** Returns truf if file should be ignored. */
    export const shouldIgnorePath: (path: string, filePaths?: AppConfigSchemaOutput["ignoreFilepaths"]) => boolean;
}
declare module "trpcInternalMethods/filesystem/walkFsRoot" {
    import { ParsedAppConfig } from '@ulld/configschema/types';
    export function walkFsRoot(dir: string, recursive?: boolean, ignoreFilePaths?: ParsedAppConfig["ignoreFilepaths"]): AsyncGenerator<string>;
}
declare module "trpcInternalMethods/filesystem/getRootRelativePathsOfFiletype" {
    import { ParsableExtensionsSchema } from "@ulld/configschema/zod/secondaryConfigParse/getParsableExtensions";
    export const getRootRelativePathsOfFiletype: (filetype: ParsableExtensionsSchema) => Promise<string[]>;
}
declare module "trpc/routers/notebook/main" {
    export const notebookRouter: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
        ctx: object;
        meta: object;
        errorShape: import("@trpc/server").DefaultErrorShape;
        transformer: import("@trpc/server").DefaultDataTransformer;
    }>, {
        getRemoteIpynbFromPathname: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: string;
            _input_out: string;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, ({
            equations: never;
            tags: {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
            toDo: never;
            ReadingList: never;
            topics: {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
            subjects: {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
            _count: {
                tags: number;
                topics: number;
                subjects: number;
                citations: number;
                sequentialList: number;
                readingList: number;
            };
            citations: {
                id: string;
                BibId: number | null;
                OwnWork: boolean;
                ColleaguesWork: boolean;
                read: boolean;
                htmlCitation: string | null;
                PdfPath: string | null;
                address: string | null;
                annote: string | null;
                author: string | null;
                booktitle: string | null;
                chapter: string | null;
                crossref: string | null;
                doi: string | null;
                edition: string | null;
                editor: string | null;
                email: string | null;
                howpublished: string | null;
                institution: string | null;
                journal: string | null;
                month: string | null;
                note: string | null;
                number: string | null;
                organization: string | null;
                pages: string | null;
                publisher: string | null;
                school: string | null;
                series: string | null;
                title: string | null;
                volume: string | null;
                type: string | null;
                year: string | null;
                numpages: string | null;
                url: string | null;
                issue: string | null;
                issn: string | null;
                abstract: string | null;
                urldate: string | null;
                keywords: string | null;
                copyright: string | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
            sequentialList: {
                sequentialKey: string;
            } | null;
            definitions: never;
        } & {
            id: number;
            rootRelativePath: string;
            isProtected: boolean | null;
            title: string;
            latexTitle: string | null;
            citationsListOrder: string[];
            importantValues: number[];
            href: string;
            outgoingQuickLinks: string[];
            raw: Buffer;
            sequentialKey: string | null;
            sequentialIndex: number | null;
            bookmarked: boolean;
            firstSync: Date;
            lastSync: Date;
            lastAccess: Date;
        }) | null>;
        getFsIpynb: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                absolutePath: string;
            };
            _input_out: {
                absolutePath: string;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, string>;
        getPrismaIpynb: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: string;
            _input_out: string;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, ({
            tags: {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
            readingList: {
                name: string;
                description: string | null;
                createdAt: Date;
                lastUpdate: Date;
            }[];
            topics: {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
            citations: {
                id: string;
                BibId: number | null;
                OwnWork: boolean;
                ColleaguesWork: boolean;
                read: boolean;
                htmlCitation: string | null;
                PdfPath: string | null;
                address: string | null;
                annote: string | null;
                author: string | null;
                booktitle: string | null;
                chapter: string | null;
                crossref: string | null;
                doi: string | null;
                edition: string | null;
                editor: string | null;
                email: string | null;
                howpublished: string | null;
                institution: string | null;
                journal: string | null;
                month: string | null;
                note: string | null;
                number: string | null;
                organization: string | null;
                pages: string | null;
                publisher: string | null;
                school: string | null;
                series: string | null;
                title: string | null;
                volume: string | null;
                type: string | null;
                year: string | null;
                numpages: string | null;
                url: string | null;
                issue: string | null;
                issn: string | null;
                abstract: string | null;
                urldate: string | null;
                keywords: string | null;
                copyright: string | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
        } & {
            id: number;
            rootRelativePath: string;
            isProtected: boolean | null;
            title: string;
            latexTitle: string | null;
            citationsListOrder: string[];
            importantValues: number[];
            href: string;
            outgoingQuickLinks: string[];
            raw: Buffer;
            sequentialKey: string | null;
            sequentialIndex: number | null;
            bookmarked: boolean;
            firstSync: Date;
            lastSync: Date;
            lastAccess: Date;
        }) | null>;
        getAllNotebookPaths: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _ctx_out: object;
            _input_in: typeof import("@trpc/server").unsetMarker;
            _input_out: typeof import("@trpc/server").unsetMarker;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
            _meta: object;
        }, string[]>;
        getDatabaseNotebook: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                rootRelativePath: string;
            };
            _input_out: {
                rootRelativePath: string;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, ({
            tags: {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
            topics: {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
            subjects: {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
        } & {
            id: number;
            rootRelativePath: string;
            isProtected: boolean | null;
            title: string;
            latexTitle: string | null;
            citationsListOrder: string[];
            importantValues: number[];
            href: string;
            outgoingQuickLinks: string[];
            raw: Buffer;
            sequentialKey: string | null;
            sequentialIndex: number | null;
            bookmarked: boolean;
            firstSync: Date;
            lastSync: Date;
            lastAccess: Date;
        }) | null>;
    }>;
}
declare module "schemas/settings/settingsChangeSchema" {
    import { Prisma } from "@ulld/database/internalDatabaseTypes";
    import { z } from "zod";
    export const settingsChangeSchema: z.ZodType<Prisma.SettingsCreateInput>;
}
declare module "trpc/routers/settings" {
    import { z } from "zod";
    export const settingBooleanKeySchema: z.ZodEnum<["tooltips", "cleanOnSync", "summary_showTags", "summary_showCitations"]>;
    export const settingsRouter: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
        ctx: object;
        meta: object;
        errorShape: import("@trpc/server").DefaultErrorShape;
        transformer: import("@trpc/server").DefaultDataTransformer;
    }>, {
        getSettings: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _ctx_out: object;
            _input_in: typeof import("@trpc/server").unsetMarker;
            _input_out: typeof import("@trpc/server").unsetMarker;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
            _meta: object;
        }, {
            id: number;
            tooltips: boolean;
            title: string;
            summary_showCitations: boolean;
            summary_showTags: boolean;
            landingImageAlign: import(".prisma/client").$Enums.ImageAlignment;
            lockedLandingImage: string | null;
            cleanOnSync: boolean;
            plotTheme: string | null;
            firstSync: Date;
            lastSync: Date;
        } | null>;
        toggleBooleanSetting: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: "tooltips" | "summary_showCitations" | "summary_showTags" | "cleanOnSync";
            _input_out: "tooltips" | "summary_showCitations" | "summary_showTags" | "cleanOnSync";
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            id: number;
            tooltips: boolean;
            title: string;
            summary_showCitations: boolean;
            summary_showTags: boolean;
            landingImageAlign: import(".prisma/client").$Enums.ImageAlignment;
            lockedLandingImage: string | null;
            cleanOnSync: boolean;
            plotTheme: string | null;
            firstSync: Date;
            lastSync: Date;
        } | undefined>;
        lockCurrentLandingImage: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: string;
            _input_out: string;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            lockedLandingImage: string | null;
        } | undefined>;
        updateSettings: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: import(".prisma/client").Prisma.SettingsCreateInput;
            _input_out: import(".prisma/client").Prisma.SettingsCreateInput;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            id: number;
            tooltips: boolean;
            title: string;
            summary_showCitations: boolean;
            summary_showTags: boolean;
            landingImageAlign: import(".prisma/client").$Enums.ImageAlignment;
            lockedLandingImage: string | null;
            cleanOnSync: boolean;
            plotTheme: string | null;
            firstSync: Date;
            lastSync: Date;
        } | undefined>;
    }>;
}
declare module "schemas/search/parsing" {
    import { Route } from 'next';
    import { z } from 'zod';
    import { MdxNote } from "classes/prismaMdxRelations/MdxNote";
    import { WithoutFunctions } from "@ulld/utilities/types/utilityTypes";
    export type MdxNoteWithoutFunctions = WithoutFunctions<InstanceType<typeof MdxNote>>;
    export const readingListZodObject: z.ZodObject<{
        name: z.ZodString;
        description: z.ZodNullable<z.ZodString>;
        createdAt: z.ZodOptional<z.ZodEffects<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodDate]>>>, any, string | number | Date | null | undefined>> | z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodDate]>, Date, string | number | Date>>;
        lastUpdate: z.ZodEffects<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodDate]>>>, any, string | number | Date | null | undefined> | z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodDate]>, Date, string | number | Date>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        description: string | null;
        createdAt?: any;
        lastUpdate?: any;
    }, {
        name: string;
        description: string | null;
        createdAt?: string | number | Date | null | undefined;
        lastUpdate?: string | number | Date | null | undefined;
    }>;
    export const zodCitationGroupSchema: z.ZodObject<{
        name: z.ZodString;
        description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        description?: string | null | undefined;
    }, {
        name: string;
        description?: string | null | undefined;
    }>;
    const bibEntryZodObject: z.ZodObject<{
        id: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        htmlCitation: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        BibId: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
        readingList: z.ZodDefault<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            description: z.ZodNullable<z.ZodString>;
            createdAt: z.ZodOptional<z.ZodEffects<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodDate]>>>, any, string | number | Date | null | undefined>> | z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodDate]>, Date, string | number | Date>>;
            lastUpdate: z.ZodEffects<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodDate]>>>, any, string | number | Date | null | undefined> | z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodDate]>, Date, string | number | Date>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            description: string | null;
            createdAt?: any;
            lastUpdate?: any;
        }, {
            name: string;
            description: string | null;
            createdAt?: string | number | Date | null | undefined;
            lastUpdate?: string | number | Date | null | undefined;
        }>, "many">>;
        OwnWork: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>>>, boolean, string | boolean | null | undefined>;
        ColleaguesWork: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>>>, boolean, string | boolean | null | undefined>;
        read: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>>>, boolean, string | boolean | null | undefined>;
        PdfPath: z.ZodEffects<z.ZodNullable<z.ZodOptional<z.ZodString>>, Route<RouteInferType>, string | null | undefined>;
        address: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        annote: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        author: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        booktitle: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        chapter: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        crossref: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        doi: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        edition: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        editor: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        howpublished: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        institution: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        journal: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        month: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        note: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        number: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        organization: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        pages: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        publisher: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        school: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        series: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        title: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        volume: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        type: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        year: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        numpages: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        url: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        issue: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        issn: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        abstract: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        urldate: z.ZodEffects<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, string | undefined, string | Date | null | undefined>;
        keywords: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        copyright: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        citationGroups: z.ZodDefault<z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            description?: string | null | undefined;
        }, {
            name: string;
            description?: string | null | undefined;
        }>, "many">>>;
        tags: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            value: z.ZodString;
            kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            value: string;
            kanbanId?: number | null | undefined;
        }, {
            value: string;
            kanbanId?: number | null | undefined;
        }>, z.ZodEffects<z.ZodString, {
            value: string;
            kanbanId?: number | null | undefined;
        }, string>]>, "many">;
        tempPageIndex: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        tags: ({
            value: string;
            kanbanId?: number | null | undefined;
        } | {
            value: string;
            kanbanId?: number | null | undefined;
        })[];
        readingList: {
            name: string;
            description: string | null;
            createdAt?: any;
            lastUpdate?: any;
        }[];
        OwnWork: boolean;
        ColleaguesWork: boolean;
        read: boolean;
        PdfPath: string;
        citationGroups: {
            name: string;
            description?: string | null | undefined;
        }[];
        number?: string | null | undefined;
        journal?: string | null | undefined;
        editor?: string | null | undefined;
        note?: string | null | undefined;
        abstract?: string | null | undefined;
        id?: string | null | undefined;
        type?: string | null | undefined;
        title?: string | null | undefined;
        copyright?: string | null | undefined;
        school?: string | null | undefined;
        volume?: string | null | undefined;
        keywords?: string | null | undefined;
        BibId?: number | null | undefined;
        htmlCitation?: string | null | undefined;
        address?: string | null | undefined;
        annote?: string | null | undefined;
        author?: string | null | undefined;
        booktitle?: string | null | undefined;
        chapter?: string | null | undefined;
        crossref?: string | null | undefined;
        doi?: string | null | undefined;
        edition?: string | null | undefined;
        email?: string | null | undefined;
        howpublished?: string | null | undefined;
        institution?: string | null | undefined;
        month?: string | null | undefined;
        organization?: string | null | undefined;
        pages?: string | null | undefined;
        publisher?: string | null | undefined;
        series?: string | null | undefined;
        year?: string | null | undefined;
        numpages?: string | null | undefined;
        url?: string | null | undefined;
        issue?: string | null | undefined;
        issn?: string | null | undefined;
        urldate?: string | undefined;
        tempPageIndex?: number | null | undefined;
    }, {
        tags: (string | {
            value: string;
            kanbanId?: number | null | undefined;
        })[];
        number?: string | null | undefined;
        journal?: string | null | undefined;
        editor?: string | null | undefined;
        note?: string | null | undefined;
        abstract?: string | null | undefined;
        id?: string | null | undefined;
        type?: string | null | undefined;
        title?: string | null | undefined;
        copyright?: string | null | undefined;
        school?: string | null | undefined;
        volume?: string | null | undefined;
        readingList?: {
            name: string;
            description: string | null;
            createdAt?: string | number | Date | null | undefined;
            lastUpdate?: string | number | Date | null | undefined;
        }[] | undefined;
        keywords?: string | null | undefined;
        BibId?: number | null | undefined;
        OwnWork?: string | boolean | null | undefined;
        ColleaguesWork?: string | boolean | null | undefined;
        read?: string | boolean | null | undefined;
        htmlCitation?: string | null | undefined;
        PdfPath?: string | null | undefined;
        address?: string | null | undefined;
        annote?: string | null | undefined;
        author?: string | null | undefined;
        booktitle?: string | null | undefined;
        chapter?: string | null | undefined;
        crossref?: string | null | undefined;
        doi?: string | null | undefined;
        edition?: string | null | undefined;
        email?: string | null | undefined;
        howpublished?: string | null | undefined;
        institution?: string | null | undefined;
        month?: string | null | undefined;
        organization?: string | null | undefined;
        pages?: string | null | undefined;
        publisher?: string | null | undefined;
        series?: string | null | undefined;
        year?: string | null | undefined;
        numpages?: string | null | undefined;
        url?: string | null | undefined;
        issue?: string | null | undefined;
        issn?: string | null | undefined;
        urldate?: string | Date | null | undefined;
        citationGroups?: {
            name: string;
            description?: string | null | undefined;
        }[] | undefined;
        tempPageIndex?: number | null | undefined;
    }>;
    export const mdxNoteZodObject: z.ZodObject<{
        id: z.ZodOptional<z.ZodNumber>;
        title: z.ZodString;
        latexTitle: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        summary: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        raw: z.ZodString;
        floatImages: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>>>, boolean, string | boolean | null | undefined>;
        citations: z.ZodDefault<z.ZodOptional<z.ZodArray<z.ZodObject<{
            id: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            htmlCitation: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            BibId: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
            readingList: z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                createdAt: z.ZodOptional<z.ZodEffects<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodDate]>>>, any, string | number | Date | null | undefined>> | z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodDate]>, Date, string | number | Date>>;
                lastUpdate: z.ZodEffects<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodDate]>>>, any, string | number | Date | null | undefined> | z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodDate]>, Date, string | number | Date>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                description: string | null;
                createdAt?: any;
                lastUpdate?: any;
            }, {
                name: string;
                description: string | null;
                createdAt?: string | number | Date | null | undefined;
                lastUpdate?: string | number | Date | null | undefined;
            }>, "many">>;
            OwnWork: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>>>, boolean, string | boolean | null | undefined>;
            ColleaguesWork: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>>>, boolean, string | boolean | null | undefined>;
            read: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>>>, boolean, string | boolean | null | undefined>;
            PdfPath: z.ZodEffects<z.ZodNullable<z.ZodOptional<z.ZodString>>, Route<RouteInferType>, string | null | undefined>;
            address: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            annote: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            author: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            booktitle: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            chapter: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            crossref: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            doi: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            edition: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            editor: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            howpublished: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            institution: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            journal: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            month: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            note: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            number: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            organization: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            pages: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            publisher: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            school: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            series: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            title: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            volume: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            type: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            year: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            numpages: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            url: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            issue: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            issn: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            abstract: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            urldate: z.ZodEffects<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, string | undefined, string | Date | null | undefined>;
            keywords: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            copyright: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            citationGroups: z.ZodDefault<z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                description?: string | null | undefined;
            }, {
                name: string;
                description?: string | null | undefined;
            }>, "many">>>;
            tags: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">;
            tempPageIndex: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            tags: ({
                value: string;
                kanbanId?: number | null | undefined;
            } | {
                value: string;
                kanbanId?: number | null | undefined;
            })[];
            readingList: {
                name: string;
                description: string | null;
                createdAt?: any;
                lastUpdate?: any;
            }[];
            OwnWork: boolean;
            ColleaguesWork: boolean;
            read: boolean;
            PdfPath: string;
            citationGroups: {
                name: string;
                description?: string | null | undefined;
            }[];
            number?: string | null | undefined;
            journal?: string | null | undefined;
            editor?: string | null | undefined;
            note?: string | null | undefined;
            abstract?: string | null | undefined;
            id?: string | null | undefined;
            type?: string | null | undefined;
            title?: string | null | undefined;
            copyright?: string | null | undefined;
            school?: string | null | undefined;
            volume?: string | null | undefined;
            keywords?: string | null | undefined;
            BibId?: number | null | undefined;
            htmlCitation?: string | null | undefined;
            address?: string | null | undefined;
            annote?: string | null | undefined;
            author?: string | null | undefined;
            booktitle?: string | null | undefined;
            chapter?: string | null | undefined;
            crossref?: string | null | undefined;
            doi?: string | null | undefined;
            edition?: string | null | undefined;
            email?: string | null | undefined;
            howpublished?: string | null | undefined;
            institution?: string | null | undefined;
            month?: string | null | undefined;
            organization?: string | null | undefined;
            pages?: string | null | undefined;
            publisher?: string | null | undefined;
            series?: string | null | undefined;
            year?: string | null | undefined;
            numpages?: string | null | undefined;
            url?: string | null | undefined;
            issue?: string | null | undefined;
            issn?: string | null | undefined;
            urldate?: string | undefined;
            tempPageIndex?: number | null | undefined;
        }, {
            tags: (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[];
            number?: string | null | undefined;
            journal?: string | null | undefined;
            editor?: string | null | undefined;
            note?: string | null | undefined;
            abstract?: string | null | undefined;
            id?: string | null | undefined;
            type?: string | null | undefined;
            title?: string | null | undefined;
            copyright?: string | null | undefined;
            school?: string | null | undefined;
            volume?: string | null | undefined;
            readingList?: {
                name: string;
                description: string | null;
                createdAt?: string | number | Date | null | undefined;
                lastUpdate?: string | number | Date | null | undefined;
            }[] | undefined;
            keywords?: string | null | undefined;
            BibId?: number | null | undefined;
            OwnWork?: string | boolean | null | undefined;
            ColleaguesWork?: string | boolean | null | undefined;
            read?: string | boolean | null | undefined;
            htmlCitation?: string | null | undefined;
            PdfPath?: string | null | undefined;
            address?: string | null | undefined;
            annote?: string | null | undefined;
            author?: string | null | undefined;
            booktitle?: string | null | undefined;
            chapter?: string | null | undefined;
            crossref?: string | null | undefined;
            doi?: string | null | undefined;
            edition?: string | null | undefined;
            email?: string | null | undefined;
            howpublished?: string | null | undefined;
            institution?: string | null | undefined;
            month?: string | null | undefined;
            organization?: string | null | undefined;
            pages?: string | null | undefined;
            publisher?: string | null | undefined;
            series?: string | null | undefined;
            year?: string | null | undefined;
            numpages?: string | null | undefined;
            url?: string | null | undefined;
            issue?: string | null | undefined;
            issn?: string | null | undefined;
            urldate?: string | Date | null | undefined;
            citationGroups?: {
                name: string;
                description?: string | null | undefined;
            }[] | undefined;
            tempPageIndex?: number | null | undefined;
        }>, "many">>>;
        topics: z.ZodOptional<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>;
        subjects: z.ZodOptional<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>;
        definitions: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            label: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            content: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            mdxNoteId: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            label?: string | null | undefined;
            content?: string | null | undefined;
            mdxNoteId?: number | null | undefined;
        }, {
            id: string;
            label?: string | null | undefined;
            content?: string | null | undefined;
            mdxNoteId?: number | null | undefined;
        }>, "many">;
        tags: z.ZodDefault<z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            value: z.ZodString;
            kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            value: string;
            kanbanId?: number | null | undefined;
        }, {
            value: string;
            kanbanId?: number | null | undefined;
        }>, z.ZodEffects<z.ZodString, {
            value: string;
            kanbanId?: number | null | undefined;
        }, string>]>, "many">>>;
        quickLinkId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        href: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        citationsListOrder: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        outgoingQuickLinks: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        equationIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        ftExtension: z.ZodUnion<[z.ZodLiteral<".mdx">, z.ZodLiteral<".md">, z.ZodLiteral<".ipynb">]>;
        isProtected: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>>>, boolean, string | boolean | null | undefined>;
        sequentialKey: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        sequentialIndex: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
        frontMatter: z.ZodOptional<z.ZodObject<{
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            created: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            updated: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            summary: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            subjects: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, string[], string | string[]>>;
            topics: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, string[], string | string[]>>;
            tags: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, string[], string | string[]>>;
            importantValues: z.ZodDefault<z.ZodArray<z.ZodNumber, "many">>;
            id: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            sequential: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
            sequentialKey: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            tableStyles: z.ZodOptional<z.ZodObject<{
                fullWidth: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>>;
                text: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodLiteral<"base">, z.ZodLiteral<"lg">, z.ZodLiteral<"xl">, z.ZodLiteral<"small">]>>>;
                math: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodLiteral<"base">, z.ZodLiteral<"lg">, z.ZodLiteral<"xl">, z.ZodLiteral<"small">]>>>;
                tableCenter: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>>;
                textCenter: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>>;
                headingCenter: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>>;
                float: z.ZodOptional<z.ZodNullable<z.ZodEnum<["right", "left"]>>>;
                noMax: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>>;
                expand: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>>;
            }, "strip", z.ZodTypeAny, {
                expand: boolean | null;
                fullWidth: boolean | null;
                tableCenter: boolean | null;
                textCenter: boolean | null;
                headingCenter: boolean | null;
                noMax: boolean | null;
                math?: "base" | "lg" | "xl" | "small" | null | undefined;
                text?: "base" | "lg" | "xl" | "small" | null | undefined;
                float?: "right" | "left" | null | undefined;
            }, {
                math?: "base" | "lg" | "xl" | "small" | null | undefined;
                expand?: boolean | null | undefined;
                text?: "base" | "lg" | "xl" | "small" | null | undefined;
                float?: "right" | "left" | null | undefined;
                fullWidth?: boolean | null | undefined;
                tableCenter?: boolean | null | undefined;
                textCenter?: boolean | null | undefined;
                headingCenter?: boolean | null | undefined;
                noMax?: boolean | null | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            tags: string[];
            topics: string[];
            subjects: string[];
            importantValues: number[];
            id?: string | null | undefined;
            summary?: string | null | undefined;
            title?: string | null | undefined;
            sequentialKey?: string | null | undefined;
            created?: string | null | undefined;
            updated?: string | null | undefined;
            sequential?: number | null | undefined;
            tableStyles?: {
                expand: boolean | null;
                fullWidth: boolean | null;
                tableCenter: boolean | null;
                textCenter: boolean | null;
                headingCenter: boolean | null;
                noMax: boolean | null;
                math?: "base" | "lg" | "xl" | "small" | null | undefined;
                text?: "base" | "lg" | "xl" | "small" | null | undefined;
                float?: "right" | "left" | null | undefined;
            } | undefined;
        }, {
            id?: string | null | undefined;
            summary?: string | null | undefined;
            title?: string | null | undefined;
            tags?: string | string[] | undefined;
            topics?: string | string[] | undefined;
            subjects?: string | string[] | undefined;
            importantValues?: number[] | undefined;
            sequentialKey?: string | null | undefined;
            created?: string | null | undefined;
            updated?: string | null | undefined;
            sequential?: number | null | undefined;
            tableStyles?: {
                math?: "base" | "lg" | "xl" | "small" | null | undefined;
                expand?: boolean | null | undefined;
                text?: "base" | "lg" | "xl" | "small" | null | undefined;
                float?: "right" | "left" | null | undefined;
                fullWidth?: boolean | null | undefined;
                tableCenter?: boolean | null | undefined;
                textCenter?: boolean | null | undefined;
                headingCenter?: boolean | null | undefined;
                noMax?: boolean | null | undefined;
            } | undefined;
        }>>;
        remoteUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        trackRemote: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>>>, boolean, string | boolean | null | undefined>;
        noteType: z.ZodEffects<z.ZodString, string, string>;
        bookmarked: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>>>, boolean, string | boolean | null | undefined>;
        lastSync: z.ZodEffects<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodDate]>>>, any, string | number | Date | null | undefined> | z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodDate]>, Date, string | number | Date>;
        firstSync: z.ZodEffects<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodDate]>>>, any, string | number | Date | null | undefined> | z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodDate]>, Date, string | number | Date>;
        rootRelativePath: z.ZodString;
        formatted: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        importantValues: z.ZodDefault<z.ZodArray<z.ZodNumber, "many">>;
        saveFormatted: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>>>, boolean, string | boolean | null | undefined>;
        imageSrc: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        title: string;
        tags: ({
            value: string;
            kanbanId?: number | null | undefined;
        } | {
            value: string;
            kanbanId?: number | null | undefined;
        })[];
        noteType: string;
        isProtected: boolean;
        rootRelativePath: string;
        importantValues: number[];
        floatImages: boolean;
        trackRemote: boolean;
        bookmarked: boolean;
        citations: {
            tags: ({
                value: string;
                kanbanId?: number | null | undefined;
            } | {
                value: string;
                kanbanId?: number | null | undefined;
            })[];
            readingList: {
                name: string;
                description: string | null;
                createdAt?: any;
                lastUpdate?: any;
            }[];
            OwnWork: boolean;
            ColleaguesWork: boolean;
            read: boolean;
            PdfPath: string;
            citationGroups: {
                name: string;
                description?: string | null | undefined;
            }[];
            number?: string | null | undefined;
            journal?: string | null | undefined;
            editor?: string | null | undefined;
            note?: string | null | undefined;
            abstract?: string | null | undefined;
            id?: string | null | undefined;
            type?: string | null | undefined;
            title?: string | null | undefined;
            copyright?: string | null | undefined;
            school?: string | null | undefined;
            volume?: string | null | undefined;
            keywords?: string | null | undefined;
            BibId?: number | null | undefined;
            htmlCitation?: string | null | undefined;
            address?: string | null | undefined;
            annote?: string | null | undefined;
            author?: string | null | undefined;
            booktitle?: string | null | undefined;
            chapter?: string | null | undefined;
            crossref?: string | null | undefined;
            doi?: string | null | undefined;
            edition?: string | null | undefined;
            email?: string | null | undefined;
            howpublished?: string | null | undefined;
            institution?: string | null | undefined;
            month?: string | null | undefined;
            organization?: string | null | undefined;
            pages?: string | null | undefined;
            publisher?: string | null | undefined;
            series?: string | null | undefined;
            year?: string | null | undefined;
            numpages?: string | null | undefined;
            url?: string | null | undefined;
            issue?: string | null | undefined;
            issn?: string | null | undefined;
            urldate?: string | undefined;
            tempPageIndex?: number | null | undefined;
        }[];
        definitions: {
            id: string;
            label?: string | null | undefined;
            content?: string | null | undefined;
            mdxNoteId?: number | null | undefined;
        }[];
        raw: string;
        saveFormatted: boolean;
        ftExtension: ".md" | ".mdx" | ".ipynb";
        id?: number | undefined;
        href?: string | null | undefined;
        summary?: string | null | undefined;
        topics?: {
            value: string;
        }[] | undefined;
        subjects?: {
            value: string;
        }[] | undefined;
        firstSync?: any;
        lastSync?: any;
        latexTitle?: string | null | undefined;
        formatted?: string | null | undefined;
        citationsListOrder?: string[] | undefined;
        imageSrc?: string | null | undefined;
        sequentialKey?: string | null | undefined;
        sequentialIndex?: number | null | undefined;
        remoteUrl?: string | null | undefined;
        outgoingQuickLinks?: string[] | undefined;
        quickLinkId?: string | null | undefined;
        equationIds?: string[] | undefined;
        frontMatter?: {
            tags: string[];
            topics: string[];
            subjects: string[];
            importantValues: number[];
            id?: string | null | undefined;
            summary?: string | null | undefined;
            title?: string | null | undefined;
            sequentialKey?: string | null | undefined;
            created?: string | null | undefined;
            updated?: string | null | undefined;
            sequential?: number | null | undefined;
            tableStyles?: {
                expand: boolean | null;
                fullWidth: boolean | null;
                tableCenter: boolean | null;
                textCenter: boolean | null;
                headingCenter: boolean | null;
                noMax: boolean | null;
                math?: "base" | "lg" | "xl" | "small" | null | undefined;
                text?: "base" | "lg" | "xl" | "small" | null | undefined;
                float?: "right" | "left" | null | undefined;
            } | undefined;
        } | undefined;
    }, {
        title: string;
        noteType: string;
        rootRelativePath: string;
        definitions: {
            id: string;
            label?: string | null | undefined;
            content?: string | null | undefined;
            mdxNoteId?: number | null | undefined;
        }[];
        raw: string;
        ftExtension: ".md" | ".mdx" | ".ipynb";
        id?: number | undefined;
        href?: string | null | undefined;
        summary?: string | null | undefined;
        tags?: (string | {
            value: string;
            kanbanId?: number | null | undefined;
        })[] | undefined;
        topics?: {
            value: string;
        }[] | undefined;
        subjects?: {
            value: string;
        }[] | undefined;
        firstSync?: string | number | Date | null | undefined;
        lastSync?: string | number | Date | null | undefined;
        isProtected?: string | boolean | null | undefined;
        latexTitle?: string | null | undefined;
        formatted?: string | null | undefined;
        citationsListOrder?: string[] | undefined;
        importantValues?: number[] | undefined;
        imageSrc?: string | null | undefined;
        sequentialKey?: string | null | undefined;
        sequentialIndex?: number | null | undefined;
        floatImages?: string | boolean | null | undefined;
        remoteUrl?: string | null | undefined;
        trackRemote?: string | boolean | null | undefined;
        outgoingQuickLinks?: string[] | undefined;
        bookmarked?: string | boolean | null | undefined;
        citations?: {
            tags: (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[];
            number?: string | null | undefined;
            journal?: string | null | undefined;
            editor?: string | null | undefined;
            note?: string | null | undefined;
            abstract?: string | null | undefined;
            id?: string | null | undefined;
            type?: string | null | undefined;
            title?: string | null | undefined;
            copyright?: string | null | undefined;
            school?: string | null | undefined;
            volume?: string | null | undefined;
            readingList?: {
                name: string;
                description: string | null;
                createdAt?: string | number | Date | null | undefined;
                lastUpdate?: string | number | Date | null | undefined;
            }[] | undefined;
            keywords?: string | null | undefined;
            BibId?: number | null | undefined;
            OwnWork?: string | boolean | null | undefined;
            ColleaguesWork?: string | boolean | null | undefined;
            read?: string | boolean | null | undefined;
            htmlCitation?: string | null | undefined;
            PdfPath?: string | null | undefined;
            address?: string | null | undefined;
            annote?: string | null | undefined;
            author?: string | null | undefined;
            booktitle?: string | null | undefined;
            chapter?: string | null | undefined;
            crossref?: string | null | undefined;
            doi?: string | null | undefined;
            edition?: string | null | undefined;
            email?: string | null | undefined;
            howpublished?: string | null | undefined;
            institution?: string | null | undefined;
            month?: string | null | undefined;
            organization?: string | null | undefined;
            pages?: string | null | undefined;
            publisher?: string | null | undefined;
            series?: string | null | undefined;
            year?: string | null | undefined;
            numpages?: string | null | undefined;
            url?: string | null | undefined;
            issue?: string | null | undefined;
            issn?: string | null | undefined;
            urldate?: string | Date | null | undefined;
            citationGroups?: {
                name: string;
                description?: string | null | undefined;
            }[] | undefined;
            tempPageIndex?: number | null | undefined;
        }[] | undefined;
        quickLinkId?: string | null | undefined;
        equationIds?: string[] | undefined;
        saveFormatted?: string | boolean | null | undefined;
        frontMatter?: {
            id?: string | null | undefined;
            summary?: string | null | undefined;
            title?: string | null | undefined;
            tags?: string | string[] | undefined;
            topics?: string | string[] | undefined;
            subjects?: string | string[] | undefined;
            importantValues?: number[] | undefined;
            sequentialKey?: string | null | undefined;
            created?: string | null | undefined;
            updated?: string | null | undefined;
            sequential?: number | null | undefined;
            tableStyles?: {
                math?: "base" | "lg" | "xl" | "small" | null | undefined;
                expand?: boolean | null | undefined;
                text?: "base" | "lg" | "xl" | "small" | null | undefined;
                float?: "right" | "left" | null | undefined;
                fullWidth?: boolean | null | undefined;
                tableCenter?: boolean | null | undefined;
                textCenter?: boolean | null | undefined;
                headingCenter?: boolean | null | undefined;
                noMax?: boolean | null | undefined;
            } | undefined;
        } | undefined;
    }>;
    export const mdxNoteZodObjectPartial: z.ZodObject<{
        id: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
        title: z.ZodOptional<z.ZodString>;
        latexTitle: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodString>>>;
        summary: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodString>>>;
        raw: z.ZodOptional<z.ZodString>;
        floatImages: z.ZodOptional<z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>>>, boolean, string | boolean | null | undefined>>;
        citations: z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodArray<z.ZodObject<{
            id: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            htmlCitation: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            BibId: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
            readingList: z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                createdAt: z.ZodOptional<z.ZodEffects<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodDate]>>>, any, string | number | Date | null | undefined>> | z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodDate]>, Date, string | number | Date>>;
                lastUpdate: z.ZodEffects<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodDate]>>>, any, string | number | Date | null | undefined> | z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodDate]>, Date, string | number | Date>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                description: string | null;
                createdAt?: any;
                lastUpdate?: any;
            }, {
                name: string;
                description: string | null;
                createdAt?: string | number | Date | null | undefined;
                lastUpdate?: string | number | Date | null | undefined;
            }>, "many">>;
            OwnWork: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>>>, boolean, string | boolean | null | undefined>;
            ColleaguesWork: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>>>, boolean, string | boolean | null | undefined>;
            read: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>>>, boolean, string | boolean | null | undefined>;
            PdfPath: z.ZodEffects<z.ZodNullable<z.ZodOptional<z.ZodString>>, Route<RouteInferType>, string | null | undefined>;
            address: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            annote: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            author: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            booktitle: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            chapter: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            crossref: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            doi: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            edition: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            editor: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            howpublished: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            institution: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            journal: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            month: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            note: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            number: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            organization: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            pages: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            publisher: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            school: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            series: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            title: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            volume: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            type: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            year: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            numpages: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            url: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            issue: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            issn: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            abstract: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            urldate: z.ZodEffects<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, string | undefined, string | Date | null | undefined>;
            keywords: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            copyright: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            citationGroups: z.ZodDefault<z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                description?: string | null | undefined;
            }, {
                name: string;
                description?: string | null | undefined;
            }>, "many">>>;
            tags: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">;
            tempPageIndex: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            tags: ({
                value: string;
                kanbanId?: number | null | undefined;
            } | {
                value: string;
                kanbanId?: number | null | undefined;
            })[];
            readingList: {
                name: string;
                description: string | null;
                createdAt?: any;
                lastUpdate?: any;
            }[];
            OwnWork: boolean;
            ColleaguesWork: boolean;
            read: boolean;
            PdfPath: string;
            citationGroups: {
                name: string;
                description?: string | null | undefined;
            }[];
            number?: string | null | undefined;
            journal?: string | null | undefined;
            editor?: string | null | undefined;
            note?: string | null | undefined;
            abstract?: string | null | undefined;
            id?: string | null | undefined;
            type?: string | null | undefined;
            title?: string | null | undefined;
            copyright?: string | null | undefined;
            school?: string | null | undefined;
            volume?: string | null | undefined;
            keywords?: string | null | undefined;
            BibId?: number | null | undefined;
            htmlCitation?: string | null | undefined;
            address?: string | null | undefined;
            annote?: string | null | undefined;
            author?: string | null | undefined;
            booktitle?: string | null | undefined;
            chapter?: string | null | undefined;
            crossref?: string | null | undefined;
            doi?: string | null | undefined;
            edition?: string | null | undefined;
            email?: string | null | undefined;
            howpublished?: string | null | undefined;
            institution?: string | null | undefined;
            month?: string | null | undefined;
            organization?: string | null | undefined;
            pages?: string | null | undefined;
            publisher?: string | null | undefined;
            series?: string | null | undefined;
            year?: string | null | undefined;
            numpages?: string | null | undefined;
            url?: string | null | undefined;
            issue?: string | null | undefined;
            issn?: string | null | undefined;
            urldate?: string | undefined;
            tempPageIndex?: number | null | undefined;
        }, {
            tags: (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[];
            number?: string | null | undefined;
            journal?: string | null | undefined;
            editor?: string | null | undefined;
            note?: string | null | undefined;
            abstract?: string | null | undefined;
            id?: string | null | undefined;
            type?: string | null | undefined;
            title?: string | null | undefined;
            copyright?: string | null | undefined;
            school?: string | null | undefined;
            volume?: string | null | undefined;
            readingList?: {
                name: string;
                description: string | null;
                createdAt?: string | number | Date | null | undefined;
                lastUpdate?: string | number | Date | null | undefined;
            }[] | undefined;
            keywords?: string | null | undefined;
            BibId?: number | null | undefined;
            OwnWork?: string | boolean | null | undefined;
            ColleaguesWork?: string | boolean | null | undefined;
            read?: string | boolean | null | undefined;
            htmlCitation?: string | null | undefined;
            PdfPath?: string | null | undefined;
            address?: string | null | undefined;
            annote?: string | null | undefined;
            author?: string | null | undefined;
            booktitle?: string | null | undefined;
            chapter?: string | null | undefined;
            crossref?: string | null | undefined;
            doi?: string | null | undefined;
            edition?: string | null | undefined;
            email?: string | null | undefined;
            howpublished?: string | null | undefined;
            institution?: string | null | undefined;
            month?: string | null | undefined;
            organization?: string | null | undefined;
            pages?: string | null | undefined;
            publisher?: string | null | undefined;
            series?: string | null | undefined;
            year?: string | null | undefined;
            numpages?: string | null | undefined;
            url?: string | null | undefined;
            issue?: string | null | undefined;
            issn?: string | null | undefined;
            urldate?: string | Date | null | undefined;
            citationGroups?: {
                name: string;
                description?: string | null | undefined;
            }[] | undefined;
            tempPageIndex?: number | null | undefined;
        }>, "many">>>>;
        topics: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>>;
        subjects: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>>;
        definitions: z.ZodOptional<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            label: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            content: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            mdxNoteId: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            label?: string | null | undefined;
            content?: string | null | undefined;
            mdxNoteId?: number | null | undefined;
        }, {
            id: string;
            label?: string | null | undefined;
            content?: string | null | undefined;
            mdxNoteId?: number | null | undefined;
        }>, "many">>;
        tags: z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            value: z.ZodString;
            kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            value: string;
            kanbanId?: number | null | undefined;
        }, {
            value: string;
            kanbanId?: number | null | undefined;
        }>, z.ZodEffects<z.ZodString, {
            value: string;
            kanbanId?: number | null | undefined;
        }, string>]>, "many">>>>;
        quickLinkId: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodString>>>;
        href: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodString>>>;
        citationsListOrder: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodString, "many">>>;
        outgoingQuickLinks: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodString, "many">>>;
        equationIds: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodString, "many">>>;
        ftExtension: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<".mdx">, z.ZodLiteral<".md">, z.ZodLiteral<".ipynb">]>>;
        isProtected: z.ZodOptional<z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>>>, boolean, string | boolean | null | undefined>>;
        sequentialKey: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodString>>>;
        sequentialIndex: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodNumber>>>;
        frontMatter: z.ZodOptional<z.ZodOptional<z.ZodObject<{
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            created: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            updated: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            summary: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            subjects: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, string[], string | string[]>>;
            topics: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, string[], string | string[]>>;
            tags: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, string[], string | string[]>>;
            importantValues: z.ZodDefault<z.ZodArray<z.ZodNumber, "many">>;
            id: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            sequential: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
            sequentialKey: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            tableStyles: z.ZodOptional<z.ZodObject<{
                fullWidth: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>>;
                text: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodLiteral<"base">, z.ZodLiteral<"lg">, z.ZodLiteral<"xl">, z.ZodLiteral<"small">]>>>;
                math: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodLiteral<"base">, z.ZodLiteral<"lg">, z.ZodLiteral<"xl">, z.ZodLiteral<"small">]>>>;
                tableCenter: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>>;
                textCenter: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>>;
                headingCenter: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>>;
                float: z.ZodOptional<z.ZodNullable<z.ZodEnum<["right", "left"]>>>;
                noMax: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>>;
                expand: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>>;
            }, "strip", z.ZodTypeAny, {
                expand: boolean | null;
                fullWidth: boolean | null;
                tableCenter: boolean | null;
                textCenter: boolean | null;
                headingCenter: boolean | null;
                noMax: boolean | null;
                math?: "base" | "lg" | "xl" | "small" | null | undefined;
                text?: "base" | "lg" | "xl" | "small" | null | undefined;
                float?: "right" | "left" | null | undefined;
            }, {
                math?: "base" | "lg" | "xl" | "small" | null | undefined;
                expand?: boolean | null | undefined;
                text?: "base" | "lg" | "xl" | "small" | null | undefined;
                float?: "right" | "left" | null | undefined;
                fullWidth?: boolean | null | undefined;
                tableCenter?: boolean | null | undefined;
                textCenter?: boolean | null | undefined;
                headingCenter?: boolean | null | undefined;
                noMax?: boolean | null | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            tags: string[];
            topics: string[];
            subjects: string[];
            importantValues: number[];
            id?: string | null | undefined;
            summary?: string | null | undefined;
            title?: string | null | undefined;
            sequentialKey?: string | null | undefined;
            created?: string | null | undefined;
            updated?: string | null | undefined;
            sequential?: number | null | undefined;
            tableStyles?: {
                expand: boolean | null;
                fullWidth: boolean | null;
                tableCenter: boolean | null;
                textCenter: boolean | null;
                headingCenter: boolean | null;
                noMax: boolean | null;
                math?: "base" | "lg" | "xl" | "small" | null | undefined;
                text?: "base" | "lg" | "xl" | "small" | null | undefined;
                float?: "right" | "left" | null | undefined;
            } | undefined;
        }, {
            id?: string | null | undefined;
            summary?: string | null | undefined;
            title?: string | null | undefined;
            tags?: string | string[] | undefined;
            topics?: string | string[] | undefined;
            subjects?: string | string[] | undefined;
            importantValues?: number[] | undefined;
            sequentialKey?: string | null | undefined;
            created?: string | null | undefined;
            updated?: string | null | undefined;
            sequential?: number | null | undefined;
            tableStyles?: {
                math?: "base" | "lg" | "xl" | "small" | null | undefined;
                expand?: boolean | null | undefined;
                text?: "base" | "lg" | "xl" | "small" | null | undefined;
                float?: "right" | "left" | null | undefined;
                fullWidth?: boolean | null | undefined;
                tableCenter?: boolean | null | undefined;
                textCenter?: boolean | null | undefined;
                headingCenter?: boolean | null | undefined;
                noMax?: boolean | null | undefined;
            } | undefined;
        }>>>;
        remoteUrl: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodString>>>;
        trackRemote: z.ZodOptional<z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>>>, boolean, string | boolean | null | undefined>>;
        noteType: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
        bookmarked: z.ZodOptional<z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>>>, boolean, string | boolean | null | undefined>>;
        lastSync: z.ZodOptional<z.ZodEffects<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodDate]>>>, any, string | number | Date | null | undefined> | z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodDate]>, Date, string | number | Date>>;
        firstSync: z.ZodOptional<z.ZodEffects<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodDate]>>>, any, string | number | Date | null | undefined> | z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodDate]>, Date, string | number | Date>>;
        rootRelativePath: z.ZodOptional<z.ZodString>;
        formatted: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodString>>>;
        importantValues: z.ZodOptional<z.ZodDefault<z.ZodArray<z.ZodNumber, "many">>>;
        saveFormatted: z.ZodOptional<z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>>>, boolean, string | boolean | null | undefined>>;
        imageSrc: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodString>>>;
    }, "strip", z.ZodTypeAny, {
        id?: number | undefined;
        href?: string | null | undefined;
        summary?: string | null | undefined;
        title?: string | undefined;
        tags?: ({
            value: string;
            kanbanId?: number | null | undefined;
        } | {
            value: string;
            kanbanId?: number | null | undefined;
        })[] | undefined;
        noteType?: string | undefined;
        topics?: {
            value: string;
        }[] | undefined;
        subjects?: {
            value: string;
        }[] | undefined;
        firstSync?: any;
        lastSync?: any;
        isProtected?: boolean | undefined;
        latexTitle?: string | null | undefined;
        rootRelativePath?: string | undefined;
        formatted?: string | null | undefined;
        citationsListOrder?: string[] | undefined;
        importantValues?: number[] | undefined;
        imageSrc?: string | null | undefined;
        sequentialKey?: string | null | undefined;
        sequentialIndex?: number | null | undefined;
        floatImages?: boolean | undefined;
        remoteUrl?: string | null | undefined;
        trackRemote?: boolean | undefined;
        outgoingQuickLinks?: string[] | undefined;
        bookmarked?: boolean | undefined;
        citations?: {
            tags: ({
                value: string;
                kanbanId?: number | null | undefined;
            } | {
                value: string;
                kanbanId?: number | null | undefined;
            })[];
            readingList: {
                name: string;
                description: string | null;
                createdAt?: any;
                lastUpdate?: any;
            }[];
            OwnWork: boolean;
            ColleaguesWork: boolean;
            read: boolean;
            PdfPath: string;
            citationGroups: {
                name: string;
                description?: string | null | undefined;
            }[];
            number?: string | null | undefined;
            journal?: string | null | undefined;
            editor?: string | null | undefined;
            note?: string | null | undefined;
            abstract?: string | null | undefined;
            id?: string | null | undefined;
            type?: string | null | undefined;
            title?: string | null | undefined;
            copyright?: string | null | undefined;
            school?: string | null | undefined;
            volume?: string | null | undefined;
            keywords?: string | null | undefined;
            BibId?: number | null | undefined;
            htmlCitation?: string | null | undefined;
            address?: string | null | undefined;
            annote?: string | null | undefined;
            author?: string | null | undefined;
            booktitle?: string | null | undefined;
            chapter?: string | null | undefined;
            crossref?: string | null | undefined;
            doi?: string | null | undefined;
            edition?: string | null | undefined;
            email?: string | null | undefined;
            howpublished?: string | null | undefined;
            institution?: string | null | undefined;
            month?: string | null | undefined;
            organization?: string | null | undefined;
            pages?: string | null | undefined;
            publisher?: string | null | undefined;
            series?: string | null | undefined;
            year?: string | null | undefined;
            numpages?: string | null | undefined;
            url?: string | null | undefined;
            issue?: string | null | undefined;
            issn?: string | null | undefined;
            urldate?: string | undefined;
            tempPageIndex?: number | null | undefined;
        }[] | undefined;
        definitions?: {
            id: string;
            label?: string | null | undefined;
            content?: string | null | undefined;
            mdxNoteId?: number | null | undefined;
        }[] | undefined;
        raw?: string | undefined;
        quickLinkId?: string | null | undefined;
        equationIds?: string[] | undefined;
        saveFormatted?: boolean | undefined;
        frontMatter?: {
            tags: string[];
            topics: string[];
            subjects: string[];
            importantValues: number[];
            id?: string | null | undefined;
            summary?: string | null | undefined;
            title?: string | null | undefined;
            sequentialKey?: string | null | undefined;
            created?: string | null | undefined;
            updated?: string | null | undefined;
            sequential?: number | null | undefined;
            tableStyles?: {
                expand: boolean | null;
                fullWidth: boolean | null;
                tableCenter: boolean | null;
                textCenter: boolean | null;
                headingCenter: boolean | null;
                noMax: boolean | null;
                math?: "base" | "lg" | "xl" | "small" | null | undefined;
                text?: "base" | "lg" | "xl" | "small" | null | undefined;
                float?: "right" | "left" | null | undefined;
            } | undefined;
        } | undefined;
        ftExtension?: ".md" | ".mdx" | ".ipynb" | undefined;
    }, {
        id?: number | undefined;
        href?: string | null | undefined;
        summary?: string | null | undefined;
        title?: string | undefined;
        tags?: (string | {
            value: string;
            kanbanId?: number | null | undefined;
        })[] | undefined;
        noteType?: string | undefined;
        topics?: {
            value: string;
        }[] | undefined;
        subjects?: {
            value: string;
        }[] | undefined;
        firstSync?: string | number | Date | null | undefined;
        lastSync?: string | number | Date | null | undefined;
        isProtected?: string | boolean | null | undefined;
        latexTitle?: string | null | undefined;
        rootRelativePath?: string | undefined;
        formatted?: string | null | undefined;
        citationsListOrder?: string[] | undefined;
        importantValues?: number[] | undefined;
        imageSrc?: string | null | undefined;
        sequentialKey?: string | null | undefined;
        sequentialIndex?: number | null | undefined;
        floatImages?: string | boolean | null | undefined;
        remoteUrl?: string | null | undefined;
        trackRemote?: string | boolean | null | undefined;
        outgoingQuickLinks?: string[] | undefined;
        bookmarked?: string | boolean | null | undefined;
        citations?: {
            tags: (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[];
            number?: string | null | undefined;
            journal?: string | null | undefined;
            editor?: string | null | undefined;
            note?: string | null | undefined;
            abstract?: string | null | undefined;
            id?: string | null | undefined;
            type?: string | null | undefined;
            title?: string | null | undefined;
            copyright?: string | null | undefined;
            school?: string | null | undefined;
            volume?: string | null | undefined;
            readingList?: {
                name: string;
                description: string | null;
                createdAt?: string | number | Date | null | undefined;
                lastUpdate?: string | number | Date | null | undefined;
            }[] | undefined;
            keywords?: string | null | undefined;
            BibId?: number | null | undefined;
            OwnWork?: string | boolean | null | undefined;
            ColleaguesWork?: string | boolean | null | undefined;
            read?: string | boolean | null | undefined;
            htmlCitation?: string | null | undefined;
            PdfPath?: string | null | undefined;
            address?: string | null | undefined;
            annote?: string | null | undefined;
            author?: string | null | undefined;
            booktitle?: string | null | undefined;
            chapter?: string | null | undefined;
            crossref?: string | null | undefined;
            doi?: string | null | undefined;
            edition?: string | null | undefined;
            email?: string | null | undefined;
            howpublished?: string | null | undefined;
            institution?: string | null | undefined;
            month?: string | null | undefined;
            organization?: string | null | undefined;
            pages?: string | null | undefined;
            publisher?: string | null | undefined;
            series?: string | null | undefined;
            year?: string | null | undefined;
            numpages?: string | null | undefined;
            url?: string | null | undefined;
            issue?: string | null | undefined;
            issn?: string | null | undefined;
            urldate?: string | Date | null | undefined;
            citationGroups?: {
                name: string;
                description?: string | null | undefined;
            }[] | undefined;
            tempPageIndex?: number | null | undefined;
        }[] | undefined;
        definitions?: {
            id: string;
            label?: string | null | undefined;
            content?: string | null | undefined;
            mdxNoteId?: number | null | undefined;
        }[] | undefined;
        raw?: string | undefined;
        quickLinkId?: string | null | undefined;
        equationIds?: string[] | undefined;
        saveFormatted?: string | boolean | null | undefined;
        frontMatter?: {
            id?: string | null | undefined;
            summary?: string | null | undefined;
            title?: string | null | undefined;
            tags?: string | string[] | undefined;
            topics?: string | string[] | undefined;
            subjects?: string | string[] | undefined;
            importantValues?: number[] | undefined;
            sequentialKey?: string | null | undefined;
            created?: string | null | undefined;
            updated?: string | null | undefined;
            sequential?: number | null | undefined;
            tableStyles?: {
                math?: "base" | "lg" | "xl" | "small" | null | undefined;
                expand?: boolean | null | undefined;
                text?: "base" | "lg" | "xl" | "small" | null | undefined;
                float?: "right" | "left" | null | undefined;
                fullWidth?: boolean | null | undefined;
                tableCenter?: boolean | null | undefined;
                textCenter?: boolean | null | undefined;
                headingCenter?: boolean | null | undefined;
                noMax?: boolean | null | undefined;
            } | undefined;
        } | undefined;
        ftExtension?: ".md" | ".mdx" | ".ipynb" | undefined;
    }>;
    export const mdxNoteWithParsedLatex: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodOptional<z.ZodNumber>;
        title: z.ZodString;
        latexTitle: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        summary: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        raw: z.ZodString;
        floatImages: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>>>, boolean, string | boolean | null | undefined>;
        citations: z.ZodDefault<z.ZodOptional<z.ZodArray<z.ZodObject<{
            id: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            htmlCitation: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            BibId: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
            readingList: z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                createdAt: z.ZodOptional<z.ZodEffects<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodDate]>>>, any, string | number | Date | null | undefined>> | z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodDate]>, Date, string | number | Date>>;
                lastUpdate: z.ZodEffects<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodDate]>>>, any, string | number | Date | null | undefined> | z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodDate]>, Date, string | number | Date>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                description: string | null;
                createdAt?: any;
                lastUpdate?: any;
            }, {
                name: string;
                description: string | null;
                createdAt?: string | number | Date | null | undefined;
                lastUpdate?: string | number | Date | null | undefined;
            }>, "many">>;
            OwnWork: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>>>, boolean, string | boolean | null | undefined>;
            ColleaguesWork: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>>>, boolean, string | boolean | null | undefined>;
            read: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>>>, boolean, string | boolean | null | undefined>;
            PdfPath: z.ZodEffects<z.ZodNullable<z.ZodOptional<z.ZodString>>, Route<RouteInferType>, string | null | undefined>;
            address: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            annote: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            author: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            booktitle: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            chapter: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            crossref: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            doi: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            edition: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            editor: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            howpublished: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            institution: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            journal: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            month: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            note: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            number: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            organization: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            pages: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            publisher: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            school: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            series: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            title: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            volume: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            type: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            year: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            numpages: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            url: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            issue: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            issn: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            abstract: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            urldate: z.ZodEffects<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, string | undefined, string | Date | null | undefined>;
            keywords: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            copyright: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            citationGroups: z.ZodDefault<z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                description?: string | null | undefined;
            }, {
                name: string;
                description?: string | null | undefined;
            }>, "many">>>;
            tags: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">;
            tempPageIndex: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            tags: ({
                value: string;
                kanbanId?: number | null | undefined;
            } | {
                value: string;
                kanbanId?: number | null | undefined;
            })[];
            readingList: {
                name: string;
                description: string | null;
                createdAt?: any;
                lastUpdate?: any;
            }[];
            OwnWork: boolean;
            ColleaguesWork: boolean;
            read: boolean;
            PdfPath: string;
            citationGroups: {
                name: string;
                description?: string | null | undefined;
            }[];
            number?: string | null | undefined;
            journal?: string | null | undefined;
            editor?: string | null | undefined;
            note?: string | null | undefined;
            abstract?: string | null | undefined;
            id?: string | null | undefined;
            type?: string | null | undefined;
            title?: string | null | undefined;
            copyright?: string | null | undefined;
            school?: string | null | undefined;
            volume?: string | null | undefined;
            keywords?: string | null | undefined;
            BibId?: number | null | undefined;
            htmlCitation?: string | null | undefined;
            address?: string | null | undefined;
            annote?: string | null | undefined;
            author?: string | null | undefined;
            booktitle?: string | null | undefined;
            chapter?: string | null | undefined;
            crossref?: string | null | undefined;
            doi?: string | null | undefined;
            edition?: string | null | undefined;
            email?: string | null | undefined;
            howpublished?: string | null | undefined;
            institution?: string | null | undefined;
            month?: string | null | undefined;
            organization?: string | null | undefined;
            pages?: string | null | undefined;
            publisher?: string | null | undefined;
            series?: string | null | undefined;
            year?: string | null | undefined;
            numpages?: string | null | undefined;
            url?: string | null | undefined;
            issue?: string | null | undefined;
            issn?: string | null | undefined;
            urldate?: string | undefined;
            tempPageIndex?: number | null | undefined;
        }, {
            tags: (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[];
            number?: string | null | undefined;
            journal?: string | null | undefined;
            editor?: string | null | undefined;
            note?: string | null | undefined;
            abstract?: string | null | undefined;
            id?: string | null | undefined;
            type?: string | null | undefined;
            title?: string | null | undefined;
            copyright?: string | null | undefined;
            school?: string | null | undefined;
            volume?: string | null | undefined;
            readingList?: {
                name: string;
                description: string | null;
                createdAt?: string | number | Date | null | undefined;
                lastUpdate?: string | number | Date | null | undefined;
            }[] | undefined;
            keywords?: string | null | undefined;
            BibId?: number | null | undefined;
            OwnWork?: string | boolean | null | undefined;
            ColleaguesWork?: string | boolean | null | undefined;
            read?: string | boolean | null | undefined;
            htmlCitation?: string | null | undefined;
            PdfPath?: string | null | undefined;
            address?: string | null | undefined;
            annote?: string | null | undefined;
            author?: string | null | undefined;
            booktitle?: string | null | undefined;
            chapter?: string | null | undefined;
            crossref?: string | null | undefined;
            doi?: string | null | undefined;
            edition?: string | null | undefined;
            email?: string | null | undefined;
            howpublished?: string | null | undefined;
            institution?: string | null | undefined;
            month?: string | null | undefined;
            organization?: string | null | undefined;
            pages?: string | null | undefined;
            publisher?: string | null | undefined;
            series?: string | null | undefined;
            year?: string | null | undefined;
            numpages?: string | null | undefined;
            url?: string | null | undefined;
            issue?: string | null | undefined;
            issn?: string | null | undefined;
            urldate?: string | Date | null | undefined;
            citationGroups?: {
                name: string;
                description?: string | null | undefined;
            }[] | undefined;
            tempPageIndex?: number | null | undefined;
        }>, "many">>>;
        topics: z.ZodOptional<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>;
        subjects: z.ZodOptional<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>;
        definitions: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            label: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            content: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            mdxNoteId: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            label?: string | null | undefined;
            content?: string | null | undefined;
            mdxNoteId?: number | null | undefined;
        }, {
            id: string;
            label?: string | null | undefined;
            content?: string | null | undefined;
            mdxNoteId?: number | null | undefined;
        }>, "many">;
        tags: z.ZodDefault<z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            value: z.ZodString;
            kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            value: string;
            kanbanId?: number | null | undefined;
        }, {
            value: string;
            kanbanId?: number | null | undefined;
        }>, z.ZodEffects<z.ZodString, {
            value: string;
            kanbanId?: number | null | undefined;
        }, string>]>, "many">>>;
        quickLinkId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        href: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        citationsListOrder: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        outgoingQuickLinks: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        equationIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        ftExtension: z.ZodUnion<[z.ZodLiteral<".mdx">, z.ZodLiteral<".md">, z.ZodLiteral<".ipynb">]>;
        isProtected: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>>>, boolean, string | boolean | null | undefined>;
        sequentialKey: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        sequentialIndex: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
        frontMatter: z.ZodOptional<z.ZodObject<{
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            created: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            updated: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            summary: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            subjects: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, string[], string | string[]>>;
            topics: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, string[], string | string[]>>;
            tags: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>, string[], string | string[]>>;
            importantValues: z.ZodDefault<z.ZodArray<z.ZodNumber, "many">>;
            id: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            sequential: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
            sequentialKey: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            tableStyles: z.ZodOptional<z.ZodObject<{
                fullWidth: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>>;
                text: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodLiteral<"base">, z.ZodLiteral<"lg">, z.ZodLiteral<"xl">, z.ZodLiteral<"small">]>>>;
                math: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodLiteral<"base">, z.ZodLiteral<"lg">, z.ZodLiteral<"xl">, z.ZodLiteral<"small">]>>>;
                tableCenter: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>>;
                textCenter: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>>;
                headingCenter: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>>;
                float: z.ZodOptional<z.ZodNullable<z.ZodEnum<["right", "left"]>>>;
                noMax: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>>;
                expand: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>>;
            }, "strip", z.ZodTypeAny, {
                expand: boolean | null;
                fullWidth: boolean | null;
                tableCenter: boolean | null;
                textCenter: boolean | null;
                headingCenter: boolean | null;
                noMax: boolean | null;
                math?: "base" | "lg" | "xl" | "small" | null | undefined;
                text?: "base" | "lg" | "xl" | "small" | null | undefined;
                float?: "right" | "left" | null | undefined;
            }, {
                math?: "base" | "lg" | "xl" | "small" | null | undefined;
                expand?: boolean | null | undefined;
                text?: "base" | "lg" | "xl" | "small" | null | undefined;
                float?: "right" | "left" | null | undefined;
                fullWidth?: boolean | null | undefined;
                tableCenter?: boolean | null | undefined;
                textCenter?: boolean | null | undefined;
                headingCenter?: boolean | null | undefined;
                noMax?: boolean | null | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            tags: string[];
            topics: string[];
            subjects: string[];
            importantValues: number[];
            id?: string | null | undefined;
            summary?: string | null | undefined;
            title?: string | null | undefined;
            sequentialKey?: string | null | undefined;
            created?: string | null | undefined;
            updated?: string | null | undefined;
            sequential?: number | null | undefined;
            tableStyles?: {
                expand: boolean | null;
                fullWidth: boolean | null;
                tableCenter: boolean | null;
                textCenter: boolean | null;
                headingCenter: boolean | null;
                noMax: boolean | null;
                math?: "base" | "lg" | "xl" | "small" | null | undefined;
                text?: "base" | "lg" | "xl" | "small" | null | undefined;
                float?: "right" | "left" | null | undefined;
            } | undefined;
        }, {
            id?: string | null | undefined;
            summary?: string | null | undefined;
            title?: string | null | undefined;
            tags?: string | string[] | undefined;
            topics?: string | string[] | undefined;
            subjects?: string | string[] | undefined;
            importantValues?: number[] | undefined;
            sequentialKey?: string | null | undefined;
            created?: string | null | undefined;
            updated?: string | null | undefined;
            sequential?: number | null | undefined;
            tableStyles?: {
                math?: "base" | "lg" | "xl" | "small" | null | undefined;
                expand?: boolean | null | undefined;
                text?: "base" | "lg" | "xl" | "small" | null | undefined;
                float?: "right" | "left" | null | undefined;
                fullWidth?: boolean | null | undefined;
                tableCenter?: boolean | null | undefined;
                textCenter?: boolean | null | undefined;
                headingCenter?: boolean | null | undefined;
                noMax?: boolean | null | undefined;
            } | undefined;
        }>>;
        remoteUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        trackRemote: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>>>, boolean, string | boolean | null | undefined>;
        noteType: z.ZodEffects<z.ZodString, string, string>;
        bookmarked: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>>>, boolean, string | boolean | null | undefined>;
        lastSync: z.ZodEffects<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodDate]>>>, any, string | number | Date | null | undefined> | z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodDate]>, Date, string | number | Date>;
        firstSync: z.ZodEffects<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodDate]>>>, any, string | number | Date | null | undefined> | z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodDate]>, Date, string | number | Date>;
        rootRelativePath: z.ZodString;
        formatted: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        importantValues: z.ZodDefault<z.ZodArray<z.ZodNumber, "many">>;
        saveFormatted: z.ZodEffects<z.ZodDefault<z.ZodNullable<z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>>>, boolean, string | boolean | null | undefined>;
        imageSrc: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    }, {
        title: z.ZodString;
        summary: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    }>, "strip", z.ZodTypeAny, {
        title: string;
        tags: ({
            value: string;
            kanbanId?: number | null | undefined;
        } | {
            value: string;
            kanbanId?: number | null | undefined;
        })[];
        noteType: string;
        isProtected: boolean;
        rootRelativePath: string;
        importantValues: number[];
        floatImages: boolean;
        trackRemote: boolean;
        bookmarked: boolean;
        citations: {
            tags: ({
                value: string;
                kanbanId?: number | null | undefined;
            } | {
                value: string;
                kanbanId?: number | null | undefined;
            })[];
            readingList: {
                name: string;
                description: string | null;
                createdAt?: any;
                lastUpdate?: any;
            }[];
            OwnWork: boolean;
            ColleaguesWork: boolean;
            read: boolean;
            PdfPath: string;
            citationGroups: {
                name: string;
                description?: string | null | undefined;
            }[];
            number?: string | null | undefined;
            journal?: string | null | undefined;
            editor?: string | null | undefined;
            note?: string | null | undefined;
            abstract?: string | null | undefined;
            id?: string | null | undefined;
            type?: string | null | undefined;
            title?: string | null | undefined;
            copyright?: string | null | undefined;
            school?: string | null | undefined;
            volume?: string | null | undefined;
            keywords?: string | null | undefined;
            BibId?: number | null | undefined;
            htmlCitation?: string | null | undefined;
            address?: string | null | undefined;
            annote?: string | null | undefined;
            author?: string | null | undefined;
            booktitle?: string | null | undefined;
            chapter?: string | null | undefined;
            crossref?: string | null | undefined;
            doi?: string | null | undefined;
            edition?: string | null | undefined;
            email?: string | null | undefined;
            howpublished?: string | null | undefined;
            institution?: string | null | undefined;
            month?: string | null | undefined;
            organization?: string | null | undefined;
            pages?: string | null | undefined;
            publisher?: string | null | undefined;
            series?: string | null | undefined;
            year?: string | null | undefined;
            numpages?: string | null | undefined;
            url?: string | null | undefined;
            issue?: string | null | undefined;
            issn?: string | null | undefined;
            urldate?: string | undefined;
            tempPageIndex?: number | null | undefined;
        }[];
        definitions: {
            id: string;
            label?: string | null | undefined;
            content?: string | null | undefined;
            mdxNoteId?: number | null | undefined;
        }[];
        raw: string;
        saveFormatted: boolean;
        ftExtension: ".md" | ".mdx" | ".ipynb";
        id?: number | undefined;
        href?: string | null | undefined;
        summary?: string | null | undefined;
        topics?: {
            value: string;
        }[] | undefined;
        subjects?: {
            value: string;
        }[] | undefined;
        firstSync?: any;
        lastSync?: any;
        latexTitle?: string | null | undefined;
        formatted?: string | null | undefined;
        citationsListOrder?: string[] | undefined;
        imageSrc?: string | null | undefined;
        sequentialKey?: string | null | undefined;
        sequentialIndex?: number | null | undefined;
        remoteUrl?: string | null | undefined;
        outgoingQuickLinks?: string[] | undefined;
        quickLinkId?: string | null | undefined;
        equationIds?: string[] | undefined;
        frontMatter?: {
            tags: string[];
            topics: string[];
            subjects: string[];
            importantValues: number[];
            id?: string | null | undefined;
            summary?: string | null | undefined;
            title?: string | null | undefined;
            sequentialKey?: string | null | undefined;
            created?: string | null | undefined;
            updated?: string | null | undefined;
            sequential?: number | null | undefined;
            tableStyles?: {
                expand: boolean | null;
                fullWidth: boolean | null;
                tableCenter: boolean | null;
                textCenter: boolean | null;
                headingCenter: boolean | null;
                noMax: boolean | null;
                math?: "base" | "lg" | "xl" | "small" | null | undefined;
                text?: "base" | "lg" | "xl" | "small" | null | undefined;
                float?: "right" | "left" | null | undefined;
            } | undefined;
        } | undefined;
    }, {
        title: string;
        noteType: string;
        rootRelativePath: string;
        definitions: {
            id: string;
            label?: string | null | undefined;
            content?: string | null | undefined;
            mdxNoteId?: number | null | undefined;
        }[];
        raw: string;
        ftExtension: ".md" | ".mdx" | ".ipynb";
        id?: number | undefined;
        href?: string | null | undefined;
        summary?: string | null | undefined;
        tags?: (string | {
            value: string;
            kanbanId?: number | null | undefined;
        })[] | undefined;
        topics?: {
            value: string;
        }[] | undefined;
        subjects?: {
            value: string;
        }[] | undefined;
        firstSync?: string | number | Date | null | undefined;
        lastSync?: string | number | Date | null | undefined;
        isProtected?: string | boolean | null | undefined;
        latexTitle?: string | null | undefined;
        formatted?: string | null | undefined;
        citationsListOrder?: string[] | undefined;
        importantValues?: number[] | undefined;
        imageSrc?: string | null | undefined;
        sequentialKey?: string | null | undefined;
        sequentialIndex?: number | null | undefined;
        floatImages?: string | boolean | null | undefined;
        remoteUrl?: string | null | undefined;
        trackRemote?: string | boolean | null | undefined;
        outgoingQuickLinks?: string[] | undefined;
        bookmarked?: string | boolean | null | undefined;
        citations?: {
            tags: (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[];
            number?: string | null | undefined;
            journal?: string | null | undefined;
            editor?: string | null | undefined;
            note?: string | null | undefined;
            abstract?: string | null | undefined;
            id?: string | null | undefined;
            type?: string | null | undefined;
            title?: string | null | undefined;
            copyright?: string | null | undefined;
            school?: string | null | undefined;
            volume?: string | null | undefined;
            readingList?: {
                name: string;
                description: string | null;
                createdAt?: string | number | Date | null | undefined;
                lastUpdate?: string | number | Date | null | undefined;
            }[] | undefined;
            keywords?: string | null | undefined;
            BibId?: number | null | undefined;
            OwnWork?: string | boolean | null | undefined;
            ColleaguesWork?: string | boolean | null | undefined;
            read?: string | boolean | null | undefined;
            htmlCitation?: string | null | undefined;
            PdfPath?: string | null | undefined;
            address?: string | null | undefined;
            annote?: string | null | undefined;
            author?: string | null | undefined;
            booktitle?: string | null | undefined;
            chapter?: string | null | undefined;
            crossref?: string | null | undefined;
            doi?: string | null | undefined;
            edition?: string | null | undefined;
            email?: string | null | undefined;
            howpublished?: string | null | undefined;
            institution?: string | null | undefined;
            month?: string | null | undefined;
            organization?: string | null | undefined;
            pages?: string | null | undefined;
            publisher?: string | null | undefined;
            series?: string | null | undefined;
            year?: string | null | undefined;
            numpages?: string | null | undefined;
            url?: string | null | undefined;
            issue?: string | null | undefined;
            issn?: string | null | undefined;
            urldate?: string | Date | null | undefined;
            citationGroups?: {
                name: string;
                description?: string | null | undefined;
            }[] | undefined;
            tempPageIndex?: number | null | undefined;
        }[] | undefined;
        quickLinkId?: string | null | undefined;
        equationIds?: string[] | undefined;
        saveFormatted?: string | boolean | null | undefined;
        frontMatter?: {
            id?: string | null | undefined;
            summary?: string | null | undefined;
            title?: string | null | undefined;
            tags?: string | string[] | undefined;
            topics?: string | string[] | undefined;
            subjects?: string | string[] | undefined;
            importantValues?: number[] | undefined;
            sequentialKey?: string | null | undefined;
            created?: string | null | undefined;
            updated?: string | null | undefined;
            sequential?: number | null | undefined;
            tableStyles?: {
                math?: "base" | "lg" | "xl" | "small" | null | undefined;
                expand?: boolean | null | undefined;
                text?: "base" | "lg" | "xl" | "small" | null | undefined;
                float?: "right" | "left" | null | undefined;
                fullWidth?: boolean | null | undefined;
                tableCenter?: boolean | null | undefined;
                textCenter?: boolean | null | undefined;
                headingCenter?: boolean | null | undefined;
                noMax?: boolean | null | undefined;
            } | undefined;
        } | undefined;
    }>;
    export type MdxNotePlainObject = z.input<typeof mdxNoteZodObject>;
    export type ParsedMdxOutput = z.output<typeof mdxNoteWithParsedLatex>;
    export type ParseMdxInput = z.input<typeof mdxNoteWithParsedLatex>;
    export type BibEntryZodInput = z.input<typeof bibEntryZodObject>;
}
declare module "trpcInternalMethods/settings/autoSettings/getFlattenedAutoSettings" {
    import { ParsedAppConfig } from "@ulld/configschema/types";
    import { AutoSettingWithRegex } from "../../../trpc/types";
    export const getFlatAutoSettings: (autoSettings: AutoSettingWithRegex[], _config?: ParsedAppConfig) => {
        autoTags: {
            glob: string;
            value: string;
        }[];
        autoTopics: {
            glob: string;
            value: string;
        }[];
        autoSubjects: {
            glob: string;
            value: string;
        }[];
    };
}
declare module "trpcInternalMethods/settings/autoSettings/globDoesMatch" {
    import type { MinimalParsableAppConfigOutput } from "@ulld/configschema/types";
    import type { WithRequired } from "@ulld/utilities/types";
    export const globDoesMatch: (glob: string, path: string, _config: WithRequired<MinimalParsableAppConfigOutput, "fsRoot">) => boolean;
}
declare module "classes/data/calendarAndDate" {
    import dayjs from 'dayjs';
    import { ParsedAppConfig } from '@ulld/configschema/types';
    export class CalendarAndDateManager {
        constructor(_config?: ParsedAppConfig);
        getTimezone(): string;
        startOfDay(): dayjs.Dayjs;
        dayOfWeek(): number;
        static formatDate(d: Date | string | number, withTime?: boolean): string;
        static formattedQuantityToString(d: {
            hours: number;
            minutes: number;
            seconds: number;
        }): string;
        static formattedQuantityToDescriptiveString(d: {
            hours: number;
            minutes: number;
            seconds: number;
        }): string;
        static formatTimeQuantity(seconds: number): {
            hours: number;
            minutes: number;
            seconds: number;
        };
    }
    export const ensureDate: <T extends Date | null | undefined>(d: Date | string | undefined | null, _default?: "item" | "null" | "now" | "undefined") => Date | T;
}
declare module "trpc/batchLink" {
    export const httpBatchLink: (ctx?: any) => import("@trpc/client").TRPCLink<import("@trpc/server").AnyRouter>[];
}
declare module "trpc/client" {
    export const trpcReactClient: any;
    export const client: {
        autoSettings: {
            setAutoSettingsFromConfig: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, void>>;
            };
            getAutoSettings: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        type?: "tag" | "topic" | "subject" | undefined;
                        withRegex?: boolean | undefined;
                    };
                    _input_out: {
                        withRegex: boolean;
                        type?: "tag" | "topic" | "subject" | undefined;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, import("trpc/types").AutoSettingWithRegex[] | {
                    id?: number;
                    glob: string;
                    value: string;
                    type: import(".prisma/client").autoSetting;
                }[] | undefined>>;
            };
            deleteAutoSettingById: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: number;
                    _input_out: number;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                    type: import(".prisma/client").$Enums.autoSetting;
                    glob: string;
                    value: string;
                }>>;
            };
            addAutoSetting: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        type: "tag" | "topic" | "subject";
                        value: string;
                        glob: string;
                        id?: number | undefined;
                    };
                    _input_out: {
                        type: "tag" | "topic" | "subject";
                        value: string;
                        glob: string;
                        id?: number | undefined;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                    type: import(".prisma/client").$Enums.autoSetting;
                    glob: string;
                    value: string;
                }>>;
            };
        };
        sync: {
            backupNonFileSystemDB: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, void>>;
            };
        };
        toDo: {
            getToDoLists: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: number | undefined;
                    _input_out: number | undefined;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                    label: string;
                    active: boolean;
                } | {
                    id: number;
                    label: string;
                    active: boolean;
                }[]>>;
            };
            getToDoListById: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: number;
                    _input_out: number;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    topics: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    subjects: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                } & {
                    id: number;
                    label: string;
                    createdAt: Date;
                    lastUpdate: Date;
                    lastAccess: Date;
                }) | null>>;
            };
            getToDos: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        listIds?: string | number | string[] | number[] | undefined;
                        showCompleted?: string | boolean | undefined;
                    };
                    _input_out: {
                        showCompleted: boolean;
                        listIds?: number[] | undefined;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    todos: {
                        topic: {
                            value: string;
                        }[];
                        subject: {
                            value: string;
                        }[];
                        id: number;
                        label: string;
                        tags: ({
                            value: string;
                            kanbanId?: number | null | undefined;
                        } | {
                            value: string;
                            kanbanId?: number | null | undefined;
                        })[];
                        _count: {
                            topic: number;
                            subject: number;
                            tags: number;
                            tasks: number;
                        };
                        tasks: {
                            id: number;
                            bookmarked: boolean;
                            status: string;
                            task: string;
                            priority: number;
                            createdAt?: any;
                            dueAt?: any;
                            details?: string | null | undefined;
                            parentId?: number | null | undefined;
                            category?: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper" | null | undefined;
                            toDoListId?: number | null | undefined;
                            completedOn?: any;
                        }[];
                        createdAt?: any;
                        lastUpdate?: any;
                    }[];
                    lists: {
                        id: number;
                        label: string;
                        active: boolean;
                    }[];
                }>>;
            };
            setToDoStatus: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        status: string;
                        taskIds: number[];
                    };
                    _input_out: {
                        status: string;
                        taskIds: number[];
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, import(".prisma/client").Prisma.BatchPayload>>;
            };
            findListsByTaggables: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        tags?: string[] | undefined;
                        topics?: string[] | undefined;
                        subjects?: string[] | undefined;
                    };
                    _input_out: {
                        tags: string[];
                        topics: string[];
                        subjects: string[];
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    createdAt: string;
                    tasks: {
                        dueAt: string | null;
                        createdAt: string;
                        details: string | null;
                        category: import(".prisma/client").$Enums.TaskCategory | null;
                    }[];
                    id: number;
                    label: string;
                    _count: {
                        tasks: number;
                    };
                }[]>>;
            };
            getOverdueTasksByListId: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: number;
                    _input_out: number;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    _count: {
                        tasks: number;
                    };
                    tasks: {
                        id: number;
                        createdAt: Date;
                        task: string;
                        dueAt: Date | null;
                        details: string | null;
                        parentId: number | null;
                        category: import(".prisma/client").$Enums.TaskCategory | null;
                        bookmarked: boolean;
                        status: string;
                        priority: number;
                        toDoListId: number | null;
                        completedOn: Date | null;
                    }[];
                } | null>>;
            };
            getOverdueTaskCount: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, number>>;
            };
            getOverdueTasks: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, {
                    id: number;
                    createdAt: Date;
                    task: string;
                    dueAt: Date | null;
                    details: string | null;
                    parentId: number | null;
                    category: import(".prisma/client").$Enums.TaskCategory | null;
                    bookmarked: boolean;
                    status: string;
                    priority: number;
                    toDoListId: number | null;
                    completedOn: Date | null;
                }[]>>;
            };
            setToDoDueDate: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        dueAt: string | Date | null;
                        taskIds: number[];
                    };
                    _input_out: {
                        dueAt: Date | null;
                        taskIds: number[];
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, import(".prisma/client").Prisma.BatchPayload>>;
            };
            setToDoList: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        taskId: number;
                        listId: number;
                    };
                    _input_out: {
                        taskId: number;
                        listId: number;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, import(".prisma/client").Prisma.BatchPayload>>;
            };
            deleteTaskByIds: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string | number | string[] | number[] | undefined;
                    _input_out: number[];
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, import(".prisma/client").Prisma.BatchPayload>>;
            };
            toggleToDoBookmark: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        taskId: number;
                        shouldBookmark?: boolean | undefined;
                    };
                    _input_out: {
                        taskId: number;
                        shouldBookmark?: boolean | undefined;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, import(".prisma/client").Prisma.BatchPayload>>;
            };
            setToDoPriority: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        priority: number;
                        taskIds: number[];
                    };
                    _input_out: {
                        priority: number;
                        taskIds: number[];
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, import(".prisma/client").Prisma.BatchPayload>>;
            };
            getToDoDetails: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        toDoId: number;
                    };
                    _input_out: {
                        toDoId: number;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    topics: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                } & {
                    id: number;
                    createdAt: Date;
                    task: string;
                    dueAt: Date | null;
                    details: string | null;
                    parentId: number | null;
                    category: import(".prisma/client").$Enums.TaskCategory | null;
                    bookmarked: boolean;
                    status: string;
                    priority: number;
                    toDoListId: number | null;
                    completedOn: Date | null;
                }) | null>>;
            };
            createNewTodoList: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        label: string;
                        tags: string[];
                        topics: string[];
                        subjects: string[];
                    };
                    _input_out: {
                        label: string;
                        tags: string[];
                        topics: string[];
                        subjects: string[];
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                    label: string;
                    createdAt: Date;
                    lastUpdate: Date;
                    lastAccess: Date;
                } | {
                    errorKey: "toDoListExists";
                }>>;
            };
            createNewToDo: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        task: string;
                        listId: number;
                        status?: string | undefined;
                        dueAt?: string | Date | null | undefined;
                        details?: string | null | undefined;
                        priority?: number | undefined;
                    };
                    _input_out: {
                        status: string;
                        task: string;
                        priority: number;
                        listId: number;
                        dueAt?: Date | null | undefined;
                        details?: string | null | undefined;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                    label: string;
                    createdAt: Date;
                    lastUpdate: Date;
                    lastAccess: Date;
                }>>;
            };
            deleteToDos: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: number[];
                    _input_out: number[];
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, import(".prisma/client").Prisma.BatchPayload>>;
            };
            editTaskNote: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        note: string | null;
                        taskId: number;
                    };
                    _input_out: {
                        note: string | null;
                        taskId: number;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                    createdAt: Date;
                    task: string;
                    dueAt: Date | null;
                    details: string | null;
                    parentId: number | null;
                    category: import(".prisma/client").$Enums.TaskCategory | null;
                    bookmarked: boolean;
                    status: string;
                    priority: number;
                    toDoListId: number | null;
                    completedOn: Date | null;
                }>>;
            };
            getMostRecentToDoListId: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, {
                    id: number;
                }[]>>;
            };
            markCompleted: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        taskIds: number[];
                    };
                    _input_out: {
                        taskIds: number[];
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, void>>;
            };
            updateTask: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        id: number;
                        task: string;
                        status?: string | undefined;
                        dueAt?: string | Date | null | undefined;
                        details?: string | null | undefined;
                        priority?: number | undefined;
                    };
                    _input_out: {
                        id: number;
                        status: string;
                        task: string;
                        priority: number;
                        dueAt?: Date | null | undefined;
                        details?: string | null | undefined;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    ToDoList: {
                        id: number;
                    } | null;
                }>>;
            };
            archiveTasks: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: number[];
                    _input_out: number[];
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, import(".prisma/client").Prisma.BatchPayload>>;
            };
            getTaskLists: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, {
                    id: number;
                    label: string;
                    lastUpdate: Date;
                }[]>>;
            };
            getTasksByCompletionDate: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        start?: Date | undefined;
                        stop?: Date | undefined;
                    } | undefined;
                    _input_out: {
                        stop: Date;
                        start?: Date | undefined;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, void>>;
            };
            getTaskManagerOverview: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, {
                    tasks: {
                        id: number;
                        createdAt: Date;
                        status: string;
                        dueAt: Date | null;
                        toDoListId: number | null;
                        completedOn: Date | null;
                    }[];
                    taskLists: {
                        id: number;
                        label: string;
                        createdAt: Date;
                        _count: {
                            tasks: number;
                            tags: number;
                            topics: number;
                            subjects: number;
                        };
                    }[];
                    overdueCount: number;
                }>>;
            };
        };
        equations: {
            getEquationById: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        id?: number | undefined;
                        equationId?: string | undefined;
                    };
                    _input_out: {
                        id?: number | undefined;
                        equationId?: string | undefined;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                    title: string;
                    content: string;
                    tags: {
                        value: string;
                    }[];
                    relatedValues: {
                        input: unknown;
                        output: number;
                    }[];
                    equationId: string | null;
                    desc: string | null;
                    asPython: string | null;
                    variables: string[];
                    keywords: string[];
                } | null>>;
            };
            getParsedEquationById: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        id: number;
                        title: {
                            options: {
                                width?: number | undefined;
                                container?: boolean | undefined;
                                em?: number | undefined;
                                ex?: number | undefined;
                                inline?: boolean | undefined;
                                styles?: boolean | undefined;
                                fontCache?: boolean | undefined;
                                assistiveMml?: boolean | undefined;
                                autoWrap?: boolean | undefined;
                                matchFontHeight?: boolean | undefined;
                            };
                            appendStylesToId?: string | undefined;
                            appendStylesToClass?: string | undefined;
                        };
                        content: {
                            options: {
                                width?: number | undefined;
                                container?: boolean | undefined;
                                em?: number | undefined;
                                ex?: number | undefined;
                                inline?: boolean | undefined;
                                styles?: boolean | undefined;
                                fontCache?: boolean | undefined;
                                assistiveMml?: boolean | undefined;
                                autoWrap?: boolean | undefined;
                                matchFontHeight?: boolean | undefined;
                            };
                            appendStylesToId?: string | undefined;
                            appendStylesToClass?: string | undefined;
                        };
                        desc: {
                            options: {
                                width?: number | undefined;
                                container?: boolean | undefined;
                                em?: number | undefined;
                                ex?: number | undefined;
                                inline?: boolean | undefined;
                                styles?: boolean | undefined;
                                fontCache?: boolean | undefined;
                                assistiveMml?: boolean | undefined;
                                autoWrap?: boolean | undefined;
                                matchFontHeight?: boolean | undefined;
                            };
                            appendStylesToId?: string | undefined;
                            appendStylesToClass?: string | undefined;
                        };
                        equationId?: string | undefined;
                    };
                    _input_out: {
                        id: number;
                        title: {
                            options: {
                                width?: number | undefined;
                                container?: boolean | undefined;
                                em?: number | undefined;
                                ex?: number | undefined;
                                inline?: boolean | undefined;
                                styles?: boolean | undefined;
                                fontCache?: boolean | undefined;
                                assistiveMml?: boolean | undefined;
                                autoWrap?: boolean | undefined;
                                matchFontHeight?: boolean | undefined;
                            };
                            appendStylesToId?: string | undefined;
                            appendStylesToClass?: string | undefined;
                        };
                        content: {
                            options: {
                                width?: number | undefined;
                                container?: boolean | undefined;
                                em?: number | undefined;
                                ex?: number | undefined;
                                inline?: boolean | undefined;
                                styles?: boolean | undefined;
                                fontCache?: boolean | undefined;
                                assistiveMml?: boolean | undefined;
                                autoWrap?: boolean | undefined;
                                matchFontHeight?: boolean | undefined;
                            };
                            appendStylesToId?: string | undefined;
                            appendStylesToClass?: string | undefined;
                        };
                        desc: {
                            options: {
                                width?: number | undefined;
                                container?: boolean | undefined;
                                em?: number | undefined;
                                ex?: number | undefined;
                                inline?: boolean | undefined;
                                styles?: boolean | undefined;
                                fontCache?: boolean | undefined;
                                assistiveMml?: boolean | undefined;
                                autoWrap?: boolean | undefined;
                                matchFontHeight?: boolean | undefined;
                            };
                            appendStylesToId?: string | undefined;
                            appendStylesToClass?: string | undefined;
                        };
                        equationId?: string | undefined;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                    tags: ({
                        value: string;
                        kanbanId?: number | null | undefined;
                    } | {
                        value: string;
                        kanbanId?: number | null | undefined;
                    })[];
                    variables: string[];
                    topics: {
                        value: string;
                    }[];
                    subjects: {
                        value: string;
                    }[];
                    title?: string | null | undefined;
                    content?: string | null | undefined;
                    equationId?: string | null | undefined;
                    desc?: string | null | undefined;
                    asPython?: string | null | undefined;
                    createdAt?: string | Date | null | undefined;
                }>>;
            };
            getEquationEmbedProps: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        equationId: string;
                    };
                    _input_out: {
                        equationId: string;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    rawLatex: string;
                    id: number;
                    tags: ({
                        value: string;
                        kanbanId?: number | null | undefined;
                    } | {
                        value: string;
                        kanbanId?: number | null | undefined;
                    })[];
                    variables: string[];
                    topics: {
                        value: string;
                    }[];
                    subjects: {
                        value: string;
                    }[];
                    title?: string | null | undefined;
                    content?: string | null | undefined;
                    equationId?: string | null | undefined;
                    desc?: string | null | undefined;
                    asPython?: string | null | undefined;
                    createdAt?: string | Date | null | undefined;
                }>>;
            };
            deleteEquationById: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: number;
                    _input_out: number;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                    equationId: string | null;
                    title: string;
                    desc: string | null;
                    content: string;
                    asPython: string | null;
                    variableLegend: unknown;
                    variables: string[];
                    keywords: string[];
                    createdAt: Date;
                    lastAccess: Date;
                }>>;
            };
            getEquationsList: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        orderBy: "title" | "createdAt";
                        value?: string | undefined;
                        tags?: string | string[] | undefined;
                        query?: string | undefined;
                        take?: number | undefined;
                        variables?: string | string[] | undefined;
                        page?: number | undefined;
                        sortDir?: "desc" | "asc" | undefined;
                    };
                    _input_out: {
                        tags: any[];
                        orderBy: "title" | "createdAt";
                        take: number;
                        variables: any[];
                        page: number;
                        sortDir: "desc" | "asc";
                        value?: string | undefined;
                        query?: string | undefined;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    equations: {
                        id: number;
                        equationId: string | null;
                        title: string;
                        desc: string | null;
                        content: string;
                        asPython: string | null;
                        variableLegend: unknown;
                        variables: string[];
                        keywords: string[];
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    tags: string[];
                    variables: string[];
                }>>;
            };
            addEquation: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        title: string;
                        content: string;
                        variables: string[];
                        keywords: string[];
                        tagInput: string;
                        variableInput: string;
                        keywordInput: string;
                        id?: number | undefined;
                        tags?: string[] | undefined;
                        relatedValues?: {
                            input: Record<string, number>;
                            output: number;
                        }[] | undefined;
                        equationId?: string | undefined;
                        desc?: string | undefined;
                        asPython?: string | undefined;
                    };
                    _input_out: {
                        title: string;
                        content: string;
                        tags: string[];
                        variables: string[];
                        keywords: string[];
                        tagInput: string;
                        variableInput: string;
                        keywordInput: string;
                        id?: number | undefined;
                        relatedValues?: {
                            input: Record<string, number>;
                            output: number;
                        }[] | undefined;
                        equationId?: string | undefined;
                        desc?: string | undefined;
                        asPython?: string | undefined;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                    equationId: string | null;
                    title: string;
                    desc: string | null;
                    content: string;
                    asPython: string | null;
                    variableLegend: unknown;
                    variables: string[];
                    keywords: string[];
                    createdAt: Date;
                    lastAccess: Date;
                }>>;
            };
            mathStringArrayToLatex: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        content: string[];
                        options: {
                            inline?: boolean | undefined;
                        };
                    };
                    _input_out: {
                        content: string[];
                        options: {
                            inline?: boolean | undefined;
                        };
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    content: string;
                }[]>>;
            };
            getIdFromEquationId: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                } | null>>;
            };
        };
        commandPalette: {
            noteSearch: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, {
                    id: number;
                    href: string;
                    title: string;
                    isProtected: boolean | null;
                    latexTitle: string | null;
                }[]>>;
            };
            tagSearch: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[]>>;
            };
            subjectSearch: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[]>>;
            };
            equationSearch: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, {
                    id: number;
                    title: string;
                    content: string;
                }[]>>;
            };
            getDefinitions: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        rsc?: boolean | undefined;
                    } | undefined;
                    _input_out: {
                        rsc: boolean;
                    } | undefined;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: string;
                    label?: string | null | undefined;
                    content?: string | null | undefined;
                    mdxNote?: import("classes/prismaMdxRelations/MdxNote").MdxNote | undefined;
                    mdxNoteId?: number | null | undefined;
                    alphabeticalLabel?: string | null | undefined;
                }[]>>;
            };
            getCommandPaletteData: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, {
                    notes: {
                        href: string;
                        title: string;
                        isProtected: boolean | null;
                        latexTitle: string | null;
                    }[];
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                }>>;
            };
        };
        search: {
            getNoteHrefFromDefinitionId: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, string | undefined>>;
            };
            getSequentialIdListByKey: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    href: string;
                    title: string;
                    sequentialIndex: number | null;
                }[]>>;
            };
            getDefinitionList: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, {
                    id: string;
                    mdxNoteId: number | null;
                    label?: string | undefined;
                    content?: string | undefined;
                }[]>>;
            };
            rootRelativePathIsBookmarked: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, boolean>>;
            };
            getUniqueTags: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, string[]>>;
            };
            getUniqueTagTopicAndSubjects: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: "tag" | "topic" | "subject" | null | undefined;
                    _input_out: "tag" | "topic" | "subject" | null | undefined;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, string[] | {
                    tags: string[];
                    topics: string[];
                    subjects: string[];
                }>>;
            };
            getBookmarked: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, {
                    mdxNotes: {
                        id: number;
                        href: string;
                        summary: string | null;
                        title: string;
                        tags: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                        noteType: string;
                        topics: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                        subjects: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                        firstSync: Date;
                        lastSync: Date;
                        latexTitle: string | null;
                        rootRelativePath: string;
                        sequentialIndex: number | null;
                        citations: {
                            id: string;
                            htmlCitation: string | null;
                        }[];
                        definitions: {
                            id: string;
                            label: string | null;
                            content: string | null;
                            alphabeticalLabel: string | null;
                            mdxNoteId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                    }[];
                }>>;
            };
            findUnknownDBNoteTypeFromRootRelativePath: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    markdown: {
                        id: number;
                        rootRelativePath: string;
                    } | null;
                    notebook: {
                        id: number;
                        rootRelativePath: string;
                    } | null;
                }>>;
            };
        };
        boards: {
            getAllBoards: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, {
                    title: string;
                    _count: {
                        lists: number;
                        tags: number;
                        subjects: number;
                        topics: number;
                    };
                    lists: {
                        _count: {
                            cards: number;
                            Kanban: number;
                        };
                    }[];
                }[]>>;
            };
            createNewBoard: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        title: string;
                        tags: string[];
                        topics: string[];
                        subjects: string[];
                    };
                    _input_out: {
                        title: string;
                        tags: string[];
                        topics: string[];
                        subjects: string[];
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                    title: string;
                    createdAt: Date;
                    lastUpdate: Date;
                }>>;
            };
            getBoardById: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: number;
                    _input_out: number;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    lists: ({
                        cards: {
                            id: number;
                            listId: number | null;
                            indexWithinList: number;
                            label: string | null;
                            details: string | null;
                        }[];
                    } & {
                        id: number;
                        indexWithinBoard: number;
                        title: string | null;
                        boardId: number | null;
                    })[];
                } & {
                    id: number;
                    title: string;
                    createdAt: Date;
                    lastUpdate: Date;
                }) | null>>;
            };
            appendNewListToBoard: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        list: {
                            title: string;
                        };
                        boardId: number;
                    };
                    _input_out: {
                        list: {
                            title: string;
                        };
                        boardId: number;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    lists: ({
                        cards: {
                            id: number;
                            listId: number | null;
                            indexWithinList: number;
                            label: string | null;
                            details: string | null;
                        }[];
                    } & {
                        id: number;
                        indexWithinBoard: number;
                        title: string | null;
                        boardId: number | null;
                    })[];
                } & {
                    id: number;
                    title: string;
                    createdAt: Date;
                    lastUpdate: Date;
                }) | undefined>>;
            };
        };
        settings: {
            getSettings: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, {
                    id: number;
                    tooltips: boolean;
                    title: string;
                    summary_showCitations: boolean;
                    summary_showTags: boolean;
                    landingImageAlign: import(".prisma/client").$Enums.ImageAlignment;
                    lockedLandingImage: string | null;
                    cleanOnSync: boolean;
                    plotTheme: string | null;
                    firstSync: Date;
                    lastSync: Date;
                } | null>>;
            };
            toggleBooleanSetting: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: "tooltips" | "summary_showCitations" | "summary_showTags" | "cleanOnSync";
                    _input_out: "tooltips" | "summary_showCitations" | "summary_showTags" | "cleanOnSync";
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                    tooltips: boolean;
                    title: string;
                    summary_showCitations: boolean;
                    summary_showTags: boolean;
                    landingImageAlign: import(".prisma/client").$Enums.ImageAlignment;
                    lockedLandingImage: string | null;
                    cleanOnSync: boolean;
                    plotTheme: string | null;
                    firstSync: Date;
                    lastSync: Date;
                } | undefined>>;
            };
            lockCurrentLandingImage: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    lockedLandingImage: string | null;
                } | undefined>>;
            };
            updateSettings: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: import(".prisma/client").Prisma.SettingsCreateInput;
                    _input_out: import(".prisma/client").Prisma.SettingsCreateInput;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                    tooltips: boolean;
                    title: string;
                    summary_showCitations: boolean;
                    summary_showTags: boolean;
                    landingImageAlign: import(".prisma/client").$Enums.ImageAlignment;
                    lockedLandingImage: string | null;
                    cleanOnSync: boolean;
                    plotTheme: string | null;
                    firstSync: Date;
                    lastSync: Date;
                } | undefined>>;
            };
        };
        pluginSettings: {
            updatePluginSettings: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        data: Record<string, any>;
                        pluginName: string;
                        options?: import("classes/data/pluginUtils/pluginSettings/types").UpdatePluginSettingOptions | undefined;
                    };
                    _input_out: {
                        data: Record<string, any>;
                        options: import("classes/data/pluginUtils/pluginSettings/types").UpdatePluginSettingOptions;
                        pluginName: string;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, Record<string, any>>>;
            };
            getPluginSettings: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        pluginName: string;
                    };
                    _input_out: {
                        pluginName: string;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, object | undefined>>;
            };
            clearPluginSettings: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        pluginName: string;
                    };
                    _input_out: {
                        pluginName: string;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, void>>;
            };
        };
        mdx: {
            deleteNoteById: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: number | number[];
                    _input_out: any[];
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, import(".prisma/client").Prisma.BatchPayload>>;
            };
            toggleBookmarkedById: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: number;
                    _input_out: number;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, boolean>>;
            };
            getDatabaseMdx: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    equations: {
                        id: number;
                        equationId: string | null;
                        title: string;
                        desc: string | null;
                        content: string;
                        asPython: string | null;
                        variableLegend: unknown;
                        variables: string[];
                        keywords: string[];
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    toDo: {
                        id: number;
                        createdAt: Date;
                        task: string;
                        dueAt: Date | null;
                        details: string | null;
                        parentId: number | null;
                        category: import(".prisma/client").$Enums.TaskCategory | null;
                        bookmarked: boolean;
                        status: string;
                        priority: number;
                        toDoListId: number | null;
                        completedOn: Date | null;
                    }[];
                    ReadingList: {
                        name: string;
                        description: string | null;
                        createdAt: Date;
                        lastUpdate: Date;
                    }[];
                    topics: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    subjects: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    _count: {
                        topics: number;
                        subjects: number;
                        tags: number;
                        citations: number;
                        sequentialList: number;
                        ReadingList: number;
                        equations: number;
                        definitions: number;
                        toDo: number;
                    };
                    citations: {
                        id: string;
                        BibId: number | null;
                        OwnWork: boolean;
                        ColleaguesWork: boolean;
                        read: boolean;
                        htmlCitation: string | null;
                        PdfPath: string | null;
                        address: string | null;
                        annote: string | null;
                        author: string | null;
                        booktitle: string | null;
                        chapter: string | null;
                        crossref: string | null;
                        doi: string | null;
                        edition: string | null;
                        editor: string | null;
                        email: string | null;
                        howpublished: string | null;
                        institution: string | null;
                        journal: string | null;
                        month: string | null;
                        note: string | null;
                        number: string | null;
                        organization: string | null;
                        pages: string | null;
                        publisher: string | null;
                        school: string | null;
                        series: string | null;
                        title: string | null;
                        volume: string | null;
                        type: string | null;
                        year: string | null;
                        numpages: string | null;
                        url: string | null;
                        issue: string | null;
                        issn: string | null;
                        abstract: string | null;
                        urldate: string | null;
                        keywords: string | null;
                        copyright: string | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    sequentialList: {
                        sequentialKey: string;
                    } | null;
                    definitions: {
                        id: string;
                        label: string | null;
                        content: string | null;
                        alphabeticalLabel: string | null;
                        mdxNoteId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                } & {
                    id: number;
                    isProtected: boolean | null;
                    dietSummaryKey: string | null;
                    title: string;
                    latexTitle: string | null;
                    rootRelativePath: string;
                    noteType: string;
                    content: string;
                    formatted: string | null;
                    summary: string | null;
                    citationsListOrder: string[];
                    importantValues: number[];
                    imageSrc: string | null;
                    href: string;
                    sequentialKey: string | null;
                    sequentialIndex: number | null;
                    floatImages: boolean;
                    remoteUrl: string | null;
                    trackRemote: boolean;
                    outgoingQuickLinks: string[];
                    quickLink: string | null;
                    bookmarked: boolean;
                    firstSync: Date;
                    lastSync: Date;
                    lastAccess: Date;
                }) | null>>;
            };
            getDatabaseMdxFromPathname: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    equations: {
                        id: number;
                        equationId: string | null;
                        title: string;
                        desc: string | null;
                        content: string;
                        asPython: string | null;
                        variableLegend: unknown;
                        variables: string[];
                        keywords: string[];
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    toDo: {
                        id: number;
                        createdAt: Date;
                        task: string;
                        dueAt: Date | null;
                        details: string | null;
                        parentId: number | null;
                        category: import(".prisma/client").$Enums.TaskCategory | null;
                        bookmarked: boolean;
                        status: string;
                        priority: number;
                        toDoListId: number | null;
                        completedOn: Date | null;
                    }[];
                    ReadingList: {
                        name: string;
                        description: string | null;
                        createdAt: Date;
                        lastUpdate: Date;
                    }[];
                    topics: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    subjects: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    _count: {
                        topics: number;
                        subjects: number;
                        tags: number;
                        citations: number;
                        sequentialList: number;
                        ReadingList: number;
                        equations: number;
                        definitions: number;
                        toDo: number;
                    };
                    citations: {
                        id: string;
                        BibId: number | null;
                        OwnWork: boolean;
                        ColleaguesWork: boolean;
                        read: boolean;
                        htmlCitation: string | null;
                        PdfPath: string | null;
                        address: string | null;
                        annote: string | null;
                        author: string | null;
                        booktitle: string | null;
                        chapter: string | null;
                        crossref: string | null;
                        doi: string | null;
                        edition: string | null;
                        editor: string | null;
                        email: string | null;
                        howpublished: string | null;
                        institution: string | null;
                        journal: string | null;
                        month: string | null;
                        note: string | null;
                        number: string | null;
                        organization: string | null;
                        pages: string | null;
                        publisher: string | null;
                        school: string | null;
                        series: string | null;
                        title: string | null;
                        volume: string | null;
                        type: string | null;
                        year: string | null;
                        numpages: string | null;
                        url: string | null;
                        issue: string | null;
                        issn: string | null;
                        abstract: string | null;
                        urldate: string | null;
                        keywords: string | null;
                        copyright: string | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    sequentialList: {
                        sequentialKey: string;
                    } | null;
                    definitions: {
                        id: string;
                        label: string | null;
                        content: string | null;
                        alphabeticalLabel: string | null;
                        mdxNoteId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                } & {
                    id: number;
                    isProtected: boolean | null;
                    dietSummaryKey: string | null;
                    title: string;
                    latexTitle: string | null;
                    rootRelativePath: string;
                    noteType: string;
                    content: string;
                    formatted: string | null;
                    summary: string | null;
                    citationsListOrder: string[];
                    importantValues: number[];
                    imageSrc: string | null;
                    href: string;
                    sequentialKey: string | null;
                    sequentialIndex: number | null;
                    floatImages: boolean;
                    remoteUrl: string | null;
                    trackRemote: boolean;
                    outgoingQuickLinks: string[];
                    quickLink: string | null;
                    bookmarked: boolean;
                    firstSync: Date;
                    lastSync: Date;
                    lastAccess: Date;
                }) | null>>;
            };
            getFsMdx: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        rootRelativePath: string;
                        extension: ".md" | ".mdx";
                        useProcessRoot?: boolean | undefined;
                    };
                    _input_out: {
                        rootRelativePath: string;
                        extension: ".md" | ".mdx";
                        useProcessRoot: boolean;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    content: string;
                    details: {
                        quickLink: string | undefined;
                        sequentialKey: string | undefined;
                        sequentialIndex: number | undefined;
                        firstSync: string | Date;
                        lastSync: string | Date;
                        id: number;
                        bookmarked: boolean;
                    } | undefined;
                }>>;
            };
            setMdxAccessed: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        rootRelativePath: string;
                    };
                    _input_out: {
                        rootRelativePath: string;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, void>>;
            };
            parseAndCompileMdxString: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        props: {
                            raw: string;
                            docTypeData: {
                                label: string;
                                icon: string;
                                UI: {
                                    styles: {
                                        dark: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                        light: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                    };
                                };
                                fs: string;
                                id: string;
                                docType: string;
                                matchWeight: number;
                                url: string;
                                urlQuery: Record<string, string | number | string[] | number[]>;
                                keywords: string[];
                                autoTag: string[];
                                autoTopic: string[];
                                autoSubject: string[];
                                inSidebar: boolean;
                                inNavbar: boolean;
                                filePathPattern?: string | undefined;
                                topicLabel?: string | undefined;
                                subjectLabel?: string | undefined;
                            };
                            bookmarked?: boolean | undefined;
                            rootRelativePath?: string | null | undefined;
                        };
                        parseParams: {
                            parser: (args_0: {
                                data: {
                                    id?: string | null | undefined;
                                    summary?: string | null | undefined;
                                    title?: string | null | undefined;
                                    tags?: string[] | undefined;
                                    topics?: string[] | undefined;
                                    subjects?: string[] | undefined;
                                    sequentialKey?: string | null | undefined;
                                    importantValues?: number[] | undefined;
                                    created?: string | null | undefined;
                                    updated?: string | null | undefined;
                                    sequential?: number | null | undefined;
                                    tableStyles?: {
                                        math?: "base" | "lg" | "xl" | "small" | null | undefined;
                                        expand?: boolean | null | undefined;
                                        text?: "base" | "lg" | "xl" | "small" | null | undefined;
                                        float?: "right" | "left" | null | undefined;
                                        fullWidth?: boolean | null | undefined;
                                        tableCenter?: boolean | null | undefined;
                                        textCenter?: boolean | null | undefined;
                                        headingCenter?: boolean | null | undefined;
                                        noMax?: boolean | null | undefined;
                                    } | undefined;
                                };
                                content: string;
                                docTypeData: {
                                    id: string;
                                    url: string;
                                    docType: string;
                                    label?: string | undefined;
                                    keywords?: string[] | undefined;
                                    icon?: string | undefined;
                                    UI?: {
                                        styles: {
                                            dark: {
                                                bg?: string | undefined;
                                                fg?: string | undefined;
                                            };
                                            light: {
                                                bg?: string | undefined;
                                                fg?: string | undefined;
                                            };
                                        };
                                    } | undefined;
                                    fs?: string | undefined;
                                    filePathPattern?: string | undefined;
                                    matchWeight?: number | undefined;
                                    urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                                    topicLabel?: string | undefined;
                                    subjectLabel?: string | undefined;
                                    autoTag?: string[] | undefined;
                                    autoTopic?: string[] | undefined;
                                    autoSubject?: string[] | undefined;
                                    inSidebar?: boolean | undefined;
                                    inNavbar?: boolean | undefined;
                                } | {};
                                appConfig: {
                                    fsRoot: string;
                                    noteTypes: {
                                        fs: string;
                                        label?: string | undefined;
                                        icon?: string | undefined;
                                        UI?: {
                                            styles: {
                                                dark: {
                                                    bg?: string | undefined;
                                                    fg?: string | undefined;
                                                };
                                                light: {
                                                    bg?: string | undefined;
                                                    fg?: string | undefined;
                                                };
                                            };
                                        } | undefined;
                                        id?: string | undefined;
                                        docType?: string | undefined;
                                        filePathPattern?: string | undefined;
                                        matchWeight?: number | undefined;
                                        url?: string | undefined;
                                        urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                                        keywords?: string[] | undefined;
                                        topicLabel?: string | undefined;
                                        subjectLabel?: string | undefined;
                                        autoTag?: string[] | undefined;
                                        autoTopic?: string[] | undefined;
                                        autoSubject?: string[] | undefined;
                                        inSidebar?: boolean | undefined;
                                        inNavbar?: boolean | undefined;
                                    }[];
                                    code?: {
                                        editor: {
                                            defaultLangauge: string;
                                            useVimMode: boolean;
                                        };
                                        theme: {
                                            dark: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                            light: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                        };
                                        syntaxHighlighting: {
                                            transformers: {
                                                regexHighlight: boolean;
                                                lineHighlight: boolean;
                                                lineFocus: boolean;
                                                lineErrorLevel: boolean;
                                                lineDiff: boolean;
                                            };
                                            defaultLanguage: {
                                                inline: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                                block: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                            };
                                        };
                                    } | undefined;
                                    database?: {
                                        storeFormatted: boolean;
                                        removeIfNotPresentInFs: boolean;
                                    } | undefined;
                                    navigation?: {
                                        navbarBreakpoint: {
                                            full: number;
                                            minimal: number;
                                        };
                                        maxResultLength: {
                                            snippets: number;
                                            searchAll: number;
                                            equations: number;
                                            categories: number;
                                        };
                                        navbarLinks: (string | {
                                            label: string;
                                            href?: string | undefined;
                                            icon?: string | undefined;
                                            onClick?: ((...args: unknown[]) => unknown) | undefined;
                                        })[];
                                        sidebarLinks: (string | {
                                            icon: string;
                                            label?: string | undefined;
                                            href?: string | undefined;
                                            Icon?: ((...args: unknown[]) => unknown) | undefined;
                                            onClick?: ((...args: unknown[]) => unknown) | undefined;
                                        })[];
                                    } | undefined;
                                    terminal?: {
                                        logLevel: "info" | "none" | "debug" | "verbose";
                                    } | undefined;
                                    jupyter?: {
                                        execute: boolean;
                                        environment: string;
                                        syntaxHighlightTheme: string;
                                        jupyterPort: number;
                                        initiallyFoldCells: boolean;
                                        kernel: string;
                                        jupyterReactProps: {
                                            collaborative: boolean;
                                            lite: boolean;
                                            serverUrls?: {
                                                baseUrl?: string | undefined;
                                                wsUrl?: string | undefined;
                                            } | undefined;
                                        };
                                        nbConvert: {
                                            conversionTimeout: number;
                                            execute: boolean;
                                            nbConvertTemplate: string;
                                            notebookOutputDir: string;
                                            nbconvertPath?: string | undefined;
                                            customConversionFunction?: {
                                                pdf?: ((args_0: string, args_1: string, ...args: unknown[]) => string) | undefined;
                                            } | undefined;
                                        };
                                        jupyterNotebookProps: {
                                            readOnly: boolean;
                                            cellMetadataPanel: boolean;
                                            cellSidebarMargin: number;
                                            bundledIPyWidgets: {
                                                name: string;
                                                module: string | Record<string, string>;
                                                version: string;
                                            }[];
                                            externalIPyWidgets: {
                                                name: string;
                                                version: string;
                                            }[];
                                            nbgrader: boolean;
                                            height?: string | undefined;
                                            maxHeight?: string | undefined;
                                        };
                                        cellInputWrappers: Record<string, {
                                            prefix: string;
                                            suffix: string;
                                        }>;
                                        jupyterToken?: string | undefined;
                                    } | undefined;
                                    math?: {
                                        latexPackages: string[] | "all";
                                        constants: Record<string, number>;
                                        latexFontUrl?: string | undefined;
                                    } | undefined;
                                    UI?: {
                                        table: {
                                            maxHeight: string;
                                        };
                                        text: {
                                            blockQuoteItalic: boolean;
                                            fontPaths: "default" | {
                                                weight: "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900";
                                                path: string;
                                                style: "bold" | "italic" | "normal";
                                            }[];
                                        };
                                        media: {
                                            imageMap: Record<string, string | undefined>;
                                            includeDefaultImageMap: boolean;
                                            imageRemoteTest: string[];
                                        };
                                        theme: "ulld" | "red" | "orange" | "yellow" | "green" | "blue" | "rose" | "slate" | "gray" | "stone" | "zinc" | "neutral" | "violet";
                                        colors: Record<string, {
                                            dark?: string | undefined;
                                            light?: string | undefined;
                                        } | undefined>;
                                        autoApplyMdxTitles: boolean;
                                    } | undefined;
                                    slots?: {
                                        navigation?: any;
                                        bibliography?: any;
                                        math?: any;
                                        snippets?: any;
                                        dashboard?: any;
                                        taskManager?: any;
                                        UI?: any;
                                        pdf?: any;
                                        editor?: any;
                                        form?: any;
                                        commandPalette?: any;
                                    } | undefined;
                                    build?: {
                                        database: {
                                            type: "postgres" | "sqlite";
                                            postgres: {
                                                connectionURI: string;
                                                port?: undefined;
                                                dbName?: undefined;
                                            } | {
                                                port: number;
                                                dbName: string;
                                                connectionURI?: undefined;
                                            };
                                            prioritize: "size" | "speed";
                                        };
                                        additionalUserContent: {
                                            css?: string | undefined;
                                            logo?: string | undefined;
                                            favicon?: string | undefined;
                                        };
                                    } | undefined;
                                    autoTag?: {
                                        tag?: string | undefined;
                                        path?: string | undefined;
                                    }[] | undefined;
                                    autoTopic?: {
                                        path?: string | undefined;
                                        topic?: string | undefined;
                                    }[] | undefined;
                                    autoSubject?: {
                                        path?: string | undefined;
                                        subject?: string | undefined;
                                    }[] | undefined;
                                    alwaysPreferFs?: boolean | undefined;
                                    ignoreFilepaths?: string[] | undefined;
                                    tempDir?: string | undefined;
                                    generatedDir?: string | undefined;
                                    ignorePreferFsExtensions?: string[] | undefined;
                                    fileTypePriority?: (".mdx" | ".ipynb" | ".csv" | ".tsv" | ".excel" | ".numpy" | ".html" | ".pickle" | ".db" | ".sql" | ".pdf" | ".json" | ".tex" | ".hdf5" | ".md")[] | undefined;
                                    bibPath?: string | undefined;
                                    cslPath?: string | undefined;
                                    dateHandling?: {
                                        enableAdvancedFormat: boolean;
                                        format: {
                                            short: string;
                                            long: string;
                                            withTime: string;
                                            timeOnly: string;
                                        };
                                        defaultTimeDisplayType: "summarized" | "analog" | "descriptive";
                                        defaultTimeZone?: string | undefined;
                                    } | undefined;
                                    linkAliases?: Record<string, string> | undefined;
                                    plotting?: {
                                        plotColorList: string[] | {
                                            dark: string[];
                                            light: string[];
                                        };
                                        plotColorCycleMethod: "inOrder" | "random";
                                    } | undefined;
                                    credentials?: {
                                        googleServiceAccountJsonPath?: string | undefined;
                                    } | undefined;
                                    performance?: {
                                        latexParsingDebounceTimeout: number;
                                        mdxParsingDebounceTimeout: number;
                                    } | undefined;
                                    meta?: {
                                        title: string;
                                        desc?: string | undefined;
                                    } | undefined;
                                    plugins?: {
                                        name: string;
                                        version: string;
                                        parserIndex: number;
                                    }[] | undefined;
                                };
                                serverClient?: any;
                                db?: {
                                    id: number;
                                    firstSync: string | Date;
                                    bookmarked: boolean;
                                    lastSync: string | Date;
                                    sequentialKey?: string | null | undefined;
                                    sequentialIndex?: number | null | undefined;
                                    quickLink?: string | null | undefined;
                                } | undefined;
                            }, ...args: unknown[]) => Promise<{
                                id?: string | null | undefined;
                                summary?: string | null | undefined;
                                title?: string | null | undefined;
                                tags?: string | string[] | undefined;
                                topics?: string | string[] | undefined;
                                subjects?: string | string[] | undefined;
                                sequentialKey?: string | null | undefined;
                                importantValues?: number[] | undefined;
                                created?: string | null | undefined;
                                updated?: string | null | undefined;
                                sequential?: number | null | undefined;
                                tableStyles?: {
                                    math?: "base" | "lg" | "xl" | "small" | null | undefined;
                                    expand?: boolean | null | undefined;
                                    text?: "base" | "lg" | "xl" | "small" | null | undefined;
                                    float?: "right" | "left" | null | undefined;
                                    fullWidth?: boolean | null | undefined;
                                    tableCenter?: boolean | null | undefined;
                                    textCenter?: boolean | null | undefined;
                                    headingCenter?: boolean | null | undefined;
                                    noMax?: boolean | null | undefined;
                                } | undefined;
                            } & Record<string, string | number | boolean | Record<string, string | number | boolean | null> | Record<string, Record<string, string | number | boolean | null>> | Record<string, string | number | boolean | null>[] | (string | number | boolean | null)[] | (string | number | boolean | null)[][] | null>>;
                            docTypeData?: {
                                label: string;
                                icon: string;
                                UI: {
                                    styles: {
                                        dark: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                        light: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                    };
                                };
                                fs: string;
                                id: string;
                                docType: string;
                                matchWeight: number;
                                url: string;
                                urlQuery: Record<string, string | number | string[] | number[]>;
                                keywords: string[];
                                autoTag: string[];
                                autoTopic: string[];
                                autoSubject: string[];
                                inSidebar: boolean;
                                inNavbar: boolean;
                                filePathPattern?: string | undefined;
                                topicLabel?: string | undefined;
                                subjectLabel?: string | undefined;
                            } | {} | undefined;
                            appConfig?: {
                                fsRoot: string;
                                noteTypes: {
                                    fs: string;
                                    label?: string | undefined;
                                    icon?: string | undefined;
                                    UI?: {
                                        styles: {
                                            dark: {
                                                bg?: string | undefined;
                                                fg?: string | undefined;
                                            };
                                            light: {
                                                bg?: string | undefined;
                                                fg?: string | undefined;
                                            };
                                        };
                                    } | undefined;
                                    id?: string | undefined;
                                    docType?: string | undefined;
                                    filePathPattern?: string | undefined;
                                    matchWeight?: number | undefined;
                                    url?: string | undefined;
                                    urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                                    keywords?: string[] | undefined;
                                    topicLabel?: string | undefined;
                                    subjectLabel?: string | undefined;
                                    autoTag?: string[] | undefined;
                                    autoTopic?: string[] | undefined;
                                    autoSubject?: string[] | undefined;
                                    inSidebar?: boolean | undefined;
                                    inNavbar?: boolean | undefined;
                                }[];
                                code?: {
                                    editor: {
                                        defaultLangauge: string;
                                        useVimMode: boolean;
                                    };
                                    theme: {
                                        dark: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                        light: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                    };
                                    syntaxHighlighting: {
                                        transformers: {
                                            regexHighlight: boolean;
                                            lineHighlight: boolean;
                                            lineFocus: boolean;
                                            lineErrorLevel: boolean;
                                            lineDiff: boolean;
                                        };
                                        defaultLanguage: {
                                            inline: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                            block: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                        };
                                    };
                                } | undefined;
                                database?: {
                                    storeFormatted: boolean;
                                    removeIfNotPresentInFs: boolean;
                                } | undefined;
                                navigation?: {
                                    navbarBreakpoint: {
                                        full: number;
                                        minimal: number;
                                    };
                                    maxResultLength: {
                                        snippets: number;
                                        searchAll: number;
                                        equations: number;
                                        categories: number;
                                    };
                                    navbarLinks: (string | {
                                        label: string;
                                        href?: string | undefined;
                                        icon?: string | undefined;
                                        onClick?: ((...args: unknown[]) => unknown) | undefined;
                                    })[];
                                    sidebarLinks: (string | {
                                        icon: string;
                                        label?: string | undefined;
                                        href?: string | undefined;
                                        Icon?: ((...args: unknown[]) => unknown) | undefined;
                                        onClick?: ((...args: unknown[]) => unknown) | undefined;
                                    })[];
                                } | undefined;
                                terminal?: {
                                    logLevel: "info" | "none" | "debug" | "verbose";
                                } | undefined;
                                jupyter?: {
                                    execute: boolean;
                                    environment: string;
                                    syntaxHighlightTheme: string;
                                    jupyterPort: number;
                                    initiallyFoldCells: boolean;
                                    kernel: string;
                                    jupyterReactProps: {
                                        collaborative: boolean;
                                        lite: boolean;
                                        serverUrls?: {
                                            baseUrl?: string | undefined;
                                            wsUrl?: string | undefined;
                                        } | undefined;
                                    };
                                    nbConvert: {
                                        conversionTimeout: number;
                                        execute: boolean;
                                        nbConvertTemplate: string;
                                        notebookOutputDir: string;
                                        nbconvertPath?: string | undefined;
                                        customConversionFunction?: {
                                            pdf?: ((args_0: string, args_1: string, ...args: unknown[]) => string) | undefined;
                                        } | undefined;
                                    };
                                    jupyterNotebookProps: {
                                        readOnly: boolean;
                                        cellMetadataPanel: boolean;
                                        cellSidebarMargin: number;
                                        bundledIPyWidgets: {
                                            name: string;
                                            module: string | Record<string, string>;
                                            version: string;
                                        }[];
                                        externalIPyWidgets: {
                                            name: string;
                                            version: string;
                                        }[];
                                        nbgrader: boolean;
                                        height?: string | undefined;
                                        maxHeight?: string | undefined;
                                    };
                                    cellInputWrappers: Record<string, {
                                        prefix: string;
                                        suffix: string;
                                    }>;
                                    jupyterToken?: string | undefined;
                                } | undefined;
                                math?: {
                                    latexPackages: string[] | "all";
                                    constants: Record<string, number>;
                                    latexFontUrl?: string | undefined;
                                } | undefined;
                                UI?: {
                                    table: {
                                        maxHeight: string;
                                    };
                                    text: {
                                        blockQuoteItalic: boolean;
                                        fontPaths: "default" | {
                                            weight: "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900";
                                            path: string;
                                            style: "bold" | "italic" | "normal";
                                        }[];
                                    };
                                    media: {
                                        imageMap: Record<string, string | undefined>;
                                        includeDefaultImageMap: boolean;
                                        imageRemoteTest: string[];
                                    };
                                    theme: "ulld" | "red" | "orange" | "yellow" | "green" | "blue" | "rose" | "slate" | "gray" | "stone" | "zinc" | "neutral" | "violet";
                                    colors: Record<string, {
                                        dark?: string | undefined;
                                        light?: string | undefined;
                                    } | undefined>;
                                    autoApplyMdxTitles: boolean;
                                } | undefined;
                                slots?: {
                                    navigation?: any;
                                    bibliography?: any;
                                    math?: any;
                                    snippets?: any;
                                    dashboard?: any;
                                    taskManager?: any;
                                    UI?: any;
                                    pdf?: any;
                                    editor?: any;
                                    form?: any;
                                    commandPalette?: any;
                                } | undefined;
                                build?: {
                                    database: {
                                        type: "postgres" | "sqlite";
                                        postgres: {
                                            connectionURI: string;
                                            port?: undefined;
                                            dbName?: undefined;
                                        } | {
                                            port: number;
                                            dbName: string;
                                            connectionURI?: undefined;
                                        };
                                        prioritize: "size" | "speed";
                                    };
                                    additionalUserContent: {
                                        css?: string | undefined;
                                        logo?: string | undefined;
                                        favicon?: string | undefined;
                                    };
                                } | undefined;
                                autoTag?: {
                                    tag?: string | undefined;
                                    path?: string | undefined;
                                }[] | undefined;
                                autoTopic?: {
                                    path?: string | undefined;
                                    topic?: string | undefined;
                                }[] | undefined;
                                autoSubject?: {
                                    path?: string | undefined;
                                    subject?: string | undefined;
                                }[] | undefined;
                                alwaysPreferFs?: boolean | undefined;
                                ignoreFilepaths?: string[] | undefined;
                                tempDir?: string | undefined;
                                generatedDir?: string | undefined;
                                ignorePreferFsExtensions?: string[] | undefined;
                                fileTypePriority?: (".mdx" | ".ipynb" | ".csv" | ".tsv" | ".excel" | ".numpy" | ".html" | ".pickle" | ".db" | ".sql" | ".pdf" | ".json" | ".tex" | ".hdf5" | ".md")[] | undefined;
                                bibPath?: string | undefined;
                                cslPath?: string | undefined;
                                dateHandling?: {
                                    enableAdvancedFormat: boolean;
                                    format: {
                                        short: string;
                                        long: string;
                                        withTime: string;
                                        timeOnly: string;
                                    };
                                    defaultTimeDisplayType: "summarized" | "analog" | "descriptive";
                                    defaultTimeZone?: string | undefined;
                                } | undefined;
                                linkAliases?: Record<string, string> | undefined;
                                plotting?: {
                                    plotColorList: string[] | {
                                        dark: string[];
                                        light: string[];
                                    };
                                    plotColorCycleMethod: "inOrder" | "random";
                                } | undefined;
                                credentials?: {
                                    googleServiceAccountJsonPath?: string | undefined;
                                } | undefined;
                                performance?: {
                                    latexParsingDebounceTimeout: number;
                                    mdxParsingDebounceTimeout: number;
                                } | undefined;
                                meta?: {
                                    title: string;
                                    desc?: string | undefined;
                                } | undefined;
                                plugins?: {
                                    name: string;
                                    version: string;
                                    parserIndex: number;
                                }[] | undefined;
                            } | undefined;
                        };
                        _opts?: {
                            noteTypeId?: string | undefined;
                        } | undefined;
                    };
                    _input_out: {
                        _opts: {
                            noteTypeId?: string | undefined;
                        };
                        props: {
                            bookmarked: boolean;
                            raw: string;
                            docTypeData: {
                                label: string;
                                icon: string;
                                UI: {
                                    styles: {
                                        dark: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                        light: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                    };
                                };
                                fs: string;
                                id: string;
                                docType: string;
                                matchWeight: number;
                                url: string;
                                urlQuery: Record<string, string | number | string[] | number[]>;
                                keywords: string[];
                                autoTag: string[];
                                autoTopic: string[];
                                autoSubject: string[];
                                inSidebar: boolean;
                                inNavbar: boolean;
                                filePathPattern?: string | undefined;
                                topicLabel?: string | undefined;
                                subjectLabel?: string | undefined;
                            };
                            rootRelativePath?: string | null | undefined;
                        };
                        parseParams: {
                            docTypeData: {
                                label: string;
                                icon: string;
                                UI: {
                                    styles: {
                                        dark: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                        light: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                    };
                                };
                                fs: string;
                                id: string;
                                docType: string;
                                matchWeight: number;
                                url: string;
                                urlQuery: Record<string, string | number | string[] | number[]>;
                                keywords: string[];
                                autoTag: string[];
                                autoTopic: string[];
                                autoSubject: string[];
                                inSidebar: boolean;
                                inNavbar: boolean;
                                filePathPattern?: string | undefined;
                                topicLabel?: string | undefined;
                                subjectLabel?: string | undefined;
                            } | {};
                            parser: (args_0: {
                                data: {
                                    id?: string | null | undefined;
                                    summary?: string | null | undefined;
                                    title?: string | null | undefined;
                                    tags?: string | string[] | undefined;
                                    topics?: string | string[] | undefined;
                                    subjects?: string | string[] | undefined;
                                    sequentialKey?: string | null | undefined;
                                    importantValues?: number[] | undefined;
                                    created?: string | null | undefined;
                                    updated?: string | null | undefined;
                                    sequential?: number | null | undefined;
                                    tableStyles?: {
                                        math?: "base" | "lg" | "xl" | "small" | null | undefined;
                                        expand?: boolean | null | undefined;
                                        text?: "base" | "lg" | "xl" | "small" | null | undefined;
                                        float?: "right" | "left" | null | undefined;
                                        fullWidth?: boolean | null | undefined;
                                        tableCenter?: boolean | null | undefined;
                                        textCenter?: boolean | null | undefined;
                                        headingCenter?: boolean | null | undefined;
                                        noMax?: boolean | null | undefined;
                                    } | undefined;
                                };
                                content: string;
                                appConfig: {
                                    fsRoot: string;
                                    noteTypes: {
                                        fs: string;
                                        label?: string | undefined;
                                        icon?: string | undefined;
                                        UI?: {
                                            styles: {
                                                dark: {
                                                    bg?: string | undefined;
                                                    fg?: string | undefined;
                                                };
                                                light: {
                                                    bg?: string | undefined;
                                                    fg?: string | undefined;
                                                };
                                            };
                                        } | undefined;
                                        id?: string | undefined;
                                        docType?: string | undefined;
                                        filePathPattern?: string | undefined;
                                        matchWeight?: number | undefined;
                                        url?: string | undefined;
                                        urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                                        keywords?: string[] | undefined;
                                        topicLabel?: string | undefined;
                                        subjectLabel?: string | undefined;
                                        autoTag?: string[] | undefined;
                                        autoTopic?: string[] | undefined;
                                        autoSubject?: string[] | undefined;
                                        inSidebar?: boolean | undefined;
                                        inNavbar?: boolean | undefined;
                                    }[];
                                    code?: {
                                        editor: {
                                            defaultLangauge: string;
                                            useVimMode: boolean;
                                        };
                                        theme: {
                                            dark: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                            light: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                        };
                                        syntaxHighlighting: {
                                            transformers: {
                                                regexHighlight: boolean;
                                                lineHighlight: boolean;
                                                lineFocus: boolean;
                                                lineErrorLevel: boolean;
                                                lineDiff: boolean;
                                            };
                                            defaultLanguage: {
                                                inline: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                                block: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                            };
                                        };
                                    } | undefined;
                                    database?: {
                                        storeFormatted: boolean;
                                        removeIfNotPresentInFs: boolean;
                                    } | undefined;
                                    navigation?: {
                                        navbarBreakpoint: {
                                            full: number;
                                            minimal: number;
                                        };
                                        maxResultLength: {
                                            snippets: number;
                                            searchAll: number;
                                            equations: number;
                                            categories: number;
                                        };
                                        navbarLinks: (string | {
                                            label: string;
                                            href?: string | undefined;
                                            icon?: string | undefined;
                                            onClick?: ((...args: unknown[]) => unknown) | undefined;
                                        })[];
                                        sidebarLinks: (string | {
                                            icon: string;
                                            label?: string | undefined;
                                            href?: string | undefined;
                                            Icon?: ((...args: unknown[]) => unknown) | undefined;
                                            onClick?: ((...args: unknown[]) => unknown) | undefined;
                                        })[];
                                    } | undefined;
                                    terminal?: {
                                        logLevel: "info" | "none" | "debug" | "verbose";
                                    } | undefined;
                                    jupyter?: {
                                        execute: boolean;
                                        environment: string;
                                        syntaxHighlightTheme: string;
                                        jupyterPort: number;
                                        initiallyFoldCells: boolean;
                                        kernel: string;
                                        jupyterReactProps: {
                                            collaborative: boolean;
                                            lite: boolean;
                                            serverUrls?: {
                                                baseUrl?: string | undefined;
                                                wsUrl?: string | undefined;
                                            } | undefined;
                                        };
                                        nbConvert: {
                                            conversionTimeout: number;
                                            execute: boolean;
                                            nbConvertTemplate: string;
                                            notebookOutputDir: string;
                                            nbconvertPath?: string | undefined;
                                            customConversionFunction?: {
                                                pdf?: ((args_0: string, args_1: string, ...args: unknown[]) => string) | undefined;
                                            } | undefined;
                                        };
                                        jupyterNotebookProps: {
                                            readOnly: boolean;
                                            cellMetadataPanel: boolean;
                                            cellSidebarMargin: number;
                                            bundledIPyWidgets: {
                                                name: string;
                                                module: string | Record<string, string>;
                                                version: string;
                                            }[];
                                            externalIPyWidgets: {
                                                name: string;
                                                version: string;
                                            }[];
                                            nbgrader: boolean;
                                            height?: string | undefined;
                                            maxHeight?: string | undefined;
                                        };
                                        cellInputWrappers: Record<string, {
                                            prefix: string;
                                            suffix: string;
                                        }>;
                                        jupyterToken?: string | undefined;
                                    } | undefined;
                                    math?: {
                                        latexPackages: string[] | "all";
                                        constants: Record<string, number>;
                                        latexFontUrl?: string | undefined;
                                    } | undefined;
                                    UI?: {
                                        table: {
                                            maxHeight: string;
                                        };
                                        text: {
                                            blockQuoteItalic: boolean;
                                            fontPaths: "default" | {
                                                weight: "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900";
                                                path: string;
                                                style: "bold" | "italic" | "normal";
                                            }[];
                                        };
                                        media: {
                                            imageMap: Record<string, string | undefined>;
                                            includeDefaultImageMap: boolean;
                                            imageRemoteTest: string[];
                                        };
                                        theme: "ulld" | "red" | "orange" | "yellow" | "green" | "blue" | "rose" | "slate" | "gray" | "stone" | "zinc" | "neutral" | "violet";
                                        colors: Record<string, {
                                            dark?: string | undefined;
                                            light?: string | undefined;
                                        } | undefined>;
                                        autoApplyMdxTitles: boolean;
                                    } | undefined;
                                    slots?: {
                                        navigation?: any;
                                        bibliography?: any;
                                        math?: any;
                                        snippets?: any;
                                        dashboard?: any;
                                        taskManager?: any;
                                        UI?: any;
                                        pdf?: any;
                                        editor?: any;
                                        form?: any;
                                        commandPalette?: any;
                                    } | undefined;
                                    build?: {
                                        database: {
                                            type: "postgres" | "sqlite";
                                            postgres: {
                                                connectionURI: string;
                                                port?: undefined;
                                                dbName?: undefined;
                                            } | {
                                                port: number;
                                                dbName: string;
                                                connectionURI?: undefined;
                                            };
                                            prioritize: "size" | "speed";
                                        };
                                        additionalUserContent: {
                                            css?: string | undefined;
                                            logo?: string | undefined;
                                            favicon?: string | undefined;
                                        };
                                    } | undefined;
                                    autoTag?: {
                                        tag?: string | undefined;
                                        path?: string | undefined;
                                    }[] | undefined;
                                    autoTopic?: {
                                        path?: string | undefined;
                                        topic?: string | undefined;
                                    }[] | undefined;
                                    autoSubject?: {
                                        path?: string | undefined;
                                        subject?: string | undefined;
                                    }[] | undefined;
                                    alwaysPreferFs?: boolean | undefined;
                                    ignoreFilepaths?: string[] | undefined;
                                    tempDir?: string | undefined;
                                    generatedDir?: string | undefined;
                                    ignorePreferFsExtensions?: string[] | undefined;
                                    fileTypePriority?: (".mdx" | ".ipynb" | ".csv" | ".tsv" | ".excel" | ".numpy" | ".html" | ".pickle" | ".db" | ".sql" | ".pdf" | ".json" | ".tex" | ".hdf5" | ".md")[] | undefined;
                                    bibPath?: string | undefined;
                                    cslPath?: string | undefined;
                                    dateHandling?: {
                                        enableAdvancedFormat: boolean;
                                        format: {
                                            short: string;
                                            long: string;
                                            withTime: string;
                                            timeOnly: string;
                                        };
                                        defaultTimeDisplayType: "summarized" | "analog" | "descriptive";
                                        defaultTimeZone?: string | undefined;
                                    } | undefined;
                                    linkAliases?: Record<string, string> | undefined;
                                    plotting?: {
                                        plotColorList: string[] | {
                                            dark: string[];
                                            light: string[];
                                        };
                                        plotColorCycleMethod: "inOrder" | "random";
                                    } | undefined;
                                    credentials?: {
                                        googleServiceAccountJsonPath?: string | undefined;
                                    } | undefined;
                                    performance?: {
                                        latexParsingDebounceTimeout: number;
                                        mdxParsingDebounceTimeout: number;
                                    } | undefined;
                                    meta?: {
                                        title: string;
                                        desc?: string | undefined;
                                    } | undefined;
                                    plugins?: {
                                        name: string;
                                        version: string;
                                        parserIndex: number;
                                    }[] | undefined;
                                };
                                docTypeData?: {
                                    id: string;
                                    url: string;
                                    docType: string;
                                    label?: string | undefined;
                                    keywords?: string[] | undefined;
                                    icon?: string | undefined;
                                    UI?: {
                                        styles: {
                                            dark: {
                                                bg?: string | undefined;
                                                fg?: string | undefined;
                                            };
                                            light: {
                                                bg?: string | undefined;
                                                fg?: string | undefined;
                                            };
                                        };
                                    } | undefined;
                                    fs?: string | undefined;
                                    filePathPattern?: string | undefined;
                                    matchWeight?: number | undefined;
                                    urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                                    topicLabel?: string | undefined;
                                    subjectLabel?: string | undefined;
                                    autoTag?: string[] | undefined;
                                    autoTopic?: string[] | undefined;
                                    autoSubject?: string[] | undefined;
                                    inSidebar?: boolean | undefined;
                                    inNavbar?: boolean | undefined;
                                } | {} | undefined;
                                serverClient?: any;
                                db?: {
                                    id: number;
                                    firstSync: string | Date;
                                    bookmarked: boolean;
                                    lastSync: string | Date;
                                    sequentialKey?: string | null | undefined;
                                    sequentialIndex?: number | null | undefined;
                                    quickLink?: string | null | undefined;
                                } | undefined;
                            }, ...args: unknown[]) => Promise<{
                                tags: string[];
                                topics: string[];
                                subjects: string[];
                                importantValues: number[];
                                id?: string | null | undefined;
                                summary?: string | null | undefined;
                                title?: string | null | undefined;
                                sequentialKey?: string | null | undefined;
                                created?: string | null | undefined;
                                updated?: string | null | undefined;
                                sequential?: number | null | undefined;
                                tableStyles?: {
                                    expand: boolean | null;
                                    fullWidth: boolean | null;
                                    tableCenter: boolean | null;
                                    textCenter: boolean | null;
                                    headingCenter: boolean | null;
                                    noMax: boolean | null;
                                    math?: "base" | "lg" | "xl" | "small" | null | undefined;
                                    text?: "base" | "lg" | "xl" | "small" | null | undefined;
                                    float?: "right" | "left" | null | undefined;
                                } | undefined;
                            } & Record<string, string | number | boolean | Record<string, string | number | boolean | null> | Record<string, Record<string, string | number | boolean | null>> | Record<string, string | number | boolean | null>[] | (string | number | boolean | null)[] | (string | number | boolean | null)[][] | null>>;
                            appConfig?: {
                                fsRoot: string;
                                noteTypes: {
                                    fs: string;
                                    label?: string | undefined;
                                    icon?: string | undefined;
                                    UI?: {
                                        styles: {
                                            dark: {
                                                bg?: string | undefined;
                                                fg?: string | undefined;
                                            };
                                            light: {
                                                bg?: string | undefined;
                                                fg?: string | undefined;
                                            };
                                        };
                                    } | undefined;
                                    id?: string | undefined;
                                    docType?: string | undefined;
                                    filePathPattern?: string | undefined;
                                    matchWeight?: number | undefined;
                                    url?: string | undefined;
                                    urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                                    keywords?: string[] | undefined;
                                    topicLabel?: string | undefined;
                                    subjectLabel?: string | undefined;
                                    autoTag?: string[] | undefined;
                                    autoTopic?: string[] | undefined;
                                    autoSubject?: string[] | undefined;
                                    inSidebar?: boolean | undefined;
                                    inNavbar?: boolean | undefined;
                                }[];
                                code?: {
                                    editor: {
                                        defaultLangauge: string;
                                        useVimMode: boolean;
                                    };
                                    theme: {
                                        dark: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                        light: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                    };
                                    syntaxHighlighting: {
                                        transformers: {
                                            regexHighlight: boolean;
                                            lineHighlight: boolean;
                                            lineFocus: boolean;
                                            lineErrorLevel: boolean;
                                            lineDiff: boolean;
                                        };
                                        defaultLanguage: {
                                            inline: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                            block: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                        };
                                    };
                                } | undefined;
                                database?: {
                                    storeFormatted: boolean;
                                    removeIfNotPresentInFs: boolean;
                                } | undefined;
                                navigation?: {
                                    navbarBreakpoint: {
                                        full: number;
                                        minimal: number;
                                    };
                                    maxResultLength: {
                                        snippets: number;
                                        searchAll: number;
                                        equations: number;
                                        categories: number;
                                    };
                                    navbarLinks: (string | {
                                        label: string;
                                        href?: string | undefined;
                                        icon?: string | undefined;
                                        onClick?: ((...args: unknown[]) => unknown) | undefined;
                                    })[];
                                    sidebarLinks: (string | {
                                        icon: string;
                                        label?: string | undefined;
                                        href?: string | undefined;
                                        Icon?: ((...args: unknown[]) => unknown) | undefined;
                                        onClick?: ((...args: unknown[]) => unknown) | undefined;
                                    })[];
                                } | undefined;
                                terminal?: {
                                    logLevel: "info" | "none" | "debug" | "verbose";
                                } | undefined;
                                jupyter?: {
                                    execute: boolean;
                                    environment: string;
                                    syntaxHighlightTheme: string;
                                    jupyterPort: number;
                                    initiallyFoldCells: boolean;
                                    kernel: string;
                                    jupyterReactProps: {
                                        collaborative: boolean;
                                        lite: boolean;
                                        serverUrls?: {
                                            baseUrl?: string | undefined;
                                            wsUrl?: string | undefined;
                                        } | undefined;
                                    };
                                    nbConvert: {
                                        conversionTimeout: number;
                                        execute: boolean;
                                        nbConvertTemplate: string;
                                        notebookOutputDir: string;
                                        nbconvertPath?: string | undefined;
                                        customConversionFunction?: {
                                            pdf?: ((args_0: string, args_1: string, ...args: unknown[]) => string) | undefined;
                                        } | undefined;
                                    };
                                    jupyterNotebookProps: {
                                        readOnly: boolean;
                                        cellMetadataPanel: boolean;
                                        cellSidebarMargin: number;
                                        bundledIPyWidgets: {
                                            name: string;
                                            module: string | Record<string, string>;
                                            version: string;
                                        }[];
                                        externalIPyWidgets: {
                                            name: string;
                                            version: string;
                                        }[];
                                        nbgrader: boolean;
                                        height?: string | undefined;
                                        maxHeight?: string | undefined;
                                    };
                                    cellInputWrappers: Record<string, {
                                        prefix: string;
                                        suffix: string;
                                    }>;
                                    jupyterToken?: string | undefined;
                                } | undefined;
                                math?: {
                                    latexPackages: string[] | "all";
                                    constants: Record<string, number>;
                                    latexFontUrl?: string | undefined;
                                } | undefined;
                                UI?: {
                                    table: {
                                        maxHeight: string;
                                    };
                                    text: {
                                        blockQuoteItalic: boolean;
                                        fontPaths: "default" | {
                                            weight: "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900";
                                            path: string;
                                            style: "bold" | "italic" | "normal";
                                        }[];
                                    };
                                    media: {
                                        imageMap: Record<string, string | undefined>;
                                        includeDefaultImageMap: boolean;
                                        imageRemoteTest: string[];
                                    };
                                    theme: "ulld" | "red" | "orange" | "yellow" | "green" | "blue" | "rose" | "slate" | "gray" | "stone" | "zinc" | "neutral" | "violet";
                                    colors: Record<string, {
                                        dark?: string | undefined;
                                        light?: string | undefined;
                                    } | undefined>;
                                    autoApplyMdxTitles: boolean;
                                } | undefined;
                                slots?: {
                                    navigation?: any;
                                    bibliography?: any;
                                    math?: any;
                                    snippets?: any;
                                    dashboard?: any;
                                    taskManager?: any;
                                    UI?: any;
                                    pdf?: any;
                                    editor?: any;
                                    form?: any;
                                    commandPalette?: any;
                                } | undefined;
                                build?: {
                                    database: {
                                        type: "postgres" | "sqlite";
                                        postgres: {
                                            connectionURI: string;
                                            port?: undefined;
                                            dbName?: undefined;
                                        } | {
                                            port: number;
                                            dbName: string;
                                            connectionURI?: undefined;
                                        };
                                        prioritize: "size" | "speed";
                                    };
                                    additionalUserContent: {
                                        css?: string | undefined;
                                        logo?: string | undefined;
                                        favicon?: string | undefined;
                                    };
                                } | undefined;
                                autoTag?: {
                                    tag?: string | undefined;
                                    path?: string | undefined;
                                }[] | undefined;
                                autoTopic?: {
                                    path?: string | undefined;
                                    topic?: string | undefined;
                                }[] | undefined;
                                autoSubject?: {
                                    path?: string | undefined;
                                    subject?: string | undefined;
                                }[] | undefined;
                                alwaysPreferFs?: boolean | undefined;
                                ignoreFilepaths?: string[] | undefined;
                                tempDir?: string | undefined;
                                generatedDir?: string | undefined;
                                ignorePreferFsExtensions?: string[] | undefined;
                                fileTypePriority?: (".mdx" | ".ipynb" | ".csv" | ".tsv" | ".excel" | ".numpy" | ".html" | ".pickle" | ".db" | ".sql" | ".pdf" | ".json" | ".tex" | ".hdf5" | ".md")[] | undefined;
                                bibPath?: string | undefined;
                                cslPath?: string | undefined;
                                dateHandling?: {
                                    enableAdvancedFormat: boolean;
                                    format: {
                                        short: string;
                                        long: string;
                                        withTime: string;
                                        timeOnly: string;
                                    };
                                    defaultTimeDisplayType: "summarized" | "analog" | "descriptive";
                                    defaultTimeZone?: string | undefined;
                                } | undefined;
                                linkAliases?: Record<string, string> | undefined;
                                plotting?: {
                                    plotColorList: string[] | {
                                        dark: string[];
                                        light: string[];
                                    };
                                    plotColorCycleMethod: "inOrder" | "random";
                                } | undefined;
                                credentials?: {
                                    googleServiceAccountJsonPath?: string | undefined;
                                } | undefined;
                                performance?: {
                                    latexParsingDebounceTimeout: number;
                                    mdxParsingDebounceTimeout: number;
                                } | undefined;
                                meta?: {
                                    title: string;
                                    desc?: string | undefined;
                                } | undefined;
                                plugins?: {
                                    name: string;
                                    version: string;
                                    parserIndex: number;
                                }[] | undefined;
                            } | undefined;
                        };
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, string>>;
            };
            compileMdxString: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        content: string;
                        opts?: {
                            mathLabels?: "none" | "all" | "ams" | undefined;
                        } | undefined;
                    };
                    _input_out: {
                        content: string;
                        opts: {
                            mathLabels: "none" | "all" | "ams";
                        };
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, string>>;
            };
            streamMdxContent: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, string>>;
            };
        };
        notebook: {
            getRemoteIpynbFromPathname: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    equations: never;
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    toDo: never;
                    ReadingList: never;
                    topics: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    subjects: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    _count: {
                        tags: number;
                        topics: number;
                        subjects: number;
                        citations: number;
                        sequentialList: number;
                        readingList: number;
                    };
                    citations: {
                        id: string;
                        BibId: number | null;
                        OwnWork: boolean;
                        ColleaguesWork: boolean;
                        read: boolean;
                        htmlCitation: string | null;
                        PdfPath: string | null;
                        address: string | null;
                        annote: string | null;
                        author: string | null;
                        booktitle: string | null;
                        chapter: string | null;
                        crossref: string | null;
                        doi: string | null;
                        edition: string | null;
                        editor: string | null;
                        email: string | null;
                        howpublished: string | null;
                        institution: string | null;
                        journal: string | null;
                        month: string | null;
                        note: string | null;
                        number: string | null;
                        organization: string | null;
                        pages: string | null;
                        publisher: string | null;
                        school: string | null;
                        series: string | null;
                        title: string | null;
                        volume: string | null;
                        type: string | null;
                        year: string | null;
                        numpages: string | null;
                        url: string | null;
                        issue: string | null;
                        issn: string | null;
                        abstract: string | null;
                        urldate: string | null;
                        keywords: string | null;
                        copyright: string | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    sequentialList: {
                        sequentialKey: string;
                    } | null;
                    definitions: never;
                } & {
                    id: number;
                    rootRelativePath: string;
                    isProtected: boolean | null;
                    title: string;
                    latexTitle: string | null;
                    citationsListOrder: string[];
                    importantValues: number[];
                    href: string;
                    outgoingQuickLinks: string[];
                    raw: Buffer;
                    sequentialKey: string | null;
                    sequentialIndex: number | null;
                    bookmarked: boolean;
                    firstSync: Date;
                    lastSync: Date;
                    lastAccess: Date;
                }) | null>>;
            };
            getFsIpynb: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        absolutePath: string;
                    };
                    _input_out: {
                        absolutePath: string;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, string>>;
            };
            getPrismaIpynb: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    readingList: {
                        name: string;
                        description: string | null;
                        createdAt: Date;
                        lastUpdate: Date;
                    }[];
                    topics: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    citations: {
                        id: string;
                        BibId: number | null;
                        OwnWork: boolean;
                        ColleaguesWork: boolean;
                        read: boolean;
                        htmlCitation: string | null;
                        PdfPath: string | null;
                        address: string | null;
                        annote: string | null;
                        author: string | null;
                        booktitle: string | null;
                        chapter: string | null;
                        crossref: string | null;
                        doi: string | null;
                        edition: string | null;
                        editor: string | null;
                        email: string | null;
                        howpublished: string | null;
                        institution: string | null;
                        journal: string | null;
                        month: string | null;
                        note: string | null;
                        number: string | null;
                        organization: string | null;
                        pages: string | null;
                        publisher: string | null;
                        school: string | null;
                        series: string | null;
                        title: string | null;
                        volume: string | null;
                        type: string | null;
                        year: string | null;
                        numpages: string | null;
                        url: string | null;
                        issue: string | null;
                        issn: string | null;
                        abstract: string | null;
                        urldate: string | null;
                        keywords: string | null;
                        copyright: string | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                } & {
                    id: number;
                    rootRelativePath: string;
                    isProtected: boolean | null;
                    title: string;
                    latexTitle: string | null;
                    citationsListOrder: string[];
                    importantValues: number[];
                    href: string;
                    outgoingQuickLinks: string[];
                    raw: Buffer;
                    sequentialKey: string | null;
                    sequentialIndex: number | null;
                    bookmarked: boolean;
                    firstSync: Date;
                    lastSync: Date;
                    lastAccess: Date;
                }) | null>>;
            };
            getAllNotebookPaths: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, string[]>>;
            };
            getDatabaseNotebook: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        rootRelativePath: string;
                    };
                    _input_out: {
                        rootRelativePath: string;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    topics: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    subjects: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                } & {
                    id: number;
                    rootRelativePath: string;
                    isProtected: boolean | null;
                    title: string;
                    latexTitle: string | null;
                    citationsListOrder: string[];
                    importantValues: number[];
                    href: string;
                    outgoingQuickLinks: string[];
                    raw: Buffer;
                    sequentialKey: string | null;
                    sequentialIndex: number | null;
                    bookmarked: boolean;
                    firstSync: Date;
                    lastSync: Date;
                    lastAccess: Date;
                }) | null>>;
            };
        };
        snippets: {
            saveSnippet: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        content: string;
                        description: string;
                        language: "rel" | "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "mdx" | "md" | "json" | "csv" | "html" | "tex" | "jsx" | "fs" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "文言" | "wl" | "yml";
                        id?: number | undefined;
                        keywords?: string[] | {
                            set: string[];
                        } | undefined;
                    };
                    _input_out: {
                        content: string;
                        description: string;
                        language: "rel" | "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "mdx" | "md" | "json" | "csv" | "html" | "tex" | "jsx" | "fs" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "文言" | "wl" | "yml";
                        id?: number | undefined;
                        keywords?: string[] | {
                            set: string[];
                        } | undefined;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, boolean>>;
            };
            deleteSnippet: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: number;
                    _input_out: number;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                    content: string;
                    description: string;
                    keywords: string[];
                    language: string;
                    createdAt: Date;
                }>>;
            };
            getSnippets: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        query?: string | undefined;
                        language?: string | undefined;
                    };
                    _input_out: {
                        query?: string | undefined;
                        language?: string | undefined;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                    content: string;
                    description: string;
                    keywords: string[];
                    language: string;
                    createdAt: Date;
                }[]>>;
            };
            getSpecificSnippet: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: number;
                    _input_out: number;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                    content: string;
                    description: string;
                    keywords: string[];
                    language: string;
                    createdAt: Date;
                } | null>>;
            };
        };
        fsUtils: {
            getParsableFiletypesAtPath: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    ".csv": boolean;
                    ".tsv": boolean;
                    ".excel": boolean;
                    ".numpy": boolean;
                    ".html": boolean;
                    ".pickle": boolean;
                    ".db": boolean;
                    ".sql": boolean;
                    ".pdf": boolean;
                    ".json": boolean;
                    ".tex": boolean;
                    ".hdf5": boolean;
                    ".md": boolean;
                    ".mdx": boolean;
                    ".ipynb": boolean;
                }>>;
            };
            getAllRootRelativePathsOfFiletype: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: ".md" | ".mdx" | ".ipynb";
                    _input_out: ".md" | ".mdx" | ".ipynb";
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, string[]>>;
            };
            clearTempDir: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, void>>;
            };
            getUtf8File: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        rootRelativePath: string;
                        useProcessRoot?: boolean | undefined;
                    };
                    _input_out: {
                        rootRelativePath: string;
                        useProcessRoot: boolean;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, string>>;
            };
        };
        readingList: {
            addToReadingList: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        type: "BibEntry" | "MdxNote";
                        itemId: string | number;
                        readingListName?: string | undefined;
                    };
                    _input_out: {
                        type: "BibEntry" | "MdxNote";
                        readingListName: string;
                        itemId: string | number;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    name: string;
                    description: string | null;
                    createdAt: Date;
                    lastUpdate: Date;
                }>>;
            };
            getReadingListContent: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    bibEntries: ({
                        tags: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                        MdxNotes: {
                            id: number;
                            isProtected: boolean | null;
                            dietSummaryKey: string | null;
                            title: string;
                            latexTitle: string | null;
                            rootRelativePath: string;
                            noteType: string;
                            content: string;
                            formatted: string | null;
                            summary: string | null;
                            citationsListOrder: string[];
                            importantValues: number[];
                            imageSrc: string | null;
                            href: string;
                            sequentialKey: string | null;
                            sequentialIndex: number | null;
                            floatImages: boolean;
                            remoteUrl: string | null;
                            trackRemote: boolean;
                            outgoingQuickLinks: string[];
                            quickLink: string | null;
                            bookmarked: boolean;
                            firstSync: Date;
                            lastSync: Date;
                            lastAccess: Date;
                        }[];
                        citationGroups: {
                            name: string;
                            description: string | null;
                        }[];
                    } & {
                        id: string;
                        BibId: number | null;
                        OwnWork: boolean;
                        ColleaguesWork: boolean;
                        read: boolean;
                        htmlCitation: string | null;
                        PdfPath: string | null;
                        address: string | null;
                        annote: string | null;
                        author: string | null;
                        booktitle: string | null;
                        chapter: string | null;
                        crossref: string | null;
                        doi: string | null;
                        edition: string | null;
                        editor: string | null;
                        email: string | null;
                        howpublished: string | null;
                        institution: string | null;
                        journal: string | null;
                        month: string | null;
                        note: string | null;
                        number: string | null;
                        organization: string | null;
                        pages: string | null;
                        publisher: string | null;
                        school: string | null;
                        series: string | null;
                        title: string | null;
                        volume: string | null;
                        type: string | null;
                        year: string | null;
                        numpages: string | null;
                        url: string | null;
                        issue: string | null;
                        issn: string | null;
                        abstract: string | null;
                        urldate: string | null;
                        keywords: string | null;
                        copyright: string | null;
                        createdAt: Date;
                        lastAccess: Date;
                    })[];
                } & {
                    name: string;
                    description: string | null;
                    createdAt: Date;
                    lastUpdate: Date;
                }) | null>>;
            };
        };
        universalNotes: {
            getSummaryOfAllNotes: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, {
                    summary: string | null;
                    title: string;
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    subjects: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    _count: {
                        topics: number;
                        subjects: number;
                        tags: number;
                        citations: number;
                        sequentialList: number;
                        ReadingList: number;
                        equations: number;
                        definitions: number;
                        toDo: number;
                    };
                }[]>>;
            };
            getNoteIdByHref: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, number | null>>;
            };
            getFsNoteOfUnknownFormat: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    content: string;
                    format: string;
                } | undefined>>;
            };
            getQuickLinkHref: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    href: string;
                } | null>>;
            };
            getUniqueNoteTypes: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, string[]>>;
            };
            getCategoryNoteCount: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, number>>;
            };
            getUserOverview: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, {
                    overallFirstSync: Date | undefined;
                    totalNotes: {
                        mdx: number;
                        notebook: number;
                        total: number;
                    };
                    uniqueNoteTypes: string[];
                    lastAccessNotes: ({
                        type: "mdxNote";
                        id: number;
                        href: string;
                        title: string;
                        noteType: string;
                        lastAccess: Date;
                        firstSync: Date;
                        lastSync: Date;
                    } | {
                        type: "notebook";
                        id: number;
                        href: string;
                        title: string;
                        lastAccess: Date;
                        firstSync: Date;
                        lastSync: Date;
                    })[];
                }>>;
            };
        };
        media: {
            getImagesInDir: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        ignore?: string | string[] | null | undefined;
                        returnAs?: "absolute" | "rootRelative" | undefined;
                        includeSvg?: boolean | undefined;
                    };
                    _input_out: {
                        returnAs: "absolute" | "rootRelative";
                        includeSvg: boolean;
                        ignore?: string | string[] | null | undefined;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, any>>;
            };
            removeImageBackground: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        absolutePath: string;
                        config?: {
                            output?: "x-alpha8" | "x-rgba8" | "png" | "jpeg" | "webp" | undefined;
                            quality?: number | undefined;
                            model?: "small" | "medium" | "large" | undefined;
                        } | undefined;
                    };
                    _input_out: {
                        absolutePath: string;
                        config: {
                            output: "x-alpha8" | "x-rgba8" | "png" | "jpeg" | "webp";
                            quality: number;
                            model: "small" | "medium" | "large";
                        };
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, string>>;
            };
            getRandomBackgroundSettings: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, {
                    path?: string | undefined;
                    createdAt?: Date | undefined;
                    landingImageAlign?: import(".prisma/client").$Enums.ImageAlignment | undefined;
                    lockedLandingImage?: string | null | undefined;
                }>>;
            };
            deleteRandomImage: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        path: string;
                    };
                    _input_out: {
                        path: string;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    path: string;
                    createdAt: Date;
                }>>;
            };
            updateRandomImageBackground: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        path: string;
                    };
                    _input_out: {
                        path: string;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    path: string;
                    createdAt: Date;
                }>>;
            };
        };
        qa: {
            saveQA: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        question: string;
                        answer: string;
                        id?: string | undefined;
                        tags?: string[] | undefined;
                        topics?: string[] | undefined;
                        subjects?: string[] | undefined;
                        description?: string | undefined;
                    };
                    _input_out: {
                        tags: string[];
                        topics: string[];
                        subjects: string[];
                        question: string;
                        answer: string;
                        id?: string | undefined;
                        description?: string | undefined;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: string;
                    question: string;
                    answer: string;
                    description: string | null;
                    secondaryLabel: string | null;
                    correctCount: number;
                    inCorrectCount: number;
                }>>;
            };
            getSpecificQA: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    topics: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    subjects: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                } & {
                    id: string;
                    question: string;
                    answer: string;
                    description: string | null;
                    secondaryLabel: string | null;
                    correctCount: number;
                    inCorrectCount: number;
                }) | null>>;
            };
            addQAResult: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        success: boolean;
                        id: string;
                    };
                    _input_out: {
                        success: boolean;
                        id: string;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: string;
                    question: string;
                    answer: string;
                    description: string | null;
                    secondaryLabel: string | null;
                    correctCount: number;
                    inCorrectCount: number;
                } | undefined>>;
            };
            getQaAutocompleteOptions: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, string[]>>;
            };
            getQaExam: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        tags?: string[] | undefined;
                        topics?: string[] | undefined;
                        subjects?: string[] | undefined;
                    };
                    _input_out: {
                        tags?: string[] | undefined;
                        topics?: string[] | undefined;
                        subjects?: string[] | undefined;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    id: string;
                    question: string;
                    answer: string;
                    description: string | null;
                    secondaryLabel: string | null;
                    correctCount: number;
                    inCorrectCount: number;
                } & {
                    randomId: number;
                })[]>>;
            };
        };
        whiteboard: {
            save: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        id: string;
                        data: string;
                    };
                    _input_out: {
                        id: string;
                        data: string;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: string;
                    data: Buffer;
                }>>;
            };
            getById: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        id: string;
                    };
                    _input_out: {
                        id: string;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: string;
                    data: Buffer;
                } | null>>;
            };
            deleteById: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        id: string;
                    };
                    _input_out: {
                        id: string;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: string;
                    data: Buffer;
                }>>;
            };
        };
        bibliography: {
            getPrismaBib: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, ({
                    entries: ({
                        tags: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                        MdxNotes: {
                            id: number;
                            href: string;
                            title: string;
                        }[];
                        citationGroups: {
                            name: string;
                            description: string | null;
                        }[];
                    } & {
                        id: string;
                        BibId: number | null;
                        OwnWork: boolean;
                        ColleaguesWork: boolean;
                        read: boolean;
                        htmlCitation: string | null;
                        PdfPath: string | null;
                        address: string | null;
                        annote: string | null;
                        author: string | null;
                        booktitle: string | null;
                        chapter: string | null;
                        crossref: string | null;
                        doi: string | null;
                        edition: string | null;
                        editor: string | null;
                        email: string | null;
                        howpublished: string | null;
                        institution: string | null;
                        journal: string | null;
                        month: string | null;
                        note: string | null;
                        number: string | null;
                        organization: string | null;
                        pages: string | null;
                        publisher: string | null;
                        school: string | null;
                        series: string | null;
                        title: string | null;
                        volume: string | null;
                        type: string | null;
                        year: string | null;
                        numpages: string | null;
                        url: string | null;
                        issue: string | null;
                        issn: string | null;
                        abstract: string | null;
                        urldate: string | null;
                        keywords: string | null;
                        copyright: string | null;
                        createdAt: Date;
                        lastAccess: Date;
                    })[];
                } & {
                    id: number;
                    filename: string;
                    firstSync: Date;
                    lastSync: Date;
                }) | null>>;
            };
            syncBib: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        bibId?: number | undefined;
                    };
                    _input_out: {
                        bibId: number;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    entries: ({
                        tags: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                        MdxNotes: {
                            id: number;
                            href: string;
                            title: string;
                        }[];
                        citationGroups: {
                            name: string;
                            description: string | null;
                        }[];
                    } & {
                        id: string;
                        BibId: number | null;
                        OwnWork: boolean;
                        ColleaguesWork: boolean;
                        read: boolean;
                        htmlCitation: string | null;
                        PdfPath: string | null;
                        address: string | null;
                        annote: string | null;
                        author: string | null;
                        booktitle: string | null;
                        chapter: string | null;
                        crossref: string | null;
                        doi: string | null;
                        edition: string | null;
                        editor: string | null;
                        email: string | null;
                        howpublished: string | null;
                        institution: string | null;
                        journal: string | null;
                        month: string | null;
                        note: string | null;
                        number: string | null;
                        organization: string | null;
                        pages: string | null;
                        publisher: string | null;
                        school: string | null;
                        series: string | null;
                        title: string | null;
                        volume: string | null;
                        type: string | null;
                        year: string | null;
                        numpages: string | null;
                        url: string | null;
                        issue: string | null;
                        issn: string | null;
                        abstract: string | null;
                        urldate: string | null;
                        keywords: string | null;
                        copyright: string | null;
                        createdAt: Date;
                        lastAccess: Date;
                    })[];
                } & {
                    id: number;
                    filename: string;
                    firstSync: Date;
                    lastSync: Date;
                }) | {
                    errorKey: "bibPathFileDoesNotExist";
                }>>;
            };
            syncBibServerSide: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: number | undefined;
                    _input_out: number | undefined;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    entries: ({
                        tags: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                        MdxNotes: {
                            id: number;
                            href: string;
                            title: string;
                        }[];
                        citationGroups: {
                            name: string;
                            description: string | null;
                        }[];
                    } & {
                        id: string;
                        BibId: number | null;
                        OwnWork: boolean;
                        ColleaguesWork: boolean;
                        read: boolean;
                        htmlCitation: string | null;
                        PdfPath: string | null;
                        address: string | null;
                        annote: string | null;
                        author: string | null;
                        booktitle: string | null;
                        chapter: string | null;
                        crossref: string | null;
                        doi: string | null;
                        edition: string | null;
                        editor: string | null;
                        email: string | null;
                        howpublished: string | null;
                        institution: string | null;
                        journal: string | null;
                        month: string | null;
                        note: string | null;
                        number: string | null;
                        organization: string | null;
                        pages: string | null;
                        publisher: string | null;
                        school: string | null;
                        series: string | null;
                        title: string | null;
                        volume: string | null;
                        type: string | null;
                        year: string | null;
                        numpages: string | null;
                        url: string | null;
                        issue: string | null;
                        issn: string | null;
                        abstract: string | null;
                        urldate: string | null;
                        keywords: string | null;
                        copyright: string | null;
                        createdAt: Date;
                        lastAccess: Date;
                    })[];
                } & {
                    id: number;
                    filename: string;
                    firstSync: Date;
                    lastSync: Date;
                }) | {
                    errorKey: "bibPathFileDoesNotExist";
                }>>;
            };
            readBibFromFileSystem: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, string | undefined>>;
            };
            setBibEntryPdfPath: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        bibEntryId: string;
                        pdfPath: string | null;
                    };
                    _input_out: {
                        bibEntryId: string;
                        pdfPath: string | null;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                }>>;
            };
            getBib: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: number;
                    _input_out: number;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    entries: ({
                        tags: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                        readingList: {
                            name: string;
                            description: string | null;
                            createdAt: Date;
                            lastUpdate: Date;
                        }[];
                        MdxNotes: ({
                            tags: {
                                value: string;
                                kanbanId: number | null;
                                createdAt: Date;
                                lastAccess: Date;
                            }[];
                            topics: {
                                value: string;
                                kanbanId: number | null;
                                createdAt: Date;
                                lastAccess: Date;
                            }[];
                            subjects: {
                                value: string;
                                kanbanId: number | null;
                                createdAt: Date;
                                lastAccess: Date;
                            }[];
                        } & {
                            id: number;
                            isProtected: boolean | null;
                            dietSummaryKey: string | null;
                            title: string;
                            latexTitle: string | null;
                            rootRelativePath: string;
                            noteType: string;
                            content: string;
                            formatted: string | null;
                            summary: string | null;
                            citationsListOrder: string[];
                            importantValues: number[];
                            imageSrc: string | null;
                            href: string;
                            sequentialKey: string | null;
                            sequentialIndex: number | null;
                            floatImages: boolean;
                            remoteUrl: string | null;
                            trackRemote: boolean;
                            outgoingQuickLinks: string[];
                            quickLink: string | null;
                            bookmarked: boolean;
                            firstSync: Date;
                            lastSync: Date;
                            lastAccess: Date;
                        })[];
                        citationGroups: {
                            name: string;
                            description: string | null;
                        }[];
                    } & {
                        id: string;
                        BibId: number | null;
                        OwnWork: boolean;
                        ColleaguesWork: boolean;
                        read: boolean;
                        htmlCitation: string | null;
                        PdfPath: string | null;
                        address: string | null;
                        annote: string | null;
                        author: string | null;
                        booktitle: string | null;
                        chapter: string | null;
                        crossref: string | null;
                        doi: string | null;
                        edition: string | null;
                        editor: string | null;
                        email: string | null;
                        howpublished: string | null;
                        institution: string | null;
                        journal: string | null;
                        month: string | null;
                        note: string | null;
                        number: string | null;
                        organization: string | null;
                        pages: string | null;
                        publisher: string | null;
                        school: string | null;
                        series: string | null;
                        title: string | null;
                        volume: string | null;
                        type: string | null;
                        year: string | null;
                        numpages: string | null;
                        url: string | null;
                        issue: string | null;
                        issn: string | null;
                        abstract: string | null;
                        urldate: string | null;
                        keywords: string | null;
                        copyright: string | null;
                        createdAt: Date;
                        lastAccess: Date;
                    })[];
                } & {
                    id: number;
                    filename: string;
                    firstSync: Date;
                    lastSync: Date;
                }) | null>>;
            };
            getBibCitation: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string[];
                    _input_out: string[];
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: string;
                    type: string | null;
                    htmlCitation: string | null;
                }[]>>;
            };
            getBibEntry: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    readingList: ({
                        bibEntries: {
                            id: string;
                            title: string | null;
                            createdAt: Date;
                        }[];
                    } & {
                        name: string;
                        description: string | null;
                        createdAt: Date;
                        lastUpdate: Date;
                    })[];
                    MdxNotes: ({
                        tags: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                        topics: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                        subjects: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                        citations: {
                            id: string;
                            BibId: number | null;
                            OwnWork: boolean;
                            ColleaguesWork: boolean;
                            read: boolean;
                            htmlCitation: string | null;
                            PdfPath: string | null;
                            address: string | null;
                            annote: string | null;
                            author: string | null;
                            booktitle: string | null;
                            chapter: string | null;
                            crossref: string | null;
                            doi: string | null;
                            edition: string | null;
                            editor: string | null;
                            email: string | null;
                            howpublished: string | null;
                            institution: string | null;
                            journal: string | null;
                            month: string | null;
                            note: string | null;
                            number: string | null;
                            organization: string | null;
                            pages: string | null;
                            publisher: string | null;
                            school: string | null;
                            series: string | null;
                            title: string | null;
                            volume: string | null;
                            type: string | null;
                            year: string | null;
                            numpages: string | null;
                            url: string | null;
                            issue: string | null;
                            issn: string | null;
                            abstract: string | null;
                            urldate: string | null;
                            keywords: string | null;
                            copyright: string | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                    } & {
                        id: number;
                        isProtected: boolean | null;
                        dietSummaryKey: string | null;
                        title: string;
                        latexTitle: string | null;
                        rootRelativePath: string;
                        noteType: string;
                        content: string;
                        formatted: string | null;
                        summary: string | null;
                        citationsListOrder: string[];
                        importantValues: number[];
                        imageSrc: string | null;
                        href: string;
                        sequentialKey: string | null;
                        sequentialIndex: number | null;
                        floatImages: boolean;
                        remoteUrl: string | null;
                        trackRemote: boolean;
                        outgoingQuickLinks: string[];
                        quickLink: string | null;
                        bookmarked: boolean;
                        firstSync: Date;
                        lastSync: Date;
                        lastAccess: Date;
                    })[];
                    citationGroups: ({
                        entries: {
                            id: string;
                            BibId: number | null;
                            OwnWork: boolean;
                            ColleaguesWork: boolean;
                            read: boolean;
                            htmlCitation: string | null;
                            PdfPath: string | null;
                            address: string | null;
                            annote: string | null;
                            author: string | null;
                            booktitle: string | null;
                            chapter: string | null;
                            crossref: string | null;
                            doi: string | null;
                            edition: string | null;
                            editor: string | null;
                            email: string | null;
                            howpublished: string | null;
                            institution: string | null;
                            journal: string | null;
                            month: string | null;
                            note: string | null;
                            number: string | null;
                            organization: string | null;
                            pages: string | null;
                            publisher: string | null;
                            school: string | null;
                            series: string | null;
                            title: string | null;
                            volume: string | null;
                            type: string | null;
                            year: string | null;
                            numpages: string | null;
                            url: string | null;
                            issue: string | null;
                            issn: string | null;
                            abstract: string | null;
                            urldate: string | null;
                            keywords: string | null;
                            copyright: string | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                    } & {
                        name: string;
                        description: string | null;
                    })[];
                } & {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                }) | null>>;
            };
            addBibItemTag: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        tag: string;
                        bibItemId: string;
                    };
                    _input_out: {
                        tag: string;
                        bibItemId: string;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                } & {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                }>>;
            };
            removeBibEntryTag: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        tag: string;
                        bibEntryId: string;
                    };
                    _input_out: {
                        tag: string;
                        bibEntryId: string;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                }>>;
            };
            bibEntryUpsert: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: any;
                    _input_out: any;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                }>>;
            };
            bibFilename: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: number | undefined;
                    _input_out: number | undefined;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, string | {
                    filename: string;
                } | undefined>>;
            };
            getCitationGroup: {
                query: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    entries: ({
                        tags: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                        MdxNotes: {
                            id: number;
                            summary: string | null;
                            title: string;
                        }[];
                    } & {
                        id: string;
                        BibId: number | null;
                        OwnWork: boolean;
                        ColleaguesWork: boolean;
                        read: boolean;
                        htmlCitation: string | null;
                        PdfPath: string | null;
                        address: string | null;
                        annote: string | null;
                        author: string | null;
                        booktitle: string | null;
                        chapter: string | null;
                        crossref: string | null;
                        doi: string | null;
                        edition: string | null;
                        editor: string | null;
                        email: string | null;
                        howpublished: string | null;
                        institution: string | null;
                        journal: string | null;
                        month: string | null;
                        note: string | null;
                        number: string | null;
                        organization: string | null;
                        pages: string | null;
                        publisher: string | null;
                        school: string | null;
                        series: string | null;
                        title: string | null;
                        volume: string | null;
                        type: string | null;
                        year: string | null;
                        numpages: string | null;
                        url: string | null;
                        issue: string | null;
                        issn: string | null;
                        abstract: string | null;
                        urldate: string | null;
                        keywords: string | null;
                        copyright: string | null;
                        createdAt: Date;
                        lastAccess: Date;
                    })[];
                } & {
                    name: string;
                    description: string | null;
                }) | null>>;
            };
        };
        beta: {
            parseMdxString: {
                mutate: import("@trpc/client").Resolver<import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        content: string;
                    };
                    _input_out: {
                        content: string;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, string>>;
            };
        };
    };
}
declare module "actions/universal/getUniversalClient" {
    import type { client } from "trpc/client";
    export const getUniversalQuery: (queryKey: keyof typeof client | string, routerParent?: undefined | keyof typeof client, methodType?: "query" | "mutate") => Promise<any>;
}
declare module "classes/prismaMdxRelations/Bib" {
    import { type BibFilePresenter } from "bibtex";
    import type { AppConfigSchemaOutput } from "@ulld/configschema/types";
    import type { Prisma, Bib as PrismaBib } from "@ulld/database/internalDatabaseTypes";
    import { BibEntry, type BibEntryDataTableOutput } from "classes/prismaMdxRelations/BibEntry";
    import { type BibPropsOutput } from "classes/prismaMdxRelations/schemas/general";
    interface IsbnQueryParams {
    }
    export class BibCore {
        entries: BibEntry[];
        id: number;
        filename: string;
        lastAccess: Date | undefined | null;
        firstSync: Date | undefined | null;
        constructor(props?: BibPropsOutput);
        queryIsbn(params: IsbnQueryParams): Promise<void>;
        whereUniqueInput(): Prisma.BibWhereUniqueInput;
        whereInput(): Prisma.BibWhereInput;
        createInput(): Prisma.BibCreateInput;
        updateInput(): Prisma.BibUpdateInput;
        addEntries(data: BibEntry | BibEntry[]): void;
        createArgs(): Prisma.BibCreateArgs;
        upsertArgs(): Prisma.BibUpsertArgs;
        connectOrCreateArgs(): Prisma.BibCreateOrConnectWithoutEntriesInput;
        itemFromId(id: string): BibEntry | undefined;
        initEmptyBib(): void;
        getCitationsInNote(content: string): string[];
        toDataTable(): BibEntryDataTableOutput[];
        findEntryById(id: string): BibEntry | undefined;
        readFile(file?: string): Promise<BibFilePresenter | undefined>;
        readBibtexString(content: string): BibFilePresenter;
        readFileObject(file: File, autoAppend?: boolean, callback?: (result: any) => void): void;
        sortEntriesByDate(): void;
        static fromPrisma(item: PrismaBib, config: AppConfigSchemaOutput): BibCore;
    }
}
declare module "classes/prismaMdxRelations/schemas/ipynbPropsSchema" {
    import { z } from "zod";
    export const ipynbPropsSchema: z.ZodEffects<z.ZodObject<z.objectUtil.extendShape<{
        filepath: z.ZodString;
        content: z.ZodString;
        remoteUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        readingList: z.ZodBoolean;
    }, Pick<z.objectUtil.extendShape<{
        content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        id: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        latexTitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        raw: z.ZodString;
        floatImages: z.ZodDefault<z.ZodBoolean>;
        formatted: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        citations: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodEffects<z.ZodObject<{
            Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                filename: z.ZodDefault<z.ZodString>;
                id: z.ZodDefault<z.ZodNumber>;
                entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                filename: string;
                entries: any[];
                lastAccess?: Date | null | undefined;
                firstSync?: Date | null | undefined;
            }, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            }>>, import("classes/prismaMdxRelations/Bib").BibCore, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            } | undefined>;
            BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
            readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                createdAt: Date;
                mdxNotes: any[];
                bibEntries: any[];
                ipynbNotes: any[];
                description: string | null;
                lastUpdate: Date;
            }, {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }>, "many">>, import("classes/prismaMdxRelations/readingList").ReadingList[], {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }[] | undefined>;
            topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, import("classes/prismaMdxRelations/topic").Topic[], {
                value: string;
            }[] | undefined>;
            subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, import("classes/prismaMdxRelations/subject").Subject[], {
                value: string;
            }[] | undefined>;
            tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>, import("classes/prismaMdxRelations/tag").Tag[], (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined>;
            id: z.ZodString;
            type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            read: z.ZodDefault<z.ZodBoolean>;
            OwnWork: z.ZodDefault<z.ZodBoolean>;
            ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
            MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                entries: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }>, "many">>, import("classes/prismaMdxRelations/CitationGroup").CitationGroup[], {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }[] | undefined>;
            added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        }, "strip", z.ZodString, z.objectOutputType<{
            Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                filename: z.ZodDefault<z.ZodString>;
                id: z.ZodDefault<z.ZodNumber>;
                entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                filename: string;
                entries: any[];
                lastAccess?: Date | null | undefined;
                firstSync?: Date | null | undefined;
            }, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            }>>, import("classes/prismaMdxRelations/Bib").BibCore, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            } | undefined>;
            BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
            readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                createdAt: Date;
                mdxNotes: any[];
                bibEntries: any[];
                ipynbNotes: any[];
                description: string | null;
                lastUpdate: Date;
            }, {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }>, "many">>, import("classes/prismaMdxRelations/readingList").ReadingList[], {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }[] | undefined>;
            topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, import("classes/prismaMdxRelations/topic").Topic[], {
                value: string;
            }[] | undefined>;
            subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, import("classes/prismaMdxRelations/subject").Subject[], {
                value: string;
            }[] | undefined>;
            tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>, import("classes/prismaMdxRelations/tag").Tag[], (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined>;
            id: z.ZodString;
            type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            read: z.ZodDefault<z.ZodBoolean>;
            OwnWork: z.ZodDefault<z.ZodBoolean>;
            ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
            MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                entries: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }>, "many">>, import("classes/prismaMdxRelations/CitationGroup").CitationGroup[], {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }[] | undefined>;
            added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        }, z.ZodString, "strip">, z.objectInputType<{
            Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                filename: z.ZodDefault<z.ZodString>;
                id: z.ZodDefault<z.ZodNumber>;
                entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                filename: string;
                entries: any[];
                lastAccess?: Date | null | undefined;
                firstSync?: Date | null | undefined;
            }, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            }>>, import("classes/prismaMdxRelations/Bib").BibCore, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            } | undefined>;
            BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
            readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                createdAt: Date;
                mdxNotes: any[];
                bibEntries: any[];
                ipynbNotes: any[];
                description: string | null;
                lastUpdate: Date;
            }, {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }>, "many">>, import("classes/prismaMdxRelations/readingList").ReadingList[], {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }[] | undefined>;
            topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, import("classes/prismaMdxRelations/topic").Topic[], {
                value: string;
            }[] | undefined>;
            subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, import("classes/prismaMdxRelations/subject").Subject[], {
                value: string;
            }[] | undefined>;
            tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>, import("classes/prismaMdxRelations/tag").Tag[], (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined>;
            id: z.ZodString;
            type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            read: z.ZodDefault<z.ZodBoolean>;
            OwnWork: z.ZodDefault<z.ZodBoolean>;
            ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
            MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                entries: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }>, "many">>, import("classes/prismaMdxRelations/CitationGroup").CitationGroup[], {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }[] | undefined>;
            added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        }, z.ZodString, "strip">>, Omit<{
            id: string;
            tags: import("classes/prismaMdxRelations/tag").Tag[];
            readingList: import("classes/prismaMdxRelations/readingList").ReadingList[];
            Bib: import("classes/prismaMdxRelations/Bib").BibCore;
            createdAt: Date;
            lastAccess: Date;
            topics: import("classes/prismaMdxRelations/topic").Topic[];
            subjects: import("classes/prismaMdxRelations/subject").Subject[];
            BibId: number | null;
            OwnWork: boolean;
            ColleaguesWork: boolean;
            read: boolean;
            citationGroups: import("classes/prismaMdxRelations/CitationGroup").CitationGroup[];
            added: Date;
            number?: string | null | undefined;
            journal?: string | null | undefined;
            editor?: string | null | undefined;
            note?: string | null | undefined;
            abstract?: string | null | undefined;
            type?: string | null | undefined;
            title?: string | null | undefined;
            copyright?: string | null | undefined;
            school?: string | null | undefined;
            volume?: string | null | undefined;
            keywords?: string | null | undefined;
            MdxNotes?: any[] | null | undefined;
            htmlCitation?: string | null | undefined;
            PdfPath?: string | null | undefined;
            address?: string | null | undefined;
            annote?: string | null | undefined;
            author?: string | null | undefined;
            booktitle?: string | null | undefined;
            chapter?: string | null | undefined;
            crossref?: string | null | undefined;
            doi?: string | null | undefined;
            edition?: string | null | undefined;
            email?: string | null | undefined;
            howpublished?: string | null | undefined;
            institution?: string | null | undefined;
            month?: string | null | undefined;
            organization?: string | null | undefined;
            pages?: string | null | undefined;
            publisher?: string | null | undefined;
            series?: string | null | undefined;
            year?: string | null | undefined;
            numpages?: string | null | undefined;
            url?: string | null | undefined;
            issue?: string | null | undefined;
            issn?: string | null | undefined;
            urldate?: string | null | undefined;
            tempPageIndex?: number | null | undefined;
        }, "BibId"> & {
            BibId: number;
        }, z.objectInputType<{
            Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                filename: z.ZodDefault<z.ZodString>;
                id: z.ZodDefault<z.ZodNumber>;
                entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                filename: string;
                entries: any[];
                lastAccess?: Date | null | undefined;
                firstSync?: Date | null | undefined;
            }, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            }>>, import("classes/prismaMdxRelations/Bib").BibCore, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            } | undefined>;
            BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
            readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                createdAt: Date;
                mdxNotes: any[];
                bibEntries: any[];
                ipynbNotes: any[];
                description: string | null;
                lastUpdate: Date;
            }, {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }>, "many">>, import("classes/prismaMdxRelations/readingList").ReadingList[], {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }[] | undefined>;
            topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, import("classes/prismaMdxRelations/topic").Topic[], {
                value: string;
            }[] | undefined>;
            subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, import("classes/prismaMdxRelations/subject").Subject[], {
                value: string;
            }[] | undefined>;
            tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>, import("classes/prismaMdxRelations/tag").Tag[], (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined>;
            id: z.ZodString;
            type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            read: z.ZodDefault<z.ZodBoolean>;
            OwnWork: z.ZodDefault<z.ZodBoolean>;
            ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
            MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                entries: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }>, "many">>, import("classes/prismaMdxRelations/CitationGroup").CitationGroup[], {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }[] | undefined>;
            added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        }, z.ZodString, "strip">>, "many">>, import("classes/prismaMdxRelations/BibEntry").BibEntry[], z.objectInputType<{
            Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                filename: z.ZodDefault<z.ZodString>;
                id: z.ZodDefault<z.ZodNumber>;
                entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                filename: string;
                entries: any[];
                lastAccess?: Date | null | undefined;
                firstSync?: Date | null | undefined;
            }, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            }>>, import("classes/prismaMdxRelations/Bib").BibCore, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            } | undefined>;
            BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
            readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                createdAt: Date;
                mdxNotes: any[];
                bibEntries: any[];
                ipynbNotes: any[];
                description: string | null;
                lastUpdate: Date;
            }, {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }>, "many">>, import("classes/prismaMdxRelations/readingList").ReadingList[], {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }[] | undefined>;
            topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, import("classes/prismaMdxRelations/topic").Topic[], {
                value: string;
            }[] | undefined>;
            subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, import("classes/prismaMdxRelations/subject").Subject[], {
                value: string;
            }[] | undefined>;
            tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>, import("classes/prismaMdxRelations/tag").Tag[], (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined>;
            id: z.ZodString;
            type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            read: z.ZodDefault<z.ZodBoolean>;
            OwnWork: z.ZodDefault<z.ZodBoolean>;
            ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
            MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                entries: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }>, "many">>, import("classes/prismaMdxRelations/CitationGroup").CitationGroup[], {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }[] | undefined>;
            added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        }, z.ZodString, "strip">[] | undefined>;
        importantValues: z.ZodDefault<z.ZodArray<z.ZodNumber, "many">>;
        bookmarked: z.ZodDefault<z.ZodBoolean>;
        quickLinkId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        href: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        citationsListOrder: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        outgoingQuickLinks: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        rootRelativePath: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | null | undefined, string | null | undefined>;
        equationIds: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        isProtected: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>>;
        sequentialKey: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        sequentialIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        sequentialList: z.ZodOptional<z.ZodObject<{
            sequentialKey: z.ZodString;
            MdxNote: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            Ipynb: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
        }, "strip", z.ZodTypeAny, {
            MdxNote: any[];
            Ipynb: any[];
            sequentialKey: string;
        }, {
            sequentialKey: string;
            MdxNote?: any[] | undefined;
            Ipynb?: any[] | undefined;
        }>>;
        remoteUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        noLog: z.ZodDefault<z.ZodBoolean>;
        saveFormatted: z.ZodDefault<z.ZodBoolean>;
        noteType: z.ZodEffects<z.ZodString, string, string>;
        trackRemote: z.ZodDefault<z.ZodBoolean>;
        toDo: z.ZodDefault<z.ZodArray<z.ZodObject<{
            id: z.ZodNumber;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            task: z.ZodString;
            dueAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            details: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            associatedNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            tags: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>;
            topics: z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>;
            subjects: z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>;
            parentId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            category: z.ZodNativeEnum<{
                bug: "bug";
                feature: "feature";
                documentation: "documentation";
                online: "online";
                priority: "priority";
                urgent: "urgent";
                work: "work";
                gym: "gym";
                freetime: "freetime";
                study: "study";
                research: "research";
                paper: "paper";
            }>;
            bookmarked: z.ZodDefault<z.ZodBoolean>;
            status: z.ZodEnum<["ToDo", "In_Progress", "Backlog", "Cancelled", "Done", "Future"]>;
            priority: z.ZodNumber;
            parent: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodAny>>>;
            child: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodAny>>>;
            ToDoList: z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                label: z.ZodString;
                tasks: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, Pick<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "createdAt" | "lastUpdate">>, {
                topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                }, {
                    value: string;
                }>, "many">>, import("classes/prismaMdxRelations/topic").Topic[], {
                    value: string;
                }[] | undefined>;
                subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                }, {
                    value: string;
                }>, "many">>, import("classes/prismaMdxRelations/subject").Subject[], {
                    value: string;
                }[] | undefined>;
                tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    value: z.ZodString;
                    kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }>, z.ZodEffects<z.ZodString, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }, string>]>, "many">>, import("classes/prismaMdxRelations/tag").Tag[], (string | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[] | undefined>;
            }>, "strip", z.ZodTypeAny, {
                id: number;
                label: string;
                tags: import("classes/prismaMdxRelations/tag").Tag[];
                createdAt: Date;
                topics: import("classes/prismaMdxRelations/topic").Topic[];
                subjects: import("classes/prismaMdxRelations/subject").Subject[];
                lastUpdate: Date;
                tasks: any[];
            }, {
                id: number;
                label: string;
                tags?: (string | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[] | undefined;
                createdAt?: string | Date | null | undefined;
                topics?: {
                    value: string;
                }[] | undefined;
                subjects?: {
                    value: string;
                }[] | undefined;
                lastUpdate?: string | Date | null | undefined;
                tasks?: any[] | undefined;
            }>;
            toDoListId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            id: number;
            tags: ({
                value: string;
                kanbanId?: number | null | undefined;
            } | {
                value: string;
                kanbanId?: number | null | undefined;
            })[];
            ToDoList: {
                id: number;
                label: string;
                tags: import("classes/prismaMdxRelations/tag").Tag[];
                createdAt: Date;
                topics: import("classes/prismaMdxRelations/topic").Topic[];
                subjects: import("classes/prismaMdxRelations/subject").Subject[];
                lastUpdate: Date;
                tasks: any[];
            };
            createdAt: Date;
            topics: {
                value: string;
            }[];
            subjects: {
                value: string;
            }[];
            bookmarked: boolean;
            status: "ToDo" | "In_Progress" | "Backlog" | "Cancelled" | "Done" | "Future";
            task: string;
            dueAt: Date;
            associatedNotes: any[];
            category: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper";
            priority: number;
            toDoListId: number;
            details?: string | null | undefined;
            parentId?: number | null | undefined;
            parent?: any;
            child?: any;
        }, {
            id: number;
            ToDoList: {
                id: number;
                label: string;
                tags?: (string | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[] | undefined;
                createdAt?: string | Date | null | undefined;
                topics?: {
                    value: string;
                }[] | undefined;
                subjects?: {
                    value: string;
                }[] | undefined;
                lastUpdate?: string | Date | null | undefined;
                tasks?: any[] | undefined;
            };
            status: "ToDo" | "In_Progress" | "Backlog" | "Cancelled" | "Done" | "Future";
            task: string;
            category: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper";
            priority: number;
            toDoListId: number;
            tags?: (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined;
            createdAt?: string | Date | null | undefined;
            topics?: {
                value: string;
            }[] | undefined;
            subjects?: {
                value: string;
            }[] | undefined;
            bookmarked?: boolean | undefined;
            dueAt?: string | Date | null | undefined;
            details?: string | null | undefined;
            associatedNotes?: any[] | undefined;
            parentId?: number | null | undefined;
            parent?: any;
            child?: any;
        }>, "many">>;
        summary: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodEffects<z.ZodString, Date, string>, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
        lastSync: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodEffects<z.ZodString, Date, string>, z.ZodDate]>>>;
    }, {
        topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>, import("classes/prismaMdxRelations/topic").Topic[], {
            value: string;
        }[] | undefined>;
        subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>, import("classes/prismaMdxRelations/subject").Subject[], {
            value: string;
        }[] | undefined>;
        tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            value: z.ZodString;
            kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            value: string;
            kanbanId?: number | null | undefined;
        }, {
            value: string;
            kanbanId?: number | null | undefined;
        }>, z.ZodEffects<z.ZodString, {
            value: string;
            kanbanId?: number | null | undefined;
        }, string>]>, "many">>, import("classes/prismaMdxRelations/tag").Tag[], (string | {
            value: string;
            kanbanId?: number | null | undefined;
        })[] | undefined>;
    }>, "href" | "title" | "tags" | "topics" | "subjects" | "firstSync" | "lastSync" | "isProtected" | "latexTitle" | "rootRelativePath" | "citationsListOrder" | "sequentialKey" | "sequentialIndex" | "outgoingQuickLinks" | "bookmarked" | "citations" | "sequentialList" | "raw">>, "strip", z.ZodTypeAny, {
        content: string;
        tags: import("classes/prismaMdxRelations/tag").Tag[];
        readingList: boolean;
        topics: import("classes/prismaMdxRelations/topic").Topic[];
        subjects: import("classes/prismaMdxRelations/subject").Subject[];
        isProtected: boolean | null;
        citationsListOrder: string[];
        outgoingQuickLinks: string[];
        bookmarked: boolean;
        citations: import("classes/prismaMdxRelations/BibEntry").BibEntry[];
        raw: string;
        filepath: string;
        href?: string | null | undefined;
        title?: string | null | undefined;
        firstSync?: Date | null | undefined;
        lastSync?: Date | null | undefined;
        latexTitle?: string | null | undefined;
        rootRelativePath?: string | null | undefined;
        sequentialKey?: string | null | undefined;
        sequentialIndex?: number | null | undefined;
        remoteUrl?: string | null | undefined;
        sequentialList?: {
            MdxNote: any[];
            Ipynb: any[];
            sequentialKey: string;
        } | undefined;
    }, {
        content: string;
        readingList: boolean;
        raw: string;
        filepath: string;
        href?: string | null | undefined;
        title?: string | null | undefined;
        tags?: (string | {
            value: string;
            kanbanId?: number | null | undefined;
        })[] | undefined;
        topics?: {
            value: string;
        }[] | undefined;
        subjects?: {
            value: string;
        }[] | undefined;
        firstSync?: string | Date | null | undefined;
        lastSync?: string | Date | null | undefined;
        isProtected?: boolean | null | undefined;
        latexTitle?: string | null | undefined;
        rootRelativePath?: string | null | undefined;
        citationsListOrder?: string[] | undefined;
        sequentialKey?: string | null | undefined;
        sequentialIndex?: number | null | undefined;
        remoteUrl?: string | null | undefined;
        outgoingQuickLinks?: string[] | undefined;
        bookmarked?: boolean | undefined;
        citations?: z.objectInputType<{
            Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                filename: z.ZodDefault<z.ZodString>;
                id: z.ZodDefault<z.ZodNumber>;
                entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                filename: string;
                entries: any[];
                lastAccess?: Date | null | undefined;
                firstSync?: Date | null | undefined;
            }, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            }>>, import("classes/prismaMdxRelations/Bib").BibCore, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            } | undefined>;
            BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
            readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                createdAt: Date;
                mdxNotes: any[];
                bibEntries: any[];
                ipynbNotes: any[];
                description: string | null;
                lastUpdate: Date;
            }, {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }>, "many">>, import("classes/prismaMdxRelations/readingList").ReadingList[], {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }[] | undefined>;
            topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, import("classes/prismaMdxRelations/topic").Topic[], {
                value: string;
            }[] | undefined>;
            subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, import("classes/prismaMdxRelations/subject").Subject[], {
                value: string;
            }[] | undefined>;
            tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>, import("classes/prismaMdxRelations/tag").Tag[], (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined>;
            id: z.ZodString;
            type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            read: z.ZodDefault<z.ZodBoolean>;
            OwnWork: z.ZodDefault<z.ZodBoolean>;
            ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
            MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                entries: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }>, "many">>, import("classes/prismaMdxRelations/CitationGroup").CitationGroup[], {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }[] | undefined>;
            added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        }, z.ZodString, "strip">[] | undefined;
        sequentialList?: {
            sequentialKey: string;
            MdxNote?: any[] | undefined;
            Ipynb?: any[] | undefined;
        } | undefined;
    }>, {
        raw: string;
        href: string;
        content: string;
        tags: import("classes/prismaMdxRelations/tag").Tag[];
        readingList: boolean;
        topics: import("classes/prismaMdxRelations/topic").Topic[];
        subjects: import("classes/prismaMdxRelations/subject").Subject[];
        isProtected: boolean | null;
        citationsListOrder: string[];
        outgoingQuickLinks: string[];
        bookmarked: boolean;
        citations: import("classes/prismaMdxRelations/BibEntry").BibEntry[];
        filepath: string;
        title?: string | null | undefined;
        firstSync?: Date | null | undefined;
        lastSync?: Date | null | undefined;
        latexTitle?: string | null | undefined;
        rootRelativePath?: string | null | undefined;
        sequentialKey?: string | null | undefined;
        sequentialIndex?: number | null | undefined;
        remoteUrl?: string | null | undefined;
        sequentialList?: {
            MdxNote: any[];
            Ipynb: any[];
            sequentialKey: string;
        } | undefined;
    }, {
        content: string;
        readingList: boolean;
        raw: string;
        filepath: string;
        href?: string | null | undefined;
        title?: string | null | undefined;
        tags?: (string | {
            value: string;
            kanbanId?: number | null | undefined;
        })[] | undefined;
        topics?: {
            value: string;
        }[] | undefined;
        subjects?: {
            value: string;
        }[] | undefined;
        firstSync?: string | Date | null | undefined;
        lastSync?: string | Date | null | undefined;
        isProtected?: boolean | null | undefined;
        latexTitle?: string | null | undefined;
        rootRelativePath?: string | null | undefined;
        citationsListOrder?: string[] | undefined;
        sequentialKey?: string | null | undefined;
        sequentialIndex?: number | null | undefined;
        remoteUrl?: string | null | undefined;
        outgoingQuickLinks?: string[] | undefined;
        bookmarked?: boolean | undefined;
        citations?: z.objectInputType<{
            Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                filename: z.ZodDefault<z.ZodString>;
                id: z.ZodDefault<z.ZodNumber>;
                entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                filename: string;
                entries: any[];
                lastAccess?: Date | null | undefined;
                firstSync?: Date | null | undefined;
            }, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            }>>, import("classes/prismaMdxRelations/Bib").BibCore, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            } | undefined>;
            BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
            readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                createdAt: Date;
                mdxNotes: any[];
                bibEntries: any[];
                ipynbNotes: any[];
                description: string | null;
                lastUpdate: Date;
            }, {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }>, "many">>, import("classes/prismaMdxRelations/readingList").ReadingList[], {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }[] | undefined>;
            topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, import("classes/prismaMdxRelations/topic").Topic[], {
                value: string;
            }[] | undefined>;
            subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, import("classes/prismaMdxRelations/subject").Subject[], {
                value: string;
            }[] | undefined>;
            tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>, import("classes/prismaMdxRelations/tag").Tag[], (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined>;
            id: z.ZodString;
            type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            read: z.ZodDefault<z.ZodBoolean>;
            OwnWork: z.ZodDefault<z.ZodBoolean>;
            ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
            MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                entries: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }>, "many">>, import("classes/prismaMdxRelations/CitationGroup").CitationGroup[], {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }[] | undefined>;
            added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        }, z.ZodString, "strip">[] | undefined;
        sequentialList?: {
            sequentialKey: string;
            MdxNote?: any[] | undefined;
            Ipynb?: any[] | undefined;
        } | undefined;
    }>;
    export const ipynbRemotePropsSchema: z.ZodObject<z.objectUtil.extendShape<Omit<z.objectUtil.extendShape<{
        filepath: z.ZodString;
        content: z.ZodString;
        remoteUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        readingList: z.ZodBoolean;
    }, Pick<z.objectUtil.extendShape<{
        content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        id: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        latexTitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        raw: z.ZodString;
        floatImages: z.ZodDefault<z.ZodBoolean>;
        formatted: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        citations: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodEffects<z.ZodObject<{
            Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                filename: z.ZodDefault<z.ZodString>;
                id: z.ZodDefault<z.ZodNumber>;
                entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                filename: string;
                entries: any[];
                lastAccess?: Date | null | undefined;
                firstSync?: Date | null | undefined;
            }, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            }>>, import("classes/prismaMdxRelations/Bib").BibCore, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            } | undefined>;
            BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
            readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                createdAt: Date;
                mdxNotes: any[];
                bibEntries: any[];
                ipynbNotes: any[];
                description: string | null;
                lastUpdate: Date;
            }, {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }>, "many">>, import("classes/prismaMdxRelations/readingList").ReadingList[], {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }[] | undefined>;
            topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, import("classes/prismaMdxRelations/topic").Topic[], {
                value: string;
            }[] | undefined>;
            subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, import("classes/prismaMdxRelations/subject").Subject[], {
                value: string;
            }[] | undefined>;
            tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>, import("classes/prismaMdxRelations/tag").Tag[], (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined>;
            id: z.ZodString;
            type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            read: z.ZodDefault<z.ZodBoolean>;
            OwnWork: z.ZodDefault<z.ZodBoolean>;
            ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
            MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                entries: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }>, "many">>, import("classes/prismaMdxRelations/CitationGroup").CitationGroup[], {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }[] | undefined>;
            added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        }, "strip", z.ZodString, z.objectOutputType<{
            Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                filename: z.ZodDefault<z.ZodString>;
                id: z.ZodDefault<z.ZodNumber>;
                entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                filename: string;
                entries: any[];
                lastAccess?: Date | null | undefined;
                firstSync?: Date | null | undefined;
            }, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            }>>, import("classes/prismaMdxRelations/Bib").BibCore, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            } | undefined>;
            BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
            readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                createdAt: Date;
                mdxNotes: any[];
                bibEntries: any[];
                ipynbNotes: any[];
                description: string | null;
                lastUpdate: Date;
            }, {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }>, "many">>, import("classes/prismaMdxRelations/readingList").ReadingList[], {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }[] | undefined>;
            topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, import("classes/prismaMdxRelations/topic").Topic[], {
                value: string;
            }[] | undefined>;
            subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, import("classes/prismaMdxRelations/subject").Subject[], {
                value: string;
            }[] | undefined>;
            tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>, import("classes/prismaMdxRelations/tag").Tag[], (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined>;
            id: z.ZodString;
            type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            read: z.ZodDefault<z.ZodBoolean>;
            OwnWork: z.ZodDefault<z.ZodBoolean>;
            ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
            MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                entries: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }>, "many">>, import("classes/prismaMdxRelations/CitationGroup").CitationGroup[], {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }[] | undefined>;
            added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        }, z.ZodString, "strip">, z.objectInputType<{
            Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                filename: z.ZodDefault<z.ZodString>;
                id: z.ZodDefault<z.ZodNumber>;
                entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                filename: string;
                entries: any[];
                lastAccess?: Date | null | undefined;
                firstSync?: Date | null | undefined;
            }, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            }>>, import("classes/prismaMdxRelations/Bib").BibCore, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            } | undefined>;
            BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
            readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                createdAt: Date;
                mdxNotes: any[];
                bibEntries: any[];
                ipynbNotes: any[];
                description: string | null;
                lastUpdate: Date;
            }, {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }>, "many">>, import("classes/prismaMdxRelations/readingList").ReadingList[], {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }[] | undefined>;
            topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, import("classes/prismaMdxRelations/topic").Topic[], {
                value: string;
            }[] | undefined>;
            subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, import("classes/prismaMdxRelations/subject").Subject[], {
                value: string;
            }[] | undefined>;
            tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>, import("classes/prismaMdxRelations/tag").Tag[], (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined>;
            id: z.ZodString;
            type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            read: z.ZodDefault<z.ZodBoolean>;
            OwnWork: z.ZodDefault<z.ZodBoolean>;
            ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
            MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                entries: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }>, "many">>, import("classes/prismaMdxRelations/CitationGroup").CitationGroup[], {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }[] | undefined>;
            added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        }, z.ZodString, "strip">>, Omit<{
            id: string;
            tags: import("classes/prismaMdxRelations/tag").Tag[];
            readingList: import("classes/prismaMdxRelations/readingList").ReadingList[];
            Bib: import("classes/prismaMdxRelations/Bib").BibCore;
            createdAt: Date;
            lastAccess: Date;
            topics: import("classes/prismaMdxRelations/topic").Topic[];
            subjects: import("classes/prismaMdxRelations/subject").Subject[];
            BibId: number | null;
            OwnWork: boolean;
            ColleaguesWork: boolean;
            read: boolean;
            citationGroups: import("classes/prismaMdxRelations/CitationGroup").CitationGroup[];
            added: Date;
            number?: string | null | undefined;
            journal?: string | null | undefined;
            editor?: string | null | undefined;
            note?: string | null | undefined;
            abstract?: string | null | undefined;
            type?: string | null | undefined;
            title?: string | null | undefined;
            copyright?: string | null | undefined;
            school?: string | null | undefined;
            volume?: string | null | undefined;
            keywords?: string | null | undefined;
            MdxNotes?: any[] | null | undefined;
            htmlCitation?: string | null | undefined;
            PdfPath?: string | null | undefined;
            address?: string | null | undefined;
            annote?: string | null | undefined;
            author?: string | null | undefined;
            booktitle?: string | null | undefined;
            chapter?: string | null | undefined;
            crossref?: string | null | undefined;
            doi?: string | null | undefined;
            edition?: string | null | undefined;
            email?: string | null | undefined;
            howpublished?: string | null | undefined;
            institution?: string | null | undefined;
            month?: string | null | undefined;
            organization?: string | null | undefined;
            pages?: string | null | undefined;
            publisher?: string | null | undefined;
            series?: string | null | undefined;
            year?: string | null | undefined;
            numpages?: string | null | undefined;
            url?: string | null | undefined;
            issue?: string | null | undefined;
            issn?: string | null | undefined;
            urldate?: string | null | undefined;
            tempPageIndex?: number | null | undefined;
        }, "BibId"> & {
            BibId: number;
        }, z.objectInputType<{
            Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                filename: z.ZodDefault<z.ZodString>;
                id: z.ZodDefault<z.ZodNumber>;
                entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                filename: string;
                entries: any[];
                lastAccess?: Date | null | undefined;
                firstSync?: Date | null | undefined;
            }, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            }>>, import("classes/prismaMdxRelations/Bib").BibCore, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            } | undefined>;
            BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
            readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                createdAt: Date;
                mdxNotes: any[];
                bibEntries: any[];
                ipynbNotes: any[];
                description: string | null;
                lastUpdate: Date;
            }, {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }>, "many">>, import("classes/prismaMdxRelations/readingList").ReadingList[], {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }[] | undefined>;
            topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, import("classes/prismaMdxRelations/topic").Topic[], {
                value: string;
            }[] | undefined>;
            subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, import("classes/prismaMdxRelations/subject").Subject[], {
                value: string;
            }[] | undefined>;
            tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>, import("classes/prismaMdxRelations/tag").Tag[], (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined>;
            id: z.ZodString;
            type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            read: z.ZodDefault<z.ZodBoolean>;
            OwnWork: z.ZodDefault<z.ZodBoolean>;
            ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
            MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                entries: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }>, "many">>, import("classes/prismaMdxRelations/CitationGroup").CitationGroup[], {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }[] | undefined>;
            added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        }, z.ZodString, "strip">>, "many">>, import("classes/prismaMdxRelations/BibEntry").BibEntry[], z.objectInputType<{
            Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                filename: z.ZodDefault<z.ZodString>;
                id: z.ZodDefault<z.ZodNumber>;
                entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                filename: string;
                entries: any[];
                lastAccess?: Date | null | undefined;
                firstSync?: Date | null | undefined;
            }, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            }>>, import("classes/prismaMdxRelations/Bib").BibCore, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            } | undefined>;
            BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
            readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                createdAt: Date;
                mdxNotes: any[];
                bibEntries: any[];
                ipynbNotes: any[];
                description: string | null;
                lastUpdate: Date;
            }, {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }>, "many">>, import("classes/prismaMdxRelations/readingList").ReadingList[], {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }[] | undefined>;
            topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, import("classes/prismaMdxRelations/topic").Topic[], {
                value: string;
            }[] | undefined>;
            subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, import("classes/prismaMdxRelations/subject").Subject[], {
                value: string;
            }[] | undefined>;
            tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>, import("classes/prismaMdxRelations/tag").Tag[], (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined>;
            id: z.ZodString;
            type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            read: z.ZodDefault<z.ZodBoolean>;
            OwnWork: z.ZodDefault<z.ZodBoolean>;
            ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
            MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                entries: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }>, "many">>, import("classes/prismaMdxRelations/CitationGroup").CitationGroup[], {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }[] | undefined>;
            added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        }, z.ZodString, "strip">[] | undefined>;
        importantValues: z.ZodDefault<z.ZodArray<z.ZodNumber, "many">>;
        bookmarked: z.ZodDefault<z.ZodBoolean>;
        quickLinkId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        href: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        citationsListOrder: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        outgoingQuickLinks: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        rootRelativePath: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | null | undefined, string | null | undefined>;
        equationIds: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        isProtected: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>>;
        sequentialKey: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        sequentialIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        sequentialList: z.ZodOptional<z.ZodObject<{
            sequentialKey: z.ZodString;
            MdxNote: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            Ipynb: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
        }, "strip", z.ZodTypeAny, {
            MdxNote: any[];
            Ipynb: any[];
            sequentialKey: string;
        }, {
            sequentialKey: string;
            MdxNote?: any[] | undefined;
            Ipynb?: any[] | undefined;
        }>>;
        remoteUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        noLog: z.ZodDefault<z.ZodBoolean>;
        saveFormatted: z.ZodDefault<z.ZodBoolean>;
        noteType: z.ZodEffects<z.ZodString, string, string>;
        trackRemote: z.ZodDefault<z.ZodBoolean>;
        toDo: z.ZodDefault<z.ZodArray<z.ZodObject<{
            id: z.ZodNumber;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            task: z.ZodString;
            dueAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            details: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            associatedNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            tags: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>;
            topics: z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>;
            subjects: z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>;
            parentId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            category: z.ZodNativeEnum<{
                bug: "bug";
                feature: "feature";
                documentation: "documentation";
                online: "online";
                priority: "priority";
                urgent: "urgent";
                work: "work";
                gym: "gym";
                freetime: "freetime";
                study: "study";
                research: "research";
                paper: "paper";
            }>;
            bookmarked: z.ZodDefault<z.ZodBoolean>;
            status: z.ZodEnum<["ToDo", "In_Progress", "Backlog", "Cancelled", "Done", "Future"]>;
            priority: z.ZodNumber;
            parent: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodAny>>>;
            child: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodAny>>>;
            ToDoList: z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                label: z.ZodString;
                tasks: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, Pick<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "createdAt" | "lastUpdate">>, {
                topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                }, {
                    value: string;
                }>, "many">>, import("classes/prismaMdxRelations/topic").Topic[], {
                    value: string;
                }[] | undefined>;
                subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                }, {
                    value: string;
                }>, "many">>, import("classes/prismaMdxRelations/subject").Subject[], {
                    value: string;
                }[] | undefined>;
                tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    value: z.ZodString;
                    kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }>, z.ZodEffects<z.ZodString, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }, string>]>, "many">>, import("classes/prismaMdxRelations/tag").Tag[], (string | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[] | undefined>;
            }>, "strip", z.ZodTypeAny, {
                id: number;
                label: string;
                tags: import("classes/prismaMdxRelations/tag").Tag[];
                createdAt: Date;
                topics: import("classes/prismaMdxRelations/topic").Topic[];
                subjects: import("classes/prismaMdxRelations/subject").Subject[];
                lastUpdate: Date;
                tasks: any[];
            }, {
                id: number;
                label: string;
                tags?: (string | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[] | undefined;
                createdAt?: string | Date | null | undefined;
                topics?: {
                    value: string;
                }[] | undefined;
                subjects?: {
                    value: string;
                }[] | undefined;
                lastUpdate?: string | Date | null | undefined;
                tasks?: any[] | undefined;
            }>;
            toDoListId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            id: number;
            tags: ({
                value: string;
                kanbanId?: number | null | undefined;
            } | {
                value: string;
                kanbanId?: number | null | undefined;
            })[];
            ToDoList: {
                id: number;
                label: string;
                tags: import("classes/prismaMdxRelations/tag").Tag[];
                createdAt: Date;
                topics: import("classes/prismaMdxRelations/topic").Topic[];
                subjects: import("classes/prismaMdxRelations/subject").Subject[];
                lastUpdate: Date;
                tasks: any[];
            };
            createdAt: Date;
            topics: {
                value: string;
            }[];
            subjects: {
                value: string;
            }[];
            bookmarked: boolean;
            status: "ToDo" | "In_Progress" | "Backlog" | "Cancelled" | "Done" | "Future";
            task: string;
            dueAt: Date;
            associatedNotes: any[];
            category: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper";
            priority: number;
            toDoListId: number;
            details?: string | null | undefined;
            parentId?: number | null | undefined;
            parent?: any;
            child?: any;
        }, {
            id: number;
            ToDoList: {
                id: number;
                label: string;
                tags?: (string | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[] | undefined;
                createdAt?: string | Date | null | undefined;
                topics?: {
                    value: string;
                }[] | undefined;
                subjects?: {
                    value: string;
                }[] | undefined;
                lastUpdate?: string | Date | null | undefined;
                tasks?: any[] | undefined;
            };
            status: "ToDo" | "In_Progress" | "Backlog" | "Cancelled" | "Done" | "Future";
            task: string;
            category: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper";
            priority: number;
            toDoListId: number;
            tags?: (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined;
            createdAt?: string | Date | null | undefined;
            topics?: {
                value: string;
            }[] | undefined;
            subjects?: {
                value: string;
            }[] | undefined;
            bookmarked?: boolean | undefined;
            dueAt?: string | Date | null | undefined;
            details?: string | null | undefined;
            associatedNotes?: any[] | undefined;
            parentId?: number | null | undefined;
            parent?: any;
            child?: any;
        }>, "many">>;
        summary: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodEffects<z.ZodString, Date, string>, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
        lastSync: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodEffects<z.ZodString, Date, string>, z.ZodDate]>>>;
    }, {
        topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>, import("classes/prismaMdxRelations/topic").Topic[], {
            value: string;
        }[] | undefined>;
        subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>, import("classes/prismaMdxRelations/subject").Subject[], {
            value: string;
        }[] | undefined>;
        tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            value: z.ZodString;
            kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            value: string;
            kanbanId?: number | null | undefined;
        }, {
            value: string;
            kanbanId?: number | null | undefined;
        }>, z.ZodEffects<z.ZodString, {
            value: string;
            kanbanId?: number | null | undefined;
        }, string>]>, "many">>, import("classes/prismaMdxRelations/tag").Tag[], (string | {
            value: string;
            kanbanId?: number | null | undefined;
        })[] | undefined>;
    }>, "href" | "title" | "tags" | "topics" | "subjects" | "firstSync" | "lastSync" | "isProtected" | "latexTitle" | "rootRelativePath" | "citationsListOrder" | "sequentialKey" | "sequentialIndex" | "outgoingQuickLinks" | "bookmarked" | "citations" | "sequentialList" | "raw">>, "filepath">, {
        remoteUrl: z.ZodString;
        filepath: z.ZodDefault<z.ZodNullable<z.ZodString>>;
    }>, "strip", z.ZodTypeAny, {
        content: string;
        tags: import("classes/prismaMdxRelations/tag").Tag[];
        readingList: boolean;
        topics: import("classes/prismaMdxRelations/topic").Topic[];
        subjects: import("classes/prismaMdxRelations/subject").Subject[];
        isProtected: boolean | null;
        citationsListOrder: string[];
        remoteUrl: string;
        outgoingQuickLinks: string[];
        bookmarked: boolean;
        citations: import("classes/prismaMdxRelations/BibEntry").BibEntry[];
        raw: string;
        filepath: string | null;
        href?: string | null | undefined;
        title?: string | null | undefined;
        firstSync?: Date | null | undefined;
        lastSync?: Date | null | undefined;
        latexTitle?: string | null | undefined;
        rootRelativePath?: string | null | undefined;
        sequentialKey?: string | null | undefined;
        sequentialIndex?: number | null | undefined;
        sequentialList?: {
            MdxNote: any[];
            Ipynb: any[];
            sequentialKey: string;
        } | undefined;
    }, {
        content: string;
        readingList: boolean;
        remoteUrl: string;
        raw: string;
        href?: string | null | undefined;
        title?: string | null | undefined;
        tags?: (string | {
            value: string;
            kanbanId?: number | null | undefined;
        })[] | undefined;
        topics?: {
            value: string;
        }[] | undefined;
        subjects?: {
            value: string;
        }[] | undefined;
        firstSync?: string | Date | null | undefined;
        lastSync?: string | Date | null | undefined;
        isProtected?: boolean | null | undefined;
        latexTitle?: string | null | undefined;
        rootRelativePath?: string | null | undefined;
        citationsListOrder?: string[] | undefined;
        sequentialKey?: string | null | undefined;
        sequentialIndex?: number | null | undefined;
        outgoingQuickLinks?: string[] | undefined;
        bookmarked?: boolean | undefined;
        citations?: z.objectInputType<{
            Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                filename: z.ZodDefault<z.ZodString>;
                id: z.ZodDefault<z.ZodNumber>;
                entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                filename: string;
                entries: any[];
                lastAccess?: Date | null | undefined;
                firstSync?: Date | null | undefined;
            }, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            }>>, import("classes/prismaMdxRelations/Bib").BibCore, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            } | undefined>;
            BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
            readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                createdAt: Date;
                mdxNotes: any[];
                bibEntries: any[];
                ipynbNotes: any[];
                description: string | null;
                lastUpdate: Date;
            }, {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }>, "many">>, import("classes/prismaMdxRelations/readingList").ReadingList[], {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }[] | undefined>;
            topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, import("classes/prismaMdxRelations/topic").Topic[], {
                value: string;
            }[] | undefined>;
            subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, import("classes/prismaMdxRelations/subject").Subject[], {
                value: string;
            }[] | undefined>;
            tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>, import("classes/prismaMdxRelations/tag").Tag[], (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined>;
            id: z.ZodString;
            type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            read: z.ZodDefault<z.ZodBoolean>;
            OwnWork: z.ZodDefault<z.ZodBoolean>;
            ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
            MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                entries: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }>, "many">>, import("classes/prismaMdxRelations/CitationGroup").CitationGroup[], {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }[] | undefined>;
            added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        }, z.ZodString, "strip">[] | undefined;
        sequentialList?: {
            sequentialKey: string;
            MdxNote?: any[] | undefined;
            Ipynb?: any[] | undefined;
        } | undefined;
        filepath?: string | null | undefined;
    }>;
    export type IpynbPropsOutput = z.output<typeof ipynbPropsSchema>;
    export type IpynbPropsInput = z.input<typeof ipynbPropsSchema>;
    export type IpynbRemotePropsOutput = z.output<typeof ipynbRemotePropsSchema>;
    export type IpynbRemotePropsInput = z.input<typeof ipynbRemotePropsSchema>;
}
declare module "classes/prismaMdxRelations/IpynbNote" {
    import { IpynbPropsOutput, IpynbRemotePropsOutput } from "classes/prismaMdxRelations/schemas/ipynbPropsSchema";
    import { Prisma } from "@ulld/database/internalDatabaseTypes";
    export class IpynbNote {
        id?: number;
        filepath?: string | null;
        content: string;
        rootRelativePath: string;
        title?: string | null;
        latexTitle?: string;
        href: string;
        constructor(props: IpynbPropsOutput | IpynbRemotePropsOutput);
        connectOrCreateArgs(): Prisma.IpynbCreateOrConnectWithoutTagsInput;
    }
}
declare module "classes/prismaMdxRelations/readingList" {
    import type { Prisma, ReadingList as PrismaReadingList } from "@ulld/database/internalDatabaseTypes";
    import { BibEntry } from "classes/prismaMdxRelations/BibEntry";
    import { MdxNote } from "classes/prismaMdxRelations/MdxNote";
    import { ReadingListPropsOutput } from "classes/prismaMdxRelations/schemas/general";
    import { IpynbNote } from "classes/prismaMdxRelations/IpynbNote";
    export interface PartialReadingListEntry {
        bibEntries: {
            id: string;
            title: string | null;
            added: Date;
        }[];
        name: string;
        description: string | null;
        createdAt: Date;
    }
    export type AcceptedReadingListProps = PartialReadingListEntry | ReadingList | PrismaReadingList & {
        bibEntries?: undefined;
    };
    export class ReadingList {
        bibEntries: BibEntry[];
        name: string;
        description?: string | null;
        mdxNotes: MdxNote[];
        createdAt: Date;
        lastUpdate: Date | undefined | null;
        ipynbNotes: IpynbNote[];
        constructor(props: ReadingListPropsOutput);
        toPlainObject(): {
            name: string;
            createdAt: Date;
            mdxNotes: any[];
            bibEntries: any[];
            ipynbNotes: any[];
            description: string | null;
            lastUpdate: Date;
        };
        whereInput(): Prisma.ReadingListWhereInput;
        createInput(): Prisma.ReadingListCreateInput;
        whereUniqueInput(): Prisma.ReadingListWhereUniqueInput;
        createArgs(): Prisma.ReadingListCreateArgs<import("@prisma/client/runtime/library").DefaultArgs>;
        connectOrCreateArgs(): Prisma.ReadingListCreateOrConnectWithoutBibEntriesInput;
        upsertArgs(): Prisma.ReadingListUpsertArgs<import("@prisma/client/runtime/library").DefaultArgs>;
        static fromPrisma(item: AcceptedReadingListProps): ReadingList;
        static fromList(items: AcceptedReadingListProps[] | undefined | null): ReadingList[];
    }
}
declare module "classes/prismaMdxRelations/subject" {
    import { MdxNote as PrismaMdxNote, Prisma, Subject as PrismaSubject } from "@ulld/database/internalDatabaseTypes";
    import { MdxNote } from "classes/prismaMdxRelations/MdxNote";
    import { SubjectZodOutput } from "@ulld/configschema/configUtilityTypes/docTypes";
    export class Subject {
        MdxNotes: MdxNote[];
        value: string;
        constructor(props: SubjectZodOutput);
        toPlainObject(): {
            value: string;
        };
        whereInput(): Prisma.SubjectWhereInput;
        whereUniqueInput(): Prisma.SubjectWhereUniqueInput;
        createInput(): Prisma.SubjectCreateInput;
        createArgs(): Prisma.SubjectCreateArgs;
        upsertArgs(): Prisma.SubjectUpsertArgs;
        connectOrCreateArgs(): Prisma.SubjectCreateOrConnectWithoutMdxNotesInput;
        static fromPrisma(item: PrismaSubject & {
            MdxNotes?: PrismaMdxNote[];
        }): Subject;
        static fromList(items: (Subject | PrismaSubject & {
            MdxNotes?: PrismaMdxNote[];
        })[] | undefined | null): Subject[];
    }
}
declare module "classes/prismaMdxRelations/tag" {
    import type { Prisma, Tag as PrismaTag } from "@ulld/database/internalDatabaseTypes";
    import { TagZodOutput } from "@ulld/configschema/configUtilityTypes/docTypes";
    export class Tag {
        kanbanId: number | null;
        value: string;
        constructor(props: TagZodOutput);
        toPlainObject(): {
            value: string;
        };
        createArgs(): Prisma.TagCreateArgs<import("@prisma/client/runtime/library").DefaultArgs>;
        connectOrCreateArgs(): Prisma.TagCreateOrConnectWithoutMdxNotesInput;
        upsertArgs(): Prisma.TagUpsertArgs<import("@prisma/client/runtime/library").DefaultArgs>;
        whereUniqueInput(): Prisma.TagWhereUniqueInput;
        whereInput(): Prisma.TagWhereUniqueInput;
        createInput(): Prisma.TagCreateInput;
        static fromPrisma(item: PrismaTag): Tag;
        static fromList(items: (Tag | PrismaTag)[] | undefined | null): Tag[];
    }
}
declare module "classes/prismaMdxRelations/utilities/conversionUtilities" {
    import { ParsedAppConfig } from "@ulld/configschema/types";
    import { MdxNote } from "classes/prismaMdxRelations/MdxNote";
    import type { Prisma } from '@ulld/database/internalDatabaseTypes';
    export const mdxNoteArrayToConnectOrCreate: (notes: MdxNote[], config?: ParsedAppConfig) => {
        connectOrCreate: Prisma.MdxNoteCreateOrConnectWithoutTagsInput[];
    };
}
declare module "classes/prismaMdxRelations/topic" {
    import type { Prisma, Topic as PrismaTopic, MdxNote as PrismaMdxNote } from "@ulld/database/internalDatabaseTypes";
    import { MdxNote } from "classes/prismaMdxRelations/MdxNote";
    import { ParsedAppConfig } from "@ulld/configschema/types";
    import { TopicZodOutput } from "@ulld/configschema/configUtilityTypes/docTypes";
    export class Topic {
        MdxNotes: MdxNote[];
        value: string;
        kanbanId?: number | null | undefined;
        constructor(props: TopicZodOutput);
        toPlainObject(): {
            value: string;
        };
        createArgs(config?: ParsedAppConfig): Prisma.TopicCreateArgs<import("@prisma/client/runtime/library").DefaultArgs>;
        createInput(config: ParsedAppConfig): Prisma.TopicCreateInput;
        upsertArgs(config?: ParsedAppConfig): Prisma.TopicUpsertArgs<import("@prisma/client/runtime/library").DefaultArgs>;
        whereUniqueInput(): Prisma.TopicWhereUniqueInput;
        whereInput(): Prisma.TopicWhereUniqueInput;
        MdxNoteFindAllRelated(orderBy?: "lastSync" | "firstSync", skip?: number, take?: number): Prisma.MdxNoteFindManyArgs<import("@prisma/client/runtime/library").DefaultArgs>;
        connectOrCreateArgs(): Prisma.TopicCreateOrConnectWithoutMdxNotesInput;
        static fromPrisma(item: PrismaTopic & {
            MdxNotes?: PrismaMdxNote[];
        }): Topic;
        static fromList(items: (PrismaTopic | Topic)[]): Topic[];
    }
}
declare module "classes/prismaMdxRelations/schemas/general" {
    import { z } from "zod";
    import { BibCore } from "classes/prismaMdxRelations/Bib";
    import { BibEntry } from "classes/prismaMdxRelations/BibEntry";
    import { CitationGroup } from "classes/prismaMdxRelations/CitationGroup";
    import { ReadingList } from "classes/prismaMdxRelations/readingList";
    import { Subject } from "classes/prismaMdxRelations/subject";
    import { Tag } from "classes/prismaMdxRelations/tag";
    import { Topic } from "classes/prismaMdxRelations/topic";
    export const dateTimeStringTransform: (a: Date | string | null | undefined) => Date;
    export const taggableFields: z.ZodObject<{
        topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>, Topic[], {
            value: string;
        }[] | undefined>;
        subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>, Subject[], {
            value: string;
        }[] | undefined>;
        tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            value: z.ZodString;
            kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            value: string;
            kanbanId?: number | null | undefined;
        }, {
            value: string;
            kanbanId?: number | null | undefined;
        }>, z.ZodEffects<z.ZodString, {
            value: string;
            kanbanId?: number | null | undefined;
        }, string>]>, "many">>, Tag[], (string | {
            value: string;
            kanbanId?: number | null | undefined;
        })[] | undefined>;
    }, "strip", z.ZodTypeAny, {
        tags: Tag[];
        topics: Topic[];
        subjects: Subject[];
    }, {
        tags?: (string | {
            value: string;
            kanbanId?: number | null | undefined;
        })[] | undefined;
        topics?: {
            value: string;
        }[] | undefined;
        subjects?: {
            value: string;
        }[] | undefined;
    }>;
    export const bibCoreSchema: z.ZodObject<{
        firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
        lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
        filename: z.ZodDefault<z.ZodString>;
        id: z.ZodDefault<z.ZodNumber>;
        entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
    }, "strip", z.ZodTypeAny, {
        id: number;
        filename: string;
        entries: any[];
        lastAccess?: Date | null | undefined;
        firstSync?: Date | null | undefined;
    }, {
        id?: number | undefined;
        lastAccess?: string | Date | null | undefined;
        firstSync?: string | Date | null | undefined;
        filename?: string | undefined;
        entries?: any[] | undefined;
    }>;
    export type BibPropsInput = z.input<typeof bibCoreSchema>;
    export type BibPropsOutput = z.output<typeof bibCoreSchema>;
    export const readingListZodObject: z.ZodObject<{
        name: z.ZodString;
        description: z.ZodNullable<z.ZodString>;
        bibEntries: z.ZodArray<z.ZodAny, "many">;
        mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
        ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
        createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
        lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        createdAt: Date;
        mdxNotes: any[];
        bibEntries: any[];
        ipynbNotes: any[];
        description: string | null;
        lastUpdate: Date;
    }, {
        name: string;
        bibEntries: any[];
        description: string | null;
        createdAt?: string | Date | null | undefined;
        mdxNotes?: any[] | undefined;
        ipynbNotes?: any[] | undefined;
        lastUpdate?: string | Date | null | undefined;
    }>;
    export type ReadingListPropsInput = z.input<typeof readingListZodObject>;
    export type ReadingListPropsOutput = z.output<typeof readingListZodObject>;
    export const citationGroupSchema: z.ZodObject<{
        name: z.ZodString;
        description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        entries: z.ZodArray<z.ZodAny, "many">;
    }, "strip", z.ZodTypeAny, {
        name: string;
        entries: any[];
        description?: string | null | undefined;
    }, {
        name: string;
        entries: any[];
        description?: string | null | undefined;
    }>;
    export type CitationGroupPropsInput = z.input<typeof citationGroupSchema>;
    export type CitationGroupPropsOutput = z.output<typeof citationGroupSchema>;
    const bibEntryPropsSchemaInner: z.ZodObject<{
        Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
            firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
            filename: z.ZodDefault<z.ZodString>;
            id: z.ZodDefault<z.ZodNumber>;
            entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
        }, "strip", z.ZodTypeAny, {
            id: number;
            filename: string;
            entries: any[];
            lastAccess?: Date | null | undefined;
            firstSync?: Date | null | undefined;
        }, {
            id?: number | undefined;
            lastAccess?: string | Date | null | undefined;
            firstSync?: string | Date | null | undefined;
            filename?: string | undefined;
            entries?: any[] | undefined;
        }>>, BibCore, {
            id?: number | undefined;
            lastAccess?: string | Date | null | undefined;
            firstSync?: string | Date | null | undefined;
            filename?: string | undefined;
            entries?: any[] | undefined;
        } | undefined>;
        BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
        readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            description: z.ZodNullable<z.ZodString>;
            bibEntries: z.ZodArray<z.ZodAny, "many">;
            mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            createdAt: Date;
            mdxNotes: any[];
            bibEntries: any[];
            ipynbNotes: any[];
            description: string | null;
            lastUpdate: Date;
        }, {
            name: string;
            bibEntries: any[];
            description: string | null;
            createdAt?: string | Date | null | undefined;
            mdxNotes?: any[] | undefined;
            ipynbNotes?: any[] | undefined;
            lastUpdate?: string | Date | null | undefined;
        }>, "many">>, ReadingList[], {
            name: string;
            bibEntries: any[];
            description: string | null;
            createdAt?: string | Date | null | undefined;
            mdxNotes?: any[] | undefined;
            ipynbNotes?: any[] | undefined;
            lastUpdate?: string | Date | null | undefined;
        }[] | undefined>;
        topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>, Topic[], {
            value: string;
        }[] | undefined>;
        subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>, Subject[], {
            value: string;
        }[] | undefined>;
        tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            value: z.ZodString;
            kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            value: string;
            kanbanId?: number | null | undefined;
        }, {
            value: string;
            kanbanId?: number | null | undefined;
        }>, z.ZodEffects<z.ZodString, {
            value: string;
            kanbanId?: number | null | undefined;
        }, string>]>, "many">>, Tag[], (string | {
            value: string;
            kanbanId?: number | null | undefined;
        })[] | undefined>;
        id: z.ZodString;
        type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        read: z.ZodDefault<z.ZodBoolean>;
        OwnWork: z.ZodDefault<z.ZodBoolean>;
        ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
        MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
        createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            entries: z.ZodArray<z.ZodAny, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            entries: any[];
            description?: string | null | undefined;
        }, {
            name: string;
            entries: any[];
            description?: string | null | undefined;
        }>, "many">>, CitationGroup[], {
            name: string;
            entries: any[];
            description?: string | null | undefined;
        }[] | undefined>;
        added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        tags: Tag[];
        readingList: ReadingList[];
        Bib: BibCore;
        createdAt: Date;
        lastAccess: Date;
        topics: Topic[];
        subjects: Subject[];
        BibId: number | null;
        OwnWork: boolean;
        ColleaguesWork: boolean;
        read: boolean;
        citationGroups: CitationGroup[];
        added: Date;
        number?: string | null | undefined;
        journal?: string | null | undefined;
        editor?: string | null | undefined;
        note?: string | null | undefined;
        abstract?: string | null | undefined;
        type?: string | null | undefined;
        title?: string | null | undefined;
        copyright?: string | null | undefined;
        school?: string | null | undefined;
        volume?: string | null | undefined;
        keywords?: string | null | undefined;
        MdxNotes?: any[] | null | undefined;
        htmlCitation?: string | null | undefined;
        PdfPath?: string | null | undefined;
        address?: string | null | undefined;
        annote?: string | null | undefined;
        author?: string | null | undefined;
        booktitle?: string | null | undefined;
        chapter?: string | null | undefined;
        crossref?: string | null | undefined;
        doi?: string | null | undefined;
        edition?: string | null | undefined;
        email?: string | null | undefined;
        howpublished?: string | null | undefined;
        institution?: string | null | undefined;
        month?: string | null | undefined;
        organization?: string | null | undefined;
        pages?: string | null | undefined;
        publisher?: string | null | undefined;
        series?: string | null | undefined;
        year?: string | null | undefined;
        numpages?: string | null | undefined;
        url?: string | null | undefined;
        issue?: string | null | undefined;
        issn?: string | null | undefined;
        urldate?: string | null | undefined;
        tempPageIndex?: number | null | undefined;
    }, {
        id: string;
        number?: string | null | undefined;
        journal?: string | null | undefined;
        editor?: string | null | undefined;
        note?: string | null | undefined;
        abstract?: string | null | undefined;
        type?: string | null | undefined;
        title?: string | null | undefined;
        copyright?: string | null | undefined;
        school?: string | null | undefined;
        tags?: (string | {
            value: string;
            kanbanId?: number | null | undefined;
        })[] | undefined;
        volume?: string | null | undefined;
        readingList?: {
            name: string;
            bibEntries: any[];
            description: string | null;
            createdAt?: string | Date | null | undefined;
            mdxNotes?: any[] | undefined;
            ipynbNotes?: any[] | undefined;
            lastUpdate?: string | Date | null | undefined;
        }[] | undefined;
        Bib?: {
            id?: number | undefined;
            lastAccess?: string | Date | null | undefined;
            firstSync?: string | Date | null | undefined;
            filename?: string | undefined;
            entries?: any[] | undefined;
        } | undefined;
        keywords?: string | null | undefined;
        createdAt?: string | Date | null | undefined;
        lastAccess?: string | Date | null | undefined;
        topics?: {
            value: string;
        }[] | undefined;
        subjects?: {
            value: string;
        }[] | undefined;
        MdxNotes?: any[] | null | undefined;
        BibId?: number | null | undefined;
        OwnWork?: boolean | undefined;
        ColleaguesWork?: boolean | undefined;
        read?: boolean | undefined;
        htmlCitation?: string | null | undefined;
        PdfPath?: string | null | undefined;
        address?: string | null | undefined;
        annote?: string | null | undefined;
        author?: string | null | undefined;
        booktitle?: string | null | undefined;
        chapter?: string | null | undefined;
        crossref?: string | null | undefined;
        doi?: string | null | undefined;
        edition?: string | null | undefined;
        email?: string | null | undefined;
        howpublished?: string | null | undefined;
        institution?: string | null | undefined;
        month?: string | null | undefined;
        organization?: string | null | undefined;
        pages?: string | null | undefined;
        publisher?: string | null | undefined;
        series?: string | null | undefined;
        year?: string | null | undefined;
        numpages?: string | null | undefined;
        url?: string | null | undefined;
        issue?: string | null | undefined;
        issn?: string | null | undefined;
        urldate?: string | null | undefined;
        citationGroups?: {
            name: string;
            entries: any[];
            description?: string | null | undefined;
        }[] | undefined;
        tempPageIndex?: number | null | undefined;
        added?: string | Date | null | undefined;
    }>;
    export const bibEntryTransform: (x: z.infer<typeof bibEntryPropsSchemaInner>) => Omit<z.infer<typeof bibEntryPropsSchemaInner>, "BibId"> & {
        BibId: number;
    };
    export const bibEntryPropsSchema: z.ZodEffects<z.ZodObject<{
        Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
            firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
            filename: z.ZodDefault<z.ZodString>;
            id: z.ZodDefault<z.ZodNumber>;
            entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
        }, "strip", z.ZodTypeAny, {
            id: number;
            filename: string;
            entries: any[];
            lastAccess?: Date | null | undefined;
            firstSync?: Date | null | undefined;
        }, {
            id?: number | undefined;
            lastAccess?: string | Date | null | undefined;
            firstSync?: string | Date | null | undefined;
            filename?: string | undefined;
            entries?: any[] | undefined;
        }>>, BibCore, {
            id?: number | undefined;
            lastAccess?: string | Date | null | undefined;
            firstSync?: string | Date | null | undefined;
            filename?: string | undefined;
            entries?: any[] | undefined;
        } | undefined>;
        BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
        readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            description: z.ZodNullable<z.ZodString>;
            bibEntries: z.ZodArray<z.ZodAny, "many">;
            mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            createdAt: Date;
            mdxNotes: any[];
            bibEntries: any[];
            ipynbNotes: any[];
            description: string | null;
            lastUpdate: Date;
        }, {
            name: string;
            bibEntries: any[];
            description: string | null;
            createdAt?: string | Date | null | undefined;
            mdxNotes?: any[] | undefined;
            ipynbNotes?: any[] | undefined;
            lastUpdate?: string | Date | null | undefined;
        }>, "many">>, ReadingList[], {
            name: string;
            bibEntries: any[];
            description: string | null;
            createdAt?: string | Date | null | undefined;
            mdxNotes?: any[] | undefined;
            ipynbNotes?: any[] | undefined;
            lastUpdate?: string | Date | null | undefined;
        }[] | undefined>;
        topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>, Topic[], {
            value: string;
        }[] | undefined>;
        subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>, Subject[], {
            value: string;
        }[] | undefined>;
        tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            value: z.ZodString;
            kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            value: string;
            kanbanId?: number | null | undefined;
        }, {
            value: string;
            kanbanId?: number | null | undefined;
        }>, z.ZodEffects<z.ZodString, {
            value: string;
            kanbanId?: number | null | undefined;
        }, string>]>, "many">>, Tag[], (string | {
            value: string;
            kanbanId?: number | null | undefined;
        })[] | undefined>;
        id: z.ZodString;
        type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        read: z.ZodDefault<z.ZodBoolean>;
        OwnWork: z.ZodDefault<z.ZodBoolean>;
        ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
        MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
        createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            entries: z.ZodArray<z.ZodAny, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            entries: any[];
            description?: string | null | undefined;
        }, {
            name: string;
            entries: any[];
            description?: string | null | undefined;
        }>, "many">>, CitationGroup[], {
            name: string;
            entries: any[];
            description?: string | null | undefined;
        }[] | undefined>;
        added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
    }, "strip", z.ZodString, z.objectOutputType<{
        Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
            firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
            filename: z.ZodDefault<z.ZodString>;
            id: z.ZodDefault<z.ZodNumber>;
            entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
        }, "strip", z.ZodTypeAny, {
            id: number;
            filename: string;
            entries: any[];
            lastAccess?: Date | null | undefined;
            firstSync?: Date | null | undefined;
        }, {
            id?: number | undefined;
            lastAccess?: string | Date | null | undefined;
            firstSync?: string | Date | null | undefined;
            filename?: string | undefined;
            entries?: any[] | undefined;
        }>>, BibCore, {
            id?: number | undefined;
            lastAccess?: string | Date | null | undefined;
            firstSync?: string | Date | null | undefined;
            filename?: string | undefined;
            entries?: any[] | undefined;
        } | undefined>;
        BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
        readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            description: z.ZodNullable<z.ZodString>;
            bibEntries: z.ZodArray<z.ZodAny, "many">;
            mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            createdAt: Date;
            mdxNotes: any[];
            bibEntries: any[];
            ipynbNotes: any[];
            description: string | null;
            lastUpdate: Date;
        }, {
            name: string;
            bibEntries: any[];
            description: string | null;
            createdAt?: string | Date | null | undefined;
            mdxNotes?: any[] | undefined;
            ipynbNotes?: any[] | undefined;
            lastUpdate?: string | Date | null | undefined;
        }>, "many">>, ReadingList[], {
            name: string;
            bibEntries: any[];
            description: string | null;
            createdAt?: string | Date | null | undefined;
            mdxNotes?: any[] | undefined;
            ipynbNotes?: any[] | undefined;
            lastUpdate?: string | Date | null | undefined;
        }[] | undefined>;
        topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>, Topic[], {
            value: string;
        }[] | undefined>;
        subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>, Subject[], {
            value: string;
        }[] | undefined>;
        tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            value: z.ZodString;
            kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            value: string;
            kanbanId?: number | null | undefined;
        }, {
            value: string;
            kanbanId?: number | null | undefined;
        }>, z.ZodEffects<z.ZodString, {
            value: string;
            kanbanId?: number | null | undefined;
        }, string>]>, "many">>, Tag[], (string | {
            value: string;
            kanbanId?: number | null | undefined;
        })[] | undefined>;
        id: z.ZodString;
        type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        read: z.ZodDefault<z.ZodBoolean>;
        OwnWork: z.ZodDefault<z.ZodBoolean>;
        ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
        MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
        createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            entries: z.ZodArray<z.ZodAny, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            entries: any[];
            description?: string | null | undefined;
        }, {
            name: string;
            entries: any[];
            description?: string | null | undefined;
        }>, "many">>, CitationGroup[], {
            name: string;
            entries: any[];
            description?: string | null | undefined;
        }[] | undefined>;
        added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
    }, z.ZodString, "strip">, z.objectInputType<{
        Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
            firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
            filename: z.ZodDefault<z.ZodString>;
            id: z.ZodDefault<z.ZodNumber>;
            entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
        }, "strip", z.ZodTypeAny, {
            id: number;
            filename: string;
            entries: any[];
            lastAccess?: Date | null | undefined;
            firstSync?: Date | null | undefined;
        }, {
            id?: number | undefined;
            lastAccess?: string | Date | null | undefined;
            firstSync?: string | Date | null | undefined;
            filename?: string | undefined;
            entries?: any[] | undefined;
        }>>, BibCore, {
            id?: number | undefined;
            lastAccess?: string | Date | null | undefined;
            firstSync?: string | Date | null | undefined;
            filename?: string | undefined;
            entries?: any[] | undefined;
        } | undefined>;
        BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
        readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            description: z.ZodNullable<z.ZodString>;
            bibEntries: z.ZodArray<z.ZodAny, "many">;
            mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            createdAt: Date;
            mdxNotes: any[];
            bibEntries: any[];
            ipynbNotes: any[];
            description: string | null;
            lastUpdate: Date;
        }, {
            name: string;
            bibEntries: any[];
            description: string | null;
            createdAt?: string | Date | null | undefined;
            mdxNotes?: any[] | undefined;
            ipynbNotes?: any[] | undefined;
            lastUpdate?: string | Date | null | undefined;
        }>, "many">>, ReadingList[], {
            name: string;
            bibEntries: any[];
            description: string | null;
            createdAt?: string | Date | null | undefined;
            mdxNotes?: any[] | undefined;
            ipynbNotes?: any[] | undefined;
            lastUpdate?: string | Date | null | undefined;
        }[] | undefined>;
        topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>, Topic[], {
            value: string;
        }[] | undefined>;
        subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>, Subject[], {
            value: string;
        }[] | undefined>;
        tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            value: z.ZodString;
            kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            value: string;
            kanbanId?: number | null | undefined;
        }, {
            value: string;
            kanbanId?: number | null | undefined;
        }>, z.ZodEffects<z.ZodString, {
            value: string;
            kanbanId?: number | null | undefined;
        }, string>]>, "many">>, Tag[], (string | {
            value: string;
            kanbanId?: number | null | undefined;
        })[] | undefined>;
        id: z.ZodString;
        type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        read: z.ZodDefault<z.ZodBoolean>;
        OwnWork: z.ZodDefault<z.ZodBoolean>;
        ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
        MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
        createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            entries: z.ZodArray<z.ZodAny, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            entries: any[];
            description?: string | null | undefined;
        }, {
            name: string;
            entries: any[];
            description?: string | null | undefined;
        }>, "many">>, CitationGroup[], {
            name: string;
            entries: any[];
            description?: string | null | undefined;
        }[] | undefined>;
        added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
    }, z.ZodString, "strip">>, Omit<{
        id: string;
        tags: Tag[];
        readingList: ReadingList[];
        Bib: BibCore;
        createdAt: Date;
        lastAccess: Date;
        topics: Topic[];
        subjects: Subject[];
        BibId: number | null;
        OwnWork: boolean;
        ColleaguesWork: boolean;
        read: boolean;
        citationGroups: CitationGroup[];
        added: Date;
        number?: string | null | undefined;
        journal?: string | null | undefined;
        editor?: string | null | undefined;
        note?: string | null | undefined;
        abstract?: string | null | undefined;
        type?: string | null | undefined;
        title?: string | null | undefined;
        copyright?: string | null | undefined;
        school?: string | null | undefined;
        volume?: string | null | undefined;
        keywords?: string | null | undefined;
        MdxNotes?: any[] | null | undefined;
        htmlCitation?: string | null | undefined;
        PdfPath?: string | null | undefined;
        address?: string | null | undefined;
        annote?: string | null | undefined;
        author?: string | null | undefined;
        booktitle?: string | null | undefined;
        chapter?: string | null | undefined;
        crossref?: string | null | undefined;
        doi?: string | null | undefined;
        edition?: string | null | undefined;
        email?: string | null | undefined;
        howpublished?: string | null | undefined;
        institution?: string | null | undefined;
        month?: string | null | undefined;
        organization?: string | null | undefined;
        pages?: string | null | undefined;
        publisher?: string | null | undefined;
        series?: string | null | undefined;
        year?: string | null | undefined;
        numpages?: string | null | undefined;
        url?: string | null | undefined;
        issue?: string | null | undefined;
        issn?: string | null | undefined;
        urldate?: string | null | undefined;
        tempPageIndex?: number | null | undefined;
    }, "BibId"> & {
        BibId: number;
    }, z.objectInputType<{
        Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
            firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
            filename: z.ZodDefault<z.ZodString>;
            id: z.ZodDefault<z.ZodNumber>;
            entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
        }, "strip", z.ZodTypeAny, {
            id: number;
            filename: string;
            entries: any[];
            lastAccess?: Date | null | undefined;
            firstSync?: Date | null | undefined;
        }, {
            id?: number | undefined;
            lastAccess?: string | Date | null | undefined;
            firstSync?: string | Date | null | undefined;
            filename?: string | undefined;
            entries?: any[] | undefined;
        }>>, BibCore, {
            id?: number | undefined;
            lastAccess?: string | Date | null | undefined;
            firstSync?: string | Date | null | undefined;
            filename?: string | undefined;
            entries?: any[] | undefined;
        } | undefined>;
        BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
        readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            description: z.ZodNullable<z.ZodString>;
            bibEntries: z.ZodArray<z.ZodAny, "many">;
            mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            createdAt: Date;
            mdxNotes: any[];
            bibEntries: any[];
            ipynbNotes: any[];
            description: string | null;
            lastUpdate: Date;
        }, {
            name: string;
            bibEntries: any[];
            description: string | null;
            createdAt?: string | Date | null | undefined;
            mdxNotes?: any[] | undefined;
            ipynbNotes?: any[] | undefined;
            lastUpdate?: string | Date | null | undefined;
        }>, "many">>, ReadingList[], {
            name: string;
            bibEntries: any[];
            description: string | null;
            createdAt?: string | Date | null | undefined;
            mdxNotes?: any[] | undefined;
            ipynbNotes?: any[] | undefined;
            lastUpdate?: string | Date | null | undefined;
        }[] | undefined>;
        topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>, Topic[], {
            value: string;
        }[] | undefined>;
        subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>, Subject[], {
            value: string;
        }[] | undefined>;
        tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            value: z.ZodString;
            kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            value: string;
            kanbanId?: number | null | undefined;
        }, {
            value: string;
            kanbanId?: number | null | undefined;
        }>, z.ZodEffects<z.ZodString, {
            value: string;
            kanbanId?: number | null | undefined;
        }, string>]>, "many">>, Tag[], (string | {
            value: string;
            kanbanId?: number | null | undefined;
        })[] | undefined>;
        id: z.ZodString;
        type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        read: z.ZodDefault<z.ZodBoolean>;
        OwnWork: z.ZodDefault<z.ZodBoolean>;
        ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
        MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
        createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            entries: z.ZodArray<z.ZodAny, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            entries: any[];
            description?: string | null | undefined;
        }, {
            name: string;
            entries: any[];
            description?: string | null | undefined;
        }>, "many">>, CitationGroup[], {
            name: string;
            entries: any[];
            description?: string | null | undefined;
        }[] | undefined>;
        added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
    }, z.ZodString, "strip">>;
    export const sequentialListPropsSchema: z.ZodObject<{
        sequentialKey: z.ZodString;
        MdxNote: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
        Ipynb: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
    }, "strip", z.ZodTypeAny, {
        MdxNote: any[];
        Ipynb: any[];
        sequentialKey: string;
    }, {
        sequentialKey: string;
        MdxNote?: any[] | undefined;
        Ipynb?: any[] | undefined;
    }>;
    export type ParsedBibEntryProps = z.output<typeof bibEntryPropsSchema>;
    export type BibEntrySchemaInput = z.input<typeof bibEntryPropsSchemaInner>;
    export const todoListZodObject: z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
        id: z.ZodNumber;
        label: z.ZodString;
        tasks: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
    }, Pick<{
        name: z.ZodString;
        description: z.ZodNullable<z.ZodString>;
        bibEntries: z.ZodArray<z.ZodAny, "many">;
        mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
        ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
        createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
        lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
    }, "createdAt" | "lastUpdate">>, {
        topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>, Topic[], {
            value: string;
        }[] | undefined>;
        subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>, Subject[], {
            value: string;
        }[] | undefined>;
        tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            value: z.ZodString;
            kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            value: string;
            kanbanId?: number | null | undefined;
        }, {
            value: string;
            kanbanId?: number | null | undefined;
        }>, z.ZodEffects<z.ZodString, {
            value: string;
            kanbanId?: number | null | undefined;
        }, string>]>, "many">>, Tag[], (string | {
            value: string;
            kanbanId?: number | null | undefined;
        })[] | undefined>;
    }>, "strip", z.ZodTypeAny, {
        id: number;
        label: string;
        tags: Tag[];
        createdAt: Date;
        topics: Topic[];
        subjects: Subject[];
        lastUpdate: Date;
        tasks: any[];
    }, {
        id: number;
        label: string;
        tags?: (string | {
            value: string;
            kanbanId?: number | null | undefined;
        })[] | undefined;
        createdAt?: string | Date | null | undefined;
        topics?: {
            value: string;
        }[] | undefined;
        subjects?: {
            value: string;
        }[] | undefined;
        lastUpdate?: string | Date | null | undefined;
        tasks?: any[] | undefined;
    }>;
    export const todoTaskZodObject: z.ZodObject<{
        id: z.ZodNumber;
        createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
        task: z.ZodString;
        dueAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
        details: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        associatedNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
        tags: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            value: z.ZodString;
            kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            value: string;
            kanbanId?: number | null | undefined;
        }, {
            value: string;
            kanbanId?: number | null | undefined;
        }>, z.ZodEffects<z.ZodString, {
            value: string;
            kanbanId?: number | null | undefined;
        }, string>]>, "many">>;
        topics: z.ZodDefault<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>;
        subjects: z.ZodDefault<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>;
        parentId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        category: z.ZodNativeEnum<{
            bug: "bug";
            feature: "feature";
            documentation: "documentation";
            online: "online";
            priority: "priority";
            urgent: "urgent";
            work: "work";
            gym: "gym";
            freetime: "freetime";
            study: "study";
            research: "research";
            paper: "paper";
        }>;
        bookmarked: z.ZodDefault<z.ZodBoolean>;
        status: z.ZodEnum<["ToDo", "In_Progress", "Backlog", "Cancelled", "Done", "Future"]>;
        priority: z.ZodNumber;
        parent: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodAny>>>;
        child: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodAny>>>;
        ToDoList: z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
            id: z.ZodNumber;
            label: z.ZodString;
            tasks: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
        }, Pick<{
            name: z.ZodString;
            description: z.ZodNullable<z.ZodString>;
            bibEntries: z.ZodArray<z.ZodAny, "many">;
            mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
        }, "createdAt" | "lastUpdate">>, {
            topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Topic[], {
                value: string;
            }[] | undefined>;
            subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Subject[], {
                value: string;
            }[] | undefined>;
            tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>, Tag[], (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined>;
        }>, "strip", z.ZodTypeAny, {
            id: number;
            label: string;
            tags: Tag[];
            createdAt: Date;
            topics: Topic[];
            subjects: Subject[];
            lastUpdate: Date;
            tasks: any[];
        }, {
            id: number;
            label: string;
            tags?: (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined;
            createdAt?: string | Date | null | undefined;
            topics?: {
                value: string;
            }[] | undefined;
            subjects?: {
                value: string;
            }[] | undefined;
            lastUpdate?: string | Date | null | undefined;
            tasks?: any[] | undefined;
        }>;
        toDoListId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        id: number;
        tags: ({
            value: string;
            kanbanId?: number | null | undefined;
        } | {
            value: string;
            kanbanId?: number | null | undefined;
        })[];
        ToDoList: {
            id: number;
            label: string;
            tags: Tag[];
            createdAt: Date;
            topics: Topic[];
            subjects: Subject[];
            lastUpdate: Date;
            tasks: any[];
        };
        createdAt: Date;
        topics: {
            value: string;
        }[];
        subjects: {
            value: string;
        }[];
        bookmarked: boolean;
        status: "ToDo" | "In_Progress" | "Backlog" | "Cancelled" | "Done" | "Future";
        task: string;
        dueAt: Date;
        associatedNotes: any[];
        category: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper";
        priority: number;
        toDoListId: number;
        details?: string | null | undefined;
        parentId?: number | null | undefined;
        parent?: any;
        child?: any;
    }, {
        id: number;
        ToDoList: {
            id: number;
            label: string;
            tags?: (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined;
            createdAt?: string | Date | null | undefined;
            topics?: {
                value: string;
            }[] | undefined;
            subjects?: {
                value: string;
            }[] | undefined;
            lastUpdate?: string | Date | null | undefined;
            tasks?: any[] | undefined;
        };
        status: "ToDo" | "In_Progress" | "Backlog" | "Cancelled" | "Done" | "Future";
        task: string;
        category: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper";
        priority: number;
        toDoListId: number;
        tags?: (string | {
            value: string;
            kanbanId?: number | null | undefined;
        })[] | undefined;
        createdAt?: string | Date | null | undefined;
        topics?: {
            value: string;
        }[] | undefined;
        subjects?: {
            value: string;
        }[] | undefined;
        bookmarked?: boolean | undefined;
        dueAt?: string | Date | null | undefined;
        details?: string | null | undefined;
        associatedNotes?: any[] | undefined;
        parentId?: number | null | undefined;
        parent?: any;
        child?: any;
    }>;
    export const mdxNotePropsSchema: z.ZodEffects<z.ZodObject<z.objectUtil.extendShape<{
        content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        id: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        latexTitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        raw: z.ZodString;
        floatImages: z.ZodDefault<z.ZodBoolean>;
        formatted: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        citations: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodEffects<z.ZodObject<{
            Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                filename: z.ZodDefault<z.ZodString>;
                id: z.ZodDefault<z.ZodNumber>;
                entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                filename: string;
                entries: any[];
                lastAccess?: Date | null | undefined;
                firstSync?: Date | null | undefined;
            }, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            }>>, BibCore, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            } | undefined>;
            BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
            readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                createdAt: Date;
                mdxNotes: any[];
                bibEntries: any[];
                ipynbNotes: any[];
                description: string | null;
                lastUpdate: Date;
            }, {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }>, "many">>, ReadingList[], {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }[] | undefined>;
            topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Topic[], {
                value: string;
            }[] | undefined>;
            subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Subject[], {
                value: string;
            }[] | undefined>;
            tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>, Tag[], (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined>;
            id: z.ZodString;
            type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            read: z.ZodDefault<z.ZodBoolean>;
            OwnWork: z.ZodDefault<z.ZodBoolean>;
            ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
            MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                entries: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }>, "many">>, CitationGroup[], {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }[] | undefined>;
            added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        }, "strip", z.ZodString, z.objectOutputType<{
            Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                filename: z.ZodDefault<z.ZodString>;
                id: z.ZodDefault<z.ZodNumber>;
                entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                filename: string;
                entries: any[];
                lastAccess?: Date | null | undefined;
                firstSync?: Date | null | undefined;
            }, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            }>>, BibCore, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            } | undefined>;
            BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
            readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                createdAt: Date;
                mdxNotes: any[];
                bibEntries: any[];
                ipynbNotes: any[];
                description: string | null;
                lastUpdate: Date;
            }, {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }>, "many">>, ReadingList[], {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }[] | undefined>;
            topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Topic[], {
                value: string;
            }[] | undefined>;
            subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Subject[], {
                value: string;
            }[] | undefined>;
            tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>, Tag[], (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined>;
            id: z.ZodString;
            type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            read: z.ZodDefault<z.ZodBoolean>;
            OwnWork: z.ZodDefault<z.ZodBoolean>;
            ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
            MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                entries: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }>, "many">>, CitationGroup[], {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }[] | undefined>;
            added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        }, z.ZodString, "strip">, z.objectInputType<{
            Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                filename: z.ZodDefault<z.ZodString>;
                id: z.ZodDefault<z.ZodNumber>;
                entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                filename: string;
                entries: any[];
                lastAccess?: Date | null | undefined;
                firstSync?: Date | null | undefined;
            }, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            }>>, BibCore, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            } | undefined>;
            BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
            readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                createdAt: Date;
                mdxNotes: any[];
                bibEntries: any[];
                ipynbNotes: any[];
                description: string | null;
                lastUpdate: Date;
            }, {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }>, "many">>, ReadingList[], {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }[] | undefined>;
            topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Topic[], {
                value: string;
            }[] | undefined>;
            subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Subject[], {
                value: string;
            }[] | undefined>;
            tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>, Tag[], (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined>;
            id: z.ZodString;
            type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            read: z.ZodDefault<z.ZodBoolean>;
            OwnWork: z.ZodDefault<z.ZodBoolean>;
            ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
            MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                entries: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }>, "many">>, CitationGroup[], {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }[] | undefined>;
            added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        }, z.ZodString, "strip">>, Omit<{
            id: string;
            tags: Tag[];
            readingList: ReadingList[];
            Bib: BibCore;
            createdAt: Date;
            lastAccess: Date;
            topics: Topic[];
            subjects: Subject[];
            BibId: number | null;
            OwnWork: boolean;
            ColleaguesWork: boolean;
            read: boolean;
            citationGroups: CitationGroup[];
            added: Date;
            number?: string | null | undefined;
            journal?: string | null | undefined;
            editor?: string | null | undefined;
            note?: string | null | undefined;
            abstract?: string | null | undefined;
            type?: string | null | undefined;
            title?: string | null | undefined;
            copyright?: string | null | undefined;
            school?: string | null | undefined;
            volume?: string | null | undefined;
            keywords?: string | null | undefined;
            MdxNotes?: any[] | null | undefined;
            htmlCitation?: string | null | undefined;
            PdfPath?: string | null | undefined;
            address?: string | null | undefined;
            annote?: string | null | undefined;
            author?: string | null | undefined;
            booktitle?: string | null | undefined;
            chapter?: string | null | undefined;
            crossref?: string | null | undefined;
            doi?: string | null | undefined;
            edition?: string | null | undefined;
            email?: string | null | undefined;
            howpublished?: string | null | undefined;
            institution?: string | null | undefined;
            month?: string | null | undefined;
            organization?: string | null | undefined;
            pages?: string | null | undefined;
            publisher?: string | null | undefined;
            series?: string | null | undefined;
            year?: string | null | undefined;
            numpages?: string | null | undefined;
            url?: string | null | undefined;
            issue?: string | null | undefined;
            issn?: string | null | undefined;
            urldate?: string | null | undefined;
            tempPageIndex?: number | null | undefined;
        }, "BibId"> & {
            BibId: number;
        }, z.objectInputType<{
            Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                filename: z.ZodDefault<z.ZodString>;
                id: z.ZodDefault<z.ZodNumber>;
                entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                filename: string;
                entries: any[];
                lastAccess?: Date | null | undefined;
                firstSync?: Date | null | undefined;
            }, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            }>>, BibCore, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            } | undefined>;
            BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
            readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                createdAt: Date;
                mdxNotes: any[];
                bibEntries: any[];
                ipynbNotes: any[];
                description: string | null;
                lastUpdate: Date;
            }, {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }>, "many">>, ReadingList[], {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }[] | undefined>;
            topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Topic[], {
                value: string;
            }[] | undefined>;
            subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Subject[], {
                value: string;
            }[] | undefined>;
            tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>, Tag[], (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined>;
            id: z.ZodString;
            type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            read: z.ZodDefault<z.ZodBoolean>;
            OwnWork: z.ZodDefault<z.ZodBoolean>;
            ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
            MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                entries: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }>, "many">>, CitationGroup[], {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }[] | undefined>;
            added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        }, z.ZodString, "strip">>, "many">>, BibEntry[], z.objectInputType<{
            Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                filename: z.ZodDefault<z.ZodString>;
                id: z.ZodDefault<z.ZodNumber>;
                entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                filename: string;
                entries: any[];
                lastAccess?: Date | null | undefined;
                firstSync?: Date | null | undefined;
            }, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            }>>, BibCore, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            } | undefined>;
            BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
            readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                createdAt: Date;
                mdxNotes: any[];
                bibEntries: any[];
                ipynbNotes: any[];
                description: string | null;
                lastUpdate: Date;
            }, {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }>, "many">>, ReadingList[], {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }[] | undefined>;
            topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Topic[], {
                value: string;
            }[] | undefined>;
            subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Subject[], {
                value: string;
            }[] | undefined>;
            tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>, Tag[], (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined>;
            id: z.ZodString;
            type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            read: z.ZodDefault<z.ZodBoolean>;
            OwnWork: z.ZodDefault<z.ZodBoolean>;
            ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
            MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                entries: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }>, "many">>, CitationGroup[], {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }[] | undefined>;
            added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        }, z.ZodString, "strip">[] | undefined>;
        importantValues: z.ZodDefault<z.ZodArray<z.ZodNumber, "many">>;
        bookmarked: z.ZodDefault<z.ZodBoolean>;
        quickLinkId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        href: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        citationsListOrder: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        outgoingQuickLinks: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        rootRelativePath: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | null | undefined, string | null | undefined>;
        equationIds: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        isProtected: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>>;
        sequentialKey: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        sequentialIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        sequentialList: z.ZodOptional<z.ZodObject<{
            sequentialKey: z.ZodString;
            MdxNote: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            Ipynb: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
        }, "strip", z.ZodTypeAny, {
            MdxNote: any[];
            Ipynb: any[];
            sequentialKey: string;
        }, {
            sequentialKey: string;
            MdxNote?: any[] | undefined;
            Ipynb?: any[] | undefined;
        }>>;
        remoteUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        noLog: z.ZodDefault<z.ZodBoolean>;
        saveFormatted: z.ZodDefault<z.ZodBoolean>;
        noteType: z.ZodEffects<z.ZodString, string, string>;
        trackRemote: z.ZodDefault<z.ZodBoolean>;
        toDo: z.ZodDefault<z.ZodArray<z.ZodObject<{
            id: z.ZodNumber;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            task: z.ZodString;
            dueAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            details: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            associatedNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            tags: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>;
            topics: z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>;
            subjects: z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>;
            parentId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            category: z.ZodNativeEnum<{
                bug: "bug";
                feature: "feature";
                documentation: "documentation";
                online: "online";
                priority: "priority";
                urgent: "urgent";
                work: "work";
                gym: "gym";
                freetime: "freetime";
                study: "study";
                research: "research";
                paper: "paper";
            }>;
            bookmarked: z.ZodDefault<z.ZodBoolean>;
            status: z.ZodEnum<["ToDo", "In_Progress", "Backlog", "Cancelled", "Done", "Future"]>;
            priority: z.ZodNumber;
            parent: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodAny>>>;
            child: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodAny>>>;
            ToDoList: z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                label: z.ZodString;
                tasks: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, Pick<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "createdAt" | "lastUpdate">>, {
                topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                }, {
                    value: string;
                }>, "many">>, Topic[], {
                    value: string;
                }[] | undefined>;
                subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                }, {
                    value: string;
                }>, "many">>, Subject[], {
                    value: string;
                }[] | undefined>;
                tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    value: z.ZodString;
                    kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }>, z.ZodEffects<z.ZodString, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }, string>]>, "many">>, Tag[], (string | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[] | undefined>;
            }>, "strip", z.ZodTypeAny, {
                id: number;
                label: string;
                tags: Tag[];
                createdAt: Date;
                topics: Topic[];
                subjects: Subject[];
                lastUpdate: Date;
                tasks: any[];
            }, {
                id: number;
                label: string;
                tags?: (string | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[] | undefined;
                createdAt?: string | Date | null | undefined;
                topics?: {
                    value: string;
                }[] | undefined;
                subjects?: {
                    value: string;
                }[] | undefined;
                lastUpdate?: string | Date | null | undefined;
                tasks?: any[] | undefined;
            }>;
            toDoListId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            id: number;
            tags: ({
                value: string;
                kanbanId?: number | null | undefined;
            } | {
                value: string;
                kanbanId?: number | null | undefined;
            })[];
            ToDoList: {
                id: number;
                label: string;
                tags: Tag[];
                createdAt: Date;
                topics: Topic[];
                subjects: Subject[];
                lastUpdate: Date;
                tasks: any[];
            };
            createdAt: Date;
            topics: {
                value: string;
            }[];
            subjects: {
                value: string;
            }[];
            bookmarked: boolean;
            status: "ToDo" | "In_Progress" | "Backlog" | "Cancelled" | "Done" | "Future";
            task: string;
            dueAt: Date;
            associatedNotes: any[];
            category: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper";
            priority: number;
            toDoListId: number;
            details?: string | null | undefined;
            parentId?: number | null | undefined;
            parent?: any;
            child?: any;
        }, {
            id: number;
            ToDoList: {
                id: number;
                label: string;
                tags?: (string | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[] | undefined;
                createdAt?: string | Date | null | undefined;
                topics?: {
                    value: string;
                }[] | undefined;
                subjects?: {
                    value: string;
                }[] | undefined;
                lastUpdate?: string | Date | null | undefined;
                tasks?: any[] | undefined;
            };
            status: "ToDo" | "In_Progress" | "Backlog" | "Cancelled" | "Done" | "Future";
            task: string;
            category: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper";
            priority: number;
            toDoListId: number;
            tags?: (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined;
            createdAt?: string | Date | null | undefined;
            topics?: {
                value: string;
            }[] | undefined;
            subjects?: {
                value: string;
            }[] | undefined;
            bookmarked?: boolean | undefined;
            dueAt?: string | Date | null | undefined;
            details?: string | null | undefined;
            associatedNotes?: any[] | undefined;
            parentId?: number | null | undefined;
            parent?: any;
            child?: any;
        }>, "many">>;
        summary: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodEffects<z.ZodString, Date, string>, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
        lastSync: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodEffects<z.ZodString, Date, string>, z.ZodDate]>>>;
    }, {
        topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>, Topic[], {
            value: string;
        }[] | undefined>;
        subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>, Subject[], {
            value: string;
        }[] | undefined>;
        tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            value: z.ZodString;
            kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            value: string;
            kanbanId?: number | null | undefined;
        }, {
            value: string;
            kanbanId?: number | null | undefined;
        }>, z.ZodEffects<z.ZodString, {
            value: string;
            kanbanId?: number | null | undefined;
        }, string>]>, "many">>, Tag[], (string | {
            value: string;
            kanbanId?: number | null | undefined;
        })[] | undefined>;
    }>, "strip", z.ZodTypeAny, {
        tags: Tag[];
        noteType: string;
        toDo: {
            id: number;
            tags: ({
                value: string;
                kanbanId?: number | null | undefined;
            } | {
                value: string;
                kanbanId?: number | null | undefined;
            })[];
            ToDoList: {
                id: number;
                label: string;
                tags: Tag[];
                createdAt: Date;
                topics: Topic[];
                subjects: Subject[];
                lastUpdate: Date;
                tasks: any[];
            };
            createdAt: Date;
            topics: {
                value: string;
            }[];
            subjects: {
                value: string;
            }[];
            bookmarked: boolean;
            status: "ToDo" | "In_Progress" | "Backlog" | "Cancelled" | "Done" | "Future";
            task: string;
            dueAt: Date;
            associatedNotes: any[];
            category: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper";
            priority: number;
            toDoListId: number;
            details?: string | null | undefined;
            parentId?: number | null | undefined;
            parent?: any;
            child?: any;
        }[];
        topics: Topic[];
        subjects: Subject[];
        isProtected: boolean | null;
        citationsListOrder: string[];
        importantValues: number[];
        floatImages: boolean;
        trackRemote: boolean;
        outgoingQuickLinks: string[];
        bookmarked: boolean;
        citations: BibEntry[];
        raw: string;
        equationIds: string[];
        noLog: boolean;
        saveFormatted: boolean;
        id?: number | null | undefined;
        href?: string | null | undefined;
        summary?: string | null | undefined;
        title?: string | null | undefined;
        content?: string | null | undefined;
        firstSync?: Date | null | undefined;
        lastSync?: Date | null | undefined;
        latexTitle?: string | null | undefined;
        rootRelativePath?: string | null | undefined;
        formatted?: string | null | undefined;
        sequentialKey?: string | null | undefined;
        sequentialIndex?: number | null | undefined;
        remoteUrl?: string | null | undefined;
        sequentialList?: {
            MdxNote: any[];
            Ipynb: any[];
            sequentialKey: string;
        } | undefined;
        quickLinkId?: string | null | undefined;
    }, {
        noteType: string;
        raw: string;
        id?: number | null | undefined;
        href?: string | null | undefined;
        summary?: string | null | undefined;
        title?: string | null | undefined;
        content?: string | null | undefined;
        tags?: (string | {
            value: string;
            kanbanId?: number | null | undefined;
        })[] | undefined;
        toDo?: {
            id: number;
            ToDoList: {
                id: number;
                label: string;
                tags?: (string | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[] | undefined;
                createdAt?: string | Date | null | undefined;
                topics?: {
                    value: string;
                }[] | undefined;
                subjects?: {
                    value: string;
                }[] | undefined;
                lastUpdate?: string | Date | null | undefined;
                tasks?: any[] | undefined;
            };
            status: "ToDo" | "In_Progress" | "Backlog" | "Cancelled" | "Done" | "Future";
            task: string;
            category: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper";
            priority: number;
            toDoListId: number;
            tags?: (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined;
            createdAt?: string | Date | null | undefined;
            topics?: {
                value: string;
            }[] | undefined;
            subjects?: {
                value: string;
            }[] | undefined;
            bookmarked?: boolean | undefined;
            dueAt?: string | Date | null | undefined;
            details?: string | null | undefined;
            associatedNotes?: any[] | undefined;
            parentId?: number | null | undefined;
            parent?: any;
            child?: any;
        }[] | undefined;
        topics?: {
            value: string;
        }[] | undefined;
        subjects?: {
            value: string;
        }[] | undefined;
        firstSync?: string | Date | null | undefined;
        lastSync?: string | Date | null | undefined;
        isProtected?: boolean | null | undefined;
        latexTitle?: string | null | undefined;
        rootRelativePath?: string | null | undefined;
        formatted?: string | null | undefined;
        citationsListOrder?: string[] | undefined;
        importantValues?: number[] | undefined;
        sequentialKey?: string | null | undefined;
        sequentialIndex?: number | null | undefined;
        floatImages?: boolean | undefined;
        remoteUrl?: string | null | undefined;
        trackRemote?: boolean | undefined;
        outgoingQuickLinks?: string[] | undefined;
        bookmarked?: boolean | undefined;
        citations?: z.objectInputType<{
            Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                filename: z.ZodDefault<z.ZodString>;
                id: z.ZodDefault<z.ZodNumber>;
                entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                filename: string;
                entries: any[];
                lastAccess?: Date | null | undefined;
                firstSync?: Date | null | undefined;
            }, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            }>>, BibCore, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            } | undefined>;
            BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
            readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                createdAt: Date;
                mdxNotes: any[];
                bibEntries: any[];
                ipynbNotes: any[];
                description: string | null;
                lastUpdate: Date;
            }, {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }>, "many">>, ReadingList[], {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }[] | undefined>;
            topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Topic[], {
                value: string;
            }[] | undefined>;
            subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Subject[], {
                value: string;
            }[] | undefined>;
            tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>, Tag[], (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined>;
            id: z.ZodString;
            type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            read: z.ZodDefault<z.ZodBoolean>;
            OwnWork: z.ZodDefault<z.ZodBoolean>;
            ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
            MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                entries: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }>, "many">>, CitationGroup[], {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }[] | undefined>;
            added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        }, z.ZodString, "strip">[] | undefined;
        sequentialList?: {
            sequentialKey: string;
            MdxNote?: any[] | undefined;
            Ipynb?: any[] | undefined;
        } | undefined;
        quickLinkId?: string | null | undefined;
        equationIds?: string[] | undefined;
        noLog?: boolean | undefined;
        saveFormatted?: boolean | undefined;
    }>, {
        raw: string | null | undefined;
        importantValues: number[];
        frontMatter: {
            tags: string[];
            topics: string[];
            subjects: string[];
            importantValues: number[];
            id?: string | null | undefined;
            summary?: string | null | undefined;
            title?: string | null | undefined;
            sequentialKey?: string | null | undefined;
            created?: string | null | undefined;
            updated?: string | null | undefined;
            sequential?: number | null | undefined;
            tableStyles?: {
                expand: boolean | null;
                fullWidth: boolean | null;
                tableCenter: boolean | null;
                textCenter: boolean | null;
                headingCenter: boolean | null;
                noMax: boolean | null;
                math?: "base" | "lg" | "xl" | "small" | null | undefined;
                text?: "base" | "lg" | "xl" | "small" | null | undefined;
                float?: "right" | "left" | null | undefined;
            } | undefined;
        };
        quickLinkId: string | null | undefined;
        sequentialKey: string | null | undefined;
        sequentialIndex: number | null | undefined;
        topics: Topic[];
        subjects: Subject[];
        tags: Tag[];
        firstSync: Date | null | undefined;
        noteType: string;
        toDo: {
            id: number;
            tags: ({
                value: string;
                kanbanId?: number | null | undefined;
            } | {
                value: string;
                kanbanId?: number | null | undefined;
            })[];
            ToDoList: {
                id: number;
                label: string;
                tags: Tag[];
                createdAt: Date;
                topics: Topic[];
                subjects: Subject[];
                lastUpdate: Date;
                tasks: any[];
            };
            createdAt: Date;
            topics: {
                value: string;
            }[];
            subjects: {
                value: string;
            }[];
            bookmarked: boolean;
            status: "ToDo" | "In_Progress" | "Backlog" | "Cancelled" | "Done" | "Future";
            task: string;
            dueAt: Date;
            associatedNotes: any[];
            category: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper";
            priority: number;
            toDoListId: number;
            details?: string | null | undefined;
            parentId?: number | null | undefined;
            parent?: any;
            child?: any;
        }[];
        isProtected: boolean | null;
        citationsListOrder: string[];
        floatImages: boolean;
        trackRemote: boolean;
        outgoingQuickLinks: string[];
        bookmarked: boolean;
        citations: BibEntry[];
        equationIds: string[];
        noLog: boolean;
        saveFormatted: boolean;
        id?: number | null | undefined;
        href?: string | null | undefined;
        summary?: string | null | undefined;
        title?: string | null | undefined;
        content?: string | null | undefined;
        lastSync?: Date | null | undefined;
        latexTitle?: string | null | undefined;
        rootRelativePath?: string | null | undefined;
        formatted?: string | null | undefined;
        remoteUrl?: string | null | undefined;
        sequentialList?: {
            MdxNote: any[];
            Ipynb: any[];
            sequentialKey: string;
        } | undefined;
    }, {
        noteType: string;
        raw: string;
        id?: number | null | undefined;
        href?: string | null | undefined;
        summary?: string | null | undefined;
        title?: string | null | undefined;
        content?: string | null | undefined;
        tags?: (string | {
            value: string;
            kanbanId?: number | null | undefined;
        })[] | undefined;
        toDo?: {
            id: number;
            ToDoList: {
                id: number;
                label: string;
                tags?: (string | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[] | undefined;
                createdAt?: string | Date | null | undefined;
                topics?: {
                    value: string;
                }[] | undefined;
                subjects?: {
                    value: string;
                }[] | undefined;
                lastUpdate?: string | Date | null | undefined;
                tasks?: any[] | undefined;
            };
            status: "ToDo" | "In_Progress" | "Backlog" | "Cancelled" | "Done" | "Future";
            task: string;
            category: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper";
            priority: number;
            toDoListId: number;
            tags?: (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined;
            createdAt?: string | Date | null | undefined;
            topics?: {
                value: string;
            }[] | undefined;
            subjects?: {
                value: string;
            }[] | undefined;
            bookmarked?: boolean | undefined;
            dueAt?: string | Date | null | undefined;
            details?: string | null | undefined;
            associatedNotes?: any[] | undefined;
            parentId?: number | null | undefined;
            parent?: any;
            child?: any;
        }[] | undefined;
        topics?: {
            value: string;
        }[] | undefined;
        subjects?: {
            value: string;
        }[] | undefined;
        firstSync?: string | Date | null | undefined;
        lastSync?: string | Date | null | undefined;
        isProtected?: boolean | null | undefined;
        latexTitle?: string | null | undefined;
        rootRelativePath?: string | null | undefined;
        formatted?: string | null | undefined;
        citationsListOrder?: string[] | undefined;
        importantValues?: number[] | undefined;
        sequentialKey?: string | null | undefined;
        sequentialIndex?: number | null | undefined;
        floatImages?: boolean | undefined;
        remoteUrl?: string | null | undefined;
        trackRemote?: boolean | undefined;
        outgoingQuickLinks?: string[] | undefined;
        bookmarked?: boolean | undefined;
        citations?: z.objectInputType<{
            Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                filename: z.ZodDefault<z.ZodString>;
                id: z.ZodDefault<z.ZodNumber>;
                entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                filename: string;
                entries: any[];
                lastAccess?: Date | null | undefined;
                firstSync?: Date | null | undefined;
            }, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            }>>, BibCore, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            } | undefined>;
            BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
            readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                createdAt: Date;
                mdxNotes: any[];
                bibEntries: any[];
                ipynbNotes: any[];
                description: string | null;
                lastUpdate: Date;
            }, {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }>, "many">>, ReadingList[], {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }[] | undefined>;
            topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Topic[], {
                value: string;
            }[] | undefined>;
            subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Subject[], {
                value: string;
            }[] | undefined>;
            tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>, Tag[], (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined>;
            id: z.ZodString;
            type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            read: z.ZodDefault<z.ZodBoolean>;
            OwnWork: z.ZodDefault<z.ZodBoolean>;
            ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
            MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                entries: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }>, "many">>, CitationGroup[], {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }[] | undefined>;
            added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        }, z.ZodString, "strip">[] | undefined;
        sequentialList?: {
            sequentialKey: string;
            MdxNote?: any[] | undefined;
            Ipynb?: any[] | undefined;
        } | undefined;
        quickLinkId?: string | null | undefined;
        equationIds?: string[] | undefined;
        noLog?: boolean | undefined;
        saveFormatted?: boolean | undefined;
    }>;
    export const mdxNoteSummaryPropSchema: z.ZodEffects<z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNullable<z.ZodNumber>;
        href: z.ZodNullable<z.ZodString>;
        summary: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        title: z.ZodNullable<z.ZodString>;
        tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            value: z.ZodString;
            kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            value: string;
            kanbanId?: number | null | undefined;
        }, {
            value: string;
            kanbanId?: number | null | undefined;
        }>, z.ZodEffects<z.ZodString, {
            value: string;
            kanbanId?: number | null | undefined;
        }, string>]>, "many">>, Tag[], (string | {
            value: string;
            kanbanId?: number | null | undefined;
        })[] | undefined>;
        noteType: z.ZodEffects<z.ZodString, string, string>;
        topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>, Topic[], {
            value: string;
        }[] | undefined>;
        subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>, Subject[], {
            value: string;
        }[] | undefined>;
        firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodEffects<z.ZodString, Date, string>, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
        lastSync: z.ZodNullable<z.ZodUnion<[z.ZodEffects<z.ZodString, Date, string>, z.ZodDate]>>;
        isProtected: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>>;
        latexTitle: z.ZodNullable<z.ZodString>;
        rootRelativePath: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | null | undefined, string | null | undefined>;
        formatted: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        citationsListOrder: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        importantValues: z.ZodDefault<z.ZodArray<z.ZodNumber, "many">>;
        sequentialKey: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        sequentialIndex: z.ZodNullable<z.ZodNumber>;
        floatImages: z.ZodDefault<z.ZodBoolean>;
        remoteUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        trackRemote: z.ZodDefault<z.ZodBoolean>;
        outgoingQuickLinks: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        bookmarked: z.ZodDefault<z.ZodBoolean>;
        quickLinkId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        equationIds: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        noLog: z.ZodDefault<z.ZodBoolean>;
        saveFormatted: z.ZodDefault<z.ZodBoolean>;
    }, {
        sequentialList: z.ZodOptional<z.ZodNullable<z.ZodObject<Pick<{
            sequentialKey: z.ZodString;
            MdxNote: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            Ipynb: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
        }, "sequentialKey">, "strip", z.ZodTypeAny, {
            sequentialKey: string;
        }, {
            sequentialKey: string;
        }>>>;
    }>, "strip", z.ZodTypeAny, {
        id: number | null;
        href: string | null;
        title: string | null;
        tags: Tag[];
        noteType: string;
        topics: Topic[];
        subjects: Subject[];
        lastSync: Date | null;
        isProtected: boolean | null;
        latexTitle: string | null;
        citationsListOrder: string[];
        importantValues: number[];
        sequentialIndex: number | null;
        floatImages: boolean;
        trackRemote: boolean;
        outgoingQuickLinks: string[];
        bookmarked: boolean;
        equationIds: string[];
        noLog: boolean;
        saveFormatted: boolean;
        summary?: string | null | undefined;
        firstSync?: Date | null | undefined;
        rootRelativePath?: string | null | undefined;
        formatted?: string | null | undefined;
        sequentialKey?: string | null | undefined;
        remoteUrl?: string | null | undefined;
        sequentialList?: {
            sequentialKey: string;
        } | null | undefined;
        quickLinkId?: string | null | undefined;
    }, {
        id: number | null;
        href: string | null;
        title: string | null;
        noteType: string;
        lastSync: string | Date | null;
        latexTitle: string | null;
        sequentialIndex: number | null;
        summary?: string | null | undefined;
        tags?: (string | {
            value: string;
            kanbanId?: number | null | undefined;
        })[] | undefined;
        topics?: {
            value: string;
        }[] | undefined;
        subjects?: {
            value: string;
        }[] | undefined;
        firstSync?: string | Date | null | undefined;
        isProtected?: boolean | null | undefined;
        rootRelativePath?: string | null | undefined;
        formatted?: string | null | undefined;
        citationsListOrder?: string[] | undefined;
        importantValues?: number[] | undefined;
        sequentialKey?: string | null | undefined;
        floatImages?: boolean | undefined;
        remoteUrl?: string | null | undefined;
        trackRemote?: boolean | undefined;
        outgoingQuickLinks?: string[] | undefined;
        bookmarked?: boolean | undefined;
        sequentialList?: {
            sequentialKey: string;
        } | null | undefined;
        quickLinkId?: string | null | undefined;
        equationIds?: string[] | undefined;
        noLog?: boolean | undefined;
        saveFormatted?: boolean | undefined;
    }>, {
        firstSync: Date | null | undefined;
        id: number | null;
        href: string | null;
        title: string | null;
        tags: Tag[];
        noteType: string;
        topics: Topic[];
        subjects: Subject[];
        lastSync: Date | null;
        isProtected: boolean | null;
        latexTitle: string | null;
        citationsListOrder: string[];
        importantValues: number[];
        sequentialIndex: number | null;
        floatImages: boolean;
        trackRemote: boolean;
        outgoingQuickLinks: string[];
        bookmarked: boolean;
        equationIds: string[];
        noLog: boolean;
        saveFormatted: boolean;
        summary?: string | null | undefined;
        rootRelativePath?: string | null | undefined;
        formatted?: string | null | undefined;
        sequentialKey?: string | null | undefined;
        remoteUrl?: string | null | undefined;
        sequentialList?: {
            sequentialKey: string;
        } | null | undefined;
        quickLinkId?: string | null | undefined;
    }, {
        id: number | null;
        href: string | null;
        title: string | null;
        noteType: string;
        lastSync: string | Date | null;
        latexTitle: string | null;
        sequentialIndex: number | null;
        summary?: string | null | undefined;
        tags?: (string | {
            value: string;
            kanbanId?: number | null | undefined;
        })[] | undefined;
        topics?: {
            value: string;
        }[] | undefined;
        subjects?: {
            value: string;
        }[] | undefined;
        firstSync?: string | Date | null | undefined;
        isProtected?: boolean | null | undefined;
        rootRelativePath?: string | null | undefined;
        formatted?: string | null | undefined;
        citationsListOrder?: string[] | undefined;
        importantValues?: number[] | undefined;
        sequentialKey?: string | null | undefined;
        floatImages?: boolean | undefined;
        remoteUrl?: string | null | undefined;
        trackRemote?: boolean | undefined;
        outgoingQuickLinks?: string[] | undefined;
        bookmarked?: boolean | undefined;
        sequentialList?: {
            sequentialKey: string;
        } | null | undefined;
        quickLinkId?: string | null | undefined;
        equationIds?: string[] | undefined;
        noLog?: boolean | undefined;
        saveFormatted?: boolean | undefined;
    }>;
    export const fromMdxStringOptSchema: z.ZodDefault<z.ZodObject<{
        noteTypeId: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        noteTypeId?: string | undefined;
    }, {
        noteTypeId?: string | undefined;
    }>>;
    export const mdxNoteFromStringPropsSchema: z.ZodObject<z.objectUtil.extendShape<Pick<z.objectUtil.extendShape<{
        content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        id: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        latexTitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        raw: z.ZodString;
        floatImages: z.ZodDefault<z.ZodBoolean>;
        formatted: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        citations: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodEffects<z.ZodObject<{
            Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                filename: z.ZodDefault<z.ZodString>;
                id: z.ZodDefault<z.ZodNumber>;
                entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                filename: string;
                entries: any[];
                lastAccess?: Date | null | undefined;
                firstSync?: Date | null | undefined;
            }, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            }>>, BibCore, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            } | undefined>;
            BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
            readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                createdAt: Date;
                mdxNotes: any[];
                bibEntries: any[];
                ipynbNotes: any[];
                description: string | null;
                lastUpdate: Date;
            }, {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }>, "many">>, ReadingList[], {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }[] | undefined>;
            topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Topic[], {
                value: string;
            }[] | undefined>;
            subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Subject[], {
                value: string;
            }[] | undefined>;
            tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>, Tag[], (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined>;
            id: z.ZodString;
            type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            read: z.ZodDefault<z.ZodBoolean>;
            OwnWork: z.ZodDefault<z.ZodBoolean>;
            ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
            MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                entries: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }>, "many">>, CitationGroup[], {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }[] | undefined>;
            added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        }, "strip", z.ZodString, z.objectOutputType<{
            Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                filename: z.ZodDefault<z.ZodString>;
                id: z.ZodDefault<z.ZodNumber>;
                entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                filename: string;
                entries: any[];
                lastAccess?: Date | null | undefined;
                firstSync?: Date | null | undefined;
            }, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            }>>, BibCore, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            } | undefined>;
            BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
            readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                createdAt: Date;
                mdxNotes: any[];
                bibEntries: any[];
                ipynbNotes: any[];
                description: string | null;
                lastUpdate: Date;
            }, {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }>, "many">>, ReadingList[], {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }[] | undefined>;
            topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Topic[], {
                value: string;
            }[] | undefined>;
            subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Subject[], {
                value: string;
            }[] | undefined>;
            tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>, Tag[], (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined>;
            id: z.ZodString;
            type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            read: z.ZodDefault<z.ZodBoolean>;
            OwnWork: z.ZodDefault<z.ZodBoolean>;
            ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
            MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                entries: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }>, "many">>, CitationGroup[], {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }[] | undefined>;
            added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        }, z.ZodString, "strip">, z.objectInputType<{
            Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                filename: z.ZodDefault<z.ZodString>;
                id: z.ZodDefault<z.ZodNumber>;
                entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                filename: string;
                entries: any[];
                lastAccess?: Date | null | undefined;
                firstSync?: Date | null | undefined;
            }, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            }>>, BibCore, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            } | undefined>;
            BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
            readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                createdAt: Date;
                mdxNotes: any[];
                bibEntries: any[];
                ipynbNotes: any[];
                description: string | null;
                lastUpdate: Date;
            }, {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }>, "many">>, ReadingList[], {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }[] | undefined>;
            topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Topic[], {
                value: string;
            }[] | undefined>;
            subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Subject[], {
                value: string;
            }[] | undefined>;
            tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>, Tag[], (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined>;
            id: z.ZodString;
            type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            read: z.ZodDefault<z.ZodBoolean>;
            OwnWork: z.ZodDefault<z.ZodBoolean>;
            ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
            MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                entries: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }>, "many">>, CitationGroup[], {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }[] | undefined>;
            added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        }, z.ZodString, "strip">>, Omit<{
            id: string;
            tags: Tag[];
            readingList: ReadingList[];
            Bib: BibCore;
            createdAt: Date;
            lastAccess: Date;
            topics: Topic[];
            subjects: Subject[];
            BibId: number | null;
            OwnWork: boolean;
            ColleaguesWork: boolean;
            read: boolean;
            citationGroups: CitationGroup[];
            added: Date;
            number?: string | null | undefined;
            journal?: string | null | undefined;
            editor?: string | null | undefined;
            note?: string | null | undefined;
            abstract?: string | null | undefined;
            type?: string | null | undefined;
            title?: string | null | undefined;
            copyright?: string | null | undefined;
            school?: string | null | undefined;
            volume?: string | null | undefined;
            keywords?: string | null | undefined;
            MdxNotes?: any[] | null | undefined;
            htmlCitation?: string | null | undefined;
            PdfPath?: string | null | undefined;
            address?: string | null | undefined;
            annote?: string | null | undefined;
            author?: string | null | undefined;
            booktitle?: string | null | undefined;
            chapter?: string | null | undefined;
            crossref?: string | null | undefined;
            doi?: string | null | undefined;
            edition?: string | null | undefined;
            email?: string | null | undefined;
            howpublished?: string | null | undefined;
            institution?: string | null | undefined;
            month?: string | null | undefined;
            organization?: string | null | undefined;
            pages?: string | null | undefined;
            publisher?: string | null | undefined;
            series?: string | null | undefined;
            year?: string | null | undefined;
            numpages?: string | null | undefined;
            url?: string | null | undefined;
            issue?: string | null | undefined;
            issn?: string | null | undefined;
            urldate?: string | null | undefined;
            tempPageIndex?: number | null | undefined;
        }, "BibId"> & {
            BibId: number;
        }, z.objectInputType<{
            Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                filename: z.ZodDefault<z.ZodString>;
                id: z.ZodDefault<z.ZodNumber>;
                entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                filename: string;
                entries: any[];
                lastAccess?: Date | null | undefined;
                firstSync?: Date | null | undefined;
            }, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            }>>, BibCore, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            } | undefined>;
            BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
            readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                createdAt: Date;
                mdxNotes: any[];
                bibEntries: any[];
                ipynbNotes: any[];
                description: string | null;
                lastUpdate: Date;
            }, {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }>, "many">>, ReadingList[], {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }[] | undefined>;
            topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Topic[], {
                value: string;
            }[] | undefined>;
            subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Subject[], {
                value: string;
            }[] | undefined>;
            tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>, Tag[], (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined>;
            id: z.ZodString;
            type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            read: z.ZodDefault<z.ZodBoolean>;
            OwnWork: z.ZodDefault<z.ZodBoolean>;
            ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
            MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                entries: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }>, "many">>, CitationGroup[], {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }[] | undefined>;
            added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        }, z.ZodString, "strip">>, "many">>, BibEntry[], z.objectInputType<{
            Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                filename: z.ZodDefault<z.ZodString>;
                id: z.ZodDefault<z.ZodNumber>;
                entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                filename: string;
                entries: any[];
                lastAccess?: Date | null | undefined;
                firstSync?: Date | null | undefined;
            }, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            }>>, BibCore, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            } | undefined>;
            BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
            readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                createdAt: Date;
                mdxNotes: any[];
                bibEntries: any[];
                ipynbNotes: any[];
                description: string | null;
                lastUpdate: Date;
            }, {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }>, "many">>, ReadingList[], {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }[] | undefined>;
            topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Topic[], {
                value: string;
            }[] | undefined>;
            subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Subject[], {
                value: string;
            }[] | undefined>;
            tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>, Tag[], (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined>;
            id: z.ZodString;
            type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            read: z.ZodDefault<z.ZodBoolean>;
            OwnWork: z.ZodDefault<z.ZodBoolean>;
            ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
            MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                entries: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }>, "many">>, CitationGroup[], {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }[] | undefined>;
            added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        }, z.ZodString, "strip">[] | undefined>;
        importantValues: z.ZodDefault<z.ZodArray<z.ZodNumber, "many">>;
        bookmarked: z.ZodDefault<z.ZodBoolean>;
        quickLinkId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        href: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        citationsListOrder: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        outgoingQuickLinks: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        rootRelativePath: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | null | undefined, string | null | undefined>;
        equationIds: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        isProtected: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>>;
        sequentialKey: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        sequentialIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        sequentialList: z.ZodOptional<z.ZodObject<{
            sequentialKey: z.ZodString;
            MdxNote: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            Ipynb: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
        }, "strip", z.ZodTypeAny, {
            MdxNote: any[];
            Ipynb: any[];
            sequentialKey: string;
        }, {
            sequentialKey: string;
            MdxNote?: any[] | undefined;
            Ipynb?: any[] | undefined;
        }>>;
        remoteUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        noLog: z.ZodDefault<z.ZodBoolean>;
        saveFormatted: z.ZodDefault<z.ZodBoolean>;
        noteType: z.ZodEffects<z.ZodString, string, string>;
        trackRemote: z.ZodDefault<z.ZodBoolean>;
        toDo: z.ZodDefault<z.ZodArray<z.ZodObject<{
            id: z.ZodNumber;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            task: z.ZodString;
            dueAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            details: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            associatedNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            tags: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>;
            topics: z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>;
            subjects: z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>;
            parentId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            category: z.ZodNativeEnum<{
                bug: "bug";
                feature: "feature";
                documentation: "documentation";
                online: "online";
                priority: "priority";
                urgent: "urgent";
                work: "work";
                gym: "gym";
                freetime: "freetime";
                study: "study";
                research: "research";
                paper: "paper";
            }>;
            bookmarked: z.ZodDefault<z.ZodBoolean>;
            status: z.ZodEnum<["ToDo", "In_Progress", "Backlog", "Cancelled", "Done", "Future"]>;
            priority: z.ZodNumber;
            parent: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodAny>>>;
            child: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodAny>>>;
            ToDoList: z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                label: z.ZodString;
                tasks: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, Pick<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "createdAt" | "lastUpdate">>, {
                topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                }, {
                    value: string;
                }>, "many">>, Topic[], {
                    value: string;
                }[] | undefined>;
                subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                }, {
                    value: string;
                }>, "many">>, Subject[], {
                    value: string;
                }[] | undefined>;
                tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    value: z.ZodString;
                    kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }>, z.ZodEffects<z.ZodString, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }, string>]>, "many">>, Tag[], (string | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[] | undefined>;
            }>, "strip", z.ZodTypeAny, {
                id: number;
                label: string;
                tags: Tag[];
                createdAt: Date;
                topics: Topic[];
                subjects: Subject[];
                lastUpdate: Date;
                tasks: any[];
            }, {
                id: number;
                label: string;
                tags?: (string | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[] | undefined;
                createdAt?: string | Date | null | undefined;
                topics?: {
                    value: string;
                }[] | undefined;
                subjects?: {
                    value: string;
                }[] | undefined;
                lastUpdate?: string | Date | null | undefined;
                tasks?: any[] | undefined;
            }>;
            toDoListId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            id: number;
            tags: ({
                value: string;
                kanbanId?: number | null | undefined;
            } | {
                value: string;
                kanbanId?: number | null | undefined;
            })[];
            ToDoList: {
                id: number;
                label: string;
                tags: Tag[];
                createdAt: Date;
                topics: Topic[];
                subjects: Subject[];
                lastUpdate: Date;
                tasks: any[];
            };
            createdAt: Date;
            topics: {
                value: string;
            }[];
            subjects: {
                value: string;
            }[];
            bookmarked: boolean;
            status: "ToDo" | "In_Progress" | "Backlog" | "Cancelled" | "Done" | "Future";
            task: string;
            dueAt: Date;
            associatedNotes: any[];
            category: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper";
            priority: number;
            toDoListId: number;
            details?: string | null | undefined;
            parentId?: number | null | undefined;
            parent?: any;
            child?: any;
        }, {
            id: number;
            ToDoList: {
                id: number;
                label: string;
                tags?: (string | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[] | undefined;
                createdAt?: string | Date | null | undefined;
                topics?: {
                    value: string;
                }[] | undefined;
                subjects?: {
                    value: string;
                }[] | undefined;
                lastUpdate?: string | Date | null | undefined;
                tasks?: any[] | undefined;
            };
            status: "ToDo" | "In_Progress" | "Backlog" | "Cancelled" | "Done" | "Future";
            task: string;
            category: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper";
            priority: number;
            toDoListId: number;
            tags?: (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined;
            createdAt?: string | Date | null | undefined;
            topics?: {
                value: string;
            }[] | undefined;
            subjects?: {
                value: string;
            }[] | undefined;
            bookmarked?: boolean | undefined;
            dueAt?: string | Date | null | undefined;
            details?: string | null | undefined;
            associatedNotes?: any[] | undefined;
            parentId?: number | null | undefined;
            parent?: any;
            child?: any;
        }>, "many">>;
        summary: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodEffects<z.ZodString, Date, string>, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
        lastSync: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodEffects<z.ZodString, Date, string>, z.ZodDate]>>>;
    }, {
        topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>, Topic[], {
            value: string;
        }[] | undefined>;
        subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>, Subject[], {
            value: string;
        }[] | undefined>;
        tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            value: z.ZodString;
            kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            value: string;
            kanbanId?: number | null | undefined;
        }, {
            value: string;
            kanbanId?: number | null | undefined;
        }>, z.ZodEffects<z.ZodString, {
            value: string;
            kanbanId?: number | null | undefined;
        }, string>]>, "many">>, Tag[], (string | {
            value: string;
            kanbanId?: number | null | undefined;
        })[] | undefined>;
    }>, "rootRelativePath" | "bookmarked" | "raw">, {
        docTypeData: z.ZodEffects<z.ZodObject<{
            label: z.ZodString;
            icon: z.ZodDefault<z.ZodEffects<z.ZodString, string, string>>;
            UI: z.ZodDefault<z.ZodDefault<z.ZodObject<{
                styles: z.ZodDefault<z.ZodObject<{
                    dark: z.ZodDefault<z.ZodObject<{
                        bg: z.ZodOptional<z.ZodString>;
                        fg: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        bg?: string | undefined;
                        fg?: string | undefined;
                    }, {
                        bg?: string | undefined;
                        fg?: string | undefined;
                    }>>;
                    light: z.ZodDefault<z.ZodObject<{
                        bg: z.ZodOptional<z.ZodString>;
                        fg: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        bg?: string | undefined;
                        fg?: string | undefined;
                    }, {
                        bg?: string | undefined;
                        fg?: string | undefined;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    dark: {
                        bg?: string | undefined;
                        fg?: string | undefined;
                    };
                    light: {
                        bg?: string | undefined;
                        fg?: string | undefined;
                    };
                }, {
                    dark?: {
                        bg?: string | undefined;
                        fg?: string | undefined;
                    } | undefined;
                    light?: {
                        bg?: string | undefined;
                        fg?: string | undefined;
                    } | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                styles: {
                    dark: {
                        bg?: string | undefined;
                        fg?: string | undefined;
                    };
                    light: {
                        bg?: string | undefined;
                        fg?: string | undefined;
                    };
                };
            }, {
                styles?: {
                    dark?: {
                        bg?: string | undefined;
                        fg?: string | undefined;
                    } | undefined;
                    light?: {
                        bg?: string | undefined;
                        fg?: string | undefined;
                    } | undefined;
                } | undefined;
            }>>>;
            fs: z.ZodEffects<z.ZodString, string, string>;
            id: z.ZodOptional<z.ZodString>;
            docType: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
            filePathPattern: z.ZodOptional<z.ZodString>;
            matchWeight: z.ZodDefault<z.ZodNumber>;
            url: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
            urlQuery: z.ZodDefault<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">, z.ZodNumber, z.ZodArray<z.ZodNumber, "many">]>>>>;
            keywords: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            topicLabel: z.ZodOptional<z.ZodString>;
            subjectLabel: z.ZodOptional<z.ZodString>;
            autoTag: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            autoTopic: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            autoSubject: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            inSidebar: z.ZodDefault<z.ZodBoolean>;
            inNavbar: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            icon: string;
            UI: {
                styles: {
                    dark: {
                        bg?: string | undefined;
                        fg?: string | undefined;
                    };
                    light: {
                        bg?: string | undefined;
                        fg?: string | undefined;
                    };
                };
            };
            fs: string;
            matchWeight: number;
            urlQuery: Record<string, string | number | string[] | number[]>;
            keywords: string[];
            autoTag: string[];
            autoTopic: string[];
            autoSubject: string[];
            inSidebar: boolean;
            inNavbar: boolean;
            id?: string | undefined;
            docType?: string | undefined;
            filePathPattern?: string | undefined;
            url?: string | undefined;
            topicLabel?: string | undefined;
            subjectLabel?: string | undefined;
        }, {
            label: string;
            fs: string;
            icon?: string | undefined;
            UI?: {
                styles?: {
                    dark?: {
                        bg?: string | undefined;
                        fg?: string | undefined;
                    } | undefined;
                    light?: {
                        bg?: string | undefined;
                        fg?: string | undefined;
                    } | undefined;
                } | undefined;
            } | undefined;
            id?: string | undefined;
            docType?: string | undefined;
            filePathPattern?: string | undefined;
            matchWeight?: number | undefined;
            url?: string | undefined;
            urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
            keywords?: string[] | undefined;
            topicLabel?: string | undefined;
            subjectLabel?: string | undefined;
            autoTag?: string[] | undefined;
            autoTopic?: string[] | undefined;
            autoSubject?: string[] | undefined;
            inSidebar?: boolean | undefined;
            inNavbar?: boolean | undefined;
        }>, {
            docType: string;
            id: string;
            url: string;
            label: string;
            icon: string;
            UI: {
                styles: {
                    dark: {
                        bg?: string | undefined;
                        fg?: string | undefined;
                    };
                    light: {
                        bg?: string | undefined;
                        fg?: string | undefined;
                    };
                };
            };
            fs: string;
            matchWeight: number;
            urlQuery: Record<string, string | number | string[] | number[]>;
            keywords: string[];
            autoTag: string[];
            autoTopic: string[];
            autoSubject: string[];
            inSidebar: boolean;
            inNavbar: boolean;
            filePathPattern?: string | undefined;
            topicLabel?: string | undefined;
            subjectLabel?: string | undefined;
        }, {
            label: string;
            fs: string;
            icon?: string | undefined;
            UI?: {
                styles?: {
                    dark?: {
                        bg?: string | undefined;
                        fg?: string | undefined;
                    } | undefined;
                    light?: {
                        bg?: string | undefined;
                        fg?: string | undefined;
                    } | undefined;
                } | undefined;
            } | undefined;
            id?: string | undefined;
            docType?: string | undefined;
            filePathPattern?: string | undefined;
            matchWeight?: number | undefined;
            url?: string | undefined;
            urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
            keywords?: string[] | undefined;
            topicLabel?: string | undefined;
            subjectLabel?: string | undefined;
            autoTag?: string[] | undefined;
            autoTopic?: string[] | undefined;
            autoSubject?: string[] | undefined;
            inSidebar?: boolean | undefined;
            inNavbar?: boolean | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        bookmarked: boolean;
        raw: string;
        docTypeData: {
            docType: string;
            id: string;
            url: string;
            label: string;
            icon: string;
            UI: {
                styles: {
                    dark: {
                        bg?: string | undefined;
                        fg?: string | undefined;
                    };
                    light: {
                        bg?: string | undefined;
                        fg?: string | undefined;
                    };
                };
            };
            fs: string;
            matchWeight: number;
            urlQuery: Record<string, string | number | string[] | number[]>;
            keywords: string[];
            autoTag: string[];
            autoTopic: string[];
            autoSubject: string[];
            inSidebar: boolean;
            inNavbar: boolean;
            filePathPattern?: string | undefined;
            topicLabel?: string | undefined;
            subjectLabel?: string | undefined;
        };
        rootRelativePath?: string | null | undefined;
    }, {
        raw: string;
        docTypeData: {
            label: string;
            fs: string;
            icon?: string | undefined;
            UI?: {
                styles?: {
                    dark?: {
                        bg?: string | undefined;
                        fg?: string | undefined;
                    } | undefined;
                    light?: {
                        bg?: string | undefined;
                        fg?: string | undefined;
                    } | undefined;
                } | undefined;
            } | undefined;
            id?: string | undefined;
            docType?: string | undefined;
            filePathPattern?: string | undefined;
            matchWeight?: number | undefined;
            url?: string | undefined;
            urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
            keywords?: string[] | undefined;
            topicLabel?: string | undefined;
            subjectLabel?: string | undefined;
            autoTag?: string[] | undefined;
            autoTopic?: string[] | undefined;
            autoSubject?: string[] | undefined;
            inSidebar?: boolean | undefined;
            inNavbar?: boolean | undefined;
        };
        rootRelativePath?: string | null | undefined;
        bookmarked?: boolean | undefined;
    }>;
    export const mdxNoteIntriguingValSummaryPropsSchema: z.ZodObject<Omit<z.objectUtil.extendShape<{
        content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        id: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        latexTitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        raw: z.ZodString;
        floatImages: z.ZodDefault<z.ZodBoolean>;
        formatted: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        citations: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodEffects<z.ZodObject<{
            Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                filename: z.ZodDefault<z.ZodString>;
                id: z.ZodDefault<z.ZodNumber>;
                entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                filename: string;
                entries: any[];
                lastAccess?: Date | null | undefined;
                firstSync?: Date | null | undefined;
            }, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            }>>, BibCore, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            } | undefined>;
            BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
            readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                createdAt: Date;
                mdxNotes: any[];
                bibEntries: any[];
                ipynbNotes: any[];
                description: string | null;
                lastUpdate: Date;
            }, {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }>, "many">>, ReadingList[], {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }[] | undefined>;
            topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Topic[], {
                value: string;
            }[] | undefined>;
            subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Subject[], {
                value: string;
            }[] | undefined>;
            tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>, Tag[], (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined>;
            id: z.ZodString;
            type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            read: z.ZodDefault<z.ZodBoolean>;
            OwnWork: z.ZodDefault<z.ZodBoolean>;
            ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
            MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                entries: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }>, "many">>, CitationGroup[], {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }[] | undefined>;
            added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        }, "strip", z.ZodString, z.objectOutputType<{
            Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                filename: z.ZodDefault<z.ZodString>;
                id: z.ZodDefault<z.ZodNumber>;
                entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                filename: string;
                entries: any[];
                lastAccess?: Date | null | undefined;
                firstSync?: Date | null | undefined;
            }, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            }>>, BibCore, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            } | undefined>;
            BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
            readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                createdAt: Date;
                mdxNotes: any[];
                bibEntries: any[];
                ipynbNotes: any[];
                description: string | null;
                lastUpdate: Date;
            }, {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }>, "many">>, ReadingList[], {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }[] | undefined>;
            topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Topic[], {
                value: string;
            }[] | undefined>;
            subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Subject[], {
                value: string;
            }[] | undefined>;
            tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>, Tag[], (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined>;
            id: z.ZodString;
            type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            read: z.ZodDefault<z.ZodBoolean>;
            OwnWork: z.ZodDefault<z.ZodBoolean>;
            ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
            MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                entries: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }>, "many">>, CitationGroup[], {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }[] | undefined>;
            added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        }, z.ZodString, "strip">, z.objectInputType<{
            Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                filename: z.ZodDefault<z.ZodString>;
                id: z.ZodDefault<z.ZodNumber>;
                entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                filename: string;
                entries: any[];
                lastAccess?: Date | null | undefined;
                firstSync?: Date | null | undefined;
            }, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            }>>, BibCore, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            } | undefined>;
            BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
            readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                createdAt: Date;
                mdxNotes: any[];
                bibEntries: any[];
                ipynbNotes: any[];
                description: string | null;
                lastUpdate: Date;
            }, {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }>, "many">>, ReadingList[], {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }[] | undefined>;
            topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Topic[], {
                value: string;
            }[] | undefined>;
            subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Subject[], {
                value: string;
            }[] | undefined>;
            tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>, Tag[], (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined>;
            id: z.ZodString;
            type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            read: z.ZodDefault<z.ZodBoolean>;
            OwnWork: z.ZodDefault<z.ZodBoolean>;
            ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
            MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                entries: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }>, "many">>, CitationGroup[], {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }[] | undefined>;
            added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        }, z.ZodString, "strip">>, Omit<{
            id: string;
            tags: Tag[];
            readingList: ReadingList[];
            Bib: BibCore;
            createdAt: Date;
            lastAccess: Date;
            topics: Topic[];
            subjects: Subject[];
            BibId: number | null;
            OwnWork: boolean;
            ColleaguesWork: boolean;
            read: boolean;
            citationGroups: CitationGroup[];
            added: Date;
            number?: string | null | undefined;
            journal?: string | null | undefined;
            editor?: string | null | undefined;
            note?: string | null | undefined;
            abstract?: string | null | undefined;
            type?: string | null | undefined;
            title?: string | null | undefined;
            copyright?: string | null | undefined;
            school?: string | null | undefined;
            volume?: string | null | undefined;
            keywords?: string | null | undefined;
            MdxNotes?: any[] | null | undefined;
            htmlCitation?: string | null | undefined;
            PdfPath?: string | null | undefined;
            address?: string | null | undefined;
            annote?: string | null | undefined;
            author?: string | null | undefined;
            booktitle?: string | null | undefined;
            chapter?: string | null | undefined;
            crossref?: string | null | undefined;
            doi?: string | null | undefined;
            edition?: string | null | undefined;
            email?: string | null | undefined;
            howpublished?: string | null | undefined;
            institution?: string | null | undefined;
            month?: string | null | undefined;
            organization?: string | null | undefined;
            pages?: string | null | undefined;
            publisher?: string | null | undefined;
            series?: string | null | undefined;
            year?: string | null | undefined;
            numpages?: string | null | undefined;
            url?: string | null | undefined;
            issue?: string | null | undefined;
            issn?: string | null | undefined;
            urldate?: string | null | undefined;
            tempPageIndex?: number | null | undefined;
        }, "BibId"> & {
            BibId: number;
        }, z.objectInputType<{
            Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                filename: z.ZodDefault<z.ZodString>;
                id: z.ZodDefault<z.ZodNumber>;
                entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                filename: string;
                entries: any[];
                lastAccess?: Date | null | undefined;
                firstSync?: Date | null | undefined;
            }, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            }>>, BibCore, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            } | undefined>;
            BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
            readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                createdAt: Date;
                mdxNotes: any[];
                bibEntries: any[];
                ipynbNotes: any[];
                description: string | null;
                lastUpdate: Date;
            }, {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }>, "many">>, ReadingList[], {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }[] | undefined>;
            topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Topic[], {
                value: string;
            }[] | undefined>;
            subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Subject[], {
                value: string;
            }[] | undefined>;
            tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>, Tag[], (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined>;
            id: z.ZodString;
            type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            read: z.ZodDefault<z.ZodBoolean>;
            OwnWork: z.ZodDefault<z.ZodBoolean>;
            ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
            MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                entries: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }>, "many">>, CitationGroup[], {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }[] | undefined>;
            added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        }, z.ZodString, "strip">>, "many">>, BibEntry[], z.objectInputType<{
            Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                filename: z.ZodDefault<z.ZodString>;
                id: z.ZodDefault<z.ZodNumber>;
                entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, "strip", z.ZodTypeAny, {
                id: number;
                filename: string;
                entries: any[];
                lastAccess?: Date | null | undefined;
                firstSync?: Date | null | undefined;
            }, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            }>>, BibCore, {
                id?: number | undefined;
                lastAccess?: string | Date | null | undefined;
                firstSync?: string | Date | null | undefined;
                filename?: string | undefined;
                entries?: any[] | undefined;
            } | undefined>;
            BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
            readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                createdAt: Date;
                mdxNotes: any[];
                bibEntries: any[];
                ipynbNotes: any[];
                description: string | null;
                lastUpdate: Date;
            }, {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }>, "many">>, ReadingList[], {
                name: string;
                bibEntries: any[];
                description: string | null;
                createdAt?: string | Date | null | undefined;
                mdxNotes?: any[] | undefined;
                ipynbNotes?: any[] | undefined;
                lastUpdate?: string | Date | null | undefined;
            }[] | undefined>;
            topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Topic[], {
                value: string;
            }[] | undefined>;
            subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, Subject[], {
                value: string;
            }[] | undefined>;
            tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>, Tag[], (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined>;
            id: z.ZodString;
            type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            read: z.ZodDefault<z.ZodBoolean>;
            OwnWork: z.ZodDefault<z.ZodBoolean>;
            ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
            MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                entries: z.ZodArray<z.ZodAny, "many">;
            }, "strip", z.ZodTypeAny, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }, {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }>, "many">>, CitationGroup[], {
                name: string;
                entries: any[];
                description?: string | null | undefined;
            }[] | undefined>;
            added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
        }, z.ZodString, "strip">[] | undefined>;
        importantValues: z.ZodDefault<z.ZodArray<z.ZodNumber, "many">>;
        bookmarked: z.ZodDefault<z.ZodBoolean>;
        quickLinkId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        href: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        citationsListOrder: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        outgoingQuickLinks: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        rootRelativePath: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | null | undefined, string | null | undefined>;
        equationIds: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        isProtected: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>>;
        sequentialKey: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        sequentialIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        sequentialList: z.ZodOptional<z.ZodObject<{
            sequentialKey: z.ZodString;
            MdxNote: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            Ipynb: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
        }, "strip", z.ZodTypeAny, {
            MdxNote: any[];
            Ipynb: any[];
            sequentialKey: string;
        }, {
            sequentialKey: string;
            MdxNote?: any[] | undefined;
            Ipynb?: any[] | undefined;
        }>>;
        remoteUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        noLog: z.ZodDefault<z.ZodBoolean>;
        saveFormatted: z.ZodDefault<z.ZodBoolean>;
        noteType: z.ZodEffects<z.ZodString, string, string>;
        trackRemote: z.ZodDefault<z.ZodBoolean>;
        toDo: z.ZodDefault<z.ZodArray<z.ZodObject<{
            id: z.ZodNumber;
            createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            task: z.ZodString;
            dueAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            details: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            associatedNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            tags: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>;
            topics: z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>;
            subjects: z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>;
            parentId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            category: z.ZodNativeEnum<{
                bug: "bug";
                feature: "feature";
                documentation: "documentation";
                online: "online";
                priority: "priority";
                urgent: "urgent";
                work: "work";
                gym: "gym";
                freetime: "freetime";
                study: "study";
                research: "research";
                paper: "paper";
            }>;
            bookmarked: z.ZodDefault<z.ZodBoolean>;
            status: z.ZodEnum<["ToDo", "In_Progress", "Backlog", "Cancelled", "Done", "Future"]>;
            priority: z.ZodNumber;
            parent: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodAny>>>;
            child: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodAny>>>;
            ToDoList: z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
                id: z.ZodNumber;
                label: z.ZodString;
                tasks: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, Pick<{
                name: z.ZodString;
                description: z.ZodNullable<z.ZodString>;
                bibEntries: z.ZodArray<z.ZodAny, "many">;
                mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
            }, "createdAt" | "lastUpdate">>, {
                topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                }, {
                    value: string;
                }>, "many">>, Topic[], {
                    value: string;
                }[] | undefined>;
                subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                }, {
                    value: string;
                }>, "many">>, Subject[], {
                    value: string;
                }[] | undefined>;
                tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    value: z.ZodString;
                    kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }>, z.ZodEffects<z.ZodString, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }, string>]>, "many">>, Tag[], (string | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[] | undefined>;
            }>, "strip", z.ZodTypeAny, {
                id: number;
                label: string;
                tags: Tag[];
                createdAt: Date;
                topics: Topic[];
                subjects: Subject[];
                lastUpdate: Date;
                tasks: any[];
            }, {
                id: number;
                label: string;
                tags?: (string | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[] | undefined;
                createdAt?: string | Date | null | undefined;
                topics?: {
                    value: string;
                }[] | undefined;
                subjects?: {
                    value: string;
                }[] | undefined;
                lastUpdate?: string | Date | null | undefined;
                tasks?: any[] | undefined;
            }>;
            toDoListId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            id: number;
            tags: ({
                value: string;
                kanbanId?: number | null | undefined;
            } | {
                value: string;
                kanbanId?: number | null | undefined;
            })[];
            ToDoList: {
                id: number;
                label: string;
                tags: Tag[];
                createdAt: Date;
                topics: Topic[];
                subjects: Subject[];
                lastUpdate: Date;
                tasks: any[];
            };
            createdAt: Date;
            topics: {
                value: string;
            }[];
            subjects: {
                value: string;
            }[];
            bookmarked: boolean;
            status: "ToDo" | "In_Progress" | "Backlog" | "Cancelled" | "Done" | "Future";
            task: string;
            dueAt: Date;
            associatedNotes: any[];
            category: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper";
            priority: number;
            toDoListId: number;
            details?: string | null | undefined;
            parentId?: number | null | undefined;
            parent?: any;
            child?: any;
        }, {
            id: number;
            ToDoList: {
                id: number;
                label: string;
                tags?: (string | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[] | undefined;
                createdAt?: string | Date | null | undefined;
                topics?: {
                    value: string;
                }[] | undefined;
                subjects?: {
                    value: string;
                }[] | undefined;
                lastUpdate?: string | Date | null | undefined;
                tasks?: any[] | undefined;
            };
            status: "ToDo" | "In_Progress" | "Backlog" | "Cancelled" | "Done" | "Future";
            task: string;
            category: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper";
            priority: number;
            toDoListId: number;
            tags?: (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined;
            createdAt?: string | Date | null | undefined;
            topics?: {
                value: string;
            }[] | undefined;
            subjects?: {
                value: string;
            }[] | undefined;
            bookmarked?: boolean | undefined;
            dueAt?: string | Date | null | undefined;
            details?: string | null | undefined;
            associatedNotes?: any[] | undefined;
            parentId?: number | null | undefined;
            parent?: any;
            child?: any;
        }>, "many">>;
        summary: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodEffects<z.ZodString, Date, string>, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
        lastSync: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodEffects<z.ZodString, Date, string>, z.ZodDate]>>>;
    }, {
        topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>, Topic[], {
            value: string;
        }[] | undefined>;
        subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>, Subject[], {
            value: string;
        }[] | undefined>;
        tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            value: z.ZodString;
            kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            value: string;
            kanbanId?: number | null | undefined;
        }, {
            value: string;
            kanbanId?: number | null | undefined;
        }>, z.ZodEffects<z.ZodString, {
            value: string;
            kanbanId?: number | null | undefined;
        }, string>]>, "many">>, Tag[], (string | {
            value: string;
            kanbanId?: number | null | undefined;
        })[] | undefined>;
    }>, "tags" | "topics" | "subjects" | "isProtected" | "latexTitle" | "formatted" | "citationsListOrder" | "sequentialKey" | "sequentialIndex" | "floatImages" | "remoteUrl" | "trackRemote" | "outgoingQuickLinks" | "citations" | "raw" | "quickLinkId" | "equationIds" | "noLog" | "saveFormatted">, "strip", z.ZodTypeAny, {
        noteType: string;
        toDo: {
            id: number;
            tags: ({
                value: string;
                kanbanId?: number | null | undefined;
            } | {
                value: string;
                kanbanId?: number | null | undefined;
            })[];
            ToDoList: {
                id: number;
                label: string;
                tags: Tag[];
                createdAt: Date;
                topics: Topic[];
                subjects: Subject[];
                lastUpdate: Date;
                tasks: any[];
            };
            createdAt: Date;
            topics: {
                value: string;
            }[];
            subjects: {
                value: string;
            }[];
            bookmarked: boolean;
            status: "ToDo" | "In_Progress" | "Backlog" | "Cancelled" | "Done" | "Future";
            task: string;
            dueAt: Date;
            associatedNotes: any[];
            category: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper";
            priority: number;
            toDoListId: number;
            details?: string | null | undefined;
            parentId?: number | null | undefined;
            parent?: any;
            child?: any;
        }[];
        importantValues: number[];
        bookmarked: boolean;
        id?: number | null | undefined;
        href?: string | null | undefined;
        summary?: string | null | undefined;
        title?: string | null | undefined;
        content?: string | null | undefined;
        firstSync?: Date | null | undefined;
        lastSync?: Date | null | undefined;
        rootRelativePath?: string | null | undefined;
        sequentialList?: {
            MdxNote: any[];
            Ipynb: any[];
            sequentialKey: string;
        } | undefined;
    }, {
        noteType: string;
        id?: number | null | undefined;
        href?: string | null | undefined;
        summary?: string | null | undefined;
        title?: string | null | undefined;
        content?: string | null | undefined;
        toDo?: {
            id: number;
            ToDoList: {
                id: number;
                label: string;
                tags?: (string | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[] | undefined;
                createdAt?: string | Date | null | undefined;
                topics?: {
                    value: string;
                }[] | undefined;
                subjects?: {
                    value: string;
                }[] | undefined;
                lastUpdate?: string | Date | null | undefined;
                tasks?: any[] | undefined;
            };
            status: "ToDo" | "In_Progress" | "Backlog" | "Cancelled" | "Done" | "Future";
            task: string;
            category: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper";
            priority: number;
            toDoListId: number;
            tags?: (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined;
            createdAt?: string | Date | null | undefined;
            topics?: {
                value: string;
            }[] | undefined;
            subjects?: {
                value: string;
            }[] | undefined;
            bookmarked?: boolean | undefined;
            dueAt?: string | Date | null | undefined;
            details?: string | null | undefined;
            associatedNotes?: any[] | undefined;
            parentId?: number | null | undefined;
            parent?: any;
            child?: any;
        }[] | undefined;
        firstSync?: string | Date | null | undefined;
        lastSync?: string | Date | null | undefined;
        rootRelativePath?: string | null | undefined;
        importantValues?: number[] | undefined;
        bookmarked?: boolean | undefined;
        sequentialList?: {
            sequentialKey: string;
            MdxNote?: any[] | undefined;
            Ipynb?: any[] | undefined;
        } | undefined;
    }>;
    export type FromMdxStringOpts = z.input<typeof fromMdxStringOptSchema>;
    export type MdxNotePropsInput = z.input<typeof mdxNotePropsSchema>;
    export type MdxNotePropsOutput = z.output<typeof mdxNotePropsSchema>;
    export type MdxNoteSummaryInput = z.input<typeof mdxNoteSummaryPropSchema>;
    export type MdxNoteSummaryOutput = z.output<typeof mdxNoteSummaryPropSchema>;
    export type MdxNoteFromStringInput = z.input<typeof mdxNoteFromStringPropsSchema>;
    export type MdxNoteFromStringOutput = z.output<typeof mdxNoteFromStringPropsSchema>;
    export type MdxNoteIntriguingValSummaryInput = z.input<typeof mdxNoteIntriguingValSummaryPropsSchema>;
    export type MdxNoteIntriguingValSummaryOutput = z.output<typeof mdxNoteIntriguingValSummaryPropsSchema>;
}
declare module "classes/prismaMdxRelations/CitationGroup" {
    import { CitationGroupReturned, BibEntryReturned } from "trpcTypes/main";
    import { BibEntry } from "classes/prismaMdxRelations/BibEntry";
    import type { Prisma, CitationsGroup as PrismaCitationGroup } from "@ulld/database/internalDatabaseTypes";
    import { CitationGroupPropsOutput } from "classes/prismaMdxRelations/schemas/general";
    export class CitationGroup {
        entries: BibEntry[];
        name: string;
        description: string | null | undefined;
        constructor(props: CitationGroupPropsOutput);
        toPlainObject(): {
            name: string;
            description?: string | null | undefined;
        };
        whereUniqueInput(): Prisma.CitationsGroupWhereUniqueInput;
        whereInput(): Prisma.CitationsGroupWhereUniqueInput;
        createInput(): Prisma.CitationsGroupCreateInput;
        createArgs(): Prisma.CitationsGroupCreateArgs<import("@prisma/client/runtime/library").DefaultArgs>;
        upsertArgs(): Prisma.CitationsGroupUpsertArgs<import("@prisma/client/runtime/library").DefaultArgs>;
        connectOrCreateArgs(): Prisma.CitationsGroupCreateOrConnectWithoutEntriesInput;
        static fromPrisma(entry: NonNullable<CitationGroupReturned> | PrismaCitationGroup & {
            entries: undefined;
        } | Partial<NonNullable<BibEntryReturned>['citationGroups'][number]>): CitationGroup;
        static fromList(items: (PrismaCitationGroup & {
            entries?: undefined;
        } | CitationGroup | Partial<NonNullable<BibEntryReturned>['citationGroups'][number]>)[] | null | undefined): CitationGroup[];
    }
}
declare module "classes/prismaMdxRelations/type" {
    import type { Prisma } from "@ulld/database/internalDatabaseTypes";
    type DelegateTypes = Prisma.TagDelegate | Prisma.BibEntryDelegate | Prisma.CitationsGroupDelegate | Prisma.ReadingListDelegate | Prisma.MdxNoteDelegate | Prisma.TopicDelegate | Prisma.SubjectDelegate | Prisma.BibDelegate | Prisma.IpynbDelegate | Prisma.SequentialNoteListDelegate | Prisma.DefinitionDelegate;
    export interface PrismaMdxRelationshipProtocol<T extends DelegateTypes> {
        createArgs: (...props: any[]) => unknown;
        upsertArgs: (...props: any[]) => unknown;
        connectOrCreateArgs: (...props: any[]) => unknown;
        whereUniqueInput: (...props: any[]) => unknown;
        whereInput: (...props: any[]) => unknown;
        createInput: (...props: any[]) => unknown;
    }
}
declare module "classes/prismaMdxRelations/protocols/bibEntry" {
    import { BibEntryReturned, BibReturnType } from "trpcTypes/main";
    import { BibCore } from "classes/prismaMdxRelations/Bib";
    import { BibEntry, BibEntryDataTableOutput, BibEntryPrismaAcceptedTypes } from "classes/prismaMdxRelations/BibEntry";
    import { CitationGroup } from "classes/prismaMdxRelations/CitationGroup";
    import { MdxNote } from "classes/prismaMdxRelations/MdxNote";
    import { ReadingList } from "classes/prismaMdxRelations/readingList";
    import { Tag } from "classes/prismaMdxRelations/tag";
    import { PrismaMdxRelationshipProtocol } from "classes/prismaMdxRelations/type";
    import { Prisma } from "@ulld/database/internalDatabaseTypes";
    export type BibEntryProps = Omit<Partial<NonNullable<BibEntryReturned>>, "added"> & {
        Bib?: undefined | BibReturnType;
        added?: Date | string | undefined;
    } & {
        [k: string]: any;
    };
    export abstract class BibEntryProtocol implements PrismaMdxRelationshipProtocol<Prisma.CitationsGroupDelegate> {
        [s: string]: any;
        Bib?: BibCore;
        BibId?: number | null;
        readingList?: ReadingList[] | undefined | null;
        OwnWork?: boolean;
        ColleaguesWork?: boolean;
        read?: boolean;
        PdfPath?: string | null;
        address?: string | null;
        annote?: string | null;
        author?: string | null;
        booktitle?: string | null;
        chapter?: string | null;
        crossref?: string | null;
        doi?: string | null;
        edition?: string | null;
        editor?: string | null;
        email?: string | null;
        howpublished?: string | null;
        institution?: string | null;
        journal?: string | null;
        month?: string | null;
        note?: string | null;
        number?: string | null;
        organization?: string | null;
        pages?: string | null;
        publisher?: string | null;
        school?: string | null;
        series?: string | null;
        title?: string | null;
        volume?: string | null;
        type?: string | null;
        year?: string | null;
        numpages?: string | null;
        url?: string | null;
        issue?: string | null;
        issn?: string | null;
        abstract?: string | null;
        urldate?: string | null;
        keywords?: string | null;
        copyright?: string | null;
        added: Date | string;
        citationGroups: CitationGroup[];
        tags: Tag[];
        MdxNotes: MdxNote[] | null;
        abstract whereUniqueInput(): Prisma.BibEntryWhereUniqueInput;
        abstract whereInput(): Prisma.BibEntryWhereInput;
        abstract createInput(): Prisma.BibEntryCreateInput;
        abstract createArgs(): Prisma.BibEntryCreateArgs;
        abstract upsertArgs(): Prisma.BibEntryUpsertArgs;
        abstract connectOrCreateArgs(): Prisma.BibEntryCreateOrConnectWithoutBibInput;
        abstract toDataTable(): BibEntryDataTableOutput;
        static fromPrisma: (item: BibEntryProps & {
            id: string;
        }) => BibEntry;
        static fromList: (items: BibEntryPrismaAcceptedTypes[] | null | undefined) => BibEntry[];
    }
}
declare module "classes/prismaMdxRelations/BibEntry" {
    import type { Prisma, BibEntry as PrismaBibEntry } from "@ulld/database/internalDatabaseTypes";
    import type { BibFilePresenter } from "bibtex";
    import type { serverClient } from "trpc/serverClient";
    import type { CitationGroup } from "classes/prismaMdxRelations/CitationGroup";
    import type { MdxNote } from "classes/prismaMdxRelations/MdxNote";
    import type { PartialReadingListEntry, ReadingList } from "classes/prismaMdxRelations/readingList";
    import type { Tag } from "classes/prismaMdxRelations/tag";
    import { BibCore } from "classes/prismaMdxRelations/Bib";
    import type { BibEntrySchemaInput, ParsedBibEntryProps } from "classes/prismaMdxRelations/schemas/general";
    import type { Topic } from "classes/prismaMdxRelations/topic";
    import type { Subject } from "classes/prismaMdxRelations/subject";
    export type FromPrismaEntry = Awaited<ReturnType<typeof serverClient.bibliography.getBibEntry>> | NonNullable<Awaited<ReturnType<typeof serverClient.bibliography.getBib>>>["entries"];
    export type BibEntryPrismaAcceptedTypes = BibEntry | PrismaBibEntry | (Partial<PrismaBibEntry> & {
        id: string;
    }) | PartialReadingListEntry["bibEntries"][number];
    export interface BibEntrySummarySheetOutput {
        title: string;
        author: string;
        journal: string;
        tags: string[];
    }
    export interface BibEntryDataTableOutput {
        id: string;
        title: string;
        author: string;
        read: boolean;
        createdAt?: Date;
    }
    export class BibEntry {
        Bib: BibCore | undefined;
        prismaEntry?: PrismaBibEntry;
        id: string;
        htmlCitation?: string | null;
        tempPageIndex?: number | null;
        BibId?: number | null;
        readingList?: ReadingList[] | undefined | null;
        OwnWork?: boolean;
        ColleaguesWork?: boolean;
        read?: boolean;
        PdfPath?: string | null;
        address?: string | null;
        annote?: string | null;
        author?: string | null;
        booktitle?: string | null;
        chapter?: string | null;
        crossref?: string | null;
        doi?: string | null;
        edition?: string | null;
        editor?: string | null;
        email?: string | null;
        howpublished?: string | null;
        institution?: string | null;
        journal?: string | null;
        month?: string | null;
        note?: string | null;
        number?: string | null;
        organization?: string | null;
        pages?: string | null;
        publisher?: string | null;
        school?: string | null;
        series?: string | null;
        title?: string | null;
        volume?: string | null;
        type?: string | null;
        year?: string | null;
        numpages?: string | null;
        url?: string | null;
        issue?: string | null;
        issn?: string | null;
        abstract?: string | null;
        urldate?: string | null;
        keywords?: string | null;
        copyright?: string | null;
        createdAt: Date | string;
        lastAccess: Date | string;
        citationGroups: CitationGroup[];
        tags: Tag[];
        topics: Topic[];
        subjects: Subject[];
        MdxNotes: MdxNote[] | null;
        constructor(props: ParsedBibEntryProps, tempPageIndex?: number);
        getIdInBibFile(bibFileIds: string[], lowercaseBibFileIds: string[]): string;
        toPlainObject(): {
            id: string;
            htmlCitation: string | null | undefined;
            BibId: number | null | undefined;
            readingList: {
                name: string;
                createdAt: Date;
                mdxNotes: any[];
                bibEntries: any[];
                ipynbNotes: any[];
                description: string | null;
                lastUpdate: Date;
            }[] | undefined;
            OwnWork: boolean | undefined;
            ColleaguesWork: boolean | undefined;
            read: boolean | undefined;
            PdfPath: string | null | undefined;
            address: string | null | undefined;
            annote: string | null | undefined;
            author: string | null | undefined;
            booktitle: string | null | undefined;
            chapter: string | null | undefined;
            crossref: string | null | undefined;
            doi: string | null | undefined;
            edition: string | null | undefined;
            editor: string | null | undefined;
            email: string | null | undefined;
            howpublished: string | null | undefined;
            institution: string | null | undefined;
            journal: string | null | undefined;
            month: string | null | undefined;
            note: string | null | undefined;
            number: string | null | undefined;
            organization: string | null | undefined;
            pages: string | null | undefined;
            publisher: string | null | undefined;
            school: string | null | undefined;
            series: string | null | undefined;
            title: string | null | undefined;
            volume: string | null | undefined;
            type: string | null | undefined;
            year: string | null | undefined;
            numpages: string | null | undefined;
            url: string | null | undefined;
            issue: string | null | undefined;
            issn: string | null | undefined;
            abstract: string | null | undefined;
            urldate: string | null | undefined;
            keywords: string | null | undefined;
            copyright: string | null | undefined;
            citationGroups: {
                name: string;
                description?: string | null | undefined;
            }[] | undefined;
            tags: {
                value: string;
            }[];
            MdxNote: MdxNote[] | null;
            tempPageIndex: number | null | undefined;
        };
        whereUniqueInput(): Prisma.BibEntryWhereUniqueInput;
        whereInput(): Prisma.BibEntryWhereInput;
        connectOrCreateArgsIfExists(): {
            where: Prisma.BibEntryWhereUniqueInput;
            create: {
                OwnWork: boolean | undefined;
                ColleaguesWork: boolean | undefined;
                read: boolean;
                PdfPath: string | null | undefined;
                address: string | null | undefined;
                annote: string | null | undefined;
                author: string | null | undefined;
                booktitle: string | null | undefined;
                chapter: string | null | undefined;
                crossref: string | null | undefined;
                doi: string | null | undefined;
                edition: string | null | undefined;
                editor: string | null | undefined;
                email: string | null | undefined;
                howpublished: string | null | undefined;
                institution: string | null | undefined;
                journal: string | null | undefined;
                month: string | null | undefined;
                note: string | null | undefined;
                number: string | null | undefined;
                organization: string | null | undefined;
                pages: string | null | undefined;
                publisher: string | null | undefined;
                school: string | null | undefined;
                series: string | null | undefined;
                title: string | null | undefined;
                volume: string | null | undefined;
                type: string | null | undefined;
                year: string | null | undefined;
                numpages: string | null | undefined;
                url: string | null | undefined;
                issue: string | null | undefined;
                issn: string | null | undefined;
                abstract: string | null | undefined;
                urldate: string | null | undefined;
                keywords: string | null | undefined;
                copyright: string | null | undefined;
                readingList?: {
                    connectOrCreate: Prisma.ReadingListCreateOrConnectWithoutBibEntriesInput[] | undefined;
                } | undefined;
                id: string;
            };
        };
        connectOrCreateArgs(): Prisma.BibEntryCreateOrConnectWithoutBibInput;
        createInput(noBibId?: boolean): Prisma.BibEntryCreateInput;
        createArgs(): Prisma.BibEntryCreateArgs;
        upsertArgs(noBibId?: boolean): Prisma.BibEntryUpsertArgs;
        connectArgs(): Prisma.BibEntryWhereUniqueInput;
        tagList(): string[];
        toSummarySheet(): BibEntrySummarySheetOutput;
        toDataTable(): BibEntryDataTableOutput;
        formatCitationForPageSpecificOutput(html: string, pageIndex: number): string;
        toHtml(): React.ReactNode;
        static fromPrisma(item: BibEntrySchemaInput): BibEntry;
        static fromFs(item: BibFilePresenter["entries_raw"][number], bib: BibCore, htmlCitation?: string): BibEntry;
        static fromId(id: string): Promise<BibEntry | null>;
        static fromFsList(items: BibFilePresenter["entries_raw"]): BibEntry[];
        static fromList(items: BibEntryPrismaAcceptedTypes[] | null | undefined): BibEntry[];
    }
}
declare module "classes/prismaMdxRelations/protocols/sequentialList" {
    import { SequentialList } from "classes/prismaMdxRelations/SequentialList";
    import { PrismaMdxRelationshipProtocol } from "classes/prismaMdxRelations/type";
    import type { Prisma, SequentialNoteList } from "@ulld/database/internalDatabaseTypes";
    export abstract class SequentialListProtocol implements PrismaMdxRelationshipProtocol<Prisma.SequentialNoteListDelegate> {
        abstract createArgs(): Prisma.SequentialNoteListCreateArgs;
        abstract upsertArgs(): Prisma.SequentialNoteListUpsertArgs;
        abstract connectOrCreateArgs(): Prisma.SequentialNoteListCreateOrConnectWithoutIpynbInput;
        abstract whereUniqueInput(): Prisma.SequentialNoteListWhereUniqueInput;
        abstract createInput(): Prisma.SequentialNoteListCreateInput;
        abstract whereInput(): Prisma.SequentialNoteListWhereInput;
        static fromPrisma: (item: SequentialNoteList) => SequentialList;
    }
}
declare module "classes/prismaMdxRelations/SequentialList" {
    import { IpynbNote } from "classes/prismaMdxRelations/IpynbNote";
    import { MdxNote } from "classes/prismaMdxRelations/MdxNote";
    import { Prisma } from '@ulld/database';
    import { SequentialListProtocol } from "classes/prismaMdxRelations/protocols/sequentialList";
    export class SequentialList extends SequentialListProtocol {
        sequentialKey: string;
        mdxNotes?: MdxNote[];
        ipynbNotes?: IpynbNote[];
        constructor(sequentialKey: string);
        whereInput(): {
            sequentialKey: string;
        };
        whereUniqueInput(): {
            sequentialKey: string;
        };
        createInput(): {
            Ipynb?: {
                connectOrCreate: Prisma.IpynbCreateOrConnectWithoutTagsInput[];
            } | undefined;
            MdxNote?: {
                connectOrCreate: Prisma.MdxNoteCreateOrConnectWithoutTagsInput[];
            } | undefined;
            sequentialKey: string;
        };
        createArgs(): {
            data: {
                Ipynb?: {
                    connectOrCreate: Prisma.IpynbCreateOrConnectWithoutTagsInput[];
                } | undefined;
                MdxNote?: {
                    connectOrCreate: Prisma.MdxNoteCreateOrConnectWithoutTagsInput[];
                } | undefined;
                sequentialKey: string;
            };
        };
        connectOrCreateArgs(): {
            where: {
                sequentialKey: string;
            };
            create: {
                Ipynb?: {
                    connectOrCreate: Prisma.IpynbCreateOrConnectWithoutTagsInput[];
                } | undefined;
                MdxNote?: {
                    connectOrCreate: Prisma.MdxNoteCreateOrConnectWithoutTagsInput[];
                } | undefined;
                sequentialKey: string;
            };
        };
        upsertArgs(): {
            where: {
                sequentialKey: string;
            };
            create: {
                Ipynb?: {
                    connectOrCreate: Prisma.IpynbCreateOrConnectWithoutTagsInput[];
                } | undefined;
                MdxNote?: {
                    connectOrCreate: Prisma.MdxNoteCreateOrConnectWithoutTagsInput[];
                } | undefined;
                sequentialKey: string;
            };
            update: {
                Ipynb?: {
                    connectOrCreate: Prisma.IpynbCreateOrConnectWithoutTagsInput[];
                } | undefined;
                MdxNote?: {
                    connectOrCreate: Prisma.MdxNoteCreateOrConnectWithoutTagsInput[];
                } | undefined;
                sequentialKey: string;
            };
        };
    }
}
declare module "classes/prismaMdxRelations/protocols/definition" {
    import { Definition } from "classes/prismaMdxRelations/definition";
    import type { PrismaMdxRelationshipProtocol } from "classes/prismaMdxRelations/type";
    import type { Prisma, Definition as PrismaDefinition } from "@ulld/database/internalDatabaseTypes";
    export abstract class DefinitionProtocol implements PrismaMdxRelationshipProtocol<Prisma.DefinitionDelegate> {
        abstract whereInput(): Prisma.DefinitionWhereInput;
        abstract whereUniqueInput(): Prisma.DefinitionWhereUniqueInput;
        abstract createInput(): Prisma.DefinitionCreateWithoutMdxNoteInput;
        abstract createArgs(): Prisma.DefinitionCreateArgs;
        abstract upsertArgs(): Prisma.DefinitionUpsertArgs;
        abstract connectOrCreateArgs(): Prisma.DefinitionCreateOrConnectWithoutMdxNoteInput;
        static fromPrisma: (item: PrismaDefinition) => Definition;
    }
}
declare module "classes/prismaMdxRelations/schemas/definitionSchema" {
    import { z } from 'zod';
    import { MdxNote } from "classes/prismaMdxRelations/MdxNote";
    export const definitionZodObject: z.ZodObject<{
        id: z.ZodString;
        label: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        alphabeticalLabel: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        mdxNote: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodEffects<z.ZodObject<z.objectUtil.extendShape<{
            content: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            id: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            latexTitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            raw: z.ZodString;
            floatImages: z.ZodDefault<z.ZodBoolean>;
            formatted: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            citations: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodEffects<z.ZodObject<{
                Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                    firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                    lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                    filename: z.ZodDefault<z.ZodString>;
                    id: z.ZodDefault<z.ZodNumber>;
                    entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                }, "strip", z.ZodTypeAny, {
                    id: number;
                    filename: string;
                    entries: any[];
                    lastAccess?: Date | null | undefined;
                    firstSync?: Date | null | undefined;
                }, {
                    id?: number | undefined;
                    lastAccess?: string | Date | null | undefined;
                    firstSync?: string | Date | null | undefined;
                    filename?: string | undefined;
                    entries?: any[] | undefined;
                }>>, import("classes/prismaMdxRelations/Bib").BibCore, {
                    id?: number | undefined;
                    lastAccess?: string | Date | null | undefined;
                    firstSync?: string | Date | null | undefined;
                    filename?: string | undefined;
                    entries?: any[] | undefined;
                } | undefined>;
                BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
                readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodNullable<z.ZodString>;
                    bibEntries: z.ZodArray<z.ZodAny, "many">;
                    mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                    ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                    createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                    lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    createdAt: Date;
                    mdxNotes: any[];
                    bibEntries: any[];
                    ipynbNotes: any[];
                    description: string | null;
                    lastUpdate: Date;
                }, {
                    name: string;
                    bibEntries: any[];
                    description: string | null;
                    createdAt?: string | Date | null | undefined;
                    mdxNotes?: any[] | undefined;
                    ipynbNotes?: any[] | undefined;
                    lastUpdate?: string | Date | null | undefined;
                }>, "many">>, import("classes/prismaMdxRelations/readingList").ReadingList[], {
                    name: string;
                    bibEntries: any[];
                    description: string | null;
                    createdAt?: string | Date | null | undefined;
                    mdxNotes?: any[] | undefined;
                    ipynbNotes?: any[] | undefined;
                    lastUpdate?: string | Date | null | undefined;
                }[] | undefined>;
                topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                }, {
                    value: string;
                }>, "many">>, import("classes/prismaMdxRelations/topic").Topic[], {
                    value: string;
                }[] | undefined>;
                subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                }, {
                    value: string;
                }>, "many">>, import("classes/prismaMdxRelations/subject").Subject[], {
                    value: string;
                }[] | undefined>;
                tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    value: z.ZodString;
                    kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }>, z.ZodEffects<z.ZodString, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }, string>]>, "many">>, import("classes/prismaMdxRelations/tag").Tag[], (string | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[] | undefined>;
                id: z.ZodString;
                type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                read: z.ZodDefault<z.ZodBoolean>;
                OwnWork: z.ZodDefault<z.ZodBoolean>;
                ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
                MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
                citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    entries: z.ZodArray<z.ZodAny, "many">;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    entries: any[];
                    description?: string | null | undefined;
                }, {
                    name: string;
                    entries: any[];
                    description?: string | null | undefined;
                }>, "many">>, import("classes/prismaMdxRelations/CitationGroup").CitationGroup[], {
                    name: string;
                    entries: any[];
                    description?: string | null | undefined;
                }[] | undefined>;
                added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            }, "strip", z.ZodString, z.objectOutputType<{
                Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                    firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                    lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                    filename: z.ZodDefault<z.ZodString>;
                    id: z.ZodDefault<z.ZodNumber>;
                    entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                }, "strip", z.ZodTypeAny, {
                    id: number;
                    filename: string;
                    entries: any[];
                    lastAccess?: Date | null | undefined;
                    firstSync?: Date | null | undefined;
                }, {
                    id?: number | undefined;
                    lastAccess?: string | Date | null | undefined;
                    firstSync?: string | Date | null | undefined;
                    filename?: string | undefined;
                    entries?: any[] | undefined;
                }>>, import("classes/prismaMdxRelations/Bib").BibCore, {
                    id?: number | undefined;
                    lastAccess?: string | Date | null | undefined;
                    firstSync?: string | Date | null | undefined;
                    filename?: string | undefined;
                    entries?: any[] | undefined;
                } | undefined>;
                BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
                readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodNullable<z.ZodString>;
                    bibEntries: z.ZodArray<z.ZodAny, "many">;
                    mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                    ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                    createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                    lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    createdAt: Date;
                    mdxNotes: any[];
                    bibEntries: any[];
                    ipynbNotes: any[];
                    description: string | null;
                    lastUpdate: Date;
                }, {
                    name: string;
                    bibEntries: any[];
                    description: string | null;
                    createdAt?: string | Date | null | undefined;
                    mdxNotes?: any[] | undefined;
                    ipynbNotes?: any[] | undefined;
                    lastUpdate?: string | Date | null | undefined;
                }>, "many">>, import("classes/prismaMdxRelations/readingList").ReadingList[], {
                    name: string;
                    bibEntries: any[];
                    description: string | null;
                    createdAt?: string | Date | null | undefined;
                    mdxNotes?: any[] | undefined;
                    ipynbNotes?: any[] | undefined;
                    lastUpdate?: string | Date | null | undefined;
                }[] | undefined>;
                topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                }, {
                    value: string;
                }>, "many">>, import("classes/prismaMdxRelations/topic").Topic[], {
                    value: string;
                }[] | undefined>;
                subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                }, {
                    value: string;
                }>, "many">>, import("classes/prismaMdxRelations/subject").Subject[], {
                    value: string;
                }[] | undefined>;
                tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    value: z.ZodString;
                    kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }>, z.ZodEffects<z.ZodString, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }, string>]>, "many">>, import("classes/prismaMdxRelations/tag").Tag[], (string | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[] | undefined>;
                id: z.ZodString;
                type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                read: z.ZodDefault<z.ZodBoolean>;
                OwnWork: z.ZodDefault<z.ZodBoolean>;
                ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
                MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
                citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    entries: z.ZodArray<z.ZodAny, "many">;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    entries: any[];
                    description?: string | null | undefined;
                }, {
                    name: string;
                    entries: any[];
                    description?: string | null | undefined;
                }>, "many">>, import("classes/prismaMdxRelations/CitationGroup").CitationGroup[], {
                    name: string;
                    entries: any[];
                    description?: string | null | undefined;
                }[] | undefined>;
                added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            }, z.ZodString, "strip">, z.objectInputType<{
                Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                    firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                    lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                    filename: z.ZodDefault<z.ZodString>;
                    id: z.ZodDefault<z.ZodNumber>;
                    entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                }, "strip", z.ZodTypeAny, {
                    id: number;
                    filename: string;
                    entries: any[];
                    lastAccess?: Date | null | undefined;
                    firstSync?: Date | null | undefined;
                }, {
                    id?: number | undefined;
                    lastAccess?: string | Date | null | undefined;
                    firstSync?: string | Date | null | undefined;
                    filename?: string | undefined;
                    entries?: any[] | undefined;
                }>>, import("classes/prismaMdxRelations/Bib").BibCore, {
                    id?: number | undefined;
                    lastAccess?: string | Date | null | undefined;
                    firstSync?: string | Date | null | undefined;
                    filename?: string | undefined;
                    entries?: any[] | undefined;
                } | undefined>;
                BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
                readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodNullable<z.ZodString>;
                    bibEntries: z.ZodArray<z.ZodAny, "many">;
                    mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                    ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                    createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                    lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    createdAt: Date;
                    mdxNotes: any[];
                    bibEntries: any[];
                    ipynbNotes: any[];
                    description: string | null;
                    lastUpdate: Date;
                }, {
                    name: string;
                    bibEntries: any[];
                    description: string | null;
                    createdAt?: string | Date | null | undefined;
                    mdxNotes?: any[] | undefined;
                    ipynbNotes?: any[] | undefined;
                    lastUpdate?: string | Date | null | undefined;
                }>, "many">>, import("classes/prismaMdxRelations/readingList").ReadingList[], {
                    name: string;
                    bibEntries: any[];
                    description: string | null;
                    createdAt?: string | Date | null | undefined;
                    mdxNotes?: any[] | undefined;
                    ipynbNotes?: any[] | undefined;
                    lastUpdate?: string | Date | null | undefined;
                }[] | undefined>;
                topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                }, {
                    value: string;
                }>, "many">>, import("classes/prismaMdxRelations/topic").Topic[], {
                    value: string;
                }[] | undefined>;
                subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                }, {
                    value: string;
                }>, "many">>, import("classes/prismaMdxRelations/subject").Subject[], {
                    value: string;
                }[] | undefined>;
                tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    value: z.ZodString;
                    kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }>, z.ZodEffects<z.ZodString, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }, string>]>, "many">>, import("classes/prismaMdxRelations/tag").Tag[], (string | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[] | undefined>;
                id: z.ZodString;
                type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                read: z.ZodDefault<z.ZodBoolean>;
                OwnWork: z.ZodDefault<z.ZodBoolean>;
                ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
                MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
                citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    entries: z.ZodArray<z.ZodAny, "many">;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    entries: any[];
                    description?: string | null | undefined;
                }, {
                    name: string;
                    entries: any[];
                    description?: string | null | undefined;
                }>, "many">>, import("classes/prismaMdxRelations/CitationGroup").CitationGroup[], {
                    name: string;
                    entries: any[];
                    description?: string | null | undefined;
                }[] | undefined>;
                added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            }, z.ZodString, "strip">>, Omit<{
                id: string;
                tags: import("classes/prismaMdxRelations/tag").Tag[];
                readingList: import("classes/prismaMdxRelations/readingList").ReadingList[];
                Bib: import("classes/prismaMdxRelations/Bib").BibCore;
                createdAt: Date;
                lastAccess: Date;
                topics: import("classes/prismaMdxRelations/topic").Topic[];
                subjects: import("classes/prismaMdxRelations/subject").Subject[];
                BibId: number | null;
                OwnWork: boolean;
                ColleaguesWork: boolean;
                read: boolean;
                citationGroups: import("classes/prismaMdxRelations/CitationGroup").CitationGroup[];
                added: Date;
                number?: string | null | undefined;
                journal?: string | null | undefined;
                editor?: string | null | undefined;
                note?: string | null | undefined;
                abstract?: string | null | undefined;
                type?: string | null | undefined;
                title?: string | null | undefined;
                copyright?: string | null | undefined;
                school?: string | null | undefined;
                volume?: string | null | undefined;
                keywords?: string | null | undefined;
                MdxNotes?: any[] | null | undefined;
                htmlCitation?: string | null | undefined;
                PdfPath?: string | null | undefined;
                address?: string | null | undefined;
                annote?: string | null | undefined;
                author?: string | null | undefined;
                booktitle?: string | null | undefined;
                chapter?: string | null | undefined;
                crossref?: string | null | undefined;
                doi?: string | null | undefined;
                edition?: string | null | undefined;
                email?: string | null | undefined;
                howpublished?: string | null | undefined;
                institution?: string | null | undefined;
                month?: string | null | undefined;
                organization?: string | null | undefined;
                pages?: string | null | undefined;
                publisher?: string | null | undefined;
                series?: string | null | undefined;
                year?: string | null | undefined;
                numpages?: string | null | undefined;
                url?: string | null | undefined;
                issue?: string | null | undefined;
                issn?: string | null | undefined;
                urldate?: string | null | undefined;
                tempPageIndex?: number | null | undefined;
            }, "BibId"> & {
                BibId: number;
            }, z.objectInputType<{
                Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                    firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                    lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                    filename: z.ZodDefault<z.ZodString>;
                    id: z.ZodDefault<z.ZodNumber>;
                    entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                }, "strip", z.ZodTypeAny, {
                    id: number;
                    filename: string;
                    entries: any[];
                    lastAccess?: Date | null | undefined;
                    firstSync?: Date | null | undefined;
                }, {
                    id?: number | undefined;
                    lastAccess?: string | Date | null | undefined;
                    firstSync?: string | Date | null | undefined;
                    filename?: string | undefined;
                    entries?: any[] | undefined;
                }>>, import("classes/prismaMdxRelations/Bib").BibCore, {
                    id?: number | undefined;
                    lastAccess?: string | Date | null | undefined;
                    firstSync?: string | Date | null | undefined;
                    filename?: string | undefined;
                    entries?: any[] | undefined;
                } | undefined>;
                BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
                readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodNullable<z.ZodString>;
                    bibEntries: z.ZodArray<z.ZodAny, "many">;
                    mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                    ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                    createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                    lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    createdAt: Date;
                    mdxNotes: any[];
                    bibEntries: any[];
                    ipynbNotes: any[];
                    description: string | null;
                    lastUpdate: Date;
                }, {
                    name: string;
                    bibEntries: any[];
                    description: string | null;
                    createdAt?: string | Date | null | undefined;
                    mdxNotes?: any[] | undefined;
                    ipynbNotes?: any[] | undefined;
                    lastUpdate?: string | Date | null | undefined;
                }>, "many">>, import("classes/prismaMdxRelations/readingList").ReadingList[], {
                    name: string;
                    bibEntries: any[];
                    description: string | null;
                    createdAt?: string | Date | null | undefined;
                    mdxNotes?: any[] | undefined;
                    ipynbNotes?: any[] | undefined;
                    lastUpdate?: string | Date | null | undefined;
                }[] | undefined>;
                topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                }, {
                    value: string;
                }>, "many">>, import("classes/prismaMdxRelations/topic").Topic[], {
                    value: string;
                }[] | undefined>;
                subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                }, {
                    value: string;
                }>, "many">>, import("classes/prismaMdxRelations/subject").Subject[], {
                    value: string;
                }[] | undefined>;
                tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    value: z.ZodString;
                    kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }>, z.ZodEffects<z.ZodString, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }, string>]>, "many">>, import("classes/prismaMdxRelations/tag").Tag[], (string | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[] | undefined>;
                id: z.ZodString;
                type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                read: z.ZodDefault<z.ZodBoolean>;
                OwnWork: z.ZodDefault<z.ZodBoolean>;
                ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
                MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
                citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    entries: z.ZodArray<z.ZodAny, "many">;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    entries: any[];
                    description?: string | null | undefined;
                }, {
                    name: string;
                    entries: any[];
                    description?: string | null | undefined;
                }>, "many">>, import("classes/prismaMdxRelations/CitationGroup").CitationGroup[], {
                    name: string;
                    entries: any[];
                    description?: string | null | undefined;
                }[] | undefined>;
                added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            }, z.ZodString, "strip">>, "many">>, import("classes/prismaMdxRelations/BibEntry").BibEntry[], z.objectInputType<{
                Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                    firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                    lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                    filename: z.ZodDefault<z.ZodString>;
                    id: z.ZodDefault<z.ZodNumber>;
                    entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                }, "strip", z.ZodTypeAny, {
                    id: number;
                    filename: string;
                    entries: any[];
                    lastAccess?: Date | null | undefined;
                    firstSync?: Date | null | undefined;
                }, {
                    id?: number | undefined;
                    lastAccess?: string | Date | null | undefined;
                    firstSync?: string | Date | null | undefined;
                    filename?: string | undefined;
                    entries?: any[] | undefined;
                }>>, import("classes/prismaMdxRelations/Bib").BibCore, {
                    id?: number | undefined;
                    lastAccess?: string | Date | null | undefined;
                    firstSync?: string | Date | null | undefined;
                    filename?: string | undefined;
                    entries?: any[] | undefined;
                } | undefined>;
                BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
                readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodNullable<z.ZodString>;
                    bibEntries: z.ZodArray<z.ZodAny, "many">;
                    mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                    ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                    createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                    lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    createdAt: Date;
                    mdxNotes: any[];
                    bibEntries: any[];
                    ipynbNotes: any[];
                    description: string | null;
                    lastUpdate: Date;
                }, {
                    name: string;
                    bibEntries: any[];
                    description: string | null;
                    createdAt?: string | Date | null | undefined;
                    mdxNotes?: any[] | undefined;
                    ipynbNotes?: any[] | undefined;
                    lastUpdate?: string | Date | null | undefined;
                }>, "many">>, import("classes/prismaMdxRelations/readingList").ReadingList[], {
                    name: string;
                    bibEntries: any[];
                    description: string | null;
                    createdAt?: string | Date | null | undefined;
                    mdxNotes?: any[] | undefined;
                    ipynbNotes?: any[] | undefined;
                    lastUpdate?: string | Date | null | undefined;
                }[] | undefined>;
                topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                }, {
                    value: string;
                }>, "many">>, import("classes/prismaMdxRelations/topic").Topic[], {
                    value: string;
                }[] | undefined>;
                subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                }, {
                    value: string;
                }>, "many">>, import("classes/prismaMdxRelations/subject").Subject[], {
                    value: string;
                }[] | undefined>;
                tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    value: z.ZodString;
                    kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }>, z.ZodEffects<z.ZodString, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }, string>]>, "many">>, import("classes/prismaMdxRelations/tag").Tag[], (string | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[] | undefined>;
                id: z.ZodString;
                type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                read: z.ZodDefault<z.ZodBoolean>;
                OwnWork: z.ZodDefault<z.ZodBoolean>;
                ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
                MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
                citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    entries: z.ZodArray<z.ZodAny, "many">;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    entries: any[];
                    description?: string | null | undefined;
                }, {
                    name: string;
                    entries: any[];
                    description?: string | null | undefined;
                }>, "many">>, import("classes/prismaMdxRelations/CitationGroup").CitationGroup[], {
                    name: string;
                    entries: any[];
                    description?: string | null | undefined;
                }[] | undefined>;
                added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            }, z.ZodString, "strip">[] | undefined>;
            importantValues: z.ZodDefault<z.ZodArray<z.ZodNumber, "many">>;
            bookmarked: z.ZodDefault<z.ZodBoolean>;
            quickLinkId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            href: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            citationsListOrder: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            outgoingQuickLinks: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            rootRelativePath: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | null | undefined, string | null | undefined>;
            equationIds: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            isProtected: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>>;
            sequentialKey: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            sequentialIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            sequentialList: z.ZodOptional<z.ZodObject<{
                sequentialKey: z.ZodString;
                MdxNote: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                Ipynb: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            }, "strip", z.ZodTypeAny, {
                MdxNote: any[];
                Ipynb: any[];
                sequentialKey: string;
            }, {
                sequentialKey: string;
                MdxNote?: any[] | undefined;
                Ipynb?: any[] | undefined;
            }>>;
            remoteUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            noLog: z.ZodDefault<z.ZodBoolean>;
            saveFormatted: z.ZodDefault<z.ZodBoolean>;
            noteType: z.ZodEffects<z.ZodString, string, string>;
            trackRemote: z.ZodDefault<z.ZodBoolean>;
            toDo: z.ZodDefault<z.ZodArray<z.ZodObject<{
                id: z.ZodNumber;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                task: z.ZodString;
                dueAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                details: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                associatedNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                tags: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    value: z.ZodString;
                    kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }>, z.ZodEffects<z.ZodString, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }, string>]>, "many">>;
                topics: z.ZodDefault<z.ZodArray<z.ZodObject<{
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                }, {
                    value: string;
                }>, "many">>;
                subjects: z.ZodDefault<z.ZodArray<z.ZodObject<{
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                }, {
                    value: string;
                }>, "many">>;
                parentId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                category: z.ZodNativeEnum<{
                    bug: "bug";
                    feature: "feature";
                    documentation: "documentation";
                    online: "online";
                    priority: "priority";
                    urgent: "urgent";
                    work: "work";
                    gym: "gym";
                    freetime: "freetime";
                    study: "study";
                    research: "research";
                    paper: "paper";
                }>;
                bookmarked: z.ZodDefault<z.ZodBoolean>;
                status: z.ZodEnum<["ToDo", "In_Progress", "Backlog", "Cancelled", "Done", "Future"]>;
                priority: z.ZodNumber;
                parent: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodAny>>>;
                child: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodAny>>>;
                ToDoList: z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
                    id: z.ZodNumber;
                    label: z.ZodString;
                    tasks: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                }, Pick<{
                    name: z.ZodString;
                    description: z.ZodNullable<z.ZodString>;
                    bibEntries: z.ZodArray<z.ZodAny, "many">;
                    mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                    ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                    createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                    lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                }, "createdAt" | "lastUpdate">>, {
                    topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                        value: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        value: string;
                    }, {
                        value: string;
                    }>, "many">>, import("classes/prismaMdxRelations/topic").Topic[], {
                        value: string;
                    }[] | undefined>;
                    subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                        value: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        value: string;
                    }, {
                        value: string;
                    }>, "many">>, import("classes/prismaMdxRelations/subject").Subject[], {
                        value: string;
                    }[] | undefined>;
                    tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                        value: z.ZodString;
                        kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                    }, "strip", z.ZodTypeAny, {
                        value: string;
                        kanbanId?: number | null | undefined;
                    }, {
                        value: string;
                        kanbanId?: number | null | undefined;
                    }>, z.ZodEffects<z.ZodString, {
                        value: string;
                        kanbanId?: number | null | undefined;
                    }, string>]>, "many">>, import("classes/prismaMdxRelations/tag").Tag[], (string | {
                        value: string;
                        kanbanId?: number | null | undefined;
                    })[] | undefined>;
                }>, "strip", z.ZodTypeAny, {
                    id: number;
                    label: string;
                    tags: import("classes/prismaMdxRelations/tag").Tag[];
                    createdAt: Date;
                    topics: import("classes/prismaMdxRelations/topic").Topic[];
                    subjects: import("classes/prismaMdxRelations/subject").Subject[];
                    lastUpdate: Date;
                    tasks: any[];
                }, {
                    id: number;
                    label: string;
                    tags?: (string | {
                        value: string;
                        kanbanId?: number | null | undefined;
                    })[] | undefined;
                    createdAt?: string | Date | null | undefined;
                    topics?: {
                        value: string;
                    }[] | undefined;
                    subjects?: {
                        value: string;
                    }[] | undefined;
                    lastUpdate?: string | Date | null | undefined;
                    tasks?: any[] | undefined;
                }>;
                toDoListId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                id: number;
                tags: ({
                    value: string;
                    kanbanId?: number | null | undefined;
                } | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[];
                ToDoList: {
                    id: number;
                    label: string;
                    tags: import("classes/prismaMdxRelations/tag").Tag[];
                    createdAt: Date;
                    topics: import("classes/prismaMdxRelations/topic").Topic[];
                    subjects: import("classes/prismaMdxRelations/subject").Subject[];
                    lastUpdate: Date;
                    tasks: any[];
                };
                createdAt: Date;
                topics: {
                    value: string;
                }[];
                subjects: {
                    value: string;
                }[];
                bookmarked: boolean;
                status: "ToDo" | "In_Progress" | "Backlog" | "Cancelled" | "Done" | "Future";
                task: string;
                dueAt: Date;
                associatedNotes: any[];
                category: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper";
                priority: number;
                toDoListId: number;
                details?: string | null | undefined;
                parentId?: number | null | undefined;
                parent?: any;
                child?: any;
            }, {
                id: number;
                ToDoList: {
                    id: number;
                    label: string;
                    tags?: (string | {
                        value: string;
                        kanbanId?: number | null | undefined;
                    })[] | undefined;
                    createdAt?: string | Date | null | undefined;
                    topics?: {
                        value: string;
                    }[] | undefined;
                    subjects?: {
                        value: string;
                    }[] | undefined;
                    lastUpdate?: string | Date | null | undefined;
                    tasks?: any[] | undefined;
                };
                status: "ToDo" | "In_Progress" | "Backlog" | "Cancelled" | "Done" | "Future";
                task: string;
                category: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper";
                priority: number;
                toDoListId: number;
                tags?: (string | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[] | undefined;
                createdAt?: string | Date | null | undefined;
                topics?: {
                    value: string;
                }[] | undefined;
                subjects?: {
                    value: string;
                }[] | undefined;
                bookmarked?: boolean | undefined;
                dueAt?: string | Date | null | undefined;
                details?: string | null | undefined;
                associatedNotes?: any[] | undefined;
                parentId?: number | null | undefined;
                parent?: any;
                child?: any;
            }>, "many">>;
            summary: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodEffects<z.ZodString, Date, string>, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
            lastSync: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodEffects<z.ZodString, Date, string>, z.ZodDate]>>>;
        }, {
            topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, import("classes/prismaMdxRelations/topic").Topic[], {
                value: string;
            }[] | undefined>;
            subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                value: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: string;
            }, {
                value: string;
            }>, "many">>, import("classes/prismaMdxRelations/subject").Subject[], {
                value: string;
            }[] | undefined>;
            tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                value: z.ZodString;
                kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
            }, "strip", z.ZodTypeAny, {
                value: string;
                kanbanId?: number | null | undefined;
            }, {
                value: string;
                kanbanId?: number | null | undefined;
            }>, z.ZodEffects<z.ZodString, {
                value: string;
                kanbanId?: number | null | undefined;
            }, string>]>, "many">>, import("classes/prismaMdxRelations/tag").Tag[], (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined>;
        }>, "strip", z.ZodTypeAny, {
            tags: import("classes/prismaMdxRelations/tag").Tag[];
            noteType: string;
            toDo: {
                id: number;
                tags: ({
                    value: string;
                    kanbanId?: number | null | undefined;
                } | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[];
                ToDoList: {
                    id: number;
                    label: string;
                    tags: import("classes/prismaMdxRelations/tag").Tag[];
                    createdAt: Date;
                    topics: import("classes/prismaMdxRelations/topic").Topic[];
                    subjects: import("classes/prismaMdxRelations/subject").Subject[];
                    lastUpdate: Date;
                    tasks: any[];
                };
                createdAt: Date;
                topics: {
                    value: string;
                }[];
                subjects: {
                    value: string;
                }[];
                bookmarked: boolean;
                status: "ToDo" | "In_Progress" | "Backlog" | "Cancelled" | "Done" | "Future";
                task: string;
                dueAt: Date;
                associatedNotes: any[];
                category: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper";
                priority: number;
                toDoListId: number;
                details?: string | null | undefined;
                parentId?: number | null | undefined;
                parent?: any;
                child?: any;
            }[];
            topics: import("classes/prismaMdxRelations/topic").Topic[];
            subjects: import("classes/prismaMdxRelations/subject").Subject[];
            isProtected: boolean | null;
            citationsListOrder: string[];
            importantValues: number[];
            floatImages: boolean;
            trackRemote: boolean;
            outgoingQuickLinks: string[];
            bookmarked: boolean;
            citations: import("classes/prismaMdxRelations/BibEntry").BibEntry[];
            raw: string;
            equationIds: string[];
            noLog: boolean;
            saveFormatted: boolean;
            id?: number | null | undefined;
            href?: string | null | undefined;
            summary?: string | null | undefined;
            title?: string | null | undefined;
            content?: string | null | undefined;
            firstSync?: Date | null | undefined;
            lastSync?: Date | null | undefined;
            latexTitle?: string | null | undefined;
            rootRelativePath?: string | null | undefined;
            formatted?: string | null | undefined;
            sequentialKey?: string | null | undefined;
            sequentialIndex?: number | null | undefined;
            remoteUrl?: string | null | undefined;
            sequentialList?: {
                MdxNote: any[];
                Ipynb: any[];
                sequentialKey: string;
            } | undefined;
            quickLinkId?: string | null | undefined;
        }, {
            noteType: string;
            raw: string;
            id?: number | null | undefined;
            href?: string | null | undefined;
            summary?: string | null | undefined;
            title?: string | null | undefined;
            content?: string | null | undefined;
            tags?: (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined;
            toDo?: {
                id: number;
                ToDoList: {
                    id: number;
                    label: string;
                    tags?: (string | {
                        value: string;
                        kanbanId?: number | null | undefined;
                    })[] | undefined;
                    createdAt?: string | Date | null | undefined;
                    topics?: {
                        value: string;
                    }[] | undefined;
                    subjects?: {
                        value: string;
                    }[] | undefined;
                    lastUpdate?: string | Date | null | undefined;
                    tasks?: any[] | undefined;
                };
                status: "ToDo" | "In_Progress" | "Backlog" | "Cancelled" | "Done" | "Future";
                task: string;
                category: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper";
                priority: number;
                toDoListId: number;
                tags?: (string | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[] | undefined;
                createdAt?: string | Date | null | undefined;
                topics?: {
                    value: string;
                }[] | undefined;
                subjects?: {
                    value: string;
                }[] | undefined;
                bookmarked?: boolean | undefined;
                dueAt?: string | Date | null | undefined;
                details?: string | null | undefined;
                associatedNotes?: any[] | undefined;
                parentId?: number | null | undefined;
                parent?: any;
                child?: any;
            }[] | undefined;
            topics?: {
                value: string;
            }[] | undefined;
            subjects?: {
                value: string;
            }[] | undefined;
            firstSync?: string | Date | null | undefined;
            lastSync?: string | Date | null | undefined;
            isProtected?: boolean | null | undefined;
            latexTitle?: string | null | undefined;
            rootRelativePath?: string | null | undefined;
            formatted?: string | null | undefined;
            citationsListOrder?: string[] | undefined;
            importantValues?: number[] | undefined;
            sequentialKey?: string | null | undefined;
            sequentialIndex?: number | null | undefined;
            floatImages?: boolean | undefined;
            remoteUrl?: string | null | undefined;
            trackRemote?: boolean | undefined;
            outgoingQuickLinks?: string[] | undefined;
            bookmarked?: boolean | undefined;
            citations?: z.objectInputType<{
                Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                    firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                    lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                    filename: z.ZodDefault<z.ZodString>;
                    id: z.ZodDefault<z.ZodNumber>;
                    entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                }, "strip", z.ZodTypeAny, {
                    id: number;
                    filename: string;
                    entries: any[];
                    lastAccess?: Date | null | undefined;
                    firstSync?: Date | null | undefined;
                }, {
                    id?: number | undefined;
                    lastAccess?: string | Date | null | undefined;
                    firstSync?: string | Date | null | undefined;
                    filename?: string | undefined;
                    entries?: any[] | undefined;
                }>>, import("classes/prismaMdxRelations/Bib").BibCore, {
                    id?: number | undefined;
                    lastAccess?: string | Date | null | undefined;
                    firstSync?: string | Date | null | undefined;
                    filename?: string | undefined;
                    entries?: any[] | undefined;
                } | undefined>;
                BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
                readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodNullable<z.ZodString>;
                    bibEntries: z.ZodArray<z.ZodAny, "many">;
                    mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                    ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                    createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                    lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    createdAt: Date;
                    mdxNotes: any[];
                    bibEntries: any[];
                    ipynbNotes: any[];
                    description: string | null;
                    lastUpdate: Date;
                }, {
                    name: string;
                    bibEntries: any[];
                    description: string | null;
                    createdAt?: string | Date | null | undefined;
                    mdxNotes?: any[] | undefined;
                    ipynbNotes?: any[] | undefined;
                    lastUpdate?: string | Date | null | undefined;
                }>, "many">>, import("classes/prismaMdxRelations/readingList").ReadingList[], {
                    name: string;
                    bibEntries: any[];
                    description: string | null;
                    createdAt?: string | Date | null | undefined;
                    mdxNotes?: any[] | undefined;
                    ipynbNotes?: any[] | undefined;
                    lastUpdate?: string | Date | null | undefined;
                }[] | undefined>;
                topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                }, {
                    value: string;
                }>, "many">>, import("classes/prismaMdxRelations/topic").Topic[], {
                    value: string;
                }[] | undefined>;
                subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                }, {
                    value: string;
                }>, "many">>, import("classes/prismaMdxRelations/subject").Subject[], {
                    value: string;
                }[] | undefined>;
                tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    value: z.ZodString;
                    kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }>, z.ZodEffects<z.ZodString, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }, string>]>, "many">>, import("classes/prismaMdxRelations/tag").Tag[], (string | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[] | undefined>;
                id: z.ZodString;
                type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                read: z.ZodDefault<z.ZodBoolean>;
                OwnWork: z.ZodDefault<z.ZodBoolean>;
                ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
                MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
                citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    entries: z.ZodArray<z.ZodAny, "many">;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    entries: any[];
                    description?: string | null | undefined;
                }, {
                    name: string;
                    entries: any[];
                    description?: string | null | undefined;
                }>, "many">>, import("classes/prismaMdxRelations/CitationGroup").CitationGroup[], {
                    name: string;
                    entries: any[];
                    description?: string | null | undefined;
                }[] | undefined>;
                added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            }, z.ZodString, "strip">[] | undefined;
            sequentialList?: {
                sequentialKey: string;
                MdxNote?: any[] | undefined;
                Ipynb?: any[] | undefined;
            } | undefined;
            quickLinkId?: string | null | undefined;
            equationIds?: string[] | undefined;
            noLog?: boolean | undefined;
            saveFormatted?: boolean | undefined;
        }>, {
            raw: string | null | undefined;
            importantValues: number[];
            frontMatter: {
                tags: string[];
                topics: string[];
                subjects: string[];
                importantValues: number[];
                id?: string | null | undefined;
                summary?: string | null | undefined;
                title?: string | null | undefined;
                sequentialKey?: string | null | undefined;
                created?: string | null | undefined;
                updated?: string | null | undefined;
                sequential?: number | null | undefined;
                tableStyles?: {
                    expand: boolean | null;
                    fullWidth: boolean | null;
                    tableCenter: boolean | null;
                    textCenter: boolean | null;
                    headingCenter: boolean | null;
                    noMax: boolean | null;
                    math?: "base" | "lg" | "xl" | "small" | null | undefined;
                    text?: "base" | "lg" | "xl" | "small" | null | undefined;
                    float?: "right" | "left" | null | undefined;
                } | undefined;
            };
            quickLinkId: string | null | undefined;
            sequentialKey: string | null | undefined;
            sequentialIndex: number | null | undefined;
            topics: import("classes/prismaMdxRelations/topic").Topic[];
            subjects: import("classes/prismaMdxRelations/subject").Subject[];
            tags: import("classes/prismaMdxRelations/tag").Tag[];
            firstSync: Date | null | undefined;
            noteType: string;
            toDo: {
                id: number;
                tags: ({
                    value: string;
                    kanbanId?: number | null | undefined;
                } | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[];
                ToDoList: {
                    id: number;
                    label: string;
                    tags: import("classes/prismaMdxRelations/tag").Tag[];
                    createdAt: Date;
                    topics: import("classes/prismaMdxRelations/topic").Topic[];
                    subjects: import("classes/prismaMdxRelations/subject").Subject[];
                    lastUpdate: Date;
                    tasks: any[];
                };
                createdAt: Date;
                topics: {
                    value: string;
                }[];
                subjects: {
                    value: string;
                }[];
                bookmarked: boolean;
                status: "ToDo" | "In_Progress" | "Backlog" | "Cancelled" | "Done" | "Future";
                task: string;
                dueAt: Date;
                associatedNotes: any[];
                category: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper";
                priority: number;
                toDoListId: number;
                details?: string | null | undefined;
                parentId?: number | null | undefined;
                parent?: any;
                child?: any;
            }[];
            isProtected: boolean | null;
            citationsListOrder: string[];
            floatImages: boolean;
            trackRemote: boolean;
            outgoingQuickLinks: string[];
            bookmarked: boolean;
            citations: import("classes/prismaMdxRelations/BibEntry").BibEntry[];
            equationIds: string[];
            noLog: boolean;
            saveFormatted: boolean;
            id?: number | null | undefined;
            href?: string | null | undefined;
            summary?: string | null | undefined;
            title?: string | null | undefined;
            content?: string | null | undefined;
            lastSync?: Date | null | undefined;
            latexTitle?: string | null | undefined;
            rootRelativePath?: string | null | undefined;
            formatted?: string | null | undefined;
            remoteUrl?: string | null | undefined;
            sequentialList?: {
                MdxNote: any[];
                Ipynb: any[];
                sequentialKey: string;
            } | undefined;
        }, {
            noteType: string;
            raw: string;
            id?: number | null | undefined;
            href?: string | null | undefined;
            summary?: string | null | undefined;
            title?: string | null | undefined;
            content?: string | null | undefined;
            tags?: (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined;
            toDo?: {
                id: number;
                ToDoList: {
                    id: number;
                    label: string;
                    tags?: (string | {
                        value: string;
                        kanbanId?: number | null | undefined;
                    })[] | undefined;
                    createdAt?: string | Date | null | undefined;
                    topics?: {
                        value: string;
                    }[] | undefined;
                    subjects?: {
                        value: string;
                    }[] | undefined;
                    lastUpdate?: string | Date | null | undefined;
                    tasks?: any[] | undefined;
                };
                status: "ToDo" | "In_Progress" | "Backlog" | "Cancelled" | "Done" | "Future";
                task: string;
                category: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper";
                priority: number;
                toDoListId: number;
                tags?: (string | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[] | undefined;
                createdAt?: string | Date | null | undefined;
                topics?: {
                    value: string;
                }[] | undefined;
                subjects?: {
                    value: string;
                }[] | undefined;
                bookmarked?: boolean | undefined;
                dueAt?: string | Date | null | undefined;
                details?: string | null | undefined;
                associatedNotes?: any[] | undefined;
                parentId?: number | null | undefined;
                parent?: any;
                child?: any;
            }[] | undefined;
            topics?: {
                value: string;
            }[] | undefined;
            subjects?: {
                value: string;
            }[] | undefined;
            firstSync?: string | Date | null | undefined;
            lastSync?: string | Date | null | undefined;
            isProtected?: boolean | null | undefined;
            latexTitle?: string | null | undefined;
            rootRelativePath?: string | null | undefined;
            formatted?: string | null | undefined;
            citationsListOrder?: string[] | undefined;
            importantValues?: number[] | undefined;
            sequentialKey?: string | null | undefined;
            sequentialIndex?: number | null | undefined;
            floatImages?: boolean | undefined;
            remoteUrl?: string | null | undefined;
            trackRemote?: boolean | undefined;
            outgoingQuickLinks?: string[] | undefined;
            bookmarked?: boolean | undefined;
            citations?: z.objectInputType<{
                Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                    firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                    lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                    filename: z.ZodDefault<z.ZodString>;
                    id: z.ZodDefault<z.ZodNumber>;
                    entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                }, "strip", z.ZodTypeAny, {
                    id: number;
                    filename: string;
                    entries: any[];
                    lastAccess?: Date | null | undefined;
                    firstSync?: Date | null | undefined;
                }, {
                    id?: number | undefined;
                    lastAccess?: string | Date | null | undefined;
                    firstSync?: string | Date | null | undefined;
                    filename?: string | undefined;
                    entries?: any[] | undefined;
                }>>, import("classes/prismaMdxRelations/Bib").BibCore, {
                    id?: number | undefined;
                    lastAccess?: string | Date | null | undefined;
                    firstSync?: string | Date | null | undefined;
                    filename?: string | undefined;
                    entries?: any[] | undefined;
                } | undefined>;
                BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
                readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodNullable<z.ZodString>;
                    bibEntries: z.ZodArray<z.ZodAny, "many">;
                    mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                    ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                    createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                    lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    createdAt: Date;
                    mdxNotes: any[];
                    bibEntries: any[];
                    ipynbNotes: any[];
                    description: string | null;
                    lastUpdate: Date;
                }, {
                    name: string;
                    bibEntries: any[];
                    description: string | null;
                    createdAt?: string | Date | null | undefined;
                    mdxNotes?: any[] | undefined;
                    ipynbNotes?: any[] | undefined;
                    lastUpdate?: string | Date | null | undefined;
                }>, "many">>, import("classes/prismaMdxRelations/readingList").ReadingList[], {
                    name: string;
                    bibEntries: any[];
                    description: string | null;
                    createdAt?: string | Date | null | undefined;
                    mdxNotes?: any[] | undefined;
                    ipynbNotes?: any[] | undefined;
                    lastUpdate?: string | Date | null | undefined;
                }[] | undefined>;
                topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                }, {
                    value: string;
                }>, "many">>, import("classes/prismaMdxRelations/topic").Topic[], {
                    value: string;
                }[] | undefined>;
                subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                }, {
                    value: string;
                }>, "many">>, import("classes/prismaMdxRelations/subject").Subject[], {
                    value: string;
                }[] | undefined>;
                tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    value: z.ZodString;
                    kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }>, z.ZodEffects<z.ZodString, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }, string>]>, "many">>, import("classes/prismaMdxRelations/tag").Tag[], (string | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[] | undefined>;
                id: z.ZodString;
                type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                read: z.ZodDefault<z.ZodBoolean>;
                OwnWork: z.ZodDefault<z.ZodBoolean>;
                ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
                MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
                citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    entries: z.ZodArray<z.ZodAny, "many">;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    entries: any[];
                    description?: string | null | undefined;
                }, {
                    name: string;
                    entries: any[];
                    description?: string | null | undefined;
                }>, "many">>, import("classes/prismaMdxRelations/CitationGroup").CitationGroup[], {
                    name: string;
                    entries: any[];
                    description?: string | null | undefined;
                }[] | undefined>;
                added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            }, z.ZodString, "strip">[] | undefined;
            sequentialList?: {
                sequentialKey: string;
                MdxNote?: any[] | undefined;
                Ipynb?: any[] | undefined;
            } | undefined;
            quickLinkId?: string | null | undefined;
            equationIds?: string[] | undefined;
            noLog?: boolean | undefined;
            saveFormatted?: boolean | undefined;
        }>>>, MdxNote | undefined, {
            noteType: string;
            raw: string;
            id?: number | null | undefined;
            href?: string | null | undefined;
            summary?: string | null | undefined;
            title?: string | null | undefined;
            content?: string | null | undefined;
            tags?: (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined;
            toDo?: {
                id: number;
                ToDoList: {
                    id: number;
                    label: string;
                    tags?: (string | {
                        value: string;
                        kanbanId?: number | null | undefined;
                    })[] | undefined;
                    createdAt?: string | Date | null | undefined;
                    topics?: {
                        value: string;
                    }[] | undefined;
                    subjects?: {
                        value: string;
                    }[] | undefined;
                    lastUpdate?: string | Date | null | undefined;
                    tasks?: any[] | undefined;
                };
                status: "ToDo" | "In_Progress" | "Backlog" | "Cancelled" | "Done" | "Future";
                task: string;
                category: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper";
                priority: number;
                toDoListId: number;
                tags?: (string | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[] | undefined;
                createdAt?: string | Date | null | undefined;
                topics?: {
                    value: string;
                }[] | undefined;
                subjects?: {
                    value: string;
                }[] | undefined;
                bookmarked?: boolean | undefined;
                dueAt?: string | Date | null | undefined;
                details?: string | null | undefined;
                associatedNotes?: any[] | undefined;
                parentId?: number | null | undefined;
                parent?: any;
                child?: any;
            }[] | undefined;
            topics?: {
                value: string;
            }[] | undefined;
            subjects?: {
                value: string;
            }[] | undefined;
            firstSync?: string | Date | null | undefined;
            lastSync?: string | Date | null | undefined;
            isProtected?: boolean | null | undefined;
            latexTitle?: string | null | undefined;
            rootRelativePath?: string | null | undefined;
            formatted?: string | null | undefined;
            citationsListOrder?: string[] | undefined;
            importantValues?: number[] | undefined;
            sequentialKey?: string | null | undefined;
            sequentialIndex?: number | null | undefined;
            floatImages?: boolean | undefined;
            remoteUrl?: string | null | undefined;
            trackRemote?: boolean | undefined;
            outgoingQuickLinks?: string[] | undefined;
            bookmarked?: boolean | undefined;
            citations?: z.objectInputType<{
                Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                    firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                    lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                    filename: z.ZodDefault<z.ZodString>;
                    id: z.ZodDefault<z.ZodNumber>;
                    entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                }, "strip", z.ZodTypeAny, {
                    id: number;
                    filename: string;
                    entries: any[];
                    lastAccess?: Date | null | undefined;
                    firstSync?: Date | null | undefined;
                }, {
                    id?: number | undefined;
                    lastAccess?: string | Date | null | undefined;
                    firstSync?: string | Date | null | undefined;
                    filename?: string | undefined;
                    entries?: any[] | undefined;
                }>>, import("classes/prismaMdxRelations/Bib").BibCore, {
                    id?: number | undefined;
                    lastAccess?: string | Date | null | undefined;
                    firstSync?: string | Date | null | undefined;
                    filename?: string | undefined;
                    entries?: any[] | undefined;
                } | undefined>;
                BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
                readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodNullable<z.ZodString>;
                    bibEntries: z.ZodArray<z.ZodAny, "many">;
                    mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                    ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                    createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                    lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    createdAt: Date;
                    mdxNotes: any[];
                    bibEntries: any[];
                    ipynbNotes: any[];
                    description: string | null;
                    lastUpdate: Date;
                }, {
                    name: string;
                    bibEntries: any[];
                    description: string | null;
                    createdAt?: string | Date | null | undefined;
                    mdxNotes?: any[] | undefined;
                    ipynbNotes?: any[] | undefined;
                    lastUpdate?: string | Date | null | undefined;
                }>, "many">>, import("classes/prismaMdxRelations/readingList").ReadingList[], {
                    name: string;
                    bibEntries: any[];
                    description: string | null;
                    createdAt?: string | Date | null | undefined;
                    mdxNotes?: any[] | undefined;
                    ipynbNotes?: any[] | undefined;
                    lastUpdate?: string | Date | null | undefined;
                }[] | undefined>;
                topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                }, {
                    value: string;
                }>, "many">>, import("classes/prismaMdxRelations/topic").Topic[], {
                    value: string;
                }[] | undefined>;
                subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                }, {
                    value: string;
                }>, "many">>, import("classes/prismaMdxRelations/subject").Subject[], {
                    value: string;
                }[] | undefined>;
                tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    value: z.ZodString;
                    kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }>, z.ZodEffects<z.ZodString, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }, string>]>, "many">>, import("classes/prismaMdxRelations/tag").Tag[], (string | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[] | undefined>;
                id: z.ZodString;
                type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                read: z.ZodDefault<z.ZodBoolean>;
                OwnWork: z.ZodDefault<z.ZodBoolean>;
                ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
                MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
                citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    entries: z.ZodArray<z.ZodAny, "many">;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    entries: any[];
                    description?: string | null | undefined;
                }, {
                    name: string;
                    entries: any[];
                    description?: string | null | undefined;
                }>, "many">>, import("classes/prismaMdxRelations/CitationGroup").CitationGroup[], {
                    name: string;
                    entries: any[];
                    description?: string | null | undefined;
                }[] | undefined>;
                added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            }, z.ZodString, "strip">[] | undefined;
            sequentialList?: {
                sequentialKey: string;
                MdxNote?: any[] | undefined;
                Ipynb?: any[] | undefined;
            } | undefined;
            quickLinkId?: string | null | undefined;
            equationIds?: string[] | undefined;
            noLog?: boolean | undefined;
            saveFormatted?: boolean | undefined;
        } | null | undefined>;
        mdxNoteId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        label?: string | null | undefined;
        content?: string | null | undefined;
        mdxNote?: MdxNote | undefined;
        mdxNoteId?: number | null | undefined;
        alphabeticalLabel?: string | null | undefined;
    }, {
        id: string;
        label?: string | null | undefined;
        content?: string | null | undefined;
        mdxNote?: {
            noteType: string;
            raw: string;
            id?: number | null | undefined;
            href?: string | null | undefined;
            summary?: string | null | undefined;
            title?: string | null | undefined;
            content?: string | null | undefined;
            tags?: (string | {
                value: string;
                kanbanId?: number | null | undefined;
            })[] | undefined;
            toDo?: {
                id: number;
                ToDoList: {
                    id: number;
                    label: string;
                    tags?: (string | {
                        value: string;
                        kanbanId?: number | null | undefined;
                    })[] | undefined;
                    createdAt?: string | Date | null | undefined;
                    topics?: {
                        value: string;
                    }[] | undefined;
                    subjects?: {
                        value: string;
                    }[] | undefined;
                    lastUpdate?: string | Date | null | undefined;
                    tasks?: any[] | undefined;
                };
                status: "ToDo" | "In_Progress" | "Backlog" | "Cancelled" | "Done" | "Future";
                task: string;
                category: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper";
                priority: number;
                toDoListId: number;
                tags?: (string | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[] | undefined;
                createdAt?: string | Date | null | undefined;
                topics?: {
                    value: string;
                }[] | undefined;
                subjects?: {
                    value: string;
                }[] | undefined;
                bookmarked?: boolean | undefined;
                dueAt?: string | Date | null | undefined;
                details?: string | null | undefined;
                associatedNotes?: any[] | undefined;
                parentId?: number | null | undefined;
                parent?: any;
                child?: any;
            }[] | undefined;
            topics?: {
                value: string;
            }[] | undefined;
            subjects?: {
                value: string;
            }[] | undefined;
            firstSync?: string | Date | null | undefined;
            lastSync?: string | Date | null | undefined;
            isProtected?: boolean | null | undefined;
            latexTitle?: string | null | undefined;
            rootRelativePath?: string | null | undefined;
            formatted?: string | null | undefined;
            citationsListOrder?: string[] | undefined;
            importantValues?: number[] | undefined;
            sequentialKey?: string | null | undefined;
            sequentialIndex?: number | null | undefined;
            floatImages?: boolean | undefined;
            remoteUrl?: string | null | undefined;
            trackRemote?: boolean | undefined;
            outgoingQuickLinks?: string[] | undefined;
            bookmarked?: boolean | undefined;
            citations?: z.objectInputType<{
                Bib: z.ZodEffects<z.ZodOptional<z.ZodObject<{
                    firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                    lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
                    filename: z.ZodDefault<z.ZodString>;
                    id: z.ZodDefault<z.ZodNumber>;
                    entries: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                }, "strip", z.ZodTypeAny, {
                    id: number;
                    filename: string;
                    entries: any[];
                    lastAccess?: Date | null | undefined;
                    firstSync?: Date | null | undefined;
                }, {
                    id?: number | undefined;
                    lastAccess?: string | Date | null | undefined;
                    firstSync?: string | Date | null | undefined;
                    filename?: string | undefined;
                    entries?: any[] | undefined;
                }>>, import("classes/prismaMdxRelations/Bib").BibCore, {
                    id?: number | undefined;
                    lastAccess?: string | Date | null | undefined;
                    firstSync?: string | Date | null | undefined;
                    filename?: string | undefined;
                    entries?: any[] | undefined;
                } | undefined>;
                BibId: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
                readingList: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodNullable<z.ZodString>;
                    bibEntries: z.ZodArray<z.ZodAny, "many">;
                    mdxNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                    ipynbNotes: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
                    createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                    lastUpdate: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, Date, string | Date | null | undefined>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    createdAt: Date;
                    mdxNotes: any[];
                    bibEntries: any[];
                    ipynbNotes: any[];
                    description: string | null;
                    lastUpdate: Date;
                }, {
                    name: string;
                    bibEntries: any[];
                    description: string | null;
                    createdAt?: string | Date | null | undefined;
                    mdxNotes?: any[] | undefined;
                    ipynbNotes?: any[] | undefined;
                    lastUpdate?: string | Date | null | undefined;
                }>, "many">>, import("classes/prismaMdxRelations/readingList").ReadingList[], {
                    name: string;
                    bibEntries: any[];
                    description: string | null;
                    createdAt?: string | Date | null | undefined;
                    mdxNotes?: any[] | undefined;
                    ipynbNotes?: any[] | undefined;
                    lastUpdate?: string | Date | null | undefined;
                }[] | undefined>;
                topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                }, {
                    value: string;
                }>, "many">>, import("classes/prismaMdxRelations/topic").Topic[], {
                    value: string;
                }[] | undefined>;
                subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    value: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                }, {
                    value: string;
                }>, "many">>, import("classes/prismaMdxRelations/subject").Subject[], {
                    value: string;
                }[] | undefined>;
                tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    value: z.ZodString;
                    kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
                }, "strip", z.ZodTypeAny, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }>, z.ZodEffects<z.ZodString, {
                    value: string;
                    kanbanId?: number | null | undefined;
                }, string>]>, "many">>, import("classes/prismaMdxRelations/tag").Tag[], (string | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[] | undefined>;
                id: z.ZodString;
                type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                htmlCitation: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                PdfPath: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                annote: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                author: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                booktitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                chapter: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                crossref: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                doi: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                edition: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                editor: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                email: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                howpublished: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                institution: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                journal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                month: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                note: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                number: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                organization: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                pages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                publisher: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                school: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                series: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                volume: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                year: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                numpages: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                issue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                issn: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                abstract: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                urldate: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                keywords: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                copyright: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                tempPageIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                read: z.ZodDefault<z.ZodBoolean>;
                OwnWork: z.ZodDefault<z.ZodBoolean>;
                ColleaguesWork: z.ZodDefault<z.ZodBoolean>;
                MdxNotes: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodAny, "many">>>;
                createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
                lastAccess: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
                citationGroups: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                    entries: z.ZodArray<z.ZodAny, "many">;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    entries: any[];
                    description?: string | null | undefined;
                }, {
                    name: string;
                    entries: any[];
                    description?: string | null | undefined;
                }>, "many">>, import("classes/prismaMdxRelations/CitationGroup").CitationGroup[], {
                    name: string;
                    entries: any[];
                    description?: string | null | undefined;
                }[] | undefined>;
                added: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate, z.ZodString]>>>, Date, string | Date | null | undefined>;
            }, z.ZodString, "strip">[] | undefined;
            sequentialList?: {
                sequentialKey: string;
                MdxNote?: any[] | undefined;
                Ipynb?: any[] | undefined;
            } | undefined;
            quickLinkId?: string | null | undefined;
            equationIds?: string[] | undefined;
            noLog?: boolean | undefined;
            saveFormatted?: boolean | undefined;
        } | null | undefined;
        mdxNoteId?: number | null | undefined;
        alphabeticalLabel?: string | null | undefined;
    }>;
    export type DefinitionZodObjectOutput = z.output<typeof definitionZodObject>;
}
declare module "classes/prismaMdxRelations/definition" {
    import { DefinitionProtocol } from "classes/prismaMdxRelations/protocols/definition";
    import type { Definition as PrismaDefinition } from "@ulld/database";
    import { MdxNote } from "classes/prismaMdxRelations/MdxNote";
    import { DefinitionZodObjectOutput } from "classes/prismaMdxRelations/schemas/definitionSchema";
    export class Definition extends DefinitionProtocol {
        mdxNote?: MdxNote;
        mdxNoteId?: number | null;
        id: string;
        label?: string | null;
        content?: string | null;
        constructor(data: DefinitionZodObjectOutput);
        toPlainObject(): {
            id: string;
            label: string | null | undefined;
            content: string | null | undefined;
            mdxNoteId: number | null | undefined;
        };
        whereInput(): {
            id: string;
        };
        whereUniqueInput(): {
            id: string;
        };
        createInput(): {
            label: string | null | undefined;
            content: string | null;
            id: string;
        };
        createArgs(): {
            data: {
                label: string | null | undefined;
                content: string | null;
                id: string;
            };
        };
        upsertArgs(): {
            where: {
                id: string;
            };
            create: {
                label: string | null | undefined;
                content: string | null;
                id: string;
            };
            update: {
                label: string | null | undefined;
                content: string | null;
                id: string;
            };
        };
        connectOrCreateArgs(): {
            where: {
                id: string;
            };
            create: {
                label: string | null | undefined;
                content: string | null;
                id: string;
            };
        };
        fromPrisma(item: PrismaDefinition): Definition;
        getAlphabeticalLabel(): Promise<string>;
    }
}
declare module "classes/prismaMdxRelations/NoteBase" {
    import type { Route } from "next";
    import { ParsableExtensionsSchema } from "@ulld/configschema/zod/secondaryConfigParse/getParsableExtensions";
    import { AppConfigSchemaOutput } from "@ulld/configschema/types";
    export class NoteBase {
        rootRelativePath?: string | null;
        ftExtension: string;
        constructor(rootRelativePath?: string | null, extension?: ParsableExtensionsSchema);
        getHref(noteTypeData: AppConfigSchemaOutput["noteTypes"][number] | "RemoteNote"): Route | undefined;
        parseQuickLinks(content: string): Promise<{
            content: string;
            links: string[];
        }>;
        getLinkShortcutRegex(k: string): RegExp;
        parseLinkShortcuts(content: string): string;
        getEquationIds(content?: string | null): string[];
        getDefinitionAnchorHtml(m: RegExpExecArray): string;
        parseDefinitionTags(content: string): {
            content: string;
            definitions: {
                id: string;
                content?: string;
                label?: string;
            }[];
        };
    }
}
declare module "classes/prismaMdxRelations/protocols/mdxNote" {
    import type { MinimalParsableAppConfigOutput } from "@ulld/configschema/types";
    import type { ParsableExtensionsSchema } from "@ulld/configschema/zod/secondaryConfigParse/getParsableExtensions";
    import type { Prisma, MdxNote as PrismaMdxNote } from "@ulld/database/internalDatabaseTypes";
    import type { AutoSettingWithRegex } from "../../../trpc/types";
    import type { MdxNote } from "classes/prismaMdxRelations/MdxNote";
    import { NoteBase } from "classes/prismaMdxRelations/NoteBase";
    import type { PrismaMdxRelationshipProtocol } from "classes/prismaMdxRelations/type";
    export type AutoSettingProp = AutoSettingWithRegex[] | null | undefined;
    export abstract class MdxNoteProtocol extends NoteBase implements PrismaMdxRelationshipProtocol<Prisma.MdxNoteDelegate> {
        constructor(rootRelativePath: string | undefined | null, extension?: ParsableExtensionsSchema);
        abstract createArgs(autoSettings: AutoSettingProp, config: MinimalParsableAppConfigOutput): Prisma.MdxNoteCreateArgs | undefined;
        abstract upsertArgs(autoSettings: AutoSettingProp, config: MinimalParsableAppConfigOutput): Prisma.MdxNoteUpsertArgs | undefined;
        abstract connectOrCreateArgs(autoSettings: AutoSettingProp, config: MinimalParsableAppConfigOutput): Prisma.MdxNoteCreateOrConnectWithoutTagsInput | undefined;
        abstract whereUniqueInput(config: MinimalParsableAppConfigOutput): Prisma.MdxNoteWhereUniqueInput;
        abstract createInput(autoSettings: AutoSettingProp, config: MinimalParsableAppConfigOutput): Prisma.MdxNoteCreateInput | undefined;
        abstract whereInput(config: MinimalParsableAppConfigOutput): Prisma.MdxNoteWhereInput;
        static fromPrisma: (item: PrismaMdxNote) => MdxNote;
    }
}
declare module "classes/prismaMdxRelations/schemas/withMdxTransforms" {
    import { z } from "zod";
    export const mdxNoteSummaryWithMdxTransforms: z.ZodObject<z.objectUtil.extendShape<Omit<z.objectUtil.extendShape<{
        id: z.ZodNullable<z.ZodNumber>;
        href: z.ZodNullable<z.ZodString>;
        summary: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        title: z.ZodNullable<z.ZodString>;
        tags: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            value: z.ZodString;
            kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            value: string;
            kanbanId?: number | null | undefined;
        }, {
            value: string;
            kanbanId?: number | null | undefined;
        }>, z.ZodEffects<z.ZodString, {
            value: string;
            kanbanId?: number | null | undefined;
        }, string>]>, "many">>, import("classes/prismaMdxRelations/tag").Tag[], (string | {
            value: string;
            kanbanId?: number | null | undefined;
        })[] | undefined>;
        noteType: z.ZodEffects<z.ZodString, string, string>;
        topics: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>, import("classes/prismaMdxRelations/topic").Topic[], {
            value: string;
        }[] | undefined>;
        subjects: z.ZodEffects<z.ZodDefault<z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">>, import("classes/prismaMdxRelations/subject").Subject[], {
            value: string;
        }[] | undefined>;
        firstSync: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodEffects<z.ZodString, Date, string>, z.ZodDate]>>>, Date | null | undefined, string | Date | null | undefined>;
        lastSync: z.ZodNullable<z.ZodUnion<[z.ZodEffects<z.ZodString, Date, string>, z.ZodDate]>>;
        isProtected: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>>;
        latexTitle: z.ZodNullable<z.ZodString>;
        rootRelativePath: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | null | undefined, string | null | undefined>;
        formatted: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        citationsListOrder: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        importantValues: z.ZodDefault<z.ZodArray<z.ZodNumber, "many">>;
        sequentialKey: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        sequentialIndex: z.ZodNullable<z.ZodNumber>;
        floatImages: z.ZodDefault<z.ZodBoolean>;
        remoteUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        trackRemote: z.ZodDefault<z.ZodBoolean>;
        outgoingQuickLinks: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        bookmarked: z.ZodDefault<z.ZodBoolean>;
        quickLinkId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        equationIds: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        noLog: z.ZodDefault<z.ZodBoolean>;
        saveFormatted: z.ZodDefault<z.ZodBoolean>;
    }, {
        sequentialList: z.ZodOptional<z.ZodNullable<z.ZodObject<Pick<{
            sequentialKey: z.ZodString;
            MdxNote: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
            Ipynb: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
        }, "sequentialKey">, "strip", z.ZodTypeAny, {
            sequentialKey: string;
        }, {
            sequentialKey: string;
        }>>>;
    }>, "title">, {
        title: z.ZodString;
        firstSync: z.ZodEffects<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodDate]>>, string | undefined, string | Date | undefined>;
        lastSync: z.ZodEffects<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodDate]>>, string | undefined, string | Date | undefined>;
        tags: z.ZodEffects<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>]>, "many">, {
            value: string;
        }[], (string | {
            value: string;
        })[]>;
    }>, "strip", z.ZodTypeAny, {
        id: number | null;
        href: string | null;
        title: string;
        tags: {
            value: string;
        }[];
        noteType: string;
        topics: import("classes/prismaMdxRelations/topic").Topic[];
        subjects: import("classes/prismaMdxRelations/subject").Subject[];
        isProtected: boolean | null;
        latexTitle: string | null;
        citationsListOrder: string[];
        importantValues: number[];
        sequentialIndex: number | null;
        floatImages: boolean;
        trackRemote: boolean;
        outgoingQuickLinks: string[];
        bookmarked: boolean;
        equationIds: string[];
        noLog: boolean;
        saveFormatted: boolean;
        summary?: string | null | undefined;
        firstSync?: string | undefined;
        lastSync?: string | undefined;
        rootRelativePath?: string | null | undefined;
        formatted?: string | null | undefined;
        sequentialKey?: string | null | undefined;
        remoteUrl?: string | null | undefined;
        sequentialList?: {
            sequentialKey: string;
        } | null | undefined;
        quickLinkId?: string | null | undefined;
    }, {
        id: number | null;
        href: string | null;
        title: string;
        tags: (string | {
            value: string;
        })[];
        noteType: string;
        latexTitle: string | null;
        sequentialIndex: number | null;
        summary?: string | null | undefined;
        topics?: {
            value: string;
        }[] | undefined;
        subjects?: {
            value: string;
        }[] | undefined;
        firstSync?: string | Date | undefined;
        lastSync?: string | Date | undefined;
        isProtected?: boolean | null | undefined;
        rootRelativePath?: string | null | undefined;
        formatted?: string | null | undefined;
        citationsListOrder?: string[] | undefined;
        importantValues?: number[] | undefined;
        sequentialKey?: string | null | undefined;
        floatImages?: boolean | undefined;
        remoteUrl?: string | null | undefined;
        trackRemote?: boolean | undefined;
        outgoingQuickLinks?: string[] | undefined;
        bookmarked?: boolean | undefined;
        sequentialList?: {
            sequentialKey: string;
        } | null | undefined;
        quickLinkId?: string | null | undefined;
        equationIds?: string[] | undefined;
        noLog?: boolean | undefined;
        saveFormatted?: boolean | undefined;
    }>;
    export type MdxNoteSummaryOutputWithMdxTransforms = z.output<typeof mdxNoteSummaryWithMdxTransforms>;
}
declare module "classes/prismaMdxRelations/MdxNote" {
    import { type DocTypes } from "@ulld/configschema/configUtilityTypes/docTypes";
    import type { AppConfigSchemaDeepPartialOutput, AppConfigSchemaOutput, MinimalParsableAppConfigOutput } from "@ulld/configschema/types";
    import type { ActiveParsableExtensions } from "@ulld/configschema/zod/secondaryConfigParse/getParsableExtensions";
    import type { Prisma, MdxNote as PrismaMdxNote } from "@ulld/database/internalDatabaseTypes";
    import { fromMdxStringOptSchema, mdxNoteFromStringPropsSchema, parseParamsSchema, type UnifiedMdxParserParamsInput } from "@ulld/schemas/mdx-parsing-params";
    import type { AppConfigSchemaDeepPartial } from "@ulld/types";
    import type { FrontMatterType } from "@ulld/schemas/frontMatter";
    import type { z } from "zod";
    import { type MdxNotePlainObject, mdxNoteZodObject, mdxNoteZodObjectPartial, type ParsedMdxOutput } from "schemas/search/parsing";
    import type { AutoSettingWithRegex } from "../../trpc/types.d";
    import { globDoesMatch } from "trpcInternalMethods/settings/autoSettings/globDoesMatch";
    import type { ValueSearchTableItem } from "trpcTypes/valueTableSearch";
    import type { UnifiedMdxParser } from "types";
    import type { BibEntry } from "classes/prismaMdxRelations/BibEntry";
    import type { Definition } from "classes/prismaMdxRelations/definition";
    import { type AutoSettingProp, MdxNoteProtocol } from "classes/prismaMdxRelations/protocols/mdxNote";
    import { type MdxNoteFromStringOutput, type MdxNoteIntriguingValSummaryInput, type MdxNoteIntriguingValSummaryOutput, type MdxNotePropsInput, type MdxNotePropsOutput, type MdxNoteSummaryInput, type MdxNoteSummaryOutput } from "classes/prismaMdxRelations/schemas/general";
    import { type MdxNoteSummaryOutputWithMdxTransforms } from "classes/prismaMdxRelations/schemas/withMdxTransforms";
    import { Subject } from "classes/prismaMdxRelations/subject";
    import { Tag } from "classes/prismaMdxRelations/tag";
    import { Topic } from "classes/prismaMdxRelations/topic";
    export type MdxNoteFlattened = object;
    export interface ParseMdxStringProps {
        /** Will not parse quickLinks, citations, equationTags and definitions */
        bareAss?: boolean;
        parseDefinitions?: boolean;
        id?: number;
        rootRelativePath?: string;
        docType?: DocTypes;
    }
    export type FromMdxStringParams = {
        content: string;
        urlSlug: string;
        rootRelativePath?: undefined;
        docType?: DocTypes;
        getBookmarkState?: boolean;
    } | {
        content: string;
        urlSlug?: undefined;
        rootRelativePath: string;
        docType?: DocTypes | undefined;
        getBookmarkState?: boolean;
    };
    export interface InternalMdxNote extends Omit<PrismaMdxNote, "id"> {
        id?: number;
        tags: string[];
        citations: string[];
        subjects: string[];
        topics: string[];
    }
    export interface MdxNoteParseParams {
        appConfig: UnifiedMdxParserParamsInput["appConfig"];
        docTypeData: UnifiedMdxParserParamsInput["docTypeData"] | object;
        parser: UnifiedMdxParser;
    }
    type MdxNoteClassConstructorProps = (MdxNotePropsOutput | MdxNoteSummaryOutput | MdxNoteFromStringOutput | MdxNoteIntriguingValSummaryOutput) & {
        appConfig?: AppConfigSchemaDeepPartialOutput | AppConfigSchemaDeepPartial;
    };
    export class MdxNote extends MdxNoteProtocol {
        id: number | undefined | null;
        title?: string | undefined | null;
        latexTitle?: string | null;
        summary?: string | null;
        raw?: string | null;
        floatImages: boolean;
        formatted?: string | null;
        citations: BibEntry[];
        topics: Topic[];
        subjects: Subject[];
        definitions: Definition[];
        tags: Tag[];
        importantValues: number[];
        quickLinkId?: string | null;
        href?: string | null;
        citationsListOrder: string[];
        outgoingQuickLinks: string[];
        equationIds: string[];
        ftExtension: ActiveParsableExtensions;
        isProtected?: boolean | null;
        sequentialKey?: string | null;
        rootRelativePath?: string | null;
        sequentialIndex?: number | null;
        frontMatter?: FrontMatterType | null;
        remoteUrl?: string | null;
        trackRemote: boolean;
        noLog: boolean;
        noteType?: DocTypes;
        imageSrc?: string | undefined | null;
        bookmarked: boolean;
        lastSync: Date | undefined | null;
        haveSetFrontMatter: boolean;
        docTypeData?: AppConfigSchemaOutput["noteTypes"][number];
        saveFormatted: boolean;
        firstSync?: Date | null;
        constructor(props: MdxNoteClassConstructorProps);
        toPlainObject(partial?: boolean | Partial<Record<keyof MdxNotePlainObject, true>>): z.output<typeof mdxNoteZodObject> | z.output<typeof mdxNoteZodObjectPartial>;
        zodSummaryParse(): Promise<MdxNoteSummaryOutputWithMdxTransforms>;
        zodParse(): Promise<ParsedMdxOutput>;
        log(val: string | object): void;
        whereUniqueInput(): Prisma.MdxNoteWhereUniqueInput;
        whereInput(): Prisma.MdxNoteWhereUniqueInput;
        checkIfExistsWithoutId(): Prisma.MdxNoteWhereInput | false;
        canSave(): boolean;
        createInput(autoSettings: AutoSettingProp, config: MinimalParsableAppConfigOutput, noteTypeId?: string): Prisma.MdxNoteCreateInput | undefined;
        importantValueDifferences(n: number, absoluteValue?: boolean): number[];
        createArgs(autoSettings: AutoSettingWithRegex[] | undefined | null, config: Parameters<typeof this.createInput>[1], noteTypeId?: string): Prisma.MdxNoteCreateArgs | undefined;
        connectOrCreateArgs(autoSettings: AutoSettingWithRegex[] | undefined | null, config: Parameters<typeof this.createInput>[1]): Prisma.MdxNoteCreateOrConnectWithoutTagsInput | undefined;
        upsertArgs(autoSettings: AutoSettingWithRegex[] | undefined | null, config: Parameters<typeof this.createInput>[1]): Prisma.MdxNoteUpsertArgs | undefined;
        checkAutoProperties(autoSettings: AutoSettingWithRegex[] | undefined | null, config: Parameters<typeof globDoesMatch>[2]): void;
        formatMermaidComponent(m: RegExpMatchArray): string | undefined;
        parseMermaidElement(content: string): string;
        _parseQuickLinks<T extends string | undefined>(content?: T): Promise<T extends string ? string : string | undefined>;
        static parseMdxString(content: string, _opts: z.input<typeof fromMdxStringOptSchema>, _parseParams: z.input<typeof parseParamsSchema>): Promise<ReturnType<InstanceType<typeof MdxNote>["parse"]>>;
        applyStandardFrontMatter(applyIfAlreadySet?: boolean): Promise<void>;
        applyParsedFrontMatter(data: FrontMatterType<{
            citations?: BibEntry[];
            citationsListOrder?: string[];
            equationIds?: string[];
            definitions?: Definition[];
            outgoingQuickLinks?: string[];
        }>, setFrontMatterProperty?: boolean): Promise<void>;
        parse(params: z.output<typeof parseParamsSchema>): Promise<string>;
        citationIdList(): string[];
        flattenForClient(): MdxNoteFlattened;
        sortCitationsByPageIndex(): void;
        toValueSearchTableItem(): ValueSearchTableItem;
        populateFromRemote(): Promise<void>;
        setNoteType(docTypeData: AppConfigSchemaOutput["noteTypes"][number]): void;
        static fromMdxString(props: z.input<typeof mdxNoteFromStringPropsSchema>, _opts: z.input<typeof fromMdxStringOptSchema> | undefined, _parseParams: z.input<typeof parseParamsSchema>): Promise<MdxNote>;
        static fromPrisma(item: Partial<MdxNotePropsInput>): MdxNote;
        static asIntriguingValueSummary(item: MdxNoteIntriguingValSummaryInput): MdxNote;
        static asSummary(_item: MdxNoteSummaryInput): MdxNote;
        static fromList(n: (MdxNote | PrismaMdxNote)[] | undefined | null): MdxNote[];
    }
    export type MdxNoteAsPlainObject = ReturnType<MdxNote["toPlainObject"]>;
}
declare module "trpcInternalMethods/filesystem/fsUtils" {
    import { ParsedAppConfig } from '@ulld/configschema/types';
    export const checkExistsOfAllParsableTypes: (rootRelativePath: string, _config?: ParsedAppConfig) => Promise<{
        path: string;
        format: ".csv" | ".tsv" | ".excel" | ".numpy" | ".html" | ".pickle" | ".db" | ".sql" | ".pdf" | ".json" | ".tex" | ".hdf5" | ".md" | ".mdx" | ".ipynb";
    } | undefined>;
}
declare module "trpcInternalMethods/filesystem/fsnotes" {
    import { ParsableExtensionsSchema } from "@ulld/configschema/zod/secondaryConfigParse/getParsableExtensions";
    import { AppConfigSchemaOutput } from '@ulld/configschema/types';
    export const getFsMdx: (rootRelativePath: string, ext?: ".mdx" | ".md", _config?: AppConfigSchemaOutput | undefined | null, useProcessRoot?: boolean) => Promise<string>;
    export const getFsIpynb: (rootRelativePath: string, _config?: AppConfigSchemaOutput) => Promise<string>;
    export const getFsNote: (rootRelativePath: string, knownType?: ParsableExtensionsSchema) => Promise<{
        content: string;
        format: string;
    } | undefined>;
}
declare module "trpcInternalMethods/notes/mdx/getDatabaseMdxFromPathname" {
    export const getDatabaseMdxFromPathname: (pathname: string) => Promise<({
        equations: {
            id: number;
            equationId: string | null;
            title: string;
            desc: string | null;
            content: string;
            asPython: string | null;
            variableLegend: unknown;
            variables: string[];
            keywords: string[];
            createdAt: Date;
            lastAccess: Date;
        }[];
        tags: {
            value: string;
            kanbanId: number | null;
            createdAt: Date;
            lastAccess: Date;
        }[];
        toDo: {
            id: number;
            createdAt: Date;
            task: string;
            dueAt: Date | null;
            details: string | null;
            parentId: number | null;
            category: import(".prisma/client").$Enums.TaskCategory | null;
            bookmarked: boolean;
            status: string;
            priority: number;
            toDoListId: number | null;
            completedOn: Date | null;
        }[];
        ReadingList: {
            name: string;
            description: string | null;
            createdAt: Date;
            lastUpdate: Date;
        }[];
        topics: {
            value: string;
            kanbanId: number | null;
            createdAt: Date;
            lastAccess: Date;
        }[];
        subjects: {
            value: string;
            kanbanId: number | null;
            createdAt: Date;
            lastAccess: Date;
        }[];
        _count: {
            topics: number;
            subjects: number;
            tags: number;
            citations: number;
            sequentialList: number;
            ReadingList: number;
            equations: number;
            definitions: number;
            toDo: number;
        };
        citations: {
            id: string;
            BibId: number | null;
            OwnWork: boolean;
            ColleaguesWork: boolean;
            read: boolean;
            htmlCitation: string | null;
            PdfPath: string | null;
            address: string | null;
            annote: string | null;
            author: string | null;
            booktitle: string | null;
            chapter: string | null;
            crossref: string | null;
            doi: string | null;
            edition: string | null;
            editor: string | null;
            email: string | null;
            howpublished: string | null;
            institution: string | null;
            journal: string | null;
            month: string | null;
            note: string | null;
            number: string | null;
            organization: string | null;
            pages: string | null;
            publisher: string | null;
            school: string | null;
            series: string | null;
            title: string | null;
            volume: string | null;
            type: string | null;
            year: string | null;
            numpages: string | null;
            url: string | null;
            issue: string | null;
            issn: string | null;
            abstract: string | null;
            urldate: string | null;
            keywords: string | null;
            copyright: string | null;
            createdAt: Date;
            lastAccess: Date;
        }[];
        sequentialList: {
            sequentialKey: string;
        } | null;
        definitions: {
            id: string;
            label: string | null;
            content: string | null;
            alphabeticalLabel: string | null;
            mdxNoteId: number | null;
            createdAt: Date;
            lastAccess: Date;
        }[];
    } & {
        id: number;
        isProtected: boolean | null;
        dietSummaryKey: string | null;
        title: string;
        latexTitle: string | null;
        rootRelativePath: string;
        noteType: string;
        content: string;
        formatted: string | null;
        summary: string | null;
        citationsListOrder: string[];
        importantValues: number[];
        imageSrc: string | null;
        href: string;
        sequentialKey: string | null;
        sequentialIndex: number | null;
        floatImages: boolean;
        remoteUrl: string | null;
        trackRemote: boolean;
        outgoingQuickLinks: string[];
        quickLink: string | null;
        bookmarked: boolean;
        firstSync: Date;
        lastSync: Date;
        lastAccess: Date;
    }) | null>;
}
declare module "trpcInternalMethods/notes/mdx/getRemoteMdx" {
    export const getRemoteMdx: (rootRelativePath: string) => Promise<({
        equations: {
            id: number;
            equationId: string | null;
            title: string;
            desc: string | null;
            content: string;
            asPython: string | null;
            variableLegend: unknown;
            variables: string[];
            keywords: string[];
            createdAt: Date;
            lastAccess: Date;
        }[];
        tags: {
            value: string;
            kanbanId: number | null;
            createdAt: Date;
            lastAccess: Date;
        }[];
        toDo: {
            id: number;
            createdAt: Date;
            task: string;
            dueAt: Date | null;
            details: string | null;
            parentId: number | null;
            category: import(".prisma/client").$Enums.TaskCategory | null;
            bookmarked: boolean;
            status: string;
            priority: number;
            toDoListId: number | null;
            completedOn: Date | null;
        }[];
        ReadingList: {
            name: string;
            description: string | null;
            createdAt: Date;
            lastUpdate: Date;
        }[];
        topics: {
            value: string;
            kanbanId: number | null;
            createdAt: Date;
            lastAccess: Date;
        }[];
        subjects: {
            value: string;
            kanbanId: number | null;
            createdAt: Date;
            lastAccess: Date;
        }[];
        _count: {
            topics: number;
            subjects: number;
            tags: number;
            citations: number;
            sequentialList: number;
            ReadingList: number;
            equations: number;
            definitions: number;
            toDo: number;
        };
        citations: {
            id: string;
            BibId: number | null;
            OwnWork: boolean;
            ColleaguesWork: boolean;
            read: boolean;
            htmlCitation: string | null;
            PdfPath: string | null;
            address: string | null;
            annote: string | null;
            author: string | null;
            booktitle: string | null;
            chapter: string | null;
            crossref: string | null;
            doi: string | null;
            edition: string | null;
            editor: string | null;
            email: string | null;
            howpublished: string | null;
            institution: string | null;
            journal: string | null;
            month: string | null;
            note: string | null;
            number: string | null;
            organization: string | null;
            pages: string | null;
            publisher: string | null;
            school: string | null;
            series: string | null;
            title: string | null;
            volume: string | null;
            type: string | null;
            year: string | null;
            numpages: string | null;
            url: string | null;
            issue: string | null;
            issn: string | null;
            abstract: string | null;
            urldate: string | null;
            keywords: string | null;
            copyright: string | null;
            createdAt: Date;
            lastAccess: Date;
        }[];
        sequentialList: {
            sequentialKey: string;
        } | null;
        definitions: {
            id: string;
            label: string | null;
            content: string | null;
            alphabeticalLabel: string | null;
            mdxNoteId: number | null;
            createdAt: Date;
            lastAccess: Date;
        }[];
    } & {
        id: number;
        isProtected: boolean | null;
        dietSummaryKey: string | null;
        title: string;
        latexTitle: string | null;
        rootRelativePath: string;
        noteType: string;
        content: string;
        formatted: string | null;
        summary: string | null;
        citationsListOrder: string[];
        importantValues: number[];
        imageSrc: string | null;
        href: string;
        sequentialKey: string | null;
        sequentialIndex: number | null;
        floatImages: boolean;
        remoteUrl: string | null;
        trackRemote: boolean;
        outgoingQuickLinks: string[];
        quickLink: string | null;
        bookmarked: boolean;
        firstSync: Date;
        lastSync: Date;
        lastAccess: Date;
    }) | null>;
}
declare module "trpc/routers/mdxNote" {
    export const mdxNoteActionsRouter: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
        ctx: object;
        meta: object;
        errorShape: import("@trpc/server").DefaultErrorShape;
        transformer: import("@trpc/server").DefaultDataTransformer;
    }>, {
        deleteNoteById: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: number | number[];
            _input_out: any[];
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, import(".prisma/client").Prisma.BatchPayload>;
        toggleBookmarkedById: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: number;
            _input_out: number;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, boolean>;
        getDatabaseMdx: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: string;
            _input_out: string;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, ({
            equations: {
                id: number;
                equationId: string | null;
                title: string;
                desc: string | null;
                content: string;
                asPython: string | null;
                variableLegend: unknown;
                variables: string[];
                keywords: string[];
                createdAt: Date;
                lastAccess: Date;
            }[];
            tags: {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
            toDo: {
                id: number;
                createdAt: Date;
                task: string;
                dueAt: Date | null;
                details: string | null;
                parentId: number | null;
                category: import(".prisma/client").$Enums.TaskCategory | null;
                bookmarked: boolean;
                status: string;
                priority: number;
                toDoListId: number | null;
                completedOn: Date | null;
            }[];
            ReadingList: {
                name: string;
                description: string | null;
                createdAt: Date;
                lastUpdate: Date;
            }[];
            topics: {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
            subjects: {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
            _count: {
                topics: number;
                subjects: number;
                tags: number;
                citations: number;
                sequentialList: number;
                ReadingList: number;
                equations: number;
                definitions: number;
                toDo: number;
            };
            citations: {
                id: string;
                BibId: number | null;
                OwnWork: boolean;
                ColleaguesWork: boolean;
                read: boolean;
                htmlCitation: string | null;
                PdfPath: string | null;
                address: string | null;
                annote: string | null;
                author: string | null;
                booktitle: string | null;
                chapter: string | null;
                crossref: string | null;
                doi: string | null;
                edition: string | null;
                editor: string | null;
                email: string | null;
                howpublished: string | null;
                institution: string | null;
                journal: string | null;
                month: string | null;
                note: string | null;
                number: string | null;
                organization: string | null;
                pages: string | null;
                publisher: string | null;
                school: string | null;
                series: string | null;
                title: string | null;
                volume: string | null;
                type: string | null;
                year: string | null;
                numpages: string | null;
                url: string | null;
                issue: string | null;
                issn: string | null;
                abstract: string | null;
                urldate: string | null;
                keywords: string | null;
                copyright: string | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
            sequentialList: {
                sequentialKey: string;
            } | null;
            definitions: {
                id: string;
                label: string | null;
                content: string | null;
                alphabeticalLabel: string | null;
                mdxNoteId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
        } & {
            id: number;
            isProtected: boolean | null;
            dietSummaryKey: string | null;
            title: string;
            latexTitle: string | null;
            rootRelativePath: string;
            noteType: string;
            content: string;
            formatted: string | null;
            summary: string | null;
            citationsListOrder: string[];
            importantValues: number[];
            imageSrc: string | null;
            href: string;
            sequentialKey: string | null;
            sequentialIndex: number | null;
            floatImages: boolean;
            remoteUrl: string | null;
            trackRemote: boolean;
            outgoingQuickLinks: string[];
            quickLink: string | null;
            bookmarked: boolean;
            firstSync: Date;
            lastSync: Date;
            lastAccess: Date;
        }) | null>;
        getDatabaseMdxFromPathname: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: string;
            _input_out: string;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, ({
            equations: {
                id: number;
                equationId: string | null;
                title: string;
                desc: string | null;
                content: string;
                asPython: string | null;
                variableLegend: unknown;
                variables: string[];
                keywords: string[];
                createdAt: Date;
                lastAccess: Date;
            }[];
            tags: {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
            toDo: {
                id: number;
                createdAt: Date;
                task: string;
                dueAt: Date | null;
                details: string | null;
                parentId: number | null;
                category: import(".prisma/client").$Enums.TaskCategory | null;
                bookmarked: boolean;
                status: string;
                priority: number;
                toDoListId: number | null;
                completedOn: Date | null;
            }[];
            ReadingList: {
                name: string;
                description: string | null;
                createdAt: Date;
                lastUpdate: Date;
            }[];
            topics: {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
            subjects: {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
            _count: {
                topics: number;
                subjects: number;
                tags: number;
                citations: number;
                sequentialList: number;
                ReadingList: number;
                equations: number;
                definitions: number;
                toDo: number;
            };
            citations: {
                id: string;
                BibId: number | null;
                OwnWork: boolean;
                ColleaguesWork: boolean;
                read: boolean;
                htmlCitation: string | null;
                PdfPath: string | null;
                address: string | null;
                annote: string | null;
                author: string | null;
                booktitle: string | null;
                chapter: string | null;
                crossref: string | null;
                doi: string | null;
                edition: string | null;
                editor: string | null;
                email: string | null;
                howpublished: string | null;
                institution: string | null;
                journal: string | null;
                month: string | null;
                note: string | null;
                number: string | null;
                organization: string | null;
                pages: string | null;
                publisher: string | null;
                school: string | null;
                series: string | null;
                title: string | null;
                volume: string | null;
                type: string | null;
                year: string | null;
                numpages: string | null;
                url: string | null;
                issue: string | null;
                issn: string | null;
                abstract: string | null;
                urldate: string | null;
                keywords: string | null;
                copyright: string | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
            sequentialList: {
                sequentialKey: string;
            } | null;
            definitions: {
                id: string;
                label: string | null;
                content: string | null;
                alphabeticalLabel: string | null;
                mdxNoteId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
        } & {
            id: number;
            isProtected: boolean | null;
            dietSummaryKey: string | null;
            title: string;
            latexTitle: string | null;
            rootRelativePath: string;
            noteType: string;
            content: string;
            formatted: string | null;
            summary: string | null;
            citationsListOrder: string[];
            importantValues: number[];
            imageSrc: string | null;
            href: string;
            sequentialKey: string | null;
            sequentialIndex: number | null;
            floatImages: boolean;
            remoteUrl: string | null;
            trackRemote: boolean;
            outgoingQuickLinks: string[];
            quickLink: string | null;
            bookmarked: boolean;
            firstSync: Date;
            lastSync: Date;
            lastAccess: Date;
        }) | null>;
        getFsMdx: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                rootRelativePath: string;
                extension: ".md" | ".mdx";
                useProcessRoot?: boolean | undefined;
            };
            _input_out: {
                rootRelativePath: string;
                extension: ".md" | ".mdx";
                useProcessRoot: boolean;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            content: string;
            details: {
                quickLink: string | undefined;
                sequentialKey: string | undefined;
                sequentialIndex: number | undefined;
                firstSync: string | Date;
                lastSync: string | Date;
                id: number;
                bookmarked: boolean;
            } | undefined;
        }>;
        setMdxAccessed: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                rootRelativePath: string;
            };
            _input_out: {
                rootRelativePath: string;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, void>;
        parseAndCompileMdxString: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                props: {
                    raw: string;
                    docTypeData: {
                        label: string;
                        icon: string;
                        UI: {
                            styles: {
                                dark: {
                                    bg?: string | undefined;
                                    fg?: string | undefined;
                                };
                                light: {
                                    bg?: string | undefined;
                                    fg?: string | undefined;
                                };
                            };
                        };
                        fs: string;
                        id: string;
                        docType: string;
                        matchWeight: number;
                        url: string;
                        urlQuery: Record<string, string | number | string[] | number[]>;
                        keywords: string[];
                        autoTag: string[];
                        autoTopic: string[];
                        autoSubject: string[];
                        inSidebar: boolean;
                        inNavbar: boolean;
                        filePathPattern?: string | undefined;
                        topicLabel?: string | undefined;
                        subjectLabel?: string | undefined;
                    };
                    bookmarked?: boolean | undefined;
                    rootRelativePath?: string | null | undefined;
                };
                parseParams: {
                    parser: (args_0: {
                        data: {
                            id?: string | null | undefined;
                            summary?: string | null | undefined;
                            title?: string | null | undefined;
                            tags?: string[] | undefined;
                            topics?: string[] | undefined;
                            subjects?: string[] | undefined;
                            sequentialKey?: string | null | undefined;
                            importantValues?: number[] | undefined;
                            created?: string | null | undefined;
                            updated?: string | null | undefined;
                            sequential?: number | null | undefined;
                            tableStyles?: {
                                math?: "base" | "lg" | "xl" | "small" | null | undefined;
                                expand?: boolean | null | undefined;
                                text?: "base" | "lg" | "xl" | "small" | null | undefined;
                                float?: "right" | "left" | null | undefined;
                                fullWidth?: boolean | null | undefined;
                                tableCenter?: boolean | null | undefined;
                                textCenter?: boolean | null | undefined;
                                headingCenter?: boolean | null | undefined;
                                noMax?: boolean | null | undefined;
                            } | undefined;
                        };
                        content: string;
                        docTypeData: {
                            id: string;
                            url: string;
                            docType: string;
                            label?: string | undefined;
                            keywords?: string[] | undefined;
                            icon?: string | undefined;
                            UI?: {
                                styles: {
                                    dark: {
                                        bg?: string | undefined;
                                        fg?: string | undefined;
                                    };
                                    light: {
                                        bg?: string | undefined;
                                        fg?: string | undefined;
                                    };
                                };
                            } | undefined;
                            fs?: string | undefined;
                            filePathPattern?: string | undefined;
                            matchWeight?: number | undefined;
                            urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                            topicLabel?: string | undefined;
                            subjectLabel?: string | undefined;
                            autoTag?: string[] | undefined;
                            autoTopic?: string[] | undefined;
                            autoSubject?: string[] | undefined;
                            inSidebar?: boolean | undefined;
                            inNavbar?: boolean | undefined;
                        } | {};
                        appConfig: {
                            fsRoot: string;
                            noteTypes: {
                                fs: string;
                                label?: string | undefined;
                                icon?: string | undefined;
                                UI?: {
                                    styles: {
                                        dark: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                        light: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                    };
                                } | undefined;
                                id?: string | undefined;
                                docType?: string | undefined;
                                filePathPattern?: string | undefined;
                                matchWeight?: number | undefined;
                                url?: string | undefined;
                                urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                                keywords?: string[] | undefined;
                                topicLabel?: string | undefined;
                                subjectLabel?: string | undefined;
                                autoTag?: string[] | undefined;
                                autoTopic?: string[] | undefined;
                                autoSubject?: string[] | undefined;
                                inSidebar?: boolean | undefined;
                                inNavbar?: boolean | undefined;
                            }[];
                            code?: {
                                editor: {
                                    defaultLangauge: string;
                                    useVimMode: boolean;
                                };
                                theme: {
                                    dark: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                    light: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                };
                                syntaxHighlighting: {
                                    transformers: {
                                        regexHighlight: boolean;
                                        lineHighlight: boolean;
                                        lineFocus: boolean;
                                        lineErrorLevel: boolean;
                                        lineDiff: boolean;
                                    };
                                    defaultLanguage: {
                                        inline: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                        block: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                    };
                                };
                            } | undefined;
                            database?: {
                                storeFormatted: boolean;
                                removeIfNotPresentInFs: boolean;
                            } | undefined;
                            navigation?: {
                                navbarBreakpoint: {
                                    full: number;
                                    minimal: number;
                                };
                                maxResultLength: {
                                    snippets: number;
                                    searchAll: number;
                                    equations: number;
                                    categories: number;
                                };
                                navbarLinks: (string | {
                                    label: string;
                                    href?: string | undefined;
                                    icon?: string | undefined;
                                    onClick?: ((...args: unknown[]) => unknown) | undefined;
                                })[];
                                sidebarLinks: (string | {
                                    icon: string;
                                    label?: string | undefined;
                                    href?: string | undefined;
                                    Icon?: ((...args: unknown[]) => unknown) | undefined;
                                    onClick?: ((...args: unknown[]) => unknown) | undefined;
                                })[];
                            } | undefined;
                            terminal?: {
                                logLevel: "info" | "none" | "debug" | "verbose";
                            } | undefined;
                            jupyter?: {
                                execute: boolean;
                                environment: string;
                                syntaxHighlightTheme: string;
                                jupyterPort: number;
                                initiallyFoldCells: boolean;
                                kernel: string;
                                jupyterReactProps: {
                                    collaborative: boolean;
                                    lite: boolean;
                                    serverUrls?: {
                                        baseUrl?: string | undefined;
                                        wsUrl?: string | undefined;
                                    } | undefined;
                                };
                                nbConvert: {
                                    conversionTimeout: number;
                                    execute: boolean;
                                    nbConvertTemplate: string;
                                    notebookOutputDir: string;
                                    nbconvertPath?: string | undefined;
                                    customConversionFunction?: {
                                        pdf?: ((args_0: string, args_1: string, ...args: unknown[]) => string) | undefined;
                                    } | undefined;
                                };
                                jupyterNotebookProps: {
                                    readOnly: boolean;
                                    cellMetadataPanel: boolean;
                                    cellSidebarMargin: number;
                                    bundledIPyWidgets: {
                                        name: string;
                                        module: string | Record<string, string>;
                                        version: string;
                                    }[];
                                    externalIPyWidgets: {
                                        name: string;
                                        version: string;
                                    }[];
                                    nbgrader: boolean;
                                    height?: string | undefined;
                                    maxHeight?: string | undefined;
                                };
                                cellInputWrappers: Record<string, {
                                    prefix: string;
                                    suffix: string;
                                }>;
                                jupyterToken?: string | undefined;
                            } | undefined;
                            math?: {
                                latexPackages: string[] | "all";
                                constants: Record<string, number>;
                                latexFontUrl?: string | undefined;
                            } | undefined;
                            UI?: {
                                table: {
                                    maxHeight: string;
                                };
                                text: {
                                    blockQuoteItalic: boolean;
                                    fontPaths: "default" | {
                                        weight: "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900";
                                        path: string;
                                        style: "bold" | "italic" | "normal";
                                    }[];
                                };
                                media: {
                                    imageMap: Record<string, string | undefined>;
                                    includeDefaultImageMap: boolean;
                                    imageRemoteTest: string[];
                                };
                                theme: "ulld" | "red" | "orange" | "yellow" | "green" | "blue" | "rose" | "slate" | "gray" | "stone" | "zinc" | "neutral" | "violet";
                                colors: Record<string, {
                                    dark?: string | undefined;
                                    light?: string | undefined;
                                } | undefined>;
                                autoApplyMdxTitles: boolean;
                            } | undefined;
                            slots?: {
                                navigation?: any;
                                bibliography?: any;
                                math?: any;
                                snippets?: any;
                                dashboard?: any;
                                taskManager?: any;
                                UI?: any;
                                pdf?: any;
                                editor?: any;
                                form?: any;
                                commandPalette?: any;
                            } | undefined;
                            build?: {
                                database: {
                                    type: "postgres" | "sqlite";
                                    postgres: {
                                        connectionURI: string;
                                        port?: undefined;
                                        dbName?: undefined;
                                    } | {
                                        port: number;
                                        dbName: string;
                                        connectionURI?: undefined;
                                    };
                                    prioritize: "size" | "speed";
                                };
                                additionalUserContent: {
                                    css?: string | undefined;
                                    logo?: string | undefined;
                                    favicon?: string | undefined;
                                };
                            } | undefined;
                            autoTag?: {
                                tag?: string | undefined;
                                path?: string | undefined;
                            }[] | undefined;
                            autoTopic?: {
                                path?: string | undefined;
                                topic?: string | undefined;
                            }[] | undefined;
                            autoSubject?: {
                                path?: string | undefined;
                                subject?: string | undefined;
                            }[] | undefined;
                            alwaysPreferFs?: boolean | undefined;
                            ignoreFilepaths?: string[] | undefined;
                            tempDir?: string | undefined;
                            generatedDir?: string | undefined;
                            ignorePreferFsExtensions?: string[] | undefined;
                            fileTypePriority?: (".mdx" | ".ipynb" | ".csv" | ".tsv" | ".excel" | ".numpy" | ".html" | ".pickle" | ".db" | ".sql" | ".pdf" | ".json" | ".tex" | ".hdf5" | ".md")[] | undefined;
                            bibPath?: string | undefined;
                            cslPath?: string | undefined;
                            dateHandling?: {
                                enableAdvancedFormat: boolean;
                                format: {
                                    short: string;
                                    long: string;
                                    withTime: string;
                                    timeOnly: string;
                                };
                                defaultTimeDisplayType: "summarized" | "analog" | "descriptive";
                                defaultTimeZone?: string | undefined;
                            } | undefined;
                            linkAliases?: Record<string, string> | undefined;
                            plotting?: {
                                plotColorList: string[] | {
                                    dark: string[];
                                    light: string[];
                                };
                                plotColorCycleMethod: "inOrder" | "random";
                            } | undefined;
                            credentials?: {
                                googleServiceAccountJsonPath?: string | undefined;
                            } | undefined;
                            performance?: {
                                latexParsingDebounceTimeout: number;
                                mdxParsingDebounceTimeout: number;
                            } | undefined;
                            meta?: {
                                title: string;
                                desc?: string | undefined;
                            } | undefined;
                            plugins?: {
                                name: string;
                                version: string;
                                parserIndex: number;
                            }[] | undefined;
                        };
                        serverClient?: any;
                        db?: {
                            id: number;
                            firstSync: string | Date;
                            bookmarked: boolean;
                            lastSync: string | Date;
                            sequentialKey?: string | null | undefined;
                            sequentialIndex?: number | null | undefined;
                            quickLink?: string | null | undefined;
                        } | undefined;
                    }, ...args: unknown[]) => Promise<{
                        id?: string | null | undefined;
                        summary?: string | null | undefined;
                        title?: string | null | undefined;
                        tags?: string | string[] | undefined;
                        topics?: string | string[] | undefined;
                        subjects?: string | string[] | undefined;
                        sequentialKey?: string | null | undefined;
                        importantValues?: number[] | undefined;
                        created?: string | null | undefined;
                        updated?: string | null | undefined;
                        sequential?: number | null | undefined;
                        tableStyles?: {
                            math?: "base" | "lg" | "xl" | "small" | null | undefined;
                            expand?: boolean | null | undefined;
                            text?: "base" | "lg" | "xl" | "small" | null | undefined;
                            float?: "right" | "left" | null | undefined;
                            fullWidth?: boolean | null | undefined;
                            tableCenter?: boolean | null | undefined;
                            textCenter?: boolean | null | undefined;
                            headingCenter?: boolean | null | undefined;
                            noMax?: boolean | null | undefined;
                        } | undefined;
                    } & Record<string, string | number | boolean | Record<string, string | number | boolean | null> | Record<string, Record<string, string | number | boolean | null>> | Record<string, string | number | boolean | null>[] | (string | number | boolean | null)[] | (string | number | boolean | null)[][] | null>>;
                    docTypeData?: {
                        label: string;
                        icon: string;
                        UI: {
                            styles: {
                                dark: {
                                    bg?: string | undefined;
                                    fg?: string | undefined;
                                };
                                light: {
                                    bg?: string | undefined;
                                    fg?: string | undefined;
                                };
                            };
                        };
                        fs: string;
                        id: string;
                        docType: string;
                        matchWeight: number;
                        url: string;
                        urlQuery: Record<string, string | number | string[] | number[]>;
                        keywords: string[];
                        autoTag: string[];
                        autoTopic: string[];
                        autoSubject: string[];
                        inSidebar: boolean;
                        inNavbar: boolean;
                        filePathPattern?: string | undefined;
                        topicLabel?: string | undefined;
                        subjectLabel?: string | undefined;
                    } | {} | undefined;
                    appConfig?: {
                        fsRoot: string;
                        noteTypes: {
                            fs: string;
                            label?: string | undefined;
                            icon?: string | undefined;
                            UI?: {
                                styles: {
                                    dark: {
                                        bg?: string | undefined;
                                        fg?: string | undefined;
                                    };
                                    light: {
                                        bg?: string | undefined;
                                        fg?: string | undefined;
                                    };
                                };
                            } | undefined;
                            id?: string | undefined;
                            docType?: string | undefined;
                            filePathPattern?: string | undefined;
                            matchWeight?: number | undefined;
                            url?: string | undefined;
                            urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                            keywords?: string[] | undefined;
                            topicLabel?: string | undefined;
                            subjectLabel?: string | undefined;
                            autoTag?: string[] | undefined;
                            autoTopic?: string[] | undefined;
                            autoSubject?: string[] | undefined;
                            inSidebar?: boolean | undefined;
                            inNavbar?: boolean | undefined;
                        }[];
                        code?: {
                            editor: {
                                defaultLangauge: string;
                                useVimMode: boolean;
                            };
                            theme: {
                                dark: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                light: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                            };
                            syntaxHighlighting: {
                                transformers: {
                                    regexHighlight: boolean;
                                    lineHighlight: boolean;
                                    lineFocus: boolean;
                                    lineErrorLevel: boolean;
                                    lineDiff: boolean;
                                };
                                defaultLanguage: {
                                    inline: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                    block: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                };
                            };
                        } | undefined;
                        database?: {
                            storeFormatted: boolean;
                            removeIfNotPresentInFs: boolean;
                        } | undefined;
                        navigation?: {
                            navbarBreakpoint: {
                                full: number;
                                minimal: number;
                            };
                            maxResultLength: {
                                snippets: number;
                                searchAll: number;
                                equations: number;
                                categories: number;
                            };
                            navbarLinks: (string | {
                                label: string;
                                href?: string | undefined;
                                icon?: string | undefined;
                                onClick?: ((...args: unknown[]) => unknown) | undefined;
                            })[];
                            sidebarLinks: (string | {
                                icon: string;
                                label?: string | undefined;
                                href?: string | undefined;
                                Icon?: ((...args: unknown[]) => unknown) | undefined;
                                onClick?: ((...args: unknown[]) => unknown) | undefined;
                            })[];
                        } | undefined;
                        terminal?: {
                            logLevel: "info" | "none" | "debug" | "verbose";
                        } | undefined;
                        jupyter?: {
                            execute: boolean;
                            environment: string;
                            syntaxHighlightTheme: string;
                            jupyterPort: number;
                            initiallyFoldCells: boolean;
                            kernel: string;
                            jupyterReactProps: {
                                collaborative: boolean;
                                lite: boolean;
                                serverUrls?: {
                                    baseUrl?: string | undefined;
                                    wsUrl?: string | undefined;
                                } | undefined;
                            };
                            nbConvert: {
                                conversionTimeout: number;
                                execute: boolean;
                                nbConvertTemplate: string;
                                notebookOutputDir: string;
                                nbconvertPath?: string | undefined;
                                customConversionFunction?: {
                                    pdf?: ((args_0: string, args_1: string, ...args: unknown[]) => string) | undefined;
                                } | undefined;
                            };
                            jupyterNotebookProps: {
                                readOnly: boolean;
                                cellMetadataPanel: boolean;
                                cellSidebarMargin: number;
                                bundledIPyWidgets: {
                                    name: string;
                                    module: string | Record<string, string>;
                                    version: string;
                                }[];
                                externalIPyWidgets: {
                                    name: string;
                                    version: string;
                                }[];
                                nbgrader: boolean;
                                height?: string | undefined;
                                maxHeight?: string | undefined;
                            };
                            cellInputWrappers: Record<string, {
                                prefix: string;
                                suffix: string;
                            }>;
                            jupyterToken?: string | undefined;
                        } | undefined;
                        math?: {
                            latexPackages: string[] | "all";
                            constants: Record<string, number>;
                            latexFontUrl?: string | undefined;
                        } | undefined;
                        UI?: {
                            table: {
                                maxHeight: string;
                            };
                            text: {
                                blockQuoteItalic: boolean;
                                fontPaths: "default" | {
                                    weight: "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900";
                                    path: string;
                                    style: "bold" | "italic" | "normal";
                                }[];
                            };
                            media: {
                                imageMap: Record<string, string | undefined>;
                                includeDefaultImageMap: boolean;
                                imageRemoteTest: string[];
                            };
                            theme: "ulld" | "red" | "orange" | "yellow" | "green" | "blue" | "rose" | "slate" | "gray" | "stone" | "zinc" | "neutral" | "violet";
                            colors: Record<string, {
                                dark?: string | undefined;
                                light?: string | undefined;
                            } | undefined>;
                            autoApplyMdxTitles: boolean;
                        } | undefined;
                        slots?: {
                            navigation?: any;
                            bibliography?: any;
                            math?: any;
                            snippets?: any;
                            dashboard?: any;
                            taskManager?: any;
                            UI?: any;
                            pdf?: any;
                            editor?: any;
                            form?: any;
                            commandPalette?: any;
                        } | undefined;
                        build?: {
                            database: {
                                type: "postgres" | "sqlite";
                                postgres: {
                                    connectionURI: string;
                                    port?: undefined;
                                    dbName?: undefined;
                                } | {
                                    port: number;
                                    dbName: string;
                                    connectionURI?: undefined;
                                };
                                prioritize: "size" | "speed";
                            };
                            additionalUserContent: {
                                css?: string | undefined;
                                logo?: string | undefined;
                                favicon?: string | undefined;
                            };
                        } | undefined;
                        autoTag?: {
                            tag?: string | undefined;
                            path?: string | undefined;
                        }[] | undefined;
                        autoTopic?: {
                            path?: string | undefined;
                            topic?: string | undefined;
                        }[] | undefined;
                        autoSubject?: {
                            path?: string | undefined;
                            subject?: string | undefined;
                        }[] | undefined;
                        alwaysPreferFs?: boolean | undefined;
                        ignoreFilepaths?: string[] | undefined;
                        tempDir?: string | undefined;
                        generatedDir?: string | undefined;
                        ignorePreferFsExtensions?: string[] | undefined;
                        fileTypePriority?: (".mdx" | ".ipynb" | ".csv" | ".tsv" | ".excel" | ".numpy" | ".html" | ".pickle" | ".db" | ".sql" | ".pdf" | ".json" | ".tex" | ".hdf5" | ".md")[] | undefined;
                        bibPath?: string | undefined;
                        cslPath?: string | undefined;
                        dateHandling?: {
                            enableAdvancedFormat: boolean;
                            format: {
                                short: string;
                                long: string;
                                withTime: string;
                                timeOnly: string;
                            };
                            defaultTimeDisplayType: "summarized" | "analog" | "descriptive";
                            defaultTimeZone?: string | undefined;
                        } | undefined;
                        linkAliases?: Record<string, string> | undefined;
                        plotting?: {
                            plotColorList: string[] | {
                                dark: string[];
                                light: string[];
                            };
                            plotColorCycleMethod: "inOrder" | "random";
                        } | undefined;
                        credentials?: {
                            googleServiceAccountJsonPath?: string | undefined;
                        } | undefined;
                        performance?: {
                            latexParsingDebounceTimeout: number;
                            mdxParsingDebounceTimeout: number;
                        } | undefined;
                        meta?: {
                            title: string;
                            desc?: string | undefined;
                        } | undefined;
                        plugins?: {
                            name: string;
                            version: string;
                            parserIndex: number;
                        }[] | undefined;
                    } | undefined;
                };
                _opts?: {
                    noteTypeId?: string | undefined;
                } | undefined;
            };
            _input_out: {
                _opts: {
                    noteTypeId?: string | undefined;
                };
                props: {
                    bookmarked: boolean;
                    raw: string;
                    docTypeData: {
                        label: string;
                        icon: string;
                        UI: {
                            styles: {
                                dark: {
                                    bg?: string | undefined;
                                    fg?: string | undefined;
                                };
                                light: {
                                    bg?: string | undefined;
                                    fg?: string | undefined;
                                };
                            };
                        };
                        fs: string;
                        id: string;
                        docType: string;
                        matchWeight: number;
                        url: string;
                        urlQuery: Record<string, string | number | string[] | number[]>;
                        keywords: string[];
                        autoTag: string[];
                        autoTopic: string[];
                        autoSubject: string[];
                        inSidebar: boolean;
                        inNavbar: boolean;
                        filePathPattern?: string | undefined;
                        topicLabel?: string | undefined;
                        subjectLabel?: string | undefined;
                    };
                    rootRelativePath?: string | null | undefined;
                };
                parseParams: {
                    docTypeData: {
                        label: string;
                        icon: string;
                        UI: {
                            styles: {
                                dark: {
                                    bg?: string | undefined;
                                    fg?: string | undefined;
                                };
                                light: {
                                    bg?: string | undefined;
                                    fg?: string | undefined;
                                };
                            };
                        };
                        fs: string;
                        id: string;
                        docType: string;
                        matchWeight: number;
                        url: string;
                        urlQuery: Record<string, string | number | string[] | number[]>;
                        keywords: string[];
                        autoTag: string[];
                        autoTopic: string[];
                        autoSubject: string[];
                        inSidebar: boolean;
                        inNavbar: boolean;
                        filePathPattern?: string | undefined;
                        topicLabel?: string | undefined;
                        subjectLabel?: string | undefined;
                    } | {};
                    parser: (args_0: {
                        data: {
                            id?: string | null | undefined;
                            summary?: string | null | undefined;
                            title?: string | null | undefined;
                            tags?: string | string[] | undefined;
                            topics?: string | string[] | undefined;
                            subjects?: string | string[] | undefined;
                            sequentialKey?: string | null | undefined;
                            importantValues?: number[] | undefined;
                            created?: string | null | undefined;
                            updated?: string | null | undefined;
                            sequential?: number | null | undefined;
                            tableStyles?: {
                                math?: "base" | "lg" | "xl" | "small" | null | undefined;
                                expand?: boolean | null | undefined;
                                text?: "base" | "lg" | "xl" | "small" | null | undefined;
                                float?: "right" | "left" | null | undefined;
                                fullWidth?: boolean | null | undefined;
                                tableCenter?: boolean | null | undefined;
                                textCenter?: boolean | null | undefined;
                                headingCenter?: boolean | null | undefined;
                                noMax?: boolean | null | undefined;
                            } | undefined;
                        };
                        content: string;
                        appConfig: {
                            fsRoot: string;
                            noteTypes: {
                                fs: string;
                                label?: string | undefined;
                                icon?: string | undefined;
                                UI?: {
                                    styles: {
                                        dark: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                        light: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                    };
                                } | undefined;
                                id?: string | undefined;
                                docType?: string | undefined;
                                filePathPattern?: string | undefined;
                                matchWeight?: number | undefined;
                                url?: string | undefined;
                                urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                                keywords?: string[] | undefined;
                                topicLabel?: string | undefined;
                                subjectLabel?: string | undefined;
                                autoTag?: string[] | undefined;
                                autoTopic?: string[] | undefined;
                                autoSubject?: string[] | undefined;
                                inSidebar?: boolean | undefined;
                                inNavbar?: boolean | undefined;
                            }[];
                            code?: {
                                editor: {
                                    defaultLangauge: string;
                                    useVimMode: boolean;
                                };
                                theme: {
                                    dark: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                    light: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                };
                                syntaxHighlighting: {
                                    transformers: {
                                        regexHighlight: boolean;
                                        lineHighlight: boolean;
                                        lineFocus: boolean;
                                        lineErrorLevel: boolean;
                                        lineDiff: boolean;
                                    };
                                    defaultLanguage: {
                                        inline: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                        block: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                    };
                                };
                            } | undefined;
                            database?: {
                                storeFormatted: boolean;
                                removeIfNotPresentInFs: boolean;
                            } | undefined;
                            navigation?: {
                                navbarBreakpoint: {
                                    full: number;
                                    minimal: number;
                                };
                                maxResultLength: {
                                    snippets: number;
                                    searchAll: number;
                                    equations: number;
                                    categories: number;
                                };
                                navbarLinks: (string | {
                                    label: string;
                                    href?: string | undefined;
                                    icon?: string | undefined;
                                    onClick?: ((...args: unknown[]) => unknown) | undefined;
                                })[];
                                sidebarLinks: (string | {
                                    icon: string;
                                    label?: string | undefined;
                                    href?: string | undefined;
                                    Icon?: ((...args: unknown[]) => unknown) | undefined;
                                    onClick?: ((...args: unknown[]) => unknown) | undefined;
                                })[];
                            } | undefined;
                            terminal?: {
                                logLevel: "info" | "none" | "debug" | "verbose";
                            } | undefined;
                            jupyter?: {
                                execute: boolean;
                                environment: string;
                                syntaxHighlightTheme: string;
                                jupyterPort: number;
                                initiallyFoldCells: boolean;
                                kernel: string;
                                jupyterReactProps: {
                                    collaborative: boolean;
                                    lite: boolean;
                                    serverUrls?: {
                                        baseUrl?: string | undefined;
                                        wsUrl?: string | undefined;
                                    } | undefined;
                                };
                                nbConvert: {
                                    conversionTimeout: number;
                                    execute: boolean;
                                    nbConvertTemplate: string;
                                    notebookOutputDir: string;
                                    nbconvertPath?: string | undefined;
                                    customConversionFunction?: {
                                        pdf?: ((args_0: string, args_1: string, ...args: unknown[]) => string) | undefined;
                                    } | undefined;
                                };
                                jupyterNotebookProps: {
                                    readOnly: boolean;
                                    cellMetadataPanel: boolean;
                                    cellSidebarMargin: number;
                                    bundledIPyWidgets: {
                                        name: string;
                                        module: string | Record<string, string>;
                                        version: string;
                                    }[];
                                    externalIPyWidgets: {
                                        name: string;
                                        version: string;
                                    }[];
                                    nbgrader: boolean;
                                    height?: string | undefined;
                                    maxHeight?: string | undefined;
                                };
                                cellInputWrappers: Record<string, {
                                    prefix: string;
                                    suffix: string;
                                }>;
                                jupyterToken?: string | undefined;
                            } | undefined;
                            math?: {
                                latexPackages: string[] | "all";
                                constants: Record<string, number>;
                                latexFontUrl?: string | undefined;
                            } | undefined;
                            UI?: {
                                table: {
                                    maxHeight: string;
                                };
                                text: {
                                    blockQuoteItalic: boolean;
                                    fontPaths: "default" | {
                                        weight: "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900";
                                        path: string;
                                        style: "bold" | "italic" | "normal";
                                    }[];
                                };
                                media: {
                                    imageMap: Record<string, string | undefined>;
                                    includeDefaultImageMap: boolean;
                                    imageRemoteTest: string[];
                                };
                                theme: "ulld" | "red" | "orange" | "yellow" | "green" | "blue" | "rose" | "slate" | "gray" | "stone" | "zinc" | "neutral" | "violet";
                                colors: Record<string, {
                                    dark?: string | undefined;
                                    light?: string | undefined;
                                } | undefined>;
                                autoApplyMdxTitles: boolean;
                            } | undefined;
                            slots?: {
                                navigation?: any;
                                bibliography?: any;
                                math?: any;
                                snippets?: any;
                                dashboard?: any;
                                taskManager?: any;
                                UI?: any;
                                pdf?: any;
                                editor?: any;
                                form?: any;
                                commandPalette?: any;
                            } | undefined;
                            build?: {
                                database: {
                                    type: "postgres" | "sqlite";
                                    postgres: {
                                        connectionURI: string;
                                        port?: undefined;
                                        dbName?: undefined;
                                    } | {
                                        port: number;
                                        dbName: string;
                                        connectionURI?: undefined;
                                    };
                                    prioritize: "size" | "speed";
                                };
                                additionalUserContent: {
                                    css?: string | undefined;
                                    logo?: string | undefined;
                                    favicon?: string | undefined;
                                };
                            } | undefined;
                            autoTag?: {
                                tag?: string | undefined;
                                path?: string | undefined;
                            }[] | undefined;
                            autoTopic?: {
                                path?: string | undefined;
                                topic?: string | undefined;
                            }[] | undefined;
                            autoSubject?: {
                                path?: string | undefined;
                                subject?: string | undefined;
                            }[] | undefined;
                            alwaysPreferFs?: boolean | undefined;
                            ignoreFilepaths?: string[] | undefined;
                            tempDir?: string | undefined;
                            generatedDir?: string | undefined;
                            ignorePreferFsExtensions?: string[] | undefined;
                            fileTypePriority?: (".mdx" | ".ipynb" | ".csv" | ".tsv" | ".excel" | ".numpy" | ".html" | ".pickle" | ".db" | ".sql" | ".pdf" | ".json" | ".tex" | ".hdf5" | ".md")[] | undefined;
                            bibPath?: string | undefined;
                            cslPath?: string | undefined;
                            dateHandling?: {
                                enableAdvancedFormat: boolean;
                                format: {
                                    short: string;
                                    long: string;
                                    withTime: string;
                                    timeOnly: string;
                                };
                                defaultTimeDisplayType: "summarized" | "analog" | "descriptive";
                                defaultTimeZone?: string | undefined;
                            } | undefined;
                            linkAliases?: Record<string, string> | undefined;
                            plotting?: {
                                plotColorList: string[] | {
                                    dark: string[];
                                    light: string[];
                                };
                                plotColorCycleMethod: "inOrder" | "random";
                            } | undefined;
                            credentials?: {
                                googleServiceAccountJsonPath?: string | undefined;
                            } | undefined;
                            performance?: {
                                latexParsingDebounceTimeout: number;
                                mdxParsingDebounceTimeout: number;
                            } | undefined;
                            meta?: {
                                title: string;
                                desc?: string | undefined;
                            } | undefined;
                            plugins?: {
                                name: string;
                                version: string;
                                parserIndex: number;
                            }[] | undefined;
                        };
                        docTypeData?: {
                            id: string;
                            url: string;
                            docType: string;
                            label?: string | undefined;
                            keywords?: string[] | undefined;
                            icon?: string | undefined;
                            UI?: {
                                styles: {
                                    dark: {
                                        bg?: string | undefined;
                                        fg?: string | undefined;
                                    };
                                    light: {
                                        bg?: string | undefined;
                                        fg?: string | undefined;
                                    };
                                };
                            } | undefined;
                            fs?: string | undefined;
                            filePathPattern?: string | undefined;
                            matchWeight?: number | undefined;
                            urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                            topicLabel?: string | undefined;
                            subjectLabel?: string | undefined;
                            autoTag?: string[] | undefined;
                            autoTopic?: string[] | undefined;
                            autoSubject?: string[] | undefined;
                            inSidebar?: boolean | undefined;
                            inNavbar?: boolean | undefined;
                        } | {} | undefined;
                        serverClient?: any;
                        db?: {
                            id: number;
                            firstSync: string | Date;
                            bookmarked: boolean;
                            lastSync: string | Date;
                            sequentialKey?: string | null | undefined;
                            sequentialIndex?: number | null | undefined;
                            quickLink?: string | null | undefined;
                        } | undefined;
                    }, ...args: unknown[]) => Promise<{
                        tags: string[];
                        topics: string[];
                        subjects: string[];
                        importantValues: number[];
                        id?: string | null | undefined;
                        summary?: string | null | undefined;
                        title?: string | null | undefined;
                        sequentialKey?: string | null | undefined;
                        created?: string | null | undefined;
                        updated?: string | null | undefined;
                        sequential?: number | null | undefined;
                        tableStyles?: {
                            expand: boolean | null;
                            fullWidth: boolean | null;
                            tableCenter: boolean | null;
                            textCenter: boolean | null;
                            headingCenter: boolean | null;
                            noMax: boolean | null;
                            math?: "base" | "lg" | "xl" | "small" | null | undefined;
                            text?: "base" | "lg" | "xl" | "small" | null | undefined;
                            float?: "right" | "left" | null | undefined;
                        } | undefined;
                    } & Record<string, string | number | boolean | Record<string, string | number | boolean | null> | Record<string, Record<string, string | number | boolean | null>> | Record<string, string | number | boolean | null>[] | (string | number | boolean | null)[] | (string | number | boolean | null)[][] | null>>;
                    appConfig?: {
                        fsRoot: string;
                        noteTypes: {
                            fs: string;
                            label?: string | undefined;
                            icon?: string | undefined;
                            UI?: {
                                styles: {
                                    dark: {
                                        bg?: string | undefined;
                                        fg?: string | undefined;
                                    };
                                    light: {
                                        bg?: string | undefined;
                                        fg?: string | undefined;
                                    };
                                };
                            } | undefined;
                            id?: string | undefined;
                            docType?: string | undefined;
                            filePathPattern?: string | undefined;
                            matchWeight?: number | undefined;
                            url?: string | undefined;
                            urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                            keywords?: string[] | undefined;
                            topicLabel?: string | undefined;
                            subjectLabel?: string | undefined;
                            autoTag?: string[] | undefined;
                            autoTopic?: string[] | undefined;
                            autoSubject?: string[] | undefined;
                            inSidebar?: boolean | undefined;
                            inNavbar?: boolean | undefined;
                        }[];
                        code?: {
                            editor: {
                                defaultLangauge: string;
                                useVimMode: boolean;
                            };
                            theme: {
                                dark: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                light: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                            };
                            syntaxHighlighting: {
                                transformers: {
                                    regexHighlight: boolean;
                                    lineHighlight: boolean;
                                    lineFocus: boolean;
                                    lineErrorLevel: boolean;
                                    lineDiff: boolean;
                                };
                                defaultLanguage: {
                                    inline: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                    block: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                };
                            };
                        } | undefined;
                        database?: {
                            storeFormatted: boolean;
                            removeIfNotPresentInFs: boolean;
                        } | undefined;
                        navigation?: {
                            navbarBreakpoint: {
                                full: number;
                                minimal: number;
                            };
                            maxResultLength: {
                                snippets: number;
                                searchAll: number;
                                equations: number;
                                categories: number;
                            };
                            navbarLinks: (string | {
                                label: string;
                                href?: string | undefined;
                                icon?: string | undefined;
                                onClick?: ((...args: unknown[]) => unknown) | undefined;
                            })[];
                            sidebarLinks: (string | {
                                icon: string;
                                label?: string | undefined;
                                href?: string | undefined;
                                Icon?: ((...args: unknown[]) => unknown) | undefined;
                                onClick?: ((...args: unknown[]) => unknown) | undefined;
                            })[];
                        } | undefined;
                        terminal?: {
                            logLevel: "info" | "none" | "debug" | "verbose";
                        } | undefined;
                        jupyter?: {
                            execute: boolean;
                            environment: string;
                            syntaxHighlightTheme: string;
                            jupyterPort: number;
                            initiallyFoldCells: boolean;
                            kernel: string;
                            jupyterReactProps: {
                                collaborative: boolean;
                                lite: boolean;
                                serverUrls?: {
                                    baseUrl?: string | undefined;
                                    wsUrl?: string | undefined;
                                } | undefined;
                            };
                            nbConvert: {
                                conversionTimeout: number;
                                execute: boolean;
                                nbConvertTemplate: string;
                                notebookOutputDir: string;
                                nbconvertPath?: string | undefined;
                                customConversionFunction?: {
                                    pdf?: ((args_0: string, args_1: string, ...args: unknown[]) => string) | undefined;
                                } | undefined;
                            };
                            jupyterNotebookProps: {
                                readOnly: boolean;
                                cellMetadataPanel: boolean;
                                cellSidebarMargin: number;
                                bundledIPyWidgets: {
                                    name: string;
                                    module: string | Record<string, string>;
                                    version: string;
                                }[];
                                externalIPyWidgets: {
                                    name: string;
                                    version: string;
                                }[];
                                nbgrader: boolean;
                                height?: string | undefined;
                                maxHeight?: string | undefined;
                            };
                            cellInputWrappers: Record<string, {
                                prefix: string;
                                suffix: string;
                            }>;
                            jupyterToken?: string | undefined;
                        } | undefined;
                        math?: {
                            latexPackages: string[] | "all";
                            constants: Record<string, number>;
                            latexFontUrl?: string | undefined;
                        } | undefined;
                        UI?: {
                            table: {
                                maxHeight: string;
                            };
                            text: {
                                blockQuoteItalic: boolean;
                                fontPaths: "default" | {
                                    weight: "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900";
                                    path: string;
                                    style: "bold" | "italic" | "normal";
                                }[];
                            };
                            media: {
                                imageMap: Record<string, string | undefined>;
                                includeDefaultImageMap: boolean;
                                imageRemoteTest: string[];
                            };
                            theme: "ulld" | "red" | "orange" | "yellow" | "green" | "blue" | "rose" | "slate" | "gray" | "stone" | "zinc" | "neutral" | "violet";
                            colors: Record<string, {
                                dark?: string | undefined;
                                light?: string | undefined;
                            } | undefined>;
                            autoApplyMdxTitles: boolean;
                        } | undefined;
                        slots?: {
                            navigation?: any;
                            bibliography?: any;
                            math?: any;
                            snippets?: any;
                            dashboard?: any;
                            taskManager?: any;
                            UI?: any;
                            pdf?: any;
                            editor?: any;
                            form?: any;
                            commandPalette?: any;
                        } | undefined;
                        build?: {
                            database: {
                                type: "postgres" | "sqlite";
                                postgres: {
                                    connectionURI: string;
                                    port?: undefined;
                                    dbName?: undefined;
                                } | {
                                    port: number;
                                    dbName: string;
                                    connectionURI?: undefined;
                                };
                                prioritize: "size" | "speed";
                            };
                            additionalUserContent: {
                                css?: string | undefined;
                                logo?: string | undefined;
                                favicon?: string | undefined;
                            };
                        } | undefined;
                        autoTag?: {
                            tag?: string | undefined;
                            path?: string | undefined;
                        }[] | undefined;
                        autoTopic?: {
                            path?: string | undefined;
                            topic?: string | undefined;
                        }[] | undefined;
                        autoSubject?: {
                            path?: string | undefined;
                            subject?: string | undefined;
                        }[] | undefined;
                        alwaysPreferFs?: boolean | undefined;
                        ignoreFilepaths?: string[] | undefined;
                        tempDir?: string | undefined;
                        generatedDir?: string | undefined;
                        ignorePreferFsExtensions?: string[] | undefined;
                        fileTypePriority?: (".mdx" | ".ipynb" | ".csv" | ".tsv" | ".excel" | ".numpy" | ".html" | ".pickle" | ".db" | ".sql" | ".pdf" | ".json" | ".tex" | ".hdf5" | ".md")[] | undefined;
                        bibPath?: string | undefined;
                        cslPath?: string | undefined;
                        dateHandling?: {
                            enableAdvancedFormat: boolean;
                            format: {
                                short: string;
                                long: string;
                                withTime: string;
                                timeOnly: string;
                            };
                            defaultTimeDisplayType: "summarized" | "analog" | "descriptive";
                            defaultTimeZone?: string | undefined;
                        } | undefined;
                        linkAliases?: Record<string, string> | undefined;
                        plotting?: {
                            plotColorList: string[] | {
                                dark: string[];
                                light: string[];
                            };
                            plotColorCycleMethod: "inOrder" | "random";
                        } | undefined;
                        credentials?: {
                            googleServiceAccountJsonPath?: string | undefined;
                        } | undefined;
                        performance?: {
                            latexParsingDebounceTimeout: number;
                            mdxParsingDebounceTimeout: number;
                        } | undefined;
                        meta?: {
                            title: string;
                            desc?: string | undefined;
                        } | undefined;
                        plugins?: {
                            name: string;
                            version: string;
                            parserIndex: number;
                        }[] | undefined;
                    } | undefined;
                };
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, string>;
        compileMdxString: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                content: string;
                opts?: {
                    mathLabels?: "none" | "all" | "ams" | undefined;
                } | undefined;
            };
            _input_out: {
                content: string;
                opts: {
                    mathLabels: "none" | "all" | "ams";
                };
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, string>;
        streamMdxContent: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: string;
            _input_out: string;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, string>;
    }>;
}
declare module "schemas/filesystem/rootRelativePathSchema" {
    import { z } from "zod";
    export const getRootRelativePathSchema: (fsRoot: string) => z.ZodEffects<z.ZodString, string, string>;
}
declare module "trpcInternalMethods/filesystem/checkParsableFiletypesAtPath" {
    import { ParsedAppConfig } from "@ulld/configschema/types";
    export const checkParsableFiletypesAtPath: (p: string, fsRoot: string, _config?: ParsedAppConfig) => Promise<{
        ".csv": boolean;
        ".tsv": boolean;
        ".excel": boolean;
        ".numpy": boolean;
        ".html": boolean;
        ".pickle": boolean;
        ".db": boolean;
        ".sql": boolean;
        ".pdf": boolean;
        ".json": boolean;
        ".tex": boolean;
        ".hdf5": boolean;
        ".md": boolean;
        ".mdx": boolean;
        ".ipynb": boolean;
    }>;
}
declare module "trpcInternalMethods/filesystem/clearTempDir" {
    export const clearTempDir: () => Promise<void>;
}
declare module "trpc/routers/fsUtil" {
    export const fsUtilRouter: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
        ctx: object;
        meta: object;
        errorShape: import("@trpc/server").DefaultErrorShape;
        transformer: import("@trpc/server").DefaultDataTransformer;
    }>, {
        getParsableFiletypesAtPath: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: string;
            _input_out: string;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            ".csv": boolean;
            ".tsv": boolean;
            ".excel": boolean;
            ".numpy": boolean;
            ".html": boolean;
            ".pickle": boolean;
            ".db": boolean;
            ".sql": boolean;
            ".pdf": boolean;
            ".json": boolean;
            ".tex": boolean;
            ".hdf5": boolean;
            ".md": boolean;
            ".mdx": boolean;
            ".ipynb": boolean;
        }>;
        getAllRootRelativePathsOfFiletype: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: ".md" | ".mdx" | ".ipynb";
            _input_out: ".md" | ".mdx" | ".ipynb";
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, string[]>;
        clearTempDir: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _ctx_out: object;
            _input_in: typeof import("@trpc/server").unsetMarker;
            _input_out: typeof import("@trpc/server").unsetMarker;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
            _meta: object;
        }, void>;
        getUtf8File: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                rootRelativePath: string;
                useProcessRoot?: boolean | undefined;
            };
            _input_out: {
                rootRelativePath: string;
                useProcessRoot: boolean;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, string>;
    }>;
}
declare module "schemas/readingList/main" {
    import { z } from "zod";
    export const readingListContentTypeSchema: z.ZodUnion<[z.ZodLiteral<"MdxNote">, z.ZodLiteral<"BibEntry">]>;
}
declare module "trpc/routers/readingList" {
    export const readingListRouter: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
        ctx: object;
        meta: object;
        errorShape: import("@trpc/server").DefaultErrorShape;
        transformer: import("@trpc/server").DefaultDataTransformer;
    }>, {
        addToReadingList: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                type: "BibEntry" | "MdxNote";
                itemId: string | number;
                readingListName?: string | undefined;
            };
            _input_out: {
                type: "BibEntry" | "MdxNote";
                readingListName: string;
                itemId: string | number;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            name: string;
            description: string | null;
            createdAt: Date;
            lastUpdate: Date;
        }>;
        getReadingListContent: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: string;
            _input_out: string;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, ({
            bibEntries: ({
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                MdxNotes: {
                    id: number;
                    isProtected: boolean | null;
                    dietSummaryKey: string | null;
                    title: string;
                    latexTitle: string | null;
                    rootRelativePath: string;
                    noteType: string;
                    content: string;
                    formatted: string | null;
                    summary: string | null;
                    citationsListOrder: string[];
                    importantValues: number[];
                    imageSrc: string | null;
                    href: string;
                    sequentialKey: string | null;
                    sequentialIndex: number | null;
                    floatImages: boolean;
                    remoteUrl: string | null;
                    trackRemote: boolean;
                    outgoingQuickLinks: string[];
                    quickLink: string | null;
                    bookmarked: boolean;
                    firstSync: Date;
                    lastSync: Date;
                    lastAccess: Date;
                }[];
                citationGroups: {
                    name: string;
                    description: string | null;
                }[];
            } & {
                id: string;
                BibId: number | null;
                OwnWork: boolean;
                ColleaguesWork: boolean;
                read: boolean;
                htmlCitation: string | null;
                PdfPath: string | null;
                address: string | null;
                annote: string | null;
                author: string | null;
                booktitle: string | null;
                chapter: string | null;
                crossref: string | null;
                doi: string | null;
                edition: string | null;
                editor: string | null;
                email: string | null;
                howpublished: string | null;
                institution: string | null;
                journal: string | null;
                month: string | null;
                note: string | null;
                number: string | null;
                organization: string | null;
                pages: string | null;
                publisher: string | null;
                school: string | null;
                series: string | null;
                title: string | null;
                volume: string | null;
                type: string | null;
                year: string | null;
                numpages: string | null;
                url: string | null;
                issue: string | null;
                issn: string | null;
                abstract: string | null;
                urldate: string | null;
                keywords: string | null;
                copyright: string | null;
                createdAt: Date;
                lastAccess: Date;
            })[];
        } & {
            name: string;
            description: string | null;
            createdAt: Date;
            lastUpdate: Date;
        }) | null>;
    }>;
}
declare module "trpc/routers/universalNotes" {
    export const universalNoteRouter: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
        ctx: object;
        meta: object;
        errorShape: import("@trpc/server").DefaultErrorShape;
        transformer: import("@trpc/server").DefaultDataTransformer;
    }>, {
        getSummaryOfAllNotes: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _ctx_out: object;
            _input_in: typeof import("@trpc/server").unsetMarker;
            _input_out: typeof import("@trpc/server").unsetMarker;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
            _meta: object;
        }, {
            summary: string | null;
            title: string;
            tags: {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
            subjects: {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
            _count: {
                topics: number;
                subjects: number;
                tags: number;
                citations: number;
                sequentialList: number;
                ReadingList: number;
                equations: number;
                definitions: number;
                toDo: number;
            };
        }[]>;
        getNoteIdByHref: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: string;
            _input_out: string;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, number | null>;
        getFsNoteOfUnknownFormat: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: string;
            _input_out: string;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            content: string;
            format: string;
        } | undefined>;
        getQuickLinkHref: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: string;
            _input_out: string;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            href: string;
        } | null>;
        getUniqueNoteTypes: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _ctx_out: object;
            _input_in: typeof import("@trpc/server").unsetMarker;
            _input_out: typeof import("@trpc/server").unsetMarker;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
            _meta: object;
        }, string[]>;
        getCategoryNoteCount: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: string;
            _input_out: string;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, number>;
        getUserOverview: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _ctx_out: object;
            _input_in: typeof import("@trpc/server").unsetMarker;
            _input_out: typeof import("@trpc/server").unsetMarker;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
            _meta: object;
        }, {
            overallFirstSync: Date | undefined;
            totalNotes: {
                mdx: number;
                notebook: number;
                total: number;
            };
            uniqueNoteTypes: string[];
            lastAccessNotes: ({
                type: "mdxNote";
                id: number;
                href: string;
                title: string;
                noteType: string;
                lastAccess: Date;
                firstSync: Date;
                lastSync: Date;
            } | {
                type: "notebook";
                id: number;
                href: string;
                title: string;
                lastAccess: Date;
                firstSync: Date;
                lastSync: Date;
            })[];
        }>;
    }>;
}
declare module "trpc/routers/media/mediaRouter" {
    export const mediaRouter: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
        ctx: object;
        meta: object;
        errorShape: import("@trpc/server").DefaultErrorShape;
        transformer: import("@trpc/server").DefaultDataTransformer;
    }>, {
        getImagesInDir: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                ignore?: string | string[] | null | undefined;
                returnAs?: "absolute" | "rootRelative" | undefined;
                includeSvg?: boolean | undefined;
            };
            _input_out: {
                returnAs: "absolute" | "rootRelative";
                includeSvg: boolean;
                ignore?: string | string[] | null | undefined;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, any>;
        removeImageBackground: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                absolutePath: string;
                config?: {
                    output?: "x-alpha8" | "x-rgba8" | "png" | "jpeg" | "webp" | undefined;
                    quality?: number | undefined;
                    model?: "small" | "medium" | "large" | undefined;
                } | undefined;
            };
            _input_out: {
                absolutePath: string;
                config: {
                    output: "x-alpha8" | "x-rgba8" | "png" | "jpeg" | "webp";
                    quality: number;
                    model: "small" | "medium" | "large";
                };
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, string>;
        getRandomBackgroundSettings: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _ctx_out: object;
            _input_in: typeof import("@trpc/server").unsetMarker;
            _input_out: typeof import("@trpc/server").unsetMarker;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
            _meta: object;
        }, {
            path?: string | undefined;
            createdAt?: Date | undefined;
            landingImageAlign?: import(".prisma/client").$Enums.ImageAlignment | undefined;
            lockedLandingImage?: string | null | undefined;
        }>;
        deleteRandomImage: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                path: string;
            };
            _input_out: {
                path: string;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            path: string;
            createdAt: Date;
        }>;
        updateRandomImageBackground: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                path: string;
            };
            _input_out: {
                path: string;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            path: string;
            createdAt: Date;
        }>;
    }>;
}
declare module "schemas/qaItem/main" {
    import { z } from "zod";
    import { serverClient } from "trpc/serverClient";
    export const qaInputSchema: z.ZodObject<{
        question: z.ZodString;
        answer: z.ZodString;
        description: z.ZodString;
        tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        topics: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        subjects: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        id: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        tags: string[];
        topics: string[];
        subjects: string[];
        description: string;
        question: string;
        answer: string;
        id?: string | undefined;
    }, {
        description: string;
        question: string;
        answer: string;
        id?: string | undefined;
        tags?: string[] | undefined;
        topics?: string[] | undefined;
        subjects?: string[] | undefined;
    }>;
    export const qaInputSchemaTrpc: z.ZodObject<z.objectUtil.extendShape<{
        question: z.ZodString;
        answer: z.ZodString;
        description: z.ZodString;
        tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        topics: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        subjects: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        id: z.ZodOptional<z.ZodString>;
    }, {
        question: z.ZodString;
        answer: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
    }>, "strip", z.ZodTypeAny, {
        tags: string[];
        topics: string[];
        subjects: string[];
        question: string;
        answer: string;
        id?: string | undefined;
        description?: string | undefined;
    }, {
        question: string;
        answer: string;
        id?: string | undefined;
        tags?: string[] | undefined;
        topics?: string[] | undefined;
        subjects?: string[] | undefined;
        description?: string | undefined;
    }>;
    export type QAPairInput = z.input<typeof qaInputSchema>;
    export type QAPairOutput = z.output<typeof qaInputSchema>;
    export type FlipCardReturnItem = Awaited<ReturnType<typeof serverClient.qa.getSpecificQA>>;
}
declare module "trpcInternalMethods/qaItem/saveQaItem" {
    import type { qaInputSchemaTrpc } from "schemas/qaItem/main";
    import { output } from 'zod';
    export const saveQaItem: (v: output<typeof qaInputSchemaTrpc>) => Promise<{
        id: string;
        question: string;
        answer: string;
        description: string | null;
        secondaryLabel: string | null;
        correctCount: number;
        inCorrectCount: number;
    }>;
}
declare module "trpc/routers/qa" {
    export const qaRouter: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
        ctx: object;
        meta: object;
        errorShape: import("@trpc/server").DefaultErrorShape;
        transformer: import("@trpc/server").DefaultDataTransformer;
    }>, {
        saveQA: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                question: string;
                answer: string;
                id?: string | undefined;
                tags?: string[] | undefined;
                topics?: string[] | undefined;
                subjects?: string[] | undefined;
                description?: string | undefined;
            };
            _input_out: {
                tags: string[];
                topics: string[];
                subjects: string[];
                question: string;
                answer: string;
                id?: string | undefined;
                description?: string | undefined;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            id: string;
            question: string;
            answer: string;
            description: string | null;
            secondaryLabel: string | null;
            correctCount: number;
            inCorrectCount: number;
        }>;
        getSpecificQA: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: string;
            _input_out: string;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, ({
            tags: {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
            topics: {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
            subjects: {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
        } & {
            id: string;
            question: string;
            answer: string;
            description: string | null;
            secondaryLabel: string | null;
            correctCount: number;
            inCorrectCount: number;
        }) | null>;
        addQAResult: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                success: boolean;
                id: string;
            };
            _input_out: {
                success: boolean;
                id: string;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            id: string;
            question: string;
            answer: string;
            description: string | null;
            secondaryLabel: string | null;
            correctCount: number;
            inCorrectCount: number;
        } | undefined>;
        getQaAutocompleteOptions: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _ctx_out: object;
            _input_in: typeof import("@trpc/server").unsetMarker;
            _input_out: typeof import("@trpc/server").unsetMarker;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
            _meta: object;
        }, string[]>;
        getQaExam: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                tags?: string[] | undefined;
                topics?: string[] | undefined;
                subjects?: string[] | undefined;
            };
            _input_out: {
                tags?: string[] | undefined;
                topics?: string[] | undefined;
                subjects?: string[] | undefined;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, ({
            id: string;
            question: string;
            answer: string;
            description: string | null;
            secondaryLabel: string | null;
            correctCount: number;
            inCorrectCount: number;
        } & {
            randomId: number;
        })[]>;
    }>;
}
declare module "trpc/routers/beta" {
    export const betaRouter: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
        ctx: object;
        meta: object;
        errorShape: import("@trpc/server").DefaultErrorShape;
        transformer: import("@trpc/server").DefaultDataTransformer;
    }>, {
        parseMdxString: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                content: string;
            };
            _input_out: {
                content: string;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, string>;
    }>;
}
declare module "plugins/native/todo/zod/general" {
    import { z } from "zod";
    export const addTodoListSchema: z.ZodObject<z.objectUtil.extendShape<{
        label: z.ZodString;
    }, {
        tags: z.ZodArray<z.ZodString, "many">;
        subjects: z.ZodArray<z.ZodString, "many">;
        topics: z.ZodArray<z.ZodString, "many">;
    }>, "strip", z.ZodTypeAny, {
        label: string;
        tags: string[];
        topics: string[];
        subjects: string[];
    }, {
        label: string;
        tags: string[];
        topics: string[];
        subjects: string[];
    }>;
    export type AddToDoListSchema = z.infer<typeof addTodoListSchema>;
    export const todoFilterFormSchema: z.ZodObject<{
        priority: z.ZodEffects<z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodArray<z.ZodNumber, "many">]>>, number[] | undefined, number | number[] | undefined>;
        status: z.ZodDefault<z.ZodString>;
        listNames: z.ZodRecord<z.ZodString, z.ZodDefault<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        status: string;
        listNames: Record<string, boolean>;
        priority?: number[] | undefined;
    }, {
        listNames: Record<string, boolean | undefined>;
        status?: string | undefined;
        priority?: number | number[] | undefined;
    }>;
    export type TodoFilterFormSchema = z.infer<typeof todoFilterFormSchema>;
    export const todoListAddTaskSchema: z.ZodObject<z.objectUtil.extendShape<{
        listName: z.ZodString;
    }, {
        task: z.ZodString;
        priority: z.ZodDefault<z.ZodNumber>;
        status: z.ZodDefault<z.ZodString>;
        dueAt: z.ZodNullable<z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodDate]>, Date, string | Date>>>;
        details: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }>, "strip", z.ZodTypeAny, {
        status: string;
        task: string;
        priority: number;
        listName: string;
        dueAt?: Date | null | undefined;
        details?: string | null | undefined;
    }, {
        task: string;
        listName: string;
        status?: string | undefined;
        dueAt?: string | Date | null | undefined;
        details?: string | null | undefined;
        priority?: number | undefined;
    }>;
    export const todoListAddTaskSchemaTrpc: z.ZodObject<z.objectUtil.extendShape<{
        listId: z.ZodNumber;
    }, {
        task: z.ZodString;
        priority: z.ZodDefault<z.ZodNumber>;
        status: z.ZodDefault<z.ZodString>;
        dueAt: z.ZodNullable<z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodDate]>, Date, string | Date>>>;
        details: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }>, "strip", z.ZodTypeAny, {
        status: string;
        task: string;
        priority: number;
        listId: number;
        dueAt?: Date | null | undefined;
        details?: string | null | undefined;
    }, {
        task: string;
        listId: number;
        status?: string | undefined;
        dueAt?: string | Date | null | undefined;
        details?: string | null | undefined;
        priority?: number | undefined;
    }>;
    export const updateTaskSchema: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodNumber;
    }, {
        task: z.ZodString;
        priority: z.ZodDefault<z.ZodNumber>;
        status: z.ZodDefault<z.ZodString>;
        dueAt: z.ZodNullable<z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodDate]>, Date, string | Date>>>;
        details: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }>, "strip", z.ZodTypeAny, {
        id: number;
        status: string;
        task: string;
        priority: number;
        dueAt?: Date | null | undefined;
        details?: string | null | undefined;
    }, {
        id: number;
        task: string;
        status?: string | undefined;
        dueAt?: string | Date | null | undefined;
        details?: string | null | undefined;
        priority?: number | undefined;
    }>;
    export const fullTaskSchema: z.ZodObject<{
        id: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
        task: z.ZodString;
        dueAt: z.ZodNullable<z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodDate]>, Date, string | Date>>>;
        details: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        status: z.ZodDefault<z.ZodString>;
        priority: z.ZodDefault<z.ZodNumber>;
        category: z.ZodNullable<z.ZodOptional<z.ZodNativeEnum<{
            bug: "bug";
            feature: "feature";
            documentation: "documentation";
            online: "online";
            priority: "priority";
            urgent: "urgent";
            work: "work";
            gym: "gym";
            freetime: "freetime";
            study: "study";
            research: "research";
            paper: "paper";
        }>>>;
        toDoListId: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
        created: z.ZodNullable<z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodDate]>, Date, string | Date>>>;
    }, "strip", z.ZodTypeAny, {
        status: string;
        task: string;
        priority: number;
        id?: number | null | undefined;
        created?: Date | null | undefined;
        dueAt?: Date | null | undefined;
        details?: string | null | undefined;
        category?: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper" | null | undefined;
        toDoListId?: number | null | undefined;
    }, {
        task: string;
        id?: number | null | undefined;
        status?: string | undefined;
        created?: string | Date | null | undefined;
        dueAt?: string | Date | null | undefined;
        details?: string | null | undefined;
        category?: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper" | null | undefined;
        priority?: number | undefined;
        toDoListId?: number | null | undefined;
    }>;
    export type ToDoListAddTaskSchema = z.infer<typeof todoListAddTaskSchema>;
}
declare module "trpc/routers/taskManager/taskManagerRouter" {
    import { Prisma } from "@ulld/database";
    export const todoPageTaskSelect: Prisma.ToDoListSelect;
    export const toDoRouter: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
        ctx: object;
        meta: object;
        errorShape: import("@trpc/server").DefaultErrorShape;
        transformer: import("@trpc/server").DefaultDataTransformer;
    }>, {
        getToDoLists: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: number | undefined;
            _input_out: number | undefined;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            id: number;
            label: string;
            active: boolean;
        } | {
            id: number;
            label: string;
            active: boolean;
        }[]>;
        getToDoListById: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: number;
            _input_out: number;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, ({
            tags: {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
            topics: {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
            subjects: {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
        } & {
            id: number;
            label: string;
            createdAt: Date;
            lastUpdate: Date;
            lastAccess: Date;
        }) | null>;
        getToDos: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                listIds?: string | number | string[] | number[] | undefined;
                showCompleted?: string | boolean | undefined;
            };
            _input_out: {
                showCompleted: boolean;
                listIds?: number[] | undefined;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            todos: {
                topic: {
                    value: string;
                }[];
                subject: {
                    value: string;
                }[];
                id: number;
                label: string;
                tags: ({
                    value: string;
                    kanbanId?: number | null | undefined;
                } | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[];
                _count: {
                    topic: number;
                    subject: number;
                    tags: number;
                    tasks: number;
                };
                tasks: {
                    id: number;
                    bookmarked: boolean;
                    status: string;
                    task: string;
                    priority: number;
                    createdAt?: any;
                    dueAt?: any;
                    details?: string | null | undefined;
                    parentId?: number | null | undefined;
                    category?: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper" | null | undefined;
                    toDoListId?: number | null | undefined;
                    completedOn?: any;
                }[];
                createdAt?: any;
                lastUpdate?: any;
            }[];
            lists: {
                id: number;
                label: string;
                active: boolean;
            }[];
        }>;
        setToDoStatus: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                status: string;
                taskIds: number[];
            };
            _input_out: {
                status: string;
                taskIds: number[];
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, Prisma.BatchPayload>;
        findListsByTaggables: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                tags?: string[] | undefined;
                topics?: string[] | undefined;
                subjects?: string[] | undefined;
            };
            _input_out: {
                tags: string[];
                topics: string[];
                subjects: string[];
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            createdAt: string;
            tasks: {
                dueAt: string | null;
                createdAt: string;
                details: string | null;
                category: import(".prisma/client").$Enums.TaskCategory | null;
            }[];
            id: number;
            label: string;
            _count: {
                tasks: number;
            };
        }[]>;
        getOverdueTasksByListId: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: number;
            _input_out: number;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            _count: {
                tasks: number;
            };
            tasks: {
                id: number;
                createdAt: Date;
                task: string;
                dueAt: Date | null;
                details: string | null;
                parentId: number | null;
                category: import(".prisma/client").$Enums.TaskCategory | null;
                bookmarked: boolean;
                status: string;
                priority: number;
                toDoListId: number | null;
                completedOn: Date | null;
            }[];
        } | null>;
        getOverdueTaskCount: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _ctx_out: object;
            _input_in: typeof import("@trpc/server").unsetMarker;
            _input_out: typeof import("@trpc/server").unsetMarker;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
            _meta: object;
        }, number>;
        getOverdueTasks: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _ctx_out: object;
            _input_in: typeof import("@trpc/server").unsetMarker;
            _input_out: typeof import("@trpc/server").unsetMarker;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
            _meta: object;
        }, {
            id: number;
            createdAt: Date;
            task: string;
            dueAt: Date | null;
            details: string | null;
            parentId: number | null;
            category: import(".prisma/client").$Enums.TaskCategory | null;
            bookmarked: boolean;
            status: string;
            priority: number;
            toDoListId: number | null;
            completedOn: Date | null;
        }[]>;
        setToDoDueDate: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                dueAt: string | Date | null;
                taskIds: number[];
            };
            _input_out: {
                dueAt: Date | null;
                taskIds: number[];
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, Prisma.BatchPayload>;
        setToDoList: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                taskId: number;
                listId: number;
            };
            _input_out: {
                taskId: number;
                listId: number;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, Prisma.BatchPayload>;
        deleteTaskByIds: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: string | number | string[] | number[] | undefined;
            _input_out: number[];
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, Prisma.BatchPayload>;
        toggleToDoBookmark: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                taskId: number;
                shouldBookmark?: boolean | undefined;
            };
            _input_out: {
                taskId: number;
                shouldBookmark?: boolean | undefined;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, Prisma.BatchPayload>;
        setToDoPriority: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                priority: number;
                taskIds: number[];
            };
            _input_out: {
                priority: number;
                taskIds: number[];
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, Prisma.BatchPayload>;
        getToDoDetails: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                toDoId: number;
            };
            _input_out: {
                toDoId: number;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, ({
            tags: {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
            topics: {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
        } & {
            id: number;
            createdAt: Date;
            task: string;
            dueAt: Date | null;
            details: string | null;
            parentId: number | null;
            category: import(".prisma/client").$Enums.TaskCategory | null;
            bookmarked: boolean;
            status: string;
            priority: number;
            toDoListId: number | null;
            completedOn: Date | null;
        }) | null>;
        createNewTodoList: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                label: string;
                tags: string[];
                topics: string[];
                subjects: string[];
            };
            _input_out: {
                label: string;
                tags: string[];
                topics: string[];
                subjects: string[];
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            id: number;
            label: string;
            createdAt: Date;
            lastUpdate: Date;
            lastAccess: Date;
        } | {
            errorKey: "toDoListExists";
        }>;
        createNewToDo: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                task: string;
                listId: number;
                status?: string | undefined;
                dueAt?: string | Date | null | undefined;
                details?: string | null | undefined;
                priority?: number | undefined;
            };
            _input_out: {
                status: string;
                task: string;
                priority: number;
                listId: number;
                dueAt?: Date | null | undefined;
                details?: string | null | undefined;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            id: number;
            label: string;
            createdAt: Date;
            lastUpdate: Date;
            lastAccess: Date;
        }>;
        deleteToDos: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: number[];
            _input_out: number[];
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, Prisma.BatchPayload>;
        editTaskNote: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                note: string | null;
                taskId: number;
            };
            _input_out: {
                note: string | null;
                taskId: number;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            id: number;
            createdAt: Date;
            task: string;
            dueAt: Date | null;
            details: string | null;
            parentId: number | null;
            category: import(".prisma/client").$Enums.TaskCategory | null;
            bookmarked: boolean;
            status: string;
            priority: number;
            toDoListId: number | null;
            completedOn: Date | null;
        }>;
        getMostRecentToDoListId: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _ctx_out: object;
            _input_in: typeof import("@trpc/server").unsetMarker;
            _input_out: typeof import("@trpc/server").unsetMarker;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
            _meta: object;
        }, {
            id: number;
        }[]>;
        markCompleted: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                taskIds: number[];
            };
            _input_out: {
                taskIds: number[];
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, void>;
        updateTask: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                id: number;
                task: string;
                status?: string | undefined;
                dueAt?: string | Date | null | undefined;
                details?: string | null | undefined;
                priority?: number | undefined;
            };
            _input_out: {
                id: number;
                status: string;
                task: string;
                priority: number;
                dueAt?: Date | null | undefined;
                details?: string | null | undefined;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            ToDoList: {
                id: number;
            } | null;
        }>;
        archiveTasks: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: number[];
            _input_out: number[];
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, Prisma.BatchPayload>;
        getTaskLists: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _ctx_out: object;
            _input_in: typeof import("@trpc/server").unsetMarker;
            _input_out: typeof import("@trpc/server").unsetMarker;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
            _meta: object;
        }, {
            id: number;
            label: string;
            lastUpdate: Date;
        }[]>;
        getTasksByCompletionDate: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                start?: Date | undefined;
                stop?: Date | undefined;
            } | undefined;
            _input_out: {
                stop: Date;
                start?: Date | undefined;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, void>;
        getTaskManagerOverview: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _ctx_out: object;
            _input_in: typeof import("@trpc/server").unsetMarker;
            _input_out: typeof import("@trpc/server").unsetMarker;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
            _meta: object;
        }, {
            tasks: {
                id: number;
                createdAt: Date;
                status: string;
                dueAt: Date | null;
                toDoListId: number | null;
                completedOn: Date | null;
            }[];
            taskLists: {
                id: number;
                label: string;
                createdAt: Date;
                _count: {
                    tasks: number;
                    tags: number;
                    topics: number;
                    subjects: number;
                };
            }[];
            overdueCount: number;
        }>;
    }>;
}
declare module "trpc/routers/equations/addEquation" {
    import { z } from "zod";
    export const addEquationSchema: z.ZodObject<{
        id: z.ZodOptional<z.ZodNumber>;
        title: z.ZodString;
        desc: z.ZodOptional<z.ZodString>;
        content: z.ZodString;
        equationId: z.ZodOptional<z.ZodString>;
        asPython: z.ZodOptional<z.ZodString>;
        tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        tagInput: z.ZodString;
        relatedValues: z.ZodOptional<z.ZodArray<z.ZodObject<{
            input: z.ZodRecord<z.ZodString, z.ZodNumber>;
            output: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            input: Record<string, number>;
            output: number;
        }, {
            input: Record<string, number>;
            output: number;
        }>, "many">>;
        variables: z.ZodArray<z.ZodString, "many">;
        variableInput: z.ZodString;
        keywords: z.ZodArray<z.ZodString, "many">;
        keywordInput: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        title: string;
        content: string;
        tags: string[];
        variables: string[];
        keywords: string[];
        tagInput: string;
        variableInput: string;
        keywordInput: string;
        id?: number | undefined;
        relatedValues?: {
            input: Record<string, number>;
            output: number;
        }[] | undefined;
        equationId?: string | undefined;
        desc?: string | undefined;
        asPython?: string | undefined;
    }, {
        title: string;
        content: string;
        variables: string[];
        keywords: string[];
        tagInput: string;
        variableInput: string;
        keywordInput: string;
        id?: number | undefined;
        tags?: string[] | undefined;
        relatedValues?: {
            input: Record<string, number>;
            output: number;
        }[] | undefined;
        equationId?: string | undefined;
        desc?: string | undefined;
        asPython?: string | undefined;
    }>;
}
declare module "trpc/routers/equations/equationItemSchema" {
    import { z } from 'zod';
    export const equationItemSchema: z.ZodObject<{
        id: z.ZodNumber;
        equationId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        title: z.ZodEffects<z.ZodString, string | null | undefined, string>;
        desc: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | null | undefined, string | null | undefined>;
        content: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string | null | undefined, string>;
        asPython: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        variables: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        tags: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            value: z.ZodString;
            kanbanId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull, z.ZodUndefined]>>;
        }, "strip", z.ZodTypeAny, {
            value: string;
            kanbanId?: number | null | undefined;
        }, {
            value: string;
            kanbanId?: number | null | undefined;
        }>, z.ZodEffects<z.ZodString, {
            value: string;
            kanbanId?: number | null | undefined;
        }, string>]>, "many">;
        subjects: z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">;
        topics: z.ZodArray<z.ZodObject<{
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: string;
        }, {
            value: string;
        }>, "many">;
        createdAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodDate]>>>, string | Date | null | undefined, string | Date | null | undefined>;
    }, "strip", z.ZodTypeAny, {
        id: number;
        tags: ({
            value: string;
            kanbanId?: number | null | undefined;
        } | {
            value: string;
            kanbanId?: number | null | undefined;
        })[];
        variables: string[];
        topics: {
            value: string;
        }[];
        subjects: {
            value: string;
        }[];
        title?: string | null | undefined;
        content?: string | null | undefined;
        equationId?: string | null | undefined;
        desc?: string | null | undefined;
        asPython?: string | null | undefined;
        createdAt?: string | Date | null | undefined;
    }, {
        id: number;
        title: string;
        content: string;
        tags: (string | {
            value: string;
            kanbanId?: number | null | undefined;
        })[];
        topics: {
            value: string;
        }[];
        subjects: {
            value: string;
        }[];
        equationId?: string | null | undefined;
        desc?: string | null | undefined;
        asPython?: string | null | undefined;
        variables?: string[] | undefined;
        createdAt?: string | Date | null | undefined;
    }>;
}
declare module "trpc/routers/equations/equationsRouter" {
    const equationsRouter: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
        ctx: object;
        meta: object;
        errorShape: import("@trpc/server").DefaultErrorShape;
        transformer: import("@trpc/server").DefaultDataTransformer;
    }>, {
        getEquationById: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                id?: number | undefined;
                equationId?: string | undefined;
            };
            _input_out: {
                id?: number | undefined;
                equationId?: string | undefined;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            id: number;
            title: string;
            content: string;
            tags: {
                value: string;
            }[];
            relatedValues: {
                input: unknown;
                output: number;
            }[];
            equationId: string | null;
            desc: string | null;
            asPython: string | null;
            variables: string[];
            keywords: string[];
        } | null>;
        getParsedEquationById: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                id: number;
                title: {
                    options: {
                        width?: number | undefined;
                        container?: boolean | undefined;
                        em?: number | undefined;
                        ex?: number | undefined;
                        inline?: boolean | undefined;
                        styles?: boolean | undefined;
                        fontCache?: boolean | undefined;
                        assistiveMml?: boolean | undefined;
                        autoWrap?: boolean | undefined;
                        matchFontHeight?: boolean | undefined;
                    };
                    appendStylesToId?: string | undefined;
                    appendStylesToClass?: string | undefined;
                };
                content: {
                    options: {
                        width?: number | undefined;
                        container?: boolean | undefined;
                        em?: number | undefined;
                        ex?: number | undefined;
                        inline?: boolean | undefined;
                        styles?: boolean | undefined;
                        fontCache?: boolean | undefined;
                        assistiveMml?: boolean | undefined;
                        autoWrap?: boolean | undefined;
                        matchFontHeight?: boolean | undefined;
                    };
                    appendStylesToId?: string | undefined;
                    appendStylesToClass?: string | undefined;
                };
                desc: {
                    options: {
                        width?: number | undefined;
                        container?: boolean | undefined;
                        em?: number | undefined;
                        ex?: number | undefined;
                        inline?: boolean | undefined;
                        styles?: boolean | undefined;
                        fontCache?: boolean | undefined;
                        assistiveMml?: boolean | undefined;
                        autoWrap?: boolean | undefined;
                        matchFontHeight?: boolean | undefined;
                    };
                    appendStylesToId?: string | undefined;
                    appendStylesToClass?: string | undefined;
                };
                equationId?: string | undefined;
            };
            _input_out: {
                id: number;
                title: {
                    options: {
                        width?: number | undefined;
                        container?: boolean | undefined;
                        em?: number | undefined;
                        ex?: number | undefined;
                        inline?: boolean | undefined;
                        styles?: boolean | undefined;
                        fontCache?: boolean | undefined;
                        assistiveMml?: boolean | undefined;
                        autoWrap?: boolean | undefined;
                        matchFontHeight?: boolean | undefined;
                    };
                    appendStylesToId?: string | undefined;
                    appendStylesToClass?: string | undefined;
                };
                content: {
                    options: {
                        width?: number | undefined;
                        container?: boolean | undefined;
                        em?: number | undefined;
                        ex?: number | undefined;
                        inline?: boolean | undefined;
                        styles?: boolean | undefined;
                        fontCache?: boolean | undefined;
                        assistiveMml?: boolean | undefined;
                        autoWrap?: boolean | undefined;
                        matchFontHeight?: boolean | undefined;
                    };
                    appendStylesToId?: string | undefined;
                    appendStylesToClass?: string | undefined;
                };
                desc: {
                    options: {
                        width?: number | undefined;
                        container?: boolean | undefined;
                        em?: number | undefined;
                        ex?: number | undefined;
                        inline?: boolean | undefined;
                        styles?: boolean | undefined;
                        fontCache?: boolean | undefined;
                        assistiveMml?: boolean | undefined;
                        autoWrap?: boolean | undefined;
                        matchFontHeight?: boolean | undefined;
                    };
                    appendStylesToId?: string | undefined;
                    appendStylesToClass?: string | undefined;
                };
                equationId?: string | undefined;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            id: number;
            tags: ({
                value: string;
                kanbanId?: number | null | undefined;
            } | {
                value: string;
                kanbanId?: number | null | undefined;
            })[];
            variables: string[];
            topics: {
                value: string;
            }[];
            subjects: {
                value: string;
            }[];
            title?: string | null | undefined;
            content?: string | null | undefined;
            equationId?: string | null | undefined;
            desc?: string | null | undefined;
            asPython?: string | null | undefined;
            createdAt?: string | Date | null | undefined;
        }>;
        getEquationEmbedProps: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                equationId: string;
            };
            _input_out: {
                equationId: string;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            rawLatex: string;
            id: number;
            tags: ({
                value: string;
                kanbanId?: number | null | undefined;
            } | {
                value: string;
                kanbanId?: number | null | undefined;
            })[];
            variables: string[];
            topics: {
                value: string;
            }[];
            subjects: {
                value: string;
            }[];
            title?: string | null | undefined;
            content?: string | null | undefined;
            equationId?: string | null | undefined;
            desc?: string | null | undefined;
            asPython?: string | null | undefined;
            createdAt?: string | Date | null | undefined;
        }>;
        deleteEquationById: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: number;
            _input_out: number;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            id: number;
            equationId: string | null;
            title: string;
            desc: string | null;
            content: string;
            asPython: string | null;
            variableLegend: unknown;
            variables: string[];
            keywords: string[];
            createdAt: Date;
            lastAccess: Date;
        }>;
        getEquationsList: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                orderBy: "title" | "createdAt";
                value?: string | undefined;
                tags?: string | string[] | undefined;
                query?: string | undefined;
                take?: number | undefined;
                variables?: string | string[] | undefined;
                page?: number | undefined;
                sortDir?: "desc" | "asc" | undefined;
            };
            _input_out: {
                tags: any[];
                orderBy: "title" | "createdAt";
                take: number;
                variables: any[];
                page: number;
                sortDir: "desc" | "asc";
                value?: string | undefined;
                query?: string | undefined;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            equations: {
                id: number;
                equationId: string | null;
                title: string;
                desc: string | null;
                content: string;
                asPython: string | null;
                variableLegend: unknown;
                variables: string[];
                keywords: string[];
                createdAt: Date;
                lastAccess: Date;
            }[];
            tags: string[];
            variables: string[];
        }>;
        addEquation: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                title: string;
                content: string;
                variables: string[];
                keywords: string[];
                tagInput: string;
                variableInput: string;
                keywordInput: string;
                id?: number | undefined;
                tags?: string[] | undefined;
                relatedValues?: {
                    input: Record<string, number>;
                    output: number;
                }[] | undefined;
                equationId?: string | undefined;
                desc?: string | undefined;
                asPython?: string | undefined;
            };
            _input_out: {
                title: string;
                content: string;
                tags: string[];
                variables: string[];
                keywords: string[];
                tagInput: string;
                variableInput: string;
                keywordInput: string;
                id?: number | undefined;
                relatedValues?: {
                    input: Record<string, number>;
                    output: number;
                }[] | undefined;
                equationId?: string | undefined;
                desc?: string | undefined;
                asPython?: string | undefined;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            id: number;
            equationId: string | null;
            title: string;
            desc: string | null;
            content: string;
            asPython: string | null;
            variableLegend: unknown;
            variables: string[];
            keywords: string[];
            createdAt: Date;
            lastAccess: Date;
        }>;
        mathStringArrayToLatex: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                content: string[];
                options: {
                    inline?: boolean | undefined;
                };
            };
            _input_out: {
                content: string[];
                options: {
                    inline?: boolean | undefined;
                };
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            content: string;
        }[]>;
        getIdFromEquationId: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: string;
            _input_out: string;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            id: number;
        } | null>;
    }>;
    export default equationsRouter;
}
declare module "trpc/routers/kanban/kanbanRouter" {
    import { z } from "zod";
    export const createKanBanFormDataSchema: z.ZodObject<{
        title: z.ZodString;
        subjects: z.ZodArray<z.ZodString, "many">;
        topics: z.ZodArray<z.ZodString, "many">;
        tags: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        title: string;
        tags: string[];
        topics: string[];
        subjects: string[];
    }, {
        title: string;
        tags: string[];
        topics: string[];
        subjects: string[];
    }>;
    export const createKanBanSchemaInputs: z.ZodObject<{
        subjectInput: z.ZodString;
        topicInput: z.ZodString;
        tagInput: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        tagInput: string;
        topicInput: string;
        subjectInput: string;
    }, {
        tagInput: string;
        topicInput: string;
        subjectInput: string;
    }>;
    export const kanBanBoardsRouter: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
        ctx: object;
        meta: object;
        errorShape: import("@trpc/server").DefaultErrorShape;
        transformer: import("@trpc/server").DefaultDataTransformer;
    }>, {
        getAllBoards: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _ctx_out: object;
            _input_in: typeof import("@trpc/server").unsetMarker;
            _input_out: typeof import("@trpc/server").unsetMarker;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
            _meta: object;
        }, {
            title: string;
            _count: {
                lists: number;
                tags: number;
                subjects: number;
                topics: number;
            };
            lists: {
                _count: {
                    cards: number;
                    Kanban: number;
                };
            }[];
        }[]>;
        createNewBoard: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                title: string;
                tags: string[];
                topics: string[];
                subjects: string[];
            };
            _input_out: {
                title: string;
                tags: string[];
                topics: string[];
                subjects: string[];
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            id: number;
            title: string;
            createdAt: Date;
            lastUpdate: Date;
        }>;
        getBoardById: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: number;
            _input_out: number;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, ({
            lists: ({
                cards: {
                    id: number;
                    listId: number | null;
                    indexWithinList: number;
                    label: string | null;
                    details: string | null;
                }[];
            } & {
                id: number;
                indexWithinBoard: number;
                title: string | null;
                boardId: number | null;
            })[];
        } & {
            id: number;
            title: string;
            createdAt: Date;
            lastUpdate: Date;
        }) | null>;
        appendNewListToBoard: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                list: {
                    title: string;
                };
                boardId: number;
            };
            _input_out: {
                list: {
                    title: string;
                };
                boardId: number;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, ({
            lists: ({
                cards: {
                    id: number;
                    listId: number | null;
                    indexWithinList: number;
                    label: string | null;
                    details: string | null;
                }[];
            } & {
                id: number;
                indexWithinBoard: number;
                title: string | null;
                boardId: number | null;
            })[];
        } & {
            id: number;
            title: string;
            createdAt: Date;
            lastUpdate: Date;
        }) | undefined>;
    }>;
}
declare module "trpc/routers/commandPalette/commandPaletteRouter" {
    export const commandPaletteRouter: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
        ctx: object;
        meta: object;
        errorShape: import("@trpc/server").DefaultErrorShape;
        transformer: import("@trpc/server").DefaultDataTransformer;
    }>, {
        noteSearch: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _ctx_out: object;
            _input_in: typeof import("@trpc/server").unsetMarker;
            _input_out: typeof import("@trpc/server").unsetMarker;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
            _meta: object;
        }, {
            id: number;
            href: string;
            title: string;
            isProtected: boolean | null;
            latexTitle: string | null;
        }[]>;
        tagSearch: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _ctx_out: object;
            _input_in: typeof import("@trpc/server").unsetMarker;
            _input_out: typeof import("@trpc/server").unsetMarker;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
            _meta: object;
        }, {
            value: string;
            kanbanId: number | null;
            createdAt: Date;
            lastAccess: Date;
        }[]>;
        subjectSearch: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _ctx_out: object;
            _input_in: typeof import("@trpc/server").unsetMarker;
            _input_out: typeof import("@trpc/server").unsetMarker;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
            _meta: object;
        }, {
            value: string;
            kanbanId: number | null;
            createdAt: Date;
            lastAccess: Date;
        }[]>;
        equationSearch: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _ctx_out: object;
            _input_in: typeof import("@trpc/server").unsetMarker;
            _input_out: typeof import("@trpc/server").unsetMarker;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
            _meta: object;
        }, {
            id: number;
            title: string;
            content: string;
        }[]>;
        getDefinitions: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                rsc?: boolean | undefined;
            } | undefined;
            _input_out: {
                rsc: boolean;
            } | undefined;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            id: string;
            label?: string | null | undefined;
            content?: string | null | undefined;
            mdxNote?: import("classes/prismaMdxRelations/MdxNote").MdxNote | undefined;
            mdxNoteId?: number | null | undefined;
            alphabeticalLabel?: string | null | undefined;
        }[]>;
        getCommandPaletteData: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _ctx_out: object;
            _input_in: typeof import("@trpc/server").unsetMarker;
            _input_out: typeof import("@trpc/server").unsetMarker;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
            _meta: object;
        }, {
            notes: {
                href: string;
                title: string;
                isProtected: boolean | null;
                latexTitle: string | null;
            }[];
            tags: {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
        }>;
    }>;
}
declare module "schemas/snippets/main" {
    import { z } from "zod";
    export const SnippetCreatekeywordsInputObjectSchema: z.ZodObject<{
        set: z.ZodArray<z.ZodString, "many">;
    }, "strict", z.ZodTypeAny, {
        set: string[];
    }, {
        set: string[];
    }>;
    export const TechnologiesSchema: z.ZodEnum<["abap", "actionscript-3", "ada", "angular-html", "angular-ts", "apache", "apex", "apl", "applescript", "ara", "asm", "astro", "awk", "ballerina", "bat", "beancount", "berry", "bibtex", "bicep", "blade", "c", "cadence", "clarity", "clojure", "cmake", "cobol", "codeql", "coffee", "cpp", "crystal", "csharp", "css", "csv", "cue", "cypher", "d", "dart", "dax", "diff", "docker", "dream-maker", "elixir", "elm", "erb", "erlang", "fish", "fortran-fixed-form", "fortran-free-form", "fsharp", "gdresource", "gdscript", "gdshader", "gherkin", "git-commit", "git-rebase", "glimmer-js", "glimmer-ts", "glsl", "gnuplot", "go", "graphql", "groovy", "hack", "haml", "handlebars", "haskell", "hcl", "hjson", "hlsl", "html", "html-derivative", "http", "imba", "ini", "java", "javascript", "jinja", "jison", "json", "json5", "jsonc", "jsonl", "jsonnet", "jssm", "jsx", "julia", "kotlin", "kusto", "latex", "less", "liquid", "lisp", "logo", "lua", "make", "markdown", "marko", "matlab", "mdc", "mdx", "mermaid", "mojo", "move", "narrat", "nextflow", "nginx", "nim", "nix", "nushell", "objective-c", "objective-cpp", "ocaml", "pascal", "perl", "php", "plsql", "postcss", "powerquery", "powershell", "prisma", "prolog", "proto", "pug", "puppet", "purescript", "python", "r", "raku", "razor", "reg", "rel", "riscv", "rst", "ruby", "rust", "sas", "sass", "scala", "scheme", "scss", "shaderlab", "shellscript", "shellsession", "smalltalk", "solidity", "sparql", "splunk", "sql", "ssh-config", "stata", "stylus", "svelte", "swift", "system-verilog", "tasl", "tcl", "terraform", "tex", "toml", "tsx", "turtle", "twig", "typescript", "typst", "v", "vb", "verilog", "vhdl", "viml", "vue", "vue-html", "vyper", "wasm", "wenyan", "wgsl", "wolfram", "xml", "xsl", "yaml", "zenscript", "zig", "batch", "be", "cdc", "clj", "ql", "coffeescript", "c++", "c#", "cs", "cql", "dockerfile", "erl", "f", "for", "f77", "f90", "f95", "f03", "f08", "f18", "f#", "fs", "gjs", "gts", "gql", "hbs", "hs", "properties", "js", "fsl", "kt", "kts", "kql", "makefile", "md", "nar", "nf", "nu", "objc", "ps", "ps1", "jade", "py", "perl6", "rb", "rs", "shader", "bash", "sh", "shell", "zsh", "console", "spl", "styl", "tf", "tfvars", "ts", "typ", "cmd", "vim", "vimscript", "vy", "文言", "wl", "yml"]>;
    export const SnippetCreateInputObjectSchema: z.ZodObject<{
        content: z.ZodString;
        description: z.ZodString;
        keywords: z.ZodOptional<z.ZodUnion<[z.ZodLazy<z.ZodObject<{
            set: z.ZodArray<z.ZodString, "many">;
        }, "strict", z.ZodTypeAny, {
            set: string[];
        }, {
            set: string[];
        }>>, z.ZodArray<z.ZodString, "many">]>>;
        language: z.ZodLazy<z.ZodEnum<["abap", "actionscript-3", "ada", "angular-html", "angular-ts", "apache", "apex", "apl", "applescript", "ara", "asm", "astro", "awk", "ballerina", "bat", "beancount", "berry", "bibtex", "bicep", "blade", "c", "cadence", "clarity", "clojure", "cmake", "cobol", "codeql", "coffee", "cpp", "crystal", "csharp", "css", "csv", "cue", "cypher", "d", "dart", "dax", "diff", "docker", "dream-maker", "elixir", "elm", "erb", "erlang", "fish", "fortran-fixed-form", "fortran-free-form", "fsharp", "gdresource", "gdscript", "gdshader", "gherkin", "git-commit", "git-rebase", "glimmer-js", "glimmer-ts", "glsl", "gnuplot", "go", "graphql", "groovy", "hack", "haml", "handlebars", "haskell", "hcl", "hjson", "hlsl", "html", "html-derivative", "http", "imba", "ini", "java", "javascript", "jinja", "jison", "json", "json5", "jsonc", "jsonl", "jsonnet", "jssm", "jsx", "julia", "kotlin", "kusto", "latex", "less", "liquid", "lisp", "logo", "lua", "make", "markdown", "marko", "matlab", "mdc", "mdx", "mermaid", "mojo", "move", "narrat", "nextflow", "nginx", "nim", "nix", "nushell", "objective-c", "objective-cpp", "ocaml", "pascal", "perl", "php", "plsql", "postcss", "powerquery", "powershell", "prisma", "prolog", "proto", "pug", "puppet", "purescript", "python", "r", "raku", "razor", "reg", "rel", "riscv", "rst", "ruby", "rust", "sas", "sass", "scala", "scheme", "scss", "shaderlab", "shellscript", "shellsession", "smalltalk", "solidity", "sparql", "splunk", "sql", "ssh-config", "stata", "stylus", "svelte", "swift", "system-verilog", "tasl", "tcl", "terraform", "tex", "toml", "tsx", "turtle", "twig", "typescript", "typst", "v", "vb", "verilog", "vhdl", "viml", "vue", "vue-html", "vyper", "wasm", "wenyan", "wgsl", "wolfram", "xml", "xsl", "yaml", "zenscript", "zig", "batch", "be", "cdc", "clj", "ql", "coffeescript", "c++", "c#", "cs", "cql", "dockerfile", "erl", "f", "for", "f77", "f90", "f95", "f03", "f08", "f18", "f#", "fs", "gjs", "gts", "gql", "hbs", "hs", "properties", "js", "fsl", "kt", "kts", "kql", "makefile", "md", "nar", "nf", "nu", "objc", "ps", "ps1", "jade", "py", "perl6", "rb", "rs", "shader", "bash", "sh", "shell", "zsh", "console", "spl", "styl", "tf", "tfvars", "ts", "typ", "cmd", "vim", "vimscript", "vy", "文言", "wl", "yml"]>>;
        id: z.ZodOptional<z.ZodNumber>;
    }, "strict", z.ZodTypeAny, {
        content: string;
        description: string;
        language: "rel" | "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "mdx" | "md" | "json" | "csv" | "html" | "tex" | "jsx" | "fs" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "文言" | "wl" | "yml";
        id?: number | undefined;
        keywords?: string[] | {
            set: string[];
        } | undefined;
    }, {
        content: string;
        description: string;
        language: "rel" | "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "mdx" | "md" | "json" | "csv" | "html" | "tex" | "jsx" | "fs" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "文言" | "wl" | "yml";
        id?: number | undefined;
        keywords?: string[] | {
            set: string[];
        } | undefined;
    }>;
}
declare module "schemas/snippets/filterSchema" {
    import { z } from "zod";
    export const snippetFilterSchema: z.ZodObject<{
        language: z.ZodEffects<z.ZodOptional<z.ZodString>, string | undefined, string | undefined>;
        query: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        query?: string | undefined;
        language?: string | undefined;
    }, {
        query?: string | undefined;
        language?: string | undefined;
    }>;
    export type SnippetFilterParam = z.input<typeof snippetFilterSchema>;
}
declare module "trpcInternalMethods/snippets/main" {
    import type { Prisma } from '@ulld/database/internalDatabaseTypes';
    export const saveSnippet: (data: Prisma.SnippetCreateInput & {
        id?: number | null;
    }) => Promise<boolean>;
}
declare module "trpc/routers/snippets/snippetRouter" {
    export const snippetRouter: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
        ctx: object;
        meta: object;
        errorShape: import("@trpc/server").DefaultErrorShape;
        transformer: import("@trpc/server").DefaultDataTransformer;
    }>, {
        saveSnippet: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                content: string;
                description: string;
                language: "rel" | "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "mdx" | "md" | "json" | "csv" | "html" | "tex" | "jsx" | "fs" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "文言" | "wl" | "yml";
                id?: number | undefined;
                keywords?: string[] | {
                    set: string[];
                } | undefined;
            };
            _input_out: {
                content: string;
                description: string;
                language: "rel" | "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "mdx" | "md" | "json" | "csv" | "html" | "tex" | "jsx" | "fs" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "文言" | "wl" | "yml";
                id?: number | undefined;
                keywords?: string[] | {
                    set: string[];
                } | undefined;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, boolean>;
        deleteSnippet: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: number;
            _input_out: number;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            id: number;
            content: string;
            description: string;
            keywords: string[];
            language: string;
            createdAt: Date;
        }>;
        getSnippets: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                query?: string | undefined;
                language?: string | undefined;
            };
            _input_out: {
                query?: string | undefined;
                language?: string | undefined;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            id: number;
            content: string;
            description: string;
            keywords: string[];
            language: string;
            createdAt: Date;
        }[]>;
        getSpecificSnippet: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: number;
            _input_out: number;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            id: number;
            content: string;
            description: string;
            keywords: string[];
            language: string;
            createdAt: Date;
        } | null>;
    }>;
}
declare module "trpc/routers/whiteboard/whiteboardRouter" {
    export const whiteboardRouter: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
        ctx: object;
        meta: object;
        errorShape: import("@trpc/server").DefaultErrorShape;
        transformer: import("@trpc/server").DefaultDataTransformer;
    }>, {
        save: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                id: string;
                data: string;
            };
            _input_out: {
                id: string;
                data: string;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            id: string;
            data: Buffer;
        }>;
        getById: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                id: string;
            };
            _input_out: {
                id: string;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            id: string;
            data: Buffer;
        } | null>;
        deleteById: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                id: string;
            };
            _input_out: {
                id: string;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            id: string;
            data: Buffer;
        }>;
    }>;
}
declare module "trpc/routers/bibliography/bibItemTagParser" {
    import { z } from 'zod';
    export const bibItemTagParser: z.ZodObject<{
        bibItemId: z.ZodString;
        tag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        tag: string;
        bibItemId: string;
    }, {
        tag: string;
        bibItemId: string;
    }>;
}
declare module "trpc/routers/bibliography/methods" {
    export const getBibWithEntries: (bibId?: number) => Promise<({
        entries: ({
            tags: {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
            MdxNotes: {
                id: number;
                href: string;
                title: string;
            }[];
            citationGroups: {
                name: string;
                description: string | null;
            }[];
        } & {
            id: string;
            BibId: number | null;
            OwnWork: boolean;
            ColleaguesWork: boolean;
            read: boolean;
            htmlCitation: string | null;
            PdfPath: string | null;
            address: string | null;
            annote: string | null;
            author: string | null;
            booktitle: string | null;
            chapter: string | null;
            crossref: string | null;
            doi: string | null;
            edition: string | null;
            editor: string | null;
            email: string | null;
            howpublished: string | null;
            institution: string | null;
            journal: string | null;
            month: string | null;
            note: string | null;
            number: string | null;
            organization: string | null;
            pages: string | null;
            publisher: string | null;
            school: string | null;
            series: string | null;
            title: string | null;
            volume: string | null;
            type: string | null;
            year: string | null;
            numpages: string | null;
            url: string | null;
            issue: string | null;
            issn: string | null;
            abstract: string | null;
            urldate: string | null;
            keywords: string | null;
            copyright: string | null;
            createdAt: Date;
            lastAccess: Date;
        })[];
    } & {
        id: number;
        filename: string;
        firstSync: Date;
        lastSync: Date;
    }) | null>;
    export const getBibItemWithAll: (id: string) => Promise<({
        tags: {
            value: string;
            kanbanId: number | null;
            createdAt: Date;
            lastAccess: Date;
        }[];
        citationGroups: {
            name: string;
            description: string | null;
        }[];
    } & {
        id: string;
        BibId: number | null;
        OwnWork: boolean;
        ColleaguesWork: boolean;
        read: boolean;
        htmlCitation: string | null;
        PdfPath: string | null;
        address: string | null;
        annote: string | null;
        author: string | null;
        booktitle: string | null;
        chapter: string | null;
        crossref: string | null;
        doi: string | null;
        edition: string | null;
        editor: string | null;
        email: string | null;
        howpublished: string | null;
        institution: string | null;
        journal: string | null;
        month: string | null;
        note: string | null;
        number: string | null;
        organization: string | null;
        pages: string | null;
        publisher: string | null;
        school: string | null;
        series: string | null;
        title: string | null;
        volume: string | null;
        type: string | null;
        year: string | null;
        numpages: string | null;
        url: string | null;
        issue: string | null;
        issn: string | null;
        abstract: string | null;
        urldate: string | null;
        keywords: string | null;
        copyright: string | null;
        createdAt: Date;
        lastAccess: Date;
    }) | null>;
    export const getBibFilename: (input?: number) => Promise<string | {
        filename: string;
    } | undefined>;
}
declare module "trpc/routers/bibliography/formatCsl" {
    import "@citation-js/plugin-csl";
    import "@citation-js/plugin-bibtex";
    import { AppConfigSchemaOutput } from "@ulld/configschema/types";
    export const getFormattedCslCitation: (content: string, appConfig: AppConfigSchemaOutput) => {
        citations: any;
        userDefined: boolean;
    };
}
declare module "trpc/routers/bibliography/syncBib" {
    import { AppConfigSchemaOutput } from "@ulld/configschema/types";
    export const syncBib: (appConfig: AppConfigSchemaOutput, bibId?: number) => Promise<({
        entries: ({
            tags: {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
            MdxNotes: {
                id: number;
                href: string;
                title: string;
            }[];
            citationGroups: {
                name: string;
                description: string | null;
            }[];
        } & {
            id: string;
            BibId: number | null;
            OwnWork: boolean;
            ColleaguesWork: boolean;
            read: boolean;
            htmlCitation: string | null;
            PdfPath: string | null;
            address: string | null;
            annote: string | null;
            author: string | null;
            booktitle: string | null;
            chapter: string | null;
            crossref: string | null;
            doi: string | null;
            edition: string | null;
            editor: string | null;
            email: string | null;
            howpublished: string | null;
            institution: string | null;
            journal: string | null;
            month: string | null;
            note: string | null;
            number: string | null;
            organization: string | null;
            pages: string | null;
            publisher: string | null;
            school: string | null;
            series: string | null;
            title: string | null;
            volume: string | null;
            type: string | null;
            year: string | null;
            numpages: string | null;
            url: string | null;
            issue: string | null;
            issn: string | null;
            abstract: string | null;
            urldate: string | null;
            keywords: string | null;
            copyright: string | null;
            createdAt: Date;
            lastAccess: Date;
        })[];
    } & {
        id: number;
        filename: string;
        firstSync: Date;
        lastSync: Date;
    }) | {
        errorKey: "bibPathFileDoesNotExist";
    }>;
}
declare module "trpc/routers/bibliography/bibliographyRouter" {
    const _default: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
        ctx: object;
        meta: object;
        errorShape: import("@trpc/server").DefaultErrorShape;
        transformer: import("@trpc/server").DefaultDataTransformer;
    }>, {
        getPrismaBib: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _ctx_out: object;
            _input_in: typeof import("@trpc/server").unsetMarker;
            _input_out: typeof import("@trpc/server").unsetMarker;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
            _meta: object;
        }, ({
            entries: ({
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                MdxNotes: {
                    id: number;
                    href: string;
                    title: string;
                }[];
                citationGroups: {
                    name: string;
                    description: string | null;
                }[];
            } & {
                id: string;
                BibId: number | null;
                OwnWork: boolean;
                ColleaguesWork: boolean;
                read: boolean;
                htmlCitation: string | null;
                PdfPath: string | null;
                address: string | null;
                annote: string | null;
                author: string | null;
                booktitle: string | null;
                chapter: string | null;
                crossref: string | null;
                doi: string | null;
                edition: string | null;
                editor: string | null;
                email: string | null;
                howpublished: string | null;
                institution: string | null;
                journal: string | null;
                month: string | null;
                note: string | null;
                number: string | null;
                organization: string | null;
                pages: string | null;
                publisher: string | null;
                school: string | null;
                series: string | null;
                title: string | null;
                volume: string | null;
                type: string | null;
                year: string | null;
                numpages: string | null;
                url: string | null;
                issue: string | null;
                issn: string | null;
                abstract: string | null;
                urldate: string | null;
                keywords: string | null;
                copyright: string | null;
                createdAt: Date;
                lastAccess: Date;
            })[];
        } & {
            id: number;
            filename: string;
            firstSync: Date;
            lastSync: Date;
        }) | null>;
        syncBib: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                bibId?: number | undefined;
            };
            _input_out: {
                bibId: number;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, ({
            entries: ({
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                MdxNotes: {
                    id: number;
                    href: string;
                    title: string;
                }[];
                citationGroups: {
                    name: string;
                    description: string | null;
                }[];
            } & {
                id: string;
                BibId: number | null;
                OwnWork: boolean;
                ColleaguesWork: boolean;
                read: boolean;
                htmlCitation: string | null;
                PdfPath: string | null;
                address: string | null;
                annote: string | null;
                author: string | null;
                booktitle: string | null;
                chapter: string | null;
                crossref: string | null;
                doi: string | null;
                edition: string | null;
                editor: string | null;
                email: string | null;
                howpublished: string | null;
                institution: string | null;
                journal: string | null;
                month: string | null;
                note: string | null;
                number: string | null;
                organization: string | null;
                pages: string | null;
                publisher: string | null;
                school: string | null;
                series: string | null;
                title: string | null;
                volume: string | null;
                type: string | null;
                year: string | null;
                numpages: string | null;
                url: string | null;
                issue: string | null;
                issn: string | null;
                abstract: string | null;
                urldate: string | null;
                keywords: string | null;
                copyright: string | null;
                createdAt: Date;
                lastAccess: Date;
            })[];
        } & {
            id: number;
            filename: string;
            firstSync: Date;
            lastSync: Date;
        }) | {
            errorKey: "bibPathFileDoesNotExist";
        }>;
        syncBibServerSide: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: number | undefined;
            _input_out: number | undefined;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, ({
            entries: ({
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                MdxNotes: {
                    id: number;
                    href: string;
                    title: string;
                }[];
                citationGroups: {
                    name: string;
                    description: string | null;
                }[];
            } & {
                id: string;
                BibId: number | null;
                OwnWork: boolean;
                ColleaguesWork: boolean;
                read: boolean;
                htmlCitation: string | null;
                PdfPath: string | null;
                address: string | null;
                annote: string | null;
                author: string | null;
                booktitle: string | null;
                chapter: string | null;
                crossref: string | null;
                doi: string | null;
                edition: string | null;
                editor: string | null;
                email: string | null;
                howpublished: string | null;
                institution: string | null;
                journal: string | null;
                month: string | null;
                note: string | null;
                number: string | null;
                organization: string | null;
                pages: string | null;
                publisher: string | null;
                school: string | null;
                series: string | null;
                title: string | null;
                volume: string | null;
                type: string | null;
                year: string | null;
                numpages: string | null;
                url: string | null;
                issue: string | null;
                issn: string | null;
                abstract: string | null;
                urldate: string | null;
                keywords: string | null;
                copyright: string | null;
                createdAt: Date;
                lastAccess: Date;
            })[];
        } & {
            id: number;
            filename: string;
            firstSync: Date;
            lastSync: Date;
        }) | {
            errorKey: "bibPathFileDoesNotExist";
        }>;
        readBibFromFileSystem: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _ctx_out: object;
            _input_in: typeof import("@trpc/server").unsetMarker;
            _input_out: typeof import("@trpc/server").unsetMarker;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
            _meta: object;
        }, string | undefined>;
        setBibEntryPdfPath: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                bibEntryId: string;
                pdfPath: string | null;
            };
            _input_out: {
                bibEntryId: string;
                pdfPath: string | null;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            id: string;
            BibId: number | null;
            OwnWork: boolean;
            ColleaguesWork: boolean;
            read: boolean;
            htmlCitation: string | null;
            PdfPath: string | null;
            address: string | null;
            annote: string | null;
            author: string | null;
            booktitle: string | null;
            chapter: string | null;
            crossref: string | null;
            doi: string | null;
            edition: string | null;
            editor: string | null;
            email: string | null;
            howpublished: string | null;
            institution: string | null;
            journal: string | null;
            month: string | null;
            note: string | null;
            number: string | null;
            organization: string | null;
            pages: string | null;
            publisher: string | null;
            school: string | null;
            series: string | null;
            title: string | null;
            volume: string | null;
            type: string | null;
            year: string | null;
            numpages: string | null;
            url: string | null;
            issue: string | null;
            issn: string | null;
            abstract: string | null;
            urldate: string | null;
            keywords: string | null;
            copyright: string | null;
            createdAt: Date;
            lastAccess: Date;
        }>;
        getBib: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: number;
            _input_out: number;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, ({
            entries: ({
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                readingList: {
                    name: string;
                    description: string | null;
                    createdAt: Date;
                    lastUpdate: Date;
                }[];
                MdxNotes: ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    topics: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    subjects: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                } & {
                    id: number;
                    isProtected: boolean | null;
                    dietSummaryKey: string | null;
                    title: string;
                    latexTitle: string | null;
                    rootRelativePath: string;
                    noteType: string;
                    content: string;
                    formatted: string | null;
                    summary: string | null;
                    citationsListOrder: string[];
                    importantValues: number[];
                    imageSrc: string | null;
                    href: string;
                    sequentialKey: string | null;
                    sequentialIndex: number | null;
                    floatImages: boolean;
                    remoteUrl: string | null;
                    trackRemote: boolean;
                    outgoingQuickLinks: string[];
                    quickLink: string | null;
                    bookmarked: boolean;
                    firstSync: Date;
                    lastSync: Date;
                    lastAccess: Date;
                })[];
                citationGroups: {
                    name: string;
                    description: string | null;
                }[];
            } & {
                id: string;
                BibId: number | null;
                OwnWork: boolean;
                ColleaguesWork: boolean;
                read: boolean;
                htmlCitation: string | null;
                PdfPath: string | null;
                address: string | null;
                annote: string | null;
                author: string | null;
                booktitle: string | null;
                chapter: string | null;
                crossref: string | null;
                doi: string | null;
                edition: string | null;
                editor: string | null;
                email: string | null;
                howpublished: string | null;
                institution: string | null;
                journal: string | null;
                month: string | null;
                note: string | null;
                number: string | null;
                organization: string | null;
                pages: string | null;
                publisher: string | null;
                school: string | null;
                series: string | null;
                title: string | null;
                volume: string | null;
                type: string | null;
                year: string | null;
                numpages: string | null;
                url: string | null;
                issue: string | null;
                issn: string | null;
                abstract: string | null;
                urldate: string | null;
                keywords: string | null;
                copyright: string | null;
                createdAt: Date;
                lastAccess: Date;
            })[];
        } & {
            id: number;
            filename: string;
            firstSync: Date;
            lastSync: Date;
        }) | null>;
        getBibCitation: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: string[];
            _input_out: string[];
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            id: string;
            type: string | null;
            htmlCitation: string | null;
        }[]>;
        getBibEntry: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: string;
            _input_out: string;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, ({
            tags: {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
            readingList: ({
                bibEntries: {
                    id: string;
                    title: string | null;
                    createdAt: Date;
                }[];
            } & {
                name: string;
                description: string | null;
                createdAt: Date;
                lastUpdate: Date;
            })[];
            MdxNotes: ({
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                topics: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                subjects: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                citations: {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
            } & {
                id: number;
                isProtected: boolean | null;
                dietSummaryKey: string | null;
                title: string;
                latexTitle: string | null;
                rootRelativePath: string;
                noteType: string;
                content: string;
                formatted: string | null;
                summary: string | null;
                citationsListOrder: string[];
                importantValues: number[];
                imageSrc: string | null;
                href: string;
                sequentialKey: string | null;
                sequentialIndex: number | null;
                floatImages: boolean;
                remoteUrl: string | null;
                trackRemote: boolean;
                outgoingQuickLinks: string[];
                quickLink: string | null;
                bookmarked: boolean;
                firstSync: Date;
                lastSync: Date;
                lastAccess: Date;
            })[];
            citationGroups: ({
                entries: {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
            } & {
                name: string;
                description: string | null;
            })[];
        } & {
            id: string;
            BibId: number | null;
            OwnWork: boolean;
            ColleaguesWork: boolean;
            read: boolean;
            htmlCitation: string | null;
            PdfPath: string | null;
            address: string | null;
            annote: string | null;
            author: string | null;
            booktitle: string | null;
            chapter: string | null;
            crossref: string | null;
            doi: string | null;
            edition: string | null;
            editor: string | null;
            email: string | null;
            howpublished: string | null;
            institution: string | null;
            journal: string | null;
            month: string | null;
            note: string | null;
            number: string | null;
            organization: string | null;
            pages: string | null;
            publisher: string | null;
            school: string | null;
            series: string | null;
            title: string | null;
            volume: string | null;
            type: string | null;
            year: string | null;
            numpages: string | null;
            url: string | null;
            issue: string | null;
            issn: string | null;
            abstract: string | null;
            urldate: string | null;
            keywords: string | null;
            copyright: string | null;
            createdAt: Date;
            lastAccess: Date;
        }) | null>;
        addBibItemTag: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                tag: string;
                bibItemId: string;
            };
            _input_out: {
                tag: string;
                bibItemId: string;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            tags: {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[];
        } & {
            id: string;
            BibId: number | null;
            OwnWork: boolean;
            ColleaguesWork: boolean;
            read: boolean;
            htmlCitation: string | null;
            PdfPath: string | null;
            address: string | null;
            annote: string | null;
            author: string | null;
            booktitle: string | null;
            chapter: string | null;
            crossref: string | null;
            doi: string | null;
            edition: string | null;
            editor: string | null;
            email: string | null;
            howpublished: string | null;
            institution: string | null;
            journal: string | null;
            month: string | null;
            note: string | null;
            number: string | null;
            organization: string | null;
            pages: string | null;
            publisher: string | null;
            school: string | null;
            series: string | null;
            title: string | null;
            volume: string | null;
            type: string | null;
            year: string | null;
            numpages: string | null;
            url: string | null;
            issue: string | null;
            issn: string | null;
            abstract: string | null;
            urldate: string | null;
            keywords: string | null;
            copyright: string | null;
            createdAt: Date;
            lastAccess: Date;
        }>;
        removeBibEntryTag: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                tag: string;
                bibEntryId: string;
            };
            _input_out: {
                tag: string;
                bibEntryId: string;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            id: string;
            BibId: number | null;
            OwnWork: boolean;
            ColleaguesWork: boolean;
            read: boolean;
            htmlCitation: string | null;
            PdfPath: string | null;
            address: string | null;
            annote: string | null;
            author: string | null;
            booktitle: string | null;
            chapter: string | null;
            crossref: string | null;
            doi: string | null;
            edition: string | null;
            editor: string | null;
            email: string | null;
            howpublished: string | null;
            institution: string | null;
            journal: string | null;
            month: string | null;
            note: string | null;
            number: string | null;
            organization: string | null;
            pages: string | null;
            publisher: string | null;
            school: string | null;
            series: string | null;
            title: string | null;
            volume: string | null;
            type: string | null;
            year: string | null;
            numpages: string | null;
            url: string | null;
            issue: string | null;
            issn: string | null;
            abstract: string | null;
            urldate: string | null;
            keywords: string | null;
            copyright: string | null;
            createdAt: Date;
            lastAccess: Date;
        }>;
        bibEntryUpsert: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: any;
            _input_out: any;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, {
            id: string;
            BibId: number | null;
            OwnWork: boolean;
            ColleaguesWork: boolean;
            read: boolean;
            htmlCitation: string | null;
            PdfPath: string | null;
            address: string | null;
            annote: string | null;
            author: string | null;
            booktitle: string | null;
            chapter: string | null;
            crossref: string | null;
            doi: string | null;
            edition: string | null;
            editor: string | null;
            email: string | null;
            howpublished: string | null;
            institution: string | null;
            journal: string | null;
            month: string | null;
            note: string | null;
            number: string | null;
            organization: string | null;
            pages: string | null;
            publisher: string | null;
            school: string | null;
            series: string | null;
            title: string | null;
            volume: string | null;
            type: string | null;
            year: string | null;
            numpages: string | null;
            url: string | null;
            issue: string | null;
            issn: string | null;
            abstract: string | null;
            urldate: string | null;
            keywords: string | null;
            copyright: string | null;
            createdAt: Date;
            lastAccess: Date;
        }>;
        bibFilename: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: number | undefined;
            _input_out: number | undefined;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, string | {
            filename: string;
        } | undefined>;
        getCitationGroup: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: string;
            _input_out: string;
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, ({
            entries: ({
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                MdxNotes: {
                    id: number;
                    summary: string | null;
                    title: string;
                }[];
            } & {
                id: string;
                BibId: number | null;
                OwnWork: boolean;
                ColleaguesWork: boolean;
                read: boolean;
                htmlCitation: string | null;
                PdfPath: string | null;
                address: string | null;
                annote: string | null;
                author: string | null;
                booktitle: string | null;
                chapter: string | null;
                crossref: string | null;
                doi: string | null;
                edition: string | null;
                editor: string | null;
                email: string | null;
                howpublished: string | null;
                institution: string | null;
                journal: string | null;
                month: string | null;
                note: string | null;
                number: string | null;
                organization: string | null;
                pages: string | null;
                publisher: string | null;
                school: string | null;
                series: string | null;
                title: string | null;
                volume: string | null;
                type: string | null;
                year: string | null;
                numpages: string | null;
                url: string | null;
                issue: string | null;
                issn: string | null;
                abstract: string | null;
                urldate: string | null;
                keywords: string | null;
                copyright: string | null;
                createdAt: Date;
                lastAccess: Date;
            })[];
        } & {
            name: string;
            description: string | null;
        }) | null>;
    }>;
    export default _default;
}
declare module "classes/data/pluginUtils/pluginSettings/types" {
    import type { PluginSettingsRecord } from "@ulld/types";
    export type * from "classes/data/pluginUtils/pluginSettings/schemas";
    export interface PluginSettingsConstructorProps {
        pluginName: string;
    }
    export interface UpdatePluginSettingOptions {
        /**
         * Deepmerge object rather than overwrite existing settings entirely.
         * @defaultValue true
         */
        merge?: boolean;
    }
    export interface UpdateDataOpts<T extends PluginSettingsRecord> {
        /**
         * Whether or not to deepmerge data.
         * @defaultValue false
         */
        merge?: boolean;
        /**
         * Whether or not to sync with the database on each update.
         * @defaultValue false
         */
        syncOnUpdate: boolean;
        /**
         * An optional callback called when the syncOnUpdate field is set to true.
         * @defaultValue undefined
         */
        callback?: (newOpts: Partial<T>) => void;
    }
    export interface PluginSettingsImplementation<T extends PluginSettingsRecord> {
        /**
         * A utility function to update data within the class itself, with the ability to automatically sync with the database on each update or to deep merge the updated data through the UpdateDataOpts interface. Basically a setter with a few utilities,
         */
        updateSettings: (data: Partial<T>, opts: UpdateDataOpts<T>) => void;
        /**
         * The asynchronous getSettings method needs to be called to populate the original data in the PluginSettings class.
         */
        getSettings: () => Promise<Partial<T> | undefined>;
        /**
         * Sync classes data field with the user's database.
         */
        sync: (opts: UpdatePluginSettingOptions) => Promise<Partial<T>>;
    }
}
declare module "classes/data/pluginUtils/pluginSettings/schemas" {
    import { z } from 'zod';
    import type { UpdatePluginSettingOptions } from "classes/data/pluginUtils/pluginSettings/types";
    export const updatePluginSettingOptionsSchema: z.ZodType<UpdatePluginSettingOptions>;
    export type UpdatePluginSettingOptionsSchema = z.infer<typeof updatePluginSettingOptionsSchema>;
}
declare module "trpc/routers/pluginSettings" {
    export const pluginSettingsRouter: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
        ctx: object;
        meta: object;
        errorShape: import("@trpc/server").DefaultErrorShape;
        transformer: import("@trpc/server").DefaultDataTransformer;
    }>, {
        updatePluginSettings: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                data: Record<string, any>;
                pluginName: string;
                options?: import("classes/data/pluginUtils/pluginSettings/types").UpdatePluginSettingOptions | undefined;
            };
            _input_out: {
                data: Record<string, any>;
                options: import("classes/data/pluginUtils/pluginSettings/types").UpdatePluginSettingOptions;
                pluginName: string;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, Record<string, any>>;
        getPluginSettings: import("@trpc/server").BuildProcedure<"query", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                pluginName: string;
            };
            _input_out: {
                pluginName: string;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, object | undefined>;
        clearPluginSettings: import("@trpc/server").BuildProcedure<"mutation", {
            _config: import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>;
            _meta: object;
            _ctx_out: object;
            _input_in: {
                pluginName: string;
            };
            _input_out: {
                pluginName: string;
            };
            _output_in: typeof import("@trpc/server").unsetMarker;
            _output_out: typeof import("@trpc/server").unsetMarker;
        }, void>;
    }>;
}
declare module "trpc/main" {
    export const _appRouter: {
        autoSettings: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            setAutoSettingsFromConfig: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, void>;
            getAutoSettings: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    type?: "tag" | "topic" | "subject" | undefined;
                    withRegex?: boolean | undefined;
                };
                _input_out: {
                    withRegex: boolean;
                    type?: "tag" | "topic" | "subject" | undefined;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, import("trpc/types").AutoSettingWithRegex[] | {
                id?: number;
                glob: string;
                value: string;
                type: import(".prisma/client").autoSetting;
            }[] | undefined>;
            deleteAutoSettingById: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: number;
                _input_out: number;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
                type: import(".prisma/client").$Enums.autoSetting;
                glob: string;
                value: string;
            }>;
            addAutoSetting: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    type: "tag" | "topic" | "subject";
                    value: string;
                    glob: string;
                    id?: number | undefined;
                };
                _input_out: {
                    type: "tag" | "topic" | "subject";
                    value: string;
                    glob: string;
                    id?: number | undefined;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
                type: import(".prisma/client").$Enums.autoSetting;
                glob: string;
                value: string;
            }>;
        }>;
        sync: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            backupNonFileSystemDB: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, void>;
        }>;
        toDo: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            getToDoLists: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: number | undefined;
                _input_out: number | undefined;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
                label: string;
                active: boolean;
            } | {
                id: number;
                label: string;
                active: boolean;
            }[]>;
            getToDoListById: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: number;
                _input_out: number;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                topics: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                subjects: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
            } & {
                id: number;
                label: string;
                createdAt: Date;
                lastUpdate: Date;
                lastAccess: Date;
            }) | null>;
            getToDos: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    listIds?: string | number | string[] | number[] | undefined;
                    showCompleted?: string | boolean | undefined;
                };
                _input_out: {
                    showCompleted: boolean;
                    listIds?: number[] | undefined;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                todos: {
                    topic: {
                        value: string;
                    }[];
                    subject: {
                        value: string;
                    }[];
                    id: number;
                    label: string;
                    tags: ({
                        value: string;
                        kanbanId?: number | null | undefined;
                    } | {
                        value: string;
                        kanbanId?: number | null | undefined;
                    })[];
                    _count: {
                        topic: number;
                        subject: number;
                        tags: number;
                        tasks: number;
                    };
                    tasks: {
                        id: number;
                        bookmarked: boolean;
                        status: string;
                        task: string;
                        priority: number;
                        createdAt?: any;
                        dueAt?: any;
                        details?: string | null | undefined;
                        parentId?: number | null | undefined;
                        category?: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper" | null | undefined;
                        toDoListId?: number | null | undefined;
                        completedOn?: any;
                    }[];
                    createdAt?: any;
                    lastUpdate?: any;
                }[];
                lists: {
                    id: number;
                    label: string;
                    active: boolean;
                }[];
            }>;
            setToDoStatus: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    status: string;
                    taskIds: number[];
                };
                _input_out: {
                    status: string;
                    taskIds: number[];
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, import(".prisma/client").Prisma.BatchPayload>;
            findListsByTaggables: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    tags?: string[] | undefined;
                    topics?: string[] | undefined;
                    subjects?: string[] | undefined;
                };
                _input_out: {
                    tags: string[];
                    topics: string[];
                    subjects: string[];
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                createdAt: string;
                tasks: {
                    dueAt: string | null;
                    createdAt: string;
                    details: string | null;
                    category: import(".prisma/client").$Enums.TaskCategory | null;
                }[];
                id: number;
                label: string;
                _count: {
                    tasks: number;
                };
            }[]>;
            getOverdueTasksByListId: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: number;
                _input_out: number;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                _count: {
                    tasks: number;
                };
                tasks: {
                    id: number;
                    createdAt: Date;
                    task: string;
                    dueAt: Date | null;
                    details: string | null;
                    parentId: number | null;
                    category: import(".prisma/client").$Enums.TaskCategory | null;
                    bookmarked: boolean;
                    status: string;
                    priority: number;
                    toDoListId: number | null;
                    completedOn: Date | null;
                }[];
            } | null>;
            getOverdueTaskCount: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, number>;
            getOverdueTasks: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, {
                id: number;
                createdAt: Date;
                task: string;
                dueAt: Date | null;
                details: string | null;
                parentId: number | null;
                category: import(".prisma/client").$Enums.TaskCategory | null;
                bookmarked: boolean;
                status: string;
                priority: number;
                toDoListId: number | null;
                completedOn: Date | null;
            }[]>;
            setToDoDueDate: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    dueAt: string | Date | null;
                    taskIds: number[];
                };
                _input_out: {
                    dueAt: Date | null;
                    taskIds: number[];
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, import(".prisma/client").Prisma.BatchPayload>;
            setToDoList: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    taskId: number;
                    listId: number;
                };
                _input_out: {
                    taskId: number;
                    listId: number;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, import(".prisma/client").Prisma.BatchPayload>;
            deleteTaskByIds: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string | number | string[] | number[] | undefined;
                _input_out: number[];
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, import(".prisma/client").Prisma.BatchPayload>;
            toggleToDoBookmark: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    taskId: number;
                    shouldBookmark?: boolean | undefined;
                };
                _input_out: {
                    taskId: number;
                    shouldBookmark?: boolean | undefined;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, import(".prisma/client").Prisma.BatchPayload>;
            setToDoPriority: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    priority: number;
                    taskIds: number[];
                };
                _input_out: {
                    priority: number;
                    taskIds: number[];
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, import(".prisma/client").Prisma.BatchPayload>;
            getToDoDetails: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    toDoId: number;
                };
                _input_out: {
                    toDoId: number;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                topics: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
            } & {
                id: number;
                createdAt: Date;
                task: string;
                dueAt: Date | null;
                details: string | null;
                parentId: number | null;
                category: import(".prisma/client").$Enums.TaskCategory | null;
                bookmarked: boolean;
                status: string;
                priority: number;
                toDoListId: number | null;
                completedOn: Date | null;
            }) | null>;
            createNewTodoList: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    label: string;
                    tags: string[];
                    topics: string[];
                    subjects: string[];
                };
                _input_out: {
                    label: string;
                    tags: string[];
                    topics: string[];
                    subjects: string[];
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
                label: string;
                createdAt: Date;
                lastUpdate: Date;
                lastAccess: Date;
            } | {
                errorKey: "toDoListExists";
            }>;
            createNewToDo: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    task: string;
                    listId: number;
                    status?: string | undefined;
                    dueAt?: string | Date | null | undefined;
                    details?: string | null | undefined;
                    priority?: number | undefined;
                };
                _input_out: {
                    status: string;
                    task: string;
                    priority: number;
                    listId: number;
                    dueAt?: Date | null | undefined;
                    details?: string | null | undefined;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
                label: string;
                createdAt: Date;
                lastUpdate: Date;
                lastAccess: Date;
            }>;
            deleteToDos: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: number[];
                _input_out: number[];
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, import(".prisma/client").Prisma.BatchPayload>;
            editTaskNote: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    note: string | null;
                    taskId: number;
                };
                _input_out: {
                    note: string | null;
                    taskId: number;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
                createdAt: Date;
                task: string;
                dueAt: Date | null;
                details: string | null;
                parentId: number | null;
                category: import(".prisma/client").$Enums.TaskCategory | null;
                bookmarked: boolean;
                status: string;
                priority: number;
                toDoListId: number | null;
                completedOn: Date | null;
            }>;
            getMostRecentToDoListId: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, {
                id: number;
            }[]>;
            markCompleted: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    taskIds: number[];
                };
                _input_out: {
                    taskIds: number[];
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, void>;
            updateTask: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    id: number;
                    task: string;
                    status?: string | undefined;
                    dueAt?: string | Date | null | undefined;
                    details?: string | null | undefined;
                    priority?: number | undefined;
                };
                _input_out: {
                    id: number;
                    status: string;
                    task: string;
                    priority: number;
                    dueAt?: Date | null | undefined;
                    details?: string | null | undefined;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                ToDoList: {
                    id: number;
                } | null;
            }>;
            archiveTasks: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: number[];
                _input_out: number[];
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, import(".prisma/client").Prisma.BatchPayload>;
            getTaskLists: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, {
                id: number;
                label: string;
                lastUpdate: Date;
            }[]>;
            getTasksByCompletionDate: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    start?: Date | undefined;
                    stop?: Date | undefined;
                } | undefined;
                _input_out: {
                    stop: Date;
                    start?: Date | undefined;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, void>;
            getTaskManagerOverview: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, {
                tasks: {
                    id: number;
                    createdAt: Date;
                    status: string;
                    dueAt: Date | null;
                    toDoListId: number | null;
                    completedOn: Date | null;
                }[];
                taskLists: {
                    id: number;
                    label: string;
                    createdAt: Date;
                    _count: {
                        tasks: number;
                        tags: number;
                        topics: number;
                        subjects: number;
                    };
                }[];
                overdueCount: number;
            }>;
        }>;
        equations: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            getEquationById: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    id?: number | undefined;
                    equationId?: string | undefined;
                };
                _input_out: {
                    id?: number | undefined;
                    equationId?: string | undefined;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
                title: string;
                content: string;
                tags: {
                    value: string;
                }[];
                relatedValues: {
                    input: unknown;
                    output: number;
                }[];
                equationId: string | null;
                desc: string | null;
                asPython: string | null;
                variables: string[];
                keywords: string[];
            } | null>;
            getParsedEquationById: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    id: number;
                    title: {
                        options: {
                            width?: number | undefined;
                            container?: boolean | undefined;
                            em?: number | undefined;
                            ex?: number | undefined;
                            inline?: boolean | undefined;
                            styles?: boolean | undefined;
                            fontCache?: boolean | undefined;
                            assistiveMml?: boolean | undefined;
                            autoWrap?: boolean | undefined;
                            matchFontHeight?: boolean | undefined;
                        };
                        appendStylesToId?: string | undefined;
                        appendStylesToClass?: string | undefined;
                    };
                    content: {
                        options: {
                            width?: number | undefined;
                            container?: boolean | undefined;
                            em?: number | undefined;
                            ex?: number | undefined;
                            inline?: boolean | undefined;
                            styles?: boolean | undefined;
                            fontCache?: boolean | undefined;
                            assistiveMml?: boolean | undefined;
                            autoWrap?: boolean | undefined;
                            matchFontHeight?: boolean | undefined;
                        };
                        appendStylesToId?: string | undefined;
                        appendStylesToClass?: string | undefined;
                    };
                    desc: {
                        options: {
                            width?: number | undefined;
                            container?: boolean | undefined;
                            em?: number | undefined;
                            ex?: number | undefined;
                            inline?: boolean | undefined;
                            styles?: boolean | undefined;
                            fontCache?: boolean | undefined;
                            assistiveMml?: boolean | undefined;
                            autoWrap?: boolean | undefined;
                            matchFontHeight?: boolean | undefined;
                        };
                        appendStylesToId?: string | undefined;
                        appendStylesToClass?: string | undefined;
                    };
                    equationId?: string | undefined;
                };
                _input_out: {
                    id: number;
                    title: {
                        options: {
                            width?: number | undefined;
                            container?: boolean | undefined;
                            em?: number | undefined;
                            ex?: number | undefined;
                            inline?: boolean | undefined;
                            styles?: boolean | undefined;
                            fontCache?: boolean | undefined;
                            assistiveMml?: boolean | undefined;
                            autoWrap?: boolean | undefined;
                            matchFontHeight?: boolean | undefined;
                        };
                        appendStylesToId?: string | undefined;
                        appendStylesToClass?: string | undefined;
                    };
                    content: {
                        options: {
                            width?: number | undefined;
                            container?: boolean | undefined;
                            em?: number | undefined;
                            ex?: number | undefined;
                            inline?: boolean | undefined;
                            styles?: boolean | undefined;
                            fontCache?: boolean | undefined;
                            assistiveMml?: boolean | undefined;
                            autoWrap?: boolean | undefined;
                            matchFontHeight?: boolean | undefined;
                        };
                        appendStylesToId?: string | undefined;
                        appendStylesToClass?: string | undefined;
                    };
                    desc: {
                        options: {
                            width?: number | undefined;
                            container?: boolean | undefined;
                            em?: number | undefined;
                            ex?: number | undefined;
                            inline?: boolean | undefined;
                            styles?: boolean | undefined;
                            fontCache?: boolean | undefined;
                            assistiveMml?: boolean | undefined;
                            autoWrap?: boolean | undefined;
                            matchFontHeight?: boolean | undefined;
                        };
                        appendStylesToId?: string | undefined;
                        appendStylesToClass?: string | undefined;
                    };
                    equationId?: string | undefined;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
                tags: ({
                    value: string;
                    kanbanId?: number | null | undefined;
                } | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[];
                variables: string[];
                topics: {
                    value: string;
                }[];
                subjects: {
                    value: string;
                }[];
                title?: string | null | undefined;
                content?: string | null | undefined;
                equationId?: string | null | undefined;
                desc?: string | null | undefined;
                asPython?: string | null | undefined;
                createdAt?: string | Date | null | undefined;
            }>;
            getEquationEmbedProps: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    equationId: string;
                };
                _input_out: {
                    equationId: string;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                rawLatex: string;
                id: number;
                tags: ({
                    value: string;
                    kanbanId?: number | null | undefined;
                } | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[];
                variables: string[];
                topics: {
                    value: string;
                }[];
                subjects: {
                    value: string;
                }[];
                title?: string | null | undefined;
                content?: string | null | undefined;
                equationId?: string | null | undefined;
                desc?: string | null | undefined;
                asPython?: string | null | undefined;
                createdAt?: string | Date | null | undefined;
            }>;
            deleteEquationById: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: number;
                _input_out: number;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
                equationId: string | null;
                title: string;
                desc: string | null;
                content: string;
                asPython: string | null;
                variableLegend: unknown;
                variables: string[];
                keywords: string[];
                createdAt: Date;
                lastAccess: Date;
            }>;
            getEquationsList: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    orderBy: "title" | "createdAt";
                    value?: string | undefined;
                    tags?: string | string[] | undefined;
                    query?: string | undefined;
                    take?: number | undefined;
                    variables?: string | string[] | undefined;
                    page?: number | undefined;
                    sortDir?: "desc" | "asc" | undefined;
                };
                _input_out: {
                    tags: any[];
                    orderBy: "title" | "createdAt";
                    take: number;
                    variables: any[];
                    page: number;
                    sortDir: "desc" | "asc";
                    value?: string | undefined;
                    query?: string | undefined;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                equations: {
                    id: number;
                    equationId: string | null;
                    title: string;
                    desc: string | null;
                    content: string;
                    asPython: string | null;
                    variableLegend: unknown;
                    variables: string[];
                    keywords: string[];
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                tags: string[];
                variables: string[];
            }>;
            addEquation: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    title: string;
                    content: string;
                    variables: string[];
                    keywords: string[];
                    tagInput: string;
                    variableInput: string;
                    keywordInput: string;
                    id?: number | undefined;
                    tags?: string[] | undefined;
                    relatedValues?: {
                        input: Record<string, number>;
                        output: number;
                    }[] | undefined;
                    equationId?: string | undefined;
                    desc?: string | undefined;
                    asPython?: string | undefined;
                };
                _input_out: {
                    title: string;
                    content: string;
                    tags: string[];
                    variables: string[];
                    keywords: string[];
                    tagInput: string;
                    variableInput: string;
                    keywordInput: string;
                    id?: number | undefined;
                    relatedValues?: {
                        input: Record<string, number>;
                        output: number;
                    }[] | undefined;
                    equationId?: string | undefined;
                    desc?: string | undefined;
                    asPython?: string | undefined;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
                equationId: string | null;
                title: string;
                desc: string | null;
                content: string;
                asPython: string | null;
                variableLegend: unknown;
                variables: string[];
                keywords: string[];
                createdAt: Date;
                lastAccess: Date;
            }>;
            mathStringArrayToLatex: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    content: string[];
                    options: {
                        inline?: boolean | undefined;
                    };
                };
                _input_out: {
                    content: string[];
                    options: {
                        inline?: boolean | undefined;
                    };
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                content: string;
            }[]>;
            getIdFromEquationId: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
            } | null>;
        }>;
        commandPalette: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            noteSearch: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, {
                id: number;
                href: string;
                title: string;
                isProtected: boolean | null;
                latexTitle: string | null;
            }[]>;
            tagSearch: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[]>;
            subjectSearch: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[]>;
            equationSearch: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, {
                id: number;
                title: string;
                content: string;
            }[]>;
            getDefinitions: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    rsc?: boolean | undefined;
                } | undefined;
                _input_out: {
                    rsc: boolean;
                } | undefined;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: string;
                label?: string | null | undefined;
                content?: string | null | undefined;
                mdxNote?: import("classes/prismaMdxRelations/MdxNote").MdxNote | undefined;
                mdxNoteId?: number | null | undefined;
                alphabeticalLabel?: string | null | undefined;
            }[]>;
            getCommandPaletteData: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, {
                notes: {
                    href: string;
                    title: string;
                    isProtected: boolean | null;
                    latexTitle: string | null;
                }[];
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
            }>;
        }>;
        search: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            getNoteHrefFromDefinitionId: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, string | undefined>;
            getSequentialIdListByKey: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                href: string;
                title: string;
                sequentialIndex: number | null;
            }[]>;
            getDefinitionList: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, {
                id: string;
                mdxNoteId: number | null;
                label?: string | undefined;
                content?: string | undefined;
            }[]>;
            rootRelativePathIsBookmarked: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, boolean>;
            getUniqueTags: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, string[]>;
            getUniqueTagTopicAndSubjects: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: "tag" | "topic" | "subject" | null | undefined;
                _input_out: "tag" | "topic" | "subject" | null | undefined;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, string[] | {
                tags: string[];
                topics: string[];
                subjects: string[];
            }>;
            getBookmarked: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, {
                mdxNotes: {
                    id: number;
                    href: string;
                    summary: string | null;
                    title: string;
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    noteType: string;
                    topics: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    subjects: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    firstSync: Date;
                    lastSync: Date;
                    latexTitle: string | null;
                    rootRelativePath: string;
                    sequentialIndex: number | null;
                    citations: {
                        id: string;
                        htmlCitation: string | null;
                    }[];
                    definitions: {
                        id: string;
                        label: string | null;
                        content: string | null;
                        alphabeticalLabel: string | null;
                        mdxNoteId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                }[];
            }>;
            findUnknownDBNoteTypeFromRootRelativePath: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                markdown: {
                    id: number;
                    rootRelativePath: string;
                } | null;
                notebook: {
                    id: number;
                    rootRelativePath: string;
                } | null;
            }>;
        }>;
        boards: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            getAllBoards: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, {
                title: string;
                _count: {
                    lists: number;
                    tags: number;
                    subjects: number;
                    topics: number;
                };
                lists: {
                    _count: {
                        cards: number;
                        Kanban: number;
                    };
                }[];
            }[]>;
            createNewBoard: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    title: string;
                    tags: string[];
                    topics: string[];
                    subjects: string[];
                };
                _input_out: {
                    title: string;
                    tags: string[];
                    topics: string[];
                    subjects: string[];
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
                title: string;
                createdAt: Date;
                lastUpdate: Date;
            }>;
            getBoardById: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: number;
                _input_out: number;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                lists: ({
                    cards: {
                        id: number;
                        listId: number | null;
                        indexWithinList: number;
                        label: string | null;
                        details: string | null;
                    }[];
                } & {
                    id: number;
                    indexWithinBoard: number;
                    title: string | null;
                    boardId: number | null;
                })[];
            } & {
                id: number;
                title: string;
                createdAt: Date;
                lastUpdate: Date;
            }) | null>;
            appendNewListToBoard: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    list: {
                        title: string;
                    };
                    boardId: number;
                };
                _input_out: {
                    list: {
                        title: string;
                    };
                    boardId: number;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                lists: ({
                    cards: {
                        id: number;
                        listId: number | null;
                        indexWithinList: number;
                        label: string | null;
                        details: string | null;
                    }[];
                } & {
                    id: number;
                    indexWithinBoard: number;
                    title: string | null;
                    boardId: number | null;
                })[];
            } & {
                id: number;
                title: string;
                createdAt: Date;
                lastUpdate: Date;
            }) | undefined>;
        }>;
        settings: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            getSettings: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, {
                id: number;
                tooltips: boolean;
                title: string;
                summary_showCitations: boolean;
                summary_showTags: boolean;
                landingImageAlign: import(".prisma/client").$Enums.ImageAlignment;
                lockedLandingImage: string | null;
                cleanOnSync: boolean;
                plotTheme: string | null;
                firstSync: Date;
                lastSync: Date;
            } | null>;
            toggleBooleanSetting: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: "tooltips" | "summary_showCitations" | "summary_showTags" | "cleanOnSync";
                _input_out: "tooltips" | "summary_showCitations" | "summary_showTags" | "cleanOnSync";
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
                tooltips: boolean;
                title: string;
                summary_showCitations: boolean;
                summary_showTags: boolean;
                landingImageAlign: import(".prisma/client").$Enums.ImageAlignment;
                lockedLandingImage: string | null;
                cleanOnSync: boolean;
                plotTheme: string | null;
                firstSync: Date;
                lastSync: Date;
            } | undefined>;
            lockCurrentLandingImage: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                lockedLandingImage: string | null;
            } | undefined>;
            updateSettings: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: import(".prisma/client").Prisma.SettingsCreateInput;
                _input_out: import(".prisma/client").Prisma.SettingsCreateInput;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
                tooltips: boolean;
                title: string;
                summary_showCitations: boolean;
                summary_showTags: boolean;
                landingImageAlign: import(".prisma/client").$Enums.ImageAlignment;
                lockedLandingImage: string | null;
                cleanOnSync: boolean;
                plotTheme: string | null;
                firstSync: Date;
                lastSync: Date;
            } | undefined>;
        }>;
        pluginSettings: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            updatePluginSettings: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    data: Record<string, any>;
                    pluginName: string;
                    options?: import("classes/data/pluginUtils/pluginSettings/types").UpdatePluginSettingOptions | undefined;
                };
                _input_out: {
                    data: Record<string, any>;
                    options: import("classes/data/pluginUtils/pluginSettings/types").UpdatePluginSettingOptions;
                    pluginName: string;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, Record<string, any>>;
            getPluginSettings: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    pluginName: string;
                };
                _input_out: {
                    pluginName: string;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, object | undefined>;
            clearPluginSettings: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    pluginName: string;
                };
                _input_out: {
                    pluginName: string;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, void>;
        }>;
        mdx: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            deleteNoteById: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: number | number[];
                _input_out: any[];
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, import(".prisma/client").Prisma.BatchPayload>;
            toggleBookmarkedById: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: number;
                _input_out: number;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, boolean>;
            getDatabaseMdx: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                equations: {
                    id: number;
                    equationId: string | null;
                    title: string;
                    desc: string | null;
                    content: string;
                    asPython: string | null;
                    variableLegend: unknown;
                    variables: string[];
                    keywords: string[];
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                toDo: {
                    id: number;
                    createdAt: Date;
                    task: string;
                    dueAt: Date | null;
                    details: string | null;
                    parentId: number | null;
                    category: import(".prisma/client").$Enums.TaskCategory | null;
                    bookmarked: boolean;
                    status: string;
                    priority: number;
                    toDoListId: number | null;
                    completedOn: Date | null;
                }[];
                ReadingList: {
                    name: string;
                    description: string | null;
                    createdAt: Date;
                    lastUpdate: Date;
                }[];
                topics: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                subjects: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                _count: {
                    topics: number;
                    subjects: number;
                    tags: number;
                    citations: number;
                    sequentialList: number;
                    ReadingList: number;
                    equations: number;
                    definitions: number;
                    toDo: number;
                };
                citations: {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                sequentialList: {
                    sequentialKey: string;
                } | null;
                definitions: {
                    id: string;
                    label: string | null;
                    content: string | null;
                    alphabeticalLabel: string | null;
                    mdxNoteId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
            } & {
                id: number;
                isProtected: boolean | null;
                dietSummaryKey: string | null;
                title: string;
                latexTitle: string | null;
                rootRelativePath: string;
                noteType: string;
                content: string;
                formatted: string | null;
                summary: string | null;
                citationsListOrder: string[];
                importantValues: number[];
                imageSrc: string | null;
                href: string;
                sequentialKey: string | null;
                sequentialIndex: number | null;
                floatImages: boolean;
                remoteUrl: string | null;
                trackRemote: boolean;
                outgoingQuickLinks: string[];
                quickLink: string | null;
                bookmarked: boolean;
                firstSync: Date;
                lastSync: Date;
                lastAccess: Date;
            }) | null>;
            getDatabaseMdxFromPathname: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                equations: {
                    id: number;
                    equationId: string | null;
                    title: string;
                    desc: string | null;
                    content: string;
                    asPython: string | null;
                    variableLegend: unknown;
                    variables: string[];
                    keywords: string[];
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                toDo: {
                    id: number;
                    createdAt: Date;
                    task: string;
                    dueAt: Date | null;
                    details: string | null;
                    parentId: number | null;
                    category: import(".prisma/client").$Enums.TaskCategory | null;
                    bookmarked: boolean;
                    status: string;
                    priority: number;
                    toDoListId: number | null;
                    completedOn: Date | null;
                }[];
                ReadingList: {
                    name: string;
                    description: string | null;
                    createdAt: Date;
                    lastUpdate: Date;
                }[];
                topics: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                subjects: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                _count: {
                    topics: number;
                    subjects: number;
                    tags: number;
                    citations: number;
                    sequentialList: number;
                    ReadingList: number;
                    equations: number;
                    definitions: number;
                    toDo: number;
                };
                citations: {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                sequentialList: {
                    sequentialKey: string;
                } | null;
                definitions: {
                    id: string;
                    label: string | null;
                    content: string | null;
                    alphabeticalLabel: string | null;
                    mdxNoteId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
            } & {
                id: number;
                isProtected: boolean | null;
                dietSummaryKey: string | null;
                title: string;
                latexTitle: string | null;
                rootRelativePath: string;
                noteType: string;
                content: string;
                formatted: string | null;
                summary: string | null;
                citationsListOrder: string[];
                importantValues: number[];
                imageSrc: string | null;
                href: string;
                sequentialKey: string | null;
                sequentialIndex: number | null;
                floatImages: boolean;
                remoteUrl: string | null;
                trackRemote: boolean;
                outgoingQuickLinks: string[];
                quickLink: string | null;
                bookmarked: boolean;
                firstSync: Date;
                lastSync: Date;
                lastAccess: Date;
            }) | null>;
            getFsMdx: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    rootRelativePath: string;
                    extension: ".md" | ".mdx";
                    useProcessRoot?: boolean | undefined;
                };
                _input_out: {
                    rootRelativePath: string;
                    extension: ".md" | ".mdx";
                    useProcessRoot: boolean;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                content: string;
                details: {
                    quickLink: string | undefined;
                    sequentialKey: string | undefined;
                    sequentialIndex: number | undefined;
                    firstSync: string | Date;
                    lastSync: string | Date;
                    id: number;
                    bookmarked: boolean;
                } | undefined;
            }>;
            setMdxAccessed: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    rootRelativePath: string;
                };
                _input_out: {
                    rootRelativePath: string;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, void>;
            parseAndCompileMdxString: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    props: {
                        raw: string;
                        docTypeData: {
                            label: string;
                            icon: string;
                            UI: {
                                styles: {
                                    dark: {
                                        bg?: string | undefined;
                                        fg?: string | undefined;
                                    };
                                    light: {
                                        bg?: string | undefined;
                                        fg?: string | undefined;
                                    };
                                };
                            };
                            fs: string;
                            id: string;
                            docType: string;
                            matchWeight: number;
                            url: string;
                            urlQuery: Record<string, string | number | string[] | number[]>;
                            keywords: string[];
                            autoTag: string[];
                            autoTopic: string[];
                            autoSubject: string[];
                            inSidebar: boolean;
                            inNavbar: boolean;
                            filePathPattern?: string | undefined;
                            topicLabel?: string | undefined;
                            subjectLabel?: string | undefined;
                        };
                        bookmarked?: boolean | undefined;
                        rootRelativePath?: string | null | undefined;
                    };
                    parseParams: {
                        parser: (args_0: {
                            data: {
                                id?: string | null | undefined;
                                summary?: string | null | undefined;
                                title?: string | null | undefined;
                                tags?: string[] | undefined;
                                topics?: string[] | undefined;
                                subjects?: string[] | undefined;
                                sequentialKey?: string | null | undefined;
                                importantValues?: number[] | undefined;
                                created?: string | null | undefined;
                                updated?: string | null | undefined;
                                sequential?: number | null | undefined;
                                tableStyles?: {
                                    math?: "base" | "lg" | "xl" | "small" | null | undefined;
                                    expand?: boolean | null | undefined;
                                    text?: "base" | "lg" | "xl" | "small" | null | undefined;
                                    float?: "right" | "left" | null | undefined;
                                    fullWidth?: boolean | null | undefined;
                                    tableCenter?: boolean | null | undefined;
                                    textCenter?: boolean | null | undefined;
                                    headingCenter?: boolean | null | undefined;
                                    noMax?: boolean | null | undefined;
                                } | undefined;
                            };
                            content: string;
                            docTypeData: {
                                id: string;
                                url: string;
                                docType: string;
                                label?: string | undefined;
                                keywords?: string[] | undefined;
                                icon?: string | undefined;
                                UI?: {
                                    styles: {
                                        dark: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                        light: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                    };
                                } | undefined;
                                fs?: string | undefined;
                                filePathPattern?: string | undefined;
                                matchWeight?: number | undefined;
                                urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                                topicLabel?: string | undefined;
                                subjectLabel?: string | undefined;
                                autoTag?: string[] | undefined;
                                autoTopic?: string[] | undefined;
                                autoSubject?: string[] | undefined;
                                inSidebar?: boolean | undefined;
                                inNavbar?: boolean | undefined;
                            } | {};
                            appConfig: {
                                fsRoot: string;
                                noteTypes: {
                                    fs: string;
                                    label?: string | undefined;
                                    icon?: string | undefined;
                                    UI?: {
                                        styles: {
                                            dark: {
                                                bg?: string | undefined;
                                                fg?: string | undefined;
                                            };
                                            light: {
                                                bg?: string | undefined;
                                                fg?: string | undefined;
                                            };
                                        };
                                    } | undefined;
                                    id?: string | undefined;
                                    docType?: string | undefined;
                                    filePathPattern?: string | undefined;
                                    matchWeight?: number | undefined;
                                    url?: string | undefined;
                                    urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                                    keywords?: string[] | undefined;
                                    topicLabel?: string | undefined;
                                    subjectLabel?: string | undefined;
                                    autoTag?: string[] | undefined;
                                    autoTopic?: string[] | undefined;
                                    autoSubject?: string[] | undefined;
                                    inSidebar?: boolean | undefined;
                                    inNavbar?: boolean | undefined;
                                }[];
                                code?: {
                                    editor: {
                                        defaultLangauge: string;
                                        useVimMode: boolean;
                                    };
                                    theme: {
                                        dark: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                        light: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                    };
                                    syntaxHighlighting: {
                                        transformers: {
                                            regexHighlight: boolean;
                                            lineHighlight: boolean;
                                            lineFocus: boolean;
                                            lineErrorLevel: boolean;
                                            lineDiff: boolean;
                                        };
                                        defaultLanguage: {
                                            inline: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                            block: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                        };
                                    };
                                } | undefined;
                                database?: {
                                    storeFormatted: boolean;
                                    removeIfNotPresentInFs: boolean;
                                } | undefined;
                                navigation?: {
                                    navbarBreakpoint: {
                                        full: number;
                                        minimal: number;
                                    };
                                    maxResultLength: {
                                        snippets: number;
                                        searchAll: number;
                                        equations: number;
                                        categories: number;
                                    };
                                    navbarLinks: (string | {
                                        label: string;
                                        href?: string | undefined;
                                        icon?: string | undefined;
                                        onClick?: ((...args: unknown[]) => unknown) | undefined;
                                    })[];
                                    sidebarLinks: (string | {
                                        icon: string;
                                        label?: string | undefined;
                                        href?: string | undefined;
                                        Icon?: ((...args: unknown[]) => unknown) | undefined;
                                        onClick?: ((...args: unknown[]) => unknown) | undefined;
                                    })[];
                                } | undefined;
                                terminal?: {
                                    logLevel: "info" | "none" | "debug" | "verbose";
                                } | undefined;
                                jupyter?: {
                                    execute: boolean;
                                    environment: string;
                                    syntaxHighlightTheme: string;
                                    jupyterPort: number;
                                    initiallyFoldCells: boolean;
                                    kernel: string;
                                    jupyterReactProps: {
                                        collaborative: boolean;
                                        lite: boolean;
                                        serverUrls?: {
                                            baseUrl?: string | undefined;
                                            wsUrl?: string | undefined;
                                        } | undefined;
                                    };
                                    nbConvert: {
                                        conversionTimeout: number;
                                        execute: boolean;
                                        nbConvertTemplate: string;
                                        notebookOutputDir: string;
                                        nbconvertPath?: string | undefined;
                                        customConversionFunction?: {
                                            pdf?: ((args_0: string, args_1: string, ...args: unknown[]) => string) | undefined;
                                        } | undefined;
                                    };
                                    jupyterNotebookProps: {
                                        readOnly: boolean;
                                        cellMetadataPanel: boolean;
                                        cellSidebarMargin: number;
                                        bundledIPyWidgets: {
                                            name: string;
                                            module: string | Record<string, string>;
                                            version: string;
                                        }[];
                                        externalIPyWidgets: {
                                            name: string;
                                            version: string;
                                        }[];
                                        nbgrader: boolean;
                                        height?: string | undefined;
                                        maxHeight?: string | undefined;
                                    };
                                    cellInputWrappers: Record<string, {
                                        prefix: string;
                                        suffix: string;
                                    }>;
                                    jupyterToken?: string | undefined;
                                } | undefined;
                                math?: {
                                    latexPackages: string[] | "all";
                                    constants: Record<string, number>;
                                    latexFontUrl?: string | undefined;
                                } | undefined;
                                UI?: {
                                    table: {
                                        maxHeight: string;
                                    };
                                    text: {
                                        blockQuoteItalic: boolean;
                                        fontPaths: "default" | {
                                            weight: "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900";
                                            path: string;
                                            style: "bold" | "italic" | "normal";
                                        }[];
                                    };
                                    media: {
                                        imageMap: Record<string, string | undefined>;
                                        includeDefaultImageMap: boolean;
                                        imageRemoteTest: string[];
                                    };
                                    theme: "ulld" | "red" | "orange" | "yellow" | "green" | "blue" | "rose" | "slate" | "gray" | "stone" | "zinc" | "neutral" | "violet";
                                    colors: Record<string, {
                                        dark?: string | undefined;
                                        light?: string | undefined;
                                    } | undefined>;
                                    autoApplyMdxTitles: boolean;
                                } | undefined;
                                slots?: {
                                    navigation?: any;
                                    bibliography?: any;
                                    math?: any;
                                    snippets?: any;
                                    dashboard?: any;
                                    taskManager?: any;
                                    UI?: any;
                                    pdf?: any;
                                    editor?: any;
                                    form?: any;
                                    commandPalette?: any;
                                } | undefined;
                                build?: {
                                    database: {
                                        type: "postgres" | "sqlite";
                                        postgres: {
                                            connectionURI: string;
                                            port?: undefined;
                                            dbName?: undefined;
                                        } | {
                                            port: number;
                                            dbName: string;
                                            connectionURI?: undefined;
                                        };
                                        prioritize: "size" | "speed";
                                    };
                                    additionalUserContent: {
                                        css?: string | undefined;
                                        logo?: string | undefined;
                                        favicon?: string | undefined;
                                    };
                                } | undefined;
                                autoTag?: {
                                    tag?: string | undefined;
                                    path?: string | undefined;
                                }[] | undefined;
                                autoTopic?: {
                                    path?: string | undefined;
                                    topic?: string | undefined;
                                }[] | undefined;
                                autoSubject?: {
                                    path?: string | undefined;
                                    subject?: string | undefined;
                                }[] | undefined;
                                alwaysPreferFs?: boolean | undefined;
                                ignoreFilepaths?: string[] | undefined;
                                tempDir?: string | undefined;
                                generatedDir?: string | undefined;
                                ignorePreferFsExtensions?: string[] | undefined;
                                fileTypePriority?: (".mdx" | ".ipynb" | ".csv" | ".tsv" | ".excel" | ".numpy" | ".html" | ".pickle" | ".db" | ".sql" | ".pdf" | ".json" | ".tex" | ".hdf5" | ".md")[] | undefined;
                                bibPath?: string | undefined;
                                cslPath?: string | undefined;
                                dateHandling?: {
                                    enableAdvancedFormat: boolean;
                                    format: {
                                        short: string;
                                        long: string;
                                        withTime: string;
                                        timeOnly: string;
                                    };
                                    defaultTimeDisplayType: "summarized" | "analog" | "descriptive";
                                    defaultTimeZone?: string | undefined;
                                } | undefined;
                                linkAliases?: Record<string, string> | undefined;
                                plotting?: {
                                    plotColorList: string[] | {
                                        dark: string[];
                                        light: string[];
                                    };
                                    plotColorCycleMethod: "inOrder" | "random";
                                } | undefined;
                                credentials?: {
                                    googleServiceAccountJsonPath?: string | undefined;
                                } | undefined;
                                performance?: {
                                    latexParsingDebounceTimeout: number;
                                    mdxParsingDebounceTimeout: number;
                                } | undefined;
                                meta?: {
                                    title: string;
                                    desc?: string | undefined;
                                } | undefined;
                                plugins?: {
                                    name: string;
                                    version: string;
                                    parserIndex: number;
                                }[] | undefined;
                            };
                            serverClient?: any;
                            db?: {
                                id: number;
                                firstSync: string | Date;
                                bookmarked: boolean;
                                lastSync: string | Date;
                                sequentialKey?: string | null | undefined;
                                sequentialIndex?: number | null | undefined;
                                quickLink?: string | null | undefined;
                            } | undefined;
                        }, ...args: unknown[]) => Promise<{
                            id?: string | null | undefined;
                            summary?: string | null | undefined;
                            title?: string | null | undefined;
                            tags?: string | string[] | undefined;
                            topics?: string | string[] | undefined;
                            subjects?: string | string[] | undefined;
                            sequentialKey?: string | null | undefined;
                            importantValues?: number[] | undefined;
                            created?: string | null | undefined;
                            updated?: string | null | undefined;
                            sequential?: number | null | undefined;
                            tableStyles?: {
                                math?: "base" | "lg" | "xl" | "small" | null | undefined;
                                expand?: boolean | null | undefined;
                                text?: "base" | "lg" | "xl" | "small" | null | undefined;
                                float?: "right" | "left" | null | undefined;
                                fullWidth?: boolean | null | undefined;
                                tableCenter?: boolean | null | undefined;
                                textCenter?: boolean | null | undefined;
                                headingCenter?: boolean | null | undefined;
                                noMax?: boolean | null | undefined;
                            } | undefined;
                        } & Record<string, string | number | boolean | Record<string, string | number | boolean | null> | Record<string, Record<string, string | number | boolean | null>> | Record<string, string | number | boolean | null>[] | (string | number | boolean | null)[] | (string | number | boolean | null)[][] | null>>;
                        docTypeData?: {
                            label: string;
                            icon: string;
                            UI: {
                                styles: {
                                    dark: {
                                        bg?: string | undefined;
                                        fg?: string | undefined;
                                    };
                                    light: {
                                        bg?: string | undefined;
                                        fg?: string | undefined;
                                    };
                                };
                            };
                            fs: string;
                            id: string;
                            docType: string;
                            matchWeight: number;
                            url: string;
                            urlQuery: Record<string, string | number | string[] | number[]>;
                            keywords: string[];
                            autoTag: string[];
                            autoTopic: string[];
                            autoSubject: string[];
                            inSidebar: boolean;
                            inNavbar: boolean;
                            filePathPattern?: string | undefined;
                            topicLabel?: string | undefined;
                            subjectLabel?: string | undefined;
                        } | {} | undefined;
                        appConfig?: {
                            fsRoot: string;
                            noteTypes: {
                                fs: string;
                                label?: string | undefined;
                                icon?: string | undefined;
                                UI?: {
                                    styles: {
                                        dark: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                        light: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                    };
                                } | undefined;
                                id?: string | undefined;
                                docType?: string | undefined;
                                filePathPattern?: string | undefined;
                                matchWeight?: number | undefined;
                                url?: string | undefined;
                                urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                                keywords?: string[] | undefined;
                                topicLabel?: string | undefined;
                                subjectLabel?: string | undefined;
                                autoTag?: string[] | undefined;
                                autoTopic?: string[] | undefined;
                                autoSubject?: string[] | undefined;
                                inSidebar?: boolean | undefined;
                                inNavbar?: boolean | undefined;
                            }[];
                            code?: {
                                editor: {
                                    defaultLangauge: string;
                                    useVimMode: boolean;
                                };
                                theme: {
                                    dark: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                    light: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                };
                                syntaxHighlighting: {
                                    transformers: {
                                        regexHighlight: boolean;
                                        lineHighlight: boolean;
                                        lineFocus: boolean;
                                        lineErrorLevel: boolean;
                                        lineDiff: boolean;
                                    };
                                    defaultLanguage: {
                                        inline: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                        block: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                    };
                                };
                            } | undefined;
                            database?: {
                                storeFormatted: boolean;
                                removeIfNotPresentInFs: boolean;
                            } | undefined;
                            navigation?: {
                                navbarBreakpoint: {
                                    full: number;
                                    minimal: number;
                                };
                                maxResultLength: {
                                    snippets: number;
                                    searchAll: number;
                                    equations: number;
                                    categories: number;
                                };
                                navbarLinks: (string | {
                                    label: string;
                                    href?: string | undefined;
                                    icon?: string | undefined;
                                    onClick?: ((...args: unknown[]) => unknown) | undefined;
                                })[];
                                sidebarLinks: (string | {
                                    icon: string;
                                    label?: string | undefined;
                                    href?: string | undefined;
                                    Icon?: ((...args: unknown[]) => unknown) | undefined;
                                    onClick?: ((...args: unknown[]) => unknown) | undefined;
                                })[];
                            } | undefined;
                            terminal?: {
                                logLevel: "info" | "none" | "debug" | "verbose";
                            } | undefined;
                            jupyter?: {
                                execute: boolean;
                                environment: string;
                                syntaxHighlightTheme: string;
                                jupyterPort: number;
                                initiallyFoldCells: boolean;
                                kernel: string;
                                jupyterReactProps: {
                                    collaborative: boolean;
                                    lite: boolean;
                                    serverUrls?: {
                                        baseUrl?: string | undefined;
                                        wsUrl?: string | undefined;
                                    } | undefined;
                                };
                                nbConvert: {
                                    conversionTimeout: number;
                                    execute: boolean;
                                    nbConvertTemplate: string;
                                    notebookOutputDir: string;
                                    nbconvertPath?: string | undefined;
                                    customConversionFunction?: {
                                        pdf?: ((args_0: string, args_1: string, ...args: unknown[]) => string) | undefined;
                                    } | undefined;
                                };
                                jupyterNotebookProps: {
                                    readOnly: boolean;
                                    cellMetadataPanel: boolean;
                                    cellSidebarMargin: number;
                                    bundledIPyWidgets: {
                                        name: string;
                                        module: string | Record<string, string>;
                                        version: string;
                                    }[];
                                    externalIPyWidgets: {
                                        name: string;
                                        version: string;
                                    }[];
                                    nbgrader: boolean;
                                    height?: string | undefined;
                                    maxHeight?: string | undefined;
                                };
                                cellInputWrappers: Record<string, {
                                    prefix: string;
                                    suffix: string;
                                }>;
                                jupyterToken?: string | undefined;
                            } | undefined;
                            math?: {
                                latexPackages: string[] | "all";
                                constants: Record<string, number>;
                                latexFontUrl?: string | undefined;
                            } | undefined;
                            UI?: {
                                table: {
                                    maxHeight: string;
                                };
                                text: {
                                    blockQuoteItalic: boolean;
                                    fontPaths: "default" | {
                                        weight: "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900";
                                        path: string;
                                        style: "bold" | "italic" | "normal";
                                    }[];
                                };
                                media: {
                                    imageMap: Record<string, string | undefined>;
                                    includeDefaultImageMap: boolean;
                                    imageRemoteTest: string[];
                                };
                                theme: "ulld" | "red" | "orange" | "yellow" | "green" | "blue" | "rose" | "slate" | "gray" | "stone" | "zinc" | "neutral" | "violet";
                                colors: Record<string, {
                                    dark?: string | undefined;
                                    light?: string | undefined;
                                } | undefined>;
                                autoApplyMdxTitles: boolean;
                            } | undefined;
                            slots?: {
                                navigation?: any;
                                bibliography?: any;
                                math?: any;
                                snippets?: any;
                                dashboard?: any;
                                taskManager?: any;
                                UI?: any;
                                pdf?: any;
                                editor?: any;
                                form?: any;
                                commandPalette?: any;
                            } | undefined;
                            build?: {
                                database: {
                                    type: "postgres" | "sqlite";
                                    postgres: {
                                        connectionURI: string;
                                        port?: undefined;
                                        dbName?: undefined;
                                    } | {
                                        port: number;
                                        dbName: string;
                                        connectionURI?: undefined;
                                    };
                                    prioritize: "size" | "speed";
                                };
                                additionalUserContent: {
                                    css?: string | undefined;
                                    logo?: string | undefined;
                                    favicon?: string | undefined;
                                };
                            } | undefined;
                            autoTag?: {
                                tag?: string | undefined;
                                path?: string | undefined;
                            }[] | undefined;
                            autoTopic?: {
                                path?: string | undefined;
                                topic?: string | undefined;
                            }[] | undefined;
                            autoSubject?: {
                                path?: string | undefined;
                                subject?: string | undefined;
                            }[] | undefined;
                            alwaysPreferFs?: boolean | undefined;
                            ignoreFilepaths?: string[] | undefined;
                            tempDir?: string | undefined;
                            generatedDir?: string | undefined;
                            ignorePreferFsExtensions?: string[] | undefined;
                            fileTypePriority?: (".mdx" | ".ipynb" | ".csv" | ".tsv" | ".excel" | ".numpy" | ".html" | ".pickle" | ".db" | ".sql" | ".pdf" | ".json" | ".tex" | ".hdf5" | ".md")[] | undefined;
                            bibPath?: string | undefined;
                            cslPath?: string | undefined;
                            dateHandling?: {
                                enableAdvancedFormat: boolean;
                                format: {
                                    short: string;
                                    long: string;
                                    withTime: string;
                                    timeOnly: string;
                                };
                                defaultTimeDisplayType: "summarized" | "analog" | "descriptive";
                                defaultTimeZone?: string | undefined;
                            } | undefined;
                            linkAliases?: Record<string, string> | undefined;
                            plotting?: {
                                plotColorList: string[] | {
                                    dark: string[];
                                    light: string[];
                                };
                                plotColorCycleMethod: "inOrder" | "random";
                            } | undefined;
                            credentials?: {
                                googleServiceAccountJsonPath?: string | undefined;
                            } | undefined;
                            performance?: {
                                latexParsingDebounceTimeout: number;
                                mdxParsingDebounceTimeout: number;
                            } | undefined;
                            meta?: {
                                title: string;
                                desc?: string | undefined;
                            } | undefined;
                            plugins?: {
                                name: string;
                                version: string;
                                parserIndex: number;
                            }[] | undefined;
                        } | undefined;
                    };
                    _opts?: {
                        noteTypeId?: string | undefined;
                    } | undefined;
                };
                _input_out: {
                    _opts: {
                        noteTypeId?: string | undefined;
                    };
                    props: {
                        bookmarked: boolean;
                        raw: string;
                        docTypeData: {
                            label: string;
                            icon: string;
                            UI: {
                                styles: {
                                    dark: {
                                        bg?: string | undefined;
                                        fg?: string | undefined;
                                    };
                                    light: {
                                        bg?: string | undefined;
                                        fg?: string | undefined;
                                    };
                                };
                            };
                            fs: string;
                            id: string;
                            docType: string;
                            matchWeight: number;
                            url: string;
                            urlQuery: Record<string, string | number | string[] | number[]>;
                            keywords: string[];
                            autoTag: string[];
                            autoTopic: string[];
                            autoSubject: string[];
                            inSidebar: boolean;
                            inNavbar: boolean;
                            filePathPattern?: string | undefined;
                            topicLabel?: string | undefined;
                            subjectLabel?: string | undefined;
                        };
                        rootRelativePath?: string | null | undefined;
                    };
                    parseParams: {
                        docTypeData: {
                            label: string;
                            icon: string;
                            UI: {
                                styles: {
                                    dark: {
                                        bg?: string | undefined;
                                        fg?: string | undefined;
                                    };
                                    light: {
                                        bg?: string | undefined;
                                        fg?: string | undefined;
                                    };
                                };
                            };
                            fs: string;
                            id: string;
                            docType: string;
                            matchWeight: number;
                            url: string;
                            urlQuery: Record<string, string | number | string[] | number[]>;
                            keywords: string[];
                            autoTag: string[];
                            autoTopic: string[];
                            autoSubject: string[];
                            inSidebar: boolean;
                            inNavbar: boolean;
                            filePathPattern?: string | undefined;
                            topicLabel?: string | undefined;
                            subjectLabel?: string | undefined;
                        } | {};
                        parser: (args_0: {
                            data: {
                                id?: string | null | undefined;
                                summary?: string | null | undefined;
                                title?: string | null | undefined;
                                tags?: string | string[] | undefined;
                                topics?: string | string[] | undefined;
                                subjects?: string | string[] | undefined;
                                sequentialKey?: string | null | undefined;
                                importantValues?: number[] | undefined;
                                created?: string | null | undefined;
                                updated?: string | null | undefined;
                                sequential?: number | null | undefined;
                                tableStyles?: {
                                    math?: "base" | "lg" | "xl" | "small" | null | undefined;
                                    expand?: boolean | null | undefined;
                                    text?: "base" | "lg" | "xl" | "small" | null | undefined;
                                    float?: "right" | "left" | null | undefined;
                                    fullWidth?: boolean | null | undefined;
                                    tableCenter?: boolean | null | undefined;
                                    textCenter?: boolean | null | undefined;
                                    headingCenter?: boolean | null | undefined;
                                    noMax?: boolean | null | undefined;
                                } | undefined;
                            };
                            content: string;
                            appConfig: {
                                fsRoot: string;
                                noteTypes: {
                                    fs: string;
                                    label?: string | undefined;
                                    icon?: string | undefined;
                                    UI?: {
                                        styles: {
                                            dark: {
                                                bg?: string | undefined;
                                                fg?: string | undefined;
                                            };
                                            light: {
                                                bg?: string | undefined;
                                                fg?: string | undefined;
                                            };
                                        };
                                    } | undefined;
                                    id?: string | undefined;
                                    docType?: string | undefined;
                                    filePathPattern?: string | undefined;
                                    matchWeight?: number | undefined;
                                    url?: string | undefined;
                                    urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                                    keywords?: string[] | undefined;
                                    topicLabel?: string | undefined;
                                    subjectLabel?: string | undefined;
                                    autoTag?: string[] | undefined;
                                    autoTopic?: string[] | undefined;
                                    autoSubject?: string[] | undefined;
                                    inSidebar?: boolean | undefined;
                                    inNavbar?: boolean | undefined;
                                }[];
                                code?: {
                                    editor: {
                                        defaultLangauge: string;
                                        useVimMode: boolean;
                                    };
                                    theme: {
                                        dark: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                        light: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                    };
                                    syntaxHighlighting: {
                                        transformers: {
                                            regexHighlight: boolean;
                                            lineHighlight: boolean;
                                            lineFocus: boolean;
                                            lineErrorLevel: boolean;
                                            lineDiff: boolean;
                                        };
                                        defaultLanguage: {
                                            inline: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                            block: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                        };
                                    };
                                } | undefined;
                                database?: {
                                    storeFormatted: boolean;
                                    removeIfNotPresentInFs: boolean;
                                } | undefined;
                                navigation?: {
                                    navbarBreakpoint: {
                                        full: number;
                                        minimal: number;
                                    };
                                    maxResultLength: {
                                        snippets: number;
                                        searchAll: number;
                                        equations: number;
                                        categories: number;
                                    };
                                    navbarLinks: (string | {
                                        label: string;
                                        href?: string | undefined;
                                        icon?: string | undefined;
                                        onClick?: ((...args: unknown[]) => unknown) | undefined;
                                    })[];
                                    sidebarLinks: (string | {
                                        icon: string;
                                        label?: string | undefined;
                                        href?: string | undefined;
                                        Icon?: ((...args: unknown[]) => unknown) | undefined;
                                        onClick?: ((...args: unknown[]) => unknown) | undefined;
                                    })[];
                                } | undefined;
                                terminal?: {
                                    logLevel: "info" | "none" | "debug" | "verbose";
                                } | undefined;
                                jupyter?: {
                                    execute: boolean;
                                    environment: string;
                                    syntaxHighlightTheme: string;
                                    jupyterPort: number;
                                    initiallyFoldCells: boolean;
                                    kernel: string;
                                    jupyterReactProps: {
                                        collaborative: boolean;
                                        lite: boolean;
                                        serverUrls?: {
                                            baseUrl?: string | undefined;
                                            wsUrl?: string | undefined;
                                        } | undefined;
                                    };
                                    nbConvert: {
                                        conversionTimeout: number;
                                        execute: boolean;
                                        nbConvertTemplate: string;
                                        notebookOutputDir: string;
                                        nbconvertPath?: string | undefined;
                                        customConversionFunction?: {
                                            pdf?: ((args_0: string, args_1: string, ...args: unknown[]) => string) | undefined;
                                        } | undefined;
                                    };
                                    jupyterNotebookProps: {
                                        readOnly: boolean;
                                        cellMetadataPanel: boolean;
                                        cellSidebarMargin: number;
                                        bundledIPyWidgets: {
                                            name: string;
                                            module: string | Record<string, string>;
                                            version: string;
                                        }[];
                                        externalIPyWidgets: {
                                            name: string;
                                            version: string;
                                        }[];
                                        nbgrader: boolean;
                                        height?: string | undefined;
                                        maxHeight?: string | undefined;
                                    };
                                    cellInputWrappers: Record<string, {
                                        prefix: string;
                                        suffix: string;
                                    }>;
                                    jupyterToken?: string | undefined;
                                } | undefined;
                                math?: {
                                    latexPackages: string[] | "all";
                                    constants: Record<string, number>;
                                    latexFontUrl?: string | undefined;
                                } | undefined;
                                UI?: {
                                    table: {
                                        maxHeight: string;
                                    };
                                    text: {
                                        blockQuoteItalic: boolean;
                                        fontPaths: "default" | {
                                            weight: "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900";
                                            path: string;
                                            style: "bold" | "italic" | "normal";
                                        }[];
                                    };
                                    media: {
                                        imageMap: Record<string, string | undefined>;
                                        includeDefaultImageMap: boolean;
                                        imageRemoteTest: string[];
                                    };
                                    theme: "ulld" | "red" | "orange" | "yellow" | "green" | "blue" | "rose" | "slate" | "gray" | "stone" | "zinc" | "neutral" | "violet";
                                    colors: Record<string, {
                                        dark?: string | undefined;
                                        light?: string | undefined;
                                    } | undefined>;
                                    autoApplyMdxTitles: boolean;
                                } | undefined;
                                slots?: {
                                    navigation?: any;
                                    bibliography?: any;
                                    math?: any;
                                    snippets?: any;
                                    dashboard?: any;
                                    taskManager?: any;
                                    UI?: any;
                                    pdf?: any;
                                    editor?: any;
                                    form?: any;
                                    commandPalette?: any;
                                } | undefined;
                                build?: {
                                    database: {
                                        type: "postgres" | "sqlite";
                                        postgres: {
                                            connectionURI: string;
                                            port?: undefined;
                                            dbName?: undefined;
                                        } | {
                                            port: number;
                                            dbName: string;
                                            connectionURI?: undefined;
                                        };
                                        prioritize: "size" | "speed";
                                    };
                                    additionalUserContent: {
                                        css?: string | undefined;
                                        logo?: string | undefined;
                                        favicon?: string | undefined;
                                    };
                                } | undefined;
                                autoTag?: {
                                    tag?: string | undefined;
                                    path?: string | undefined;
                                }[] | undefined;
                                autoTopic?: {
                                    path?: string | undefined;
                                    topic?: string | undefined;
                                }[] | undefined;
                                autoSubject?: {
                                    path?: string | undefined;
                                    subject?: string | undefined;
                                }[] | undefined;
                                alwaysPreferFs?: boolean | undefined;
                                ignoreFilepaths?: string[] | undefined;
                                tempDir?: string | undefined;
                                generatedDir?: string | undefined;
                                ignorePreferFsExtensions?: string[] | undefined;
                                fileTypePriority?: (".mdx" | ".ipynb" | ".csv" | ".tsv" | ".excel" | ".numpy" | ".html" | ".pickle" | ".db" | ".sql" | ".pdf" | ".json" | ".tex" | ".hdf5" | ".md")[] | undefined;
                                bibPath?: string | undefined;
                                cslPath?: string | undefined;
                                dateHandling?: {
                                    enableAdvancedFormat: boolean;
                                    format: {
                                        short: string;
                                        long: string;
                                        withTime: string;
                                        timeOnly: string;
                                    };
                                    defaultTimeDisplayType: "summarized" | "analog" | "descriptive";
                                    defaultTimeZone?: string | undefined;
                                } | undefined;
                                linkAliases?: Record<string, string> | undefined;
                                plotting?: {
                                    plotColorList: string[] | {
                                        dark: string[];
                                        light: string[];
                                    };
                                    plotColorCycleMethod: "inOrder" | "random";
                                } | undefined;
                                credentials?: {
                                    googleServiceAccountJsonPath?: string | undefined;
                                } | undefined;
                                performance?: {
                                    latexParsingDebounceTimeout: number;
                                    mdxParsingDebounceTimeout: number;
                                } | undefined;
                                meta?: {
                                    title: string;
                                    desc?: string | undefined;
                                } | undefined;
                                plugins?: {
                                    name: string;
                                    version: string;
                                    parserIndex: number;
                                }[] | undefined;
                            };
                            docTypeData?: {
                                id: string;
                                url: string;
                                docType: string;
                                label?: string | undefined;
                                keywords?: string[] | undefined;
                                icon?: string | undefined;
                                UI?: {
                                    styles: {
                                        dark: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                        light: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                    };
                                } | undefined;
                                fs?: string | undefined;
                                filePathPattern?: string | undefined;
                                matchWeight?: number | undefined;
                                urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                                topicLabel?: string | undefined;
                                subjectLabel?: string | undefined;
                                autoTag?: string[] | undefined;
                                autoTopic?: string[] | undefined;
                                autoSubject?: string[] | undefined;
                                inSidebar?: boolean | undefined;
                                inNavbar?: boolean | undefined;
                            } | {} | undefined;
                            serverClient?: any;
                            db?: {
                                id: number;
                                firstSync: string | Date;
                                bookmarked: boolean;
                                lastSync: string | Date;
                                sequentialKey?: string | null | undefined;
                                sequentialIndex?: number | null | undefined;
                                quickLink?: string | null | undefined;
                            } | undefined;
                        }, ...args: unknown[]) => Promise<{
                            tags: string[];
                            topics: string[];
                            subjects: string[];
                            importantValues: number[];
                            id?: string | null | undefined;
                            summary?: string | null | undefined;
                            title?: string | null | undefined;
                            sequentialKey?: string | null | undefined;
                            created?: string | null | undefined;
                            updated?: string | null | undefined;
                            sequential?: number | null | undefined;
                            tableStyles?: {
                                expand: boolean | null;
                                fullWidth: boolean | null;
                                tableCenter: boolean | null;
                                textCenter: boolean | null;
                                headingCenter: boolean | null;
                                noMax: boolean | null;
                                math?: "base" | "lg" | "xl" | "small" | null | undefined;
                                text?: "base" | "lg" | "xl" | "small" | null | undefined;
                                float?: "right" | "left" | null | undefined;
                            } | undefined;
                        } & Record<string, string | number | boolean | Record<string, string | number | boolean | null> | Record<string, Record<string, string | number | boolean | null>> | Record<string, string | number | boolean | null>[] | (string | number | boolean | null)[] | (string | number | boolean | null)[][] | null>>;
                        appConfig?: {
                            fsRoot: string;
                            noteTypes: {
                                fs: string;
                                label?: string | undefined;
                                icon?: string | undefined;
                                UI?: {
                                    styles: {
                                        dark: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                        light: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                    };
                                } | undefined;
                                id?: string | undefined;
                                docType?: string | undefined;
                                filePathPattern?: string | undefined;
                                matchWeight?: number | undefined;
                                url?: string | undefined;
                                urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                                keywords?: string[] | undefined;
                                topicLabel?: string | undefined;
                                subjectLabel?: string | undefined;
                                autoTag?: string[] | undefined;
                                autoTopic?: string[] | undefined;
                                autoSubject?: string[] | undefined;
                                inSidebar?: boolean | undefined;
                                inNavbar?: boolean | undefined;
                            }[];
                            code?: {
                                editor: {
                                    defaultLangauge: string;
                                    useVimMode: boolean;
                                };
                                theme: {
                                    dark: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                    light: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                };
                                syntaxHighlighting: {
                                    transformers: {
                                        regexHighlight: boolean;
                                        lineHighlight: boolean;
                                        lineFocus: boolean;
                                        lineErrorLevel: boolean;
                                        lineDiff: boolean;
                                    };
                                    defaultLanguage: {
                                        inline: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                        block: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                    };
                                };
                            } | undefined;
                            database?: {
                                storeFormatted: boolean;
                                removeIfNotPresentInFs: boolean;
                            } | undefined;
                            navigation?: {
                                navbarBreakpoint: {
                                    full: number;
                                    minimal: number;
                                };
                                maxResultLength: {
                                    snippets: number;
                                    searchAll: number;
                                    equations: number;
                                    categories: number;
                                };
                                navbarLinks: (string | {
                                    label: string;
                                    href?: string | undefined;
                                    icon?: string | undefined;
                                    onClick?: ((...args: unknown[]) => unknown) | undefined;
                                })[];
                                sidebarLinks: (string | {
                                    icon: string;
                                    label?: string | undefined;
                                    href?: string | undefined;
                                    Icon?: ((...args: unknown[]) => unknown) | undefined;
                                    onClick?: ((...args: unknown[]) => unknown) | undefined;
                                })[];
                            } | undefined;
                            terminal?: {
                                logLevel: "info" | "none" | "debug" | "verbose";
                            } | undefined;
                            jupyter?: {
                                execute: boolean;
                                environment: string;
                                syntaxHighlightTheme: string;
                                jupyterPort: number;
                                initiallyFoldCells: boolean;
                                kernel: string;
                                jupyterReactProps: {
                                    collaborative: boolean;
                                    lite: boolean;
                                    serverUrls?: {
                                        baseUrl?: string | undefined;
                                        wsUrl?: string | undefined;
                                    } | undefined;
                                };
                                nbConvert: {
                                    conversionTimeout: number;
                                    execute: boolean;
                                    nbConvertTemplate: string;
                                    notebookOutputDir: string;
                                    nbconvertPath?: string | undefined;
                                    customConversionFunction?: {
                                        pdf?: ((args_0: string, args_1: string, ...args: unknown[]) => string) | undefined;
                                    } | undefined;
                                };
                                jupyterNotebookProps: {
                                    readOnly: boolean;
                                    cellMetadataPanel: boolean;
                                    cellSidebarMargin: number;
                                    bundledIPyWidgets: {
                                        name: string;
                                        module: string | Record<string, string>;
                                        version: string;
                                    }[];
                                    externalIPyWidgets: {
                                        name: string;
                                        version: string;
                                    }[];
                                    nbgrader: boolean;
                                    height?: string | undefined;
                                    maxHeight?: string | undefined;
                                };
                                cellInputWrappers: Record<string, {
                                    prefix: string;
                                    suffix: string;
                                }>;
                                jupyterToken?: string | undefined;
                            } | undefined;
                            math?: {
                                latexPackages: string[] | "all";
                                constants: Record<string, number>;
                                latexFontUrl?: string | undefined;
                            } | undefined;
                            UI?: {
                                table: {
                                    maxHeight: string;
                                };
                                text: {
                                    blockQuoteItalic: boolean;
                                    fontPaths: "default" | {
                                        weight: "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900";
                                        path: string;
                                        style: "bold" | "italic" | "normal";
                                    }[];
                                };
                                media: {
                                    imageMap: Record<string, string | undefined>;
                                    includeDefaultImageMap: boolean;
                                    imageRemoteTest: string[];
                                };
                                theme: "ulld" | "red" | "orange" | "yellow" | "green" | "blue" | "rose" | "slate" | "gray" | "stone" | "zinc" | "neutral" | "violet";
                                colors: Record<string, {
                                    dark?: string | undefined;
                                    light?: string | undefined;
                                } | undefined>;
                                autoApplyMdxTitles: boolean;
                            } | undefined;
                            slots?: {
                                navigation?: any;
                                bibliography?: any;
                                math?: any;
                                snippets?: any;
                                dashboard?: any;
                                taskManager?: any;
                                UI?: any;
                                pdf?: any;
                                editor?: any;
                                form?: any;
                                commandPalette?: any;
                            } | undefined;
                            build?: {
                                database: {
                                    type: "postgres" | "sqlite";
                                    postgres: {
                                        connectionURI: string;
                                        port?: undefined;
                                        dbName?: undefined;
                                    } | {
                                        port: number;
                                        dbName: string;
                                        connectionURI?: undefined;
                                    };
                                    prioritize: "size" | "speed";
                                };
                                additionalUserContent: {
                                    css?: string | undefined;
                                    logo?: string | undefined;
                                    favicon?: string | undefined;
                                };
                            } | undefined;
                            autoTag?: {
                                tag?: string | undefined;
                                path?: string | undefined;
                            }[] | undefined;
                            autoTopic?: {
                                path?: string | undefined;
                                topic?: string | undefined;
                            }[] | undefined;
                            autoSubject?: {
                                path?: string | undefined;
                                subject?: string | undefined;
                            }[] | undefined;
                            alwaysPreferFs?: boolean | undefined;
                            ignoreFilepaths?: string[] | undefined;
                            tempDir?: string | undefined;
                            generatedDir?: string | undefined;
                            ignorePreferFsExtensions?: string[] | undefined;
                            fileTypePriority?: (".mdx" | ".ipynb" | ".csv" | ".tsv" | ".excel" | ".numpy" | ".html" | ".pickle" | ".db" | ".sql" | ".pdf" | ".json" | ".tex" | ".hdf5" | ".md")[] | undefined;
                            bibPath?: string | undefined;
                            cslPath?: string | undefined;
                            dateHandling?: {
                                enableAdvancedFormat: boolean;
                                format: {
                                    short: string;
                                    long: string;
                                    withTime: string;
                                    timeOnly: string;
                                };
                                defaultTimeDisplayType: "summarized" | "analog" | "descriptive";
                                defaultTimeZone?: string | undefined;
                            } | undefined;
                            linkAliases?: Record<string, string> | undefined;
                            plotting?: {
                                plotColorList: string[] | {
                                    dark: string[];
                                    light: string[];
                                };
                                plotColorCycleMethod: "inOrder" | "random";
                            } | undefined;
                            credentials?: {
                                googleServiceAccountJsonPath?: string | undefined;
                            } | undefined;
                            performance?: {
                                latexParsingDebounceTimeout: number;
                                mdxParsingDebounceTimeout: number;
                            } | undefined;
                            meta?: {
                                title: string;
                                desc?: string | undefined;
                            } | undefined;
                            plugins?: {
                                name: string;
                                version: string;
                                parserIndex: number;
                            }[] | undefined;
                        } | undefined;
                    };
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, string>;
            compileMdxString: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    content: string;
                    opts?: {
                        mathLabels?: "none" | "all" | "ams" | undefined;
                    } | undefined;
                };
                _input_out: {
                    content: string;
                    opts: {
                        mathLabels: "none" | "all" | "ams";
                    };
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, string>;
            streamMdxContent: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, string>;
        }>;
        notebook: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            getRemoteIpynbFromPathname: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                equations: never;
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                toDo: never;
                ReadingList: never;
                topics: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                subjects: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                _count: {
                    tags: number;
                    topics: number;
                    subjects: number;
                    citations: number;
                    sequentialList: number;
                    readingList: number;
                };
                citations: {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                sequentialList: {
                    sequentialKey: string;
                } | null;
                definitions: never;
            } & {
                id: number;
                rootRelativePath: string;
                isProtected: boolean | null;
                title: string;
                latexTitle: string | null;
                citationsListOrder: string[];
                importantValues: number[];
                href: string;
                outgoingQuickLinks: string[];
                raw: Buffer;
                sequentialKey: string | null;
                sequentialIndex: number | null;
                bookmarked: boolean;
                firstSync: Date;
                lastSync: Date;
                lastAccess: Date;
            }) | null>;
            getFsIpynb: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    absolutePath: string;
                };
                _input_out: {
                    absolutePath: string;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, string>;
            getPrismaIpynb: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                readingList: {
                    name: string;
                    description: string | null;
                    createdAt: Date;
                    lastUpdate: Date;
                }[];
                topics: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                citations: {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
            } & {
                id: number;
                rootRelativePath: string;
                isProtected: boolean | null;
                title: string;
                latexTitle: string | null;
                citationsListOrder: string[];
                importantValues: number[];
                href: string;
                outgoingQuickLinks: string[];
                raw: Buffer;
                sequentialKey: string | null;
                sequentialIndex: number | null;
                bookmarked: boolean;
                firstSync: Date;
                lastSync: Date;
                lastAccess: Date;
            }) | null>;
            getAllNotebookPaths: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, string[]>;
            getDatabaseNotebook: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    rootRelativePath: string;
                };
                _input_out: {
                    rootRelativePath: string;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                topics: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                subjects: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
            } & {
                id: number;
                rootRelativePath: string;
                isProtected: boolean | null;
                title: string;
                latexTitle: string | null;
                citationsListOrder: string[];
                importantValues: number[];
                href: string;
                outgoingQuickLinks: string[];
                raw: Buffer;
                sequentialKey: string | null;
                sequentialIndex: number | null;
                bookmarked: boolean;
                firstSync: Date;
                lastSync: Date;
                lastAccess: Date;
            }) | null>;
        }>;
        snippets: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            saveSnippet: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    content: string;
                    description: string;
                    language: "rel" | "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "mdx" | "md" | "json" | "csv" | "html" | "tex" | "jsx" | "fs" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "文言" | "wl" | "yml";
                    id?: number | undefined;
                    keywords?: string[] | {
                        set: string[];
                    } | undefined;
                };
                _input_out: {
                    content: string;
                    description: string;
                    language: "rel" | "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "mdx" | "md" | "json" | "csv" | "html" | "tex" | "jsx" | "fs" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "文言" | "wl" | "yml";
                    id?: number | undefined;
                    keywords?: string[] | {
                        set: string[];
                    } | undefined;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, boolean>;
            deleteSnippet: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: number;
                _input_out: number;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
                content: string;
                description: string;
                keywords: string[];
                language: string;
                createdAt: Date;
            }>;
            getSnippets: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    query?: string | undefined;
                    language?: string | undefined;
                };
                _input_out: {
                    query?: string | undefined;
                    language?: string | undefined;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
                content: string;
                description: string;
                keywords: string[];
                language: string;
                createdAt: Date;
            }[]>;
            getSpecificSnippet: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: number;
                _input_out: number;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
                content: string;
                description: string;
                keywords: string[];
                language: string;
                createdAt: Date;
            } | null>;
        }>;
        fsUtils: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            getParsableFiletypesAtPath: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                ".csv": boolean;
                ".tsv": boolean;
                ".excel": boolean;
                ".numpy": boolean;
                ".html": boolean;
                ".pickle": boolean;
                ".db": boolean;
                ".sql": boolean;
                ".pdf": boolean;
                ".json": boolean;
                ".tex": boolean;
                ".hdf5": boolean;
                ".md": boolean;
                ".mdx": boolean;
                ".ipynb": boolean;
            }>;
            getAllRootRelativePathsOfFiletype: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: ".md" | ".mdx" | ".ipynb";
                _input_out: ".md" | ".mdx" | ".ipynb";
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, string[]>;
            clearTempDir: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, void>;
            getUtf8File: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    rootRelativePath: string;
                    useProcessRoot?: boolean | undefined;
                };
                _input_out: {
                    rootRelativePath: string;
                    useProcessRoot: boolean;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, string>;
        }>;
        readingList: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            addToReadingList: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    type: "BibEntry" | "MdxNote";
                    itemId: string | number;
                    readingListName?: string | undefined;
                };
                _input_out: {
                    type: "BibEntry" | "MdxNote";
                    readingListName: string;
                    itemId: string | number;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                name: string;
                description: string | null;
                createdAt: Date;
                lastUpdate: Date;
            }>;
            getReadingListContent: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                bibEntries: ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    MdxNotes: {
                        id: number;
                        isProtected: boolean | null;
                        dietSummaryKey: string | null;
                        title: string;
                        latexTitle: string | null;
                        rootRelativePath: string;
                        noteType: string;
                        content: string;
                        formatted: string | null;
                        summary: string | null;
                        citationsListOrder: string[];
                        importantValues: number[];
                        imageSrc: string | null;
                        href: string;
                        sequentialKey: string | null;
                        sequentialIndex: number | null;
                        floatImages: boolean;
                        remoteUrl: string | null;
                        trackRemote: boolean;
                        outgoingQuickLinks: string[];
                        quickLink: string | null;
                        bookmarked: boolean;
                        firstSync: Date;
                        lastSync: Date;
                        lastAccess: Date;
                    }[];
                    citationGroups: {
                        name: string;
                        description: string | null;
                    }[];
                } & {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                })[];
            } & {
                name: string;
                description: string | null;
                createdAt: Date;
                lastUpdate: Date;
            }) | null>;
        }>;
        universalNotes: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            getSummaryOfAllNotes: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, {
                summary: string | null;
                title: string;
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                subjects: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                _count: {
                    topics: number;
                    subjects: number;
                    tags: number;
                    citations: number;
                    sequentialList: number;
                    ReadingList: number;
                    equations: number;
                    definitions: number;
                    toDo: number;
                };
            }[]>;
            getNoteIdByHref: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, number | null>;
            getFsNoteOfUnknownFormat: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                content: string;
                format: string;
            } | undefined>;
            getQuickLinkHref: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                href: string;
            } | null>;
            getUniqueNoteTypes: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, string[]>;
            getCategoryNoteCount: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, number>;
            getUserOverview: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, {
                overallFirstSync: Date | undefined;
                totalNotes: {
                    mdx: number;
                    notebook: number;
                    total: number;
                };
                uniqueNoteTypes: string[];
                lastAccessNotes: ({
                    type: "mdxNote";
                    id: number;
                    href: string;
                    title: string;
                    noteType: string;
                    lastAccess: Date;
                    firstSync: Date;
                    lastSync: Date;
                } | {
                    type: "notebook";
                    id: number;
                    href: string;
                    title: string;
                    lastAccess: Date;
                    firstSync: Date;
                    lastSync: Date;
                })[];
            }>;
        }>;
        media: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            getImagesInDir: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    ignore?: string | string[] | null | undefined;
                    returnAs?: "absolute" | "rootRelative" | undefined;
                    includeSvg?: boolean | undefined;
                };
                _input_out: {
                    returnAs: "absolute" | "rootRelative";
                    includeSvg: boolean;
                    ignore?: string | string[] | null | undefined;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, any>;
            removeImageBackground: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    absolutePath: string;
                    config?: {
                        output?: "x-alpha8" | "x-rgba8" | "png" | "jpeg" | "webp" | undefined;
                        quality?: number | undefined;
                        model?: "small" | "medium" | "large" | undefined;
                    } | undefined;
                };
                _input_out: {
                    absolutePath: string;
                    config: {
                        output: "x-alpha8" | "x-rgba8" | "png" | "jpeg" | "webp";
                        quality: number;
                        model: "small" | "medium" | "large";
                    };
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, string>;
            getRandomBackgroundSettings: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, {
                path?: string | undefined;
                createdAt?: Date | undefined;
                landingImageAlign?: import(".prisma/client").$Enums.ImageAlignment | undefined;
                lockedLandingImage?: string | null | undefined;
            }>;
            deleteRandomImage: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    path: string;
                };
                _input_out: {
                    path: string;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                path: string;
                createdAt: Date;
            }>;
            updateRandomImageBackground: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    path: string;
                };
                _input_out: {
                    path: string;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                path: string;
                createdAt: Date;
            }>;
        }>;
        qa: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            saveQA: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    question: string;
                    answer: string;
                    id?: string | undefined;
                    tags?: string[] | undefined;
                    topics?: string[] | undefined;
                    subjects?: string[] | undefined;
                    description?: string | undefined;
                };
                _input_out: {
                    tags: string[];
                    topics: string[];
                    subjects: string[];
                    question: string;
                    answer: string;
                    id?: string | undefined;
                    description?: string | undefined;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: string;
                question: string;
                answer: string;
                description: string | null;
                secondaryLabel: string | null;
                correctCount: number;
                inCorrectCount: number;
            }>;
            getSpecificQA: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                topics: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                subjects: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
            } & {
                id: string;
                question: string;
                answer: string;
                description: string | null;
                secondaryLabel: string | null;
                correctCount: number;
                inCorrectCount: number;
            }) | null>;
            addQAResult: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    success: boolean;
                    id: string;
                };
                _input_out: {
                    success: boolean;
                    id: string;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: string;
                question: string;
                answer: string;
                description: string | null;
                secondaryLabel: string | null;
                correctCount: number;
                inCorrectCount: number;
            } | undefined>;
            getQaAutocompleteOptions: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, string[]>;
            getQaExam: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    tags?: string[] | undefined;
                    topics?: string[] | undefined;
                    subjects?: string[] | undefined;
                };
                _input_out: {
                    tags?: string[] | undefined;
                    topics?: string[] | undefined;
                    subjects?: string[] | undefined;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                id: string;
                question: string;
                answer: string;
                description: string | null;
                secondaryLabel: string | null;
                correctCount: number;
                inCorrectCount: number;
            } & {
                randomId: number;
            })[]>;
        }>;
        whiteboard: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            save: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    id: string;
                    data: string;
                };
                _input_out: {
                    id: string;
                    data: string;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: string;
                data: Buffer;
            }>;
            getById: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    id: string;
                };
                _input_out: {
                    id: string;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: string;
                data: Buffer;
            } | null>;
            deleteById: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    id: string;
                };
                _input_out: {
                    id: string;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: string;
                data: Buffer;
            }>;
        }>;
        bibliography: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            getPrismaBib: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, ({
                entries: ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    MdxNotes: {
                        id: number;
                        href: string;
                        title: string;
                    }[];
                    citationGroups: {
                        name: string;
                        description: string | null;
                    }[];
                } & {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                })[];
            } & {
                id: number;
                filename: string;
                firstSync: Date;
                lastSync: Date;
            }) | null>;
            syncBib: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    bibId?: number | undefined;
                };
                _input_out: {
                    bibId: number;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                entries: ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    MdxNotes: {
                        id: number;
                        href: string;
                        title: string;
                    }[];
                    citationGroups: {
                        name: string;
                        description: string | null;
                    }[];
                } & {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                })[];
            } & {
                id: number;
                filename: string;
                firstSync: Date;
                lastSync: Date;
            }) | {
                errorKey: "bibPathFileDoesNotExist";
            }>;
            syncBibServerSide: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: number | undefined;
                _input_out: number | undefined;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                entries: ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    MdxNotes: {
                        id: number;
                        href: string;
                        title: string;
                    }[];
                    citationGroups: {
                        name: string;
                        description: string | null;
                    }[];
                } & {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                })[];
            } & {
                id: number;
                filename: string;
                firstSync: Date;
                lastSync: Date;
            }) | {
                errorKey: "bibPathFileDoesNotExist";
            }>;
            readBibFromFileSystem: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, string | undefined>;
            setBibEntryPdfPath: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    bibEntryId: string;
                    pdfPath: string | null;
                };
                _input_out: {
                    bibEntryId: string;
                    pdfPath: string | null;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: string;
                BibId: number | null;
                OwnWork: boolean;
                ColleaguesWork: boolean;
                read: boolean;
                htmlCitation: string | null;
                PdfPath: string | null;
                address: string | null;
                annote: string | null;
                author: string | null;
                booktitle: string | null;
                chapter: string | null;
                crossref: string | null;
                doi: string | null;
                edition: string | null;
                editor: string | null;
                email: string | null;
                howpublished: string | null;
                institution: string | null;
                journal: string | null;
                month: string | null;
                note: string | null;
                number: string | null;
                organization: string | null;
                pages: string | null;
                publisher: string | null;
                school: string | null;
                series: string | null;
                title: string | null;
                volume: string | null;
                type: string | null;
                year: string | null;
                numpages: string | null;
                url: string | null;
                issue: string | null;
                issn: string | null;
                abstract: string | null;
                urldate: string | null;
                keywords: string | null;
                copyright: string | null;
                createdAt: Date;
                lastAccess: Date;
            }>;
            getBib: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: number;
                _input_out: number;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                entries: ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    readingList: {
                        name: string;
                        description: string | null;
                        createdAt: Date;
                        lastUpdate: Date;
                    }[];
                    MdxNotes: ({
                        tags: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                        topics: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                        subjects: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                    } & {
                        id: number;
                        isProtected: boolean | null;
                        dietSummaryKey: string | null;
                        title: string;
                        latexTitle: string | null;
                        rootRelativePath: string;
                        noteType: string;
                        content: string;
                        formatted: string | null;
                        summary: string | null;
                        citationsListOrder: string[];
                        importantValues: number[];
                        imageSrc: string | null;
                        href: string;
                        sequentialKey: string | null;
                        sequentialIndex: number | null;
                        floatImages: boolean;
                        remoteUrl: string | null;
                        trackRemote: boolean;
                        outgoingQuickLinks: string[];
                        quickLink: string | null;
                        bookmarked: boolean;
                        firstSync: Date;
                        lastSync: Date;
                        lastAccess: Date;
                    })[];
                    citationGroups: {
                        name: string;
                        description: string | null;
                    }[];
                } & {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                })[];
            } & {
                id: number;
                filename: string;
                firstSync: Date;
                lastSync: Date;
            }) | null>;
            getBibCitation: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string[];
                _input_out: string[];
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: string;
                type: string | null;
                htmlCitation: string | null;
            }[]>;
            getBibEntry: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                readingList: ({
                    bibEntries: {
                        id: string;
                        title: string | null;
                        createdAt: Date;
                    }[];
                } & {
                    name: string;
                    description: string | null;
                    createdAt: Date;
                    lastUpdate: Date;
                })[];
                MdxNotes: ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    topics: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    subjects: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    citations: {
                        id: string;
                        BibId: number | null;
                        OwnWork: boolean;
                        ColleaguesWork: boolean;
                        read: boolean;
                        htmlCitation: string | null;
                        PdfPath: string | null;
                        address: string | null;
                        annote: string | null;
                        author: string | null;
                        booktitle: string | null;
                        chapter: string | null;
                        crossref: string | null;
                        doi: string | null;
                        edition: string | null;
                        editor: string | null;
                        email: string | null;
                        howpublished: string | null;
                        institution: string | null;
                        journal: string | null;
                        month: string | null;
                        note: string | null;
                        number: string | null;
                        organization: string | null;
                        pages: string | null;
                        publisher: string | null;
                        school: string | null;
                        series: string | null;
                        title: string | null;
                        volume: string | null;
                        type: string | null;
                        year: string | null;
                        numpages: string | null;
                        url: string | null;
                        issue: string | null;
                        issn: string | null;
                        abstract: string | null;
                        urldate: string | null;
                        keywords: string | null;
                        copyright: string | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                } & {
                    id: number;
                    isProtected: boolean | null;
                    dietSummaryKey: string | null;
                    title: string;
                    latexTitle: string | null;
                    rootRelativePath: string;
                    noteType: string;
                    content: string;
                    formatted: string | null;
                    summary: string | null;
                    citationsListOrder: string[];
                    importantValues: number[];
                    imageSrc: string | null;
                    href: string;
                    sequentialKey: string | null;
                    sequentialIndex: number | null;
                    floatImages: boolean;
                    remoteUrl: string | null;
                    trackRemote: boolean;
                    outgoingQuickLinks: string[];
                    quickLink: string | null;
                    bookmarked: boolean;
                    firstSync: Date;
                    lastSync: Date;
                    lastAccess: Date;
                })[];
                citationGroups: ({
                    entries: {
                        id: string;
                        BibId: number | null;
                        OwnWork: boolean;
                        ColleaguesWork: boolean;
                        read: boolean;
                        htmlCitation: string | null;
                        PdfPath: string | null;
                        address: string | null;
                        annote: string | null;
                        author: string | null;
                        booktitle: string | null;
                        chapter: string | null;
                        crossref: string | null;
                        doi: string | null;
                        edition: string | null;
                        editor: string | null;
                        email: string | null;
                        howpublished: string | null;
                        institution: string | null;
                        journal: string | null;
                        month: string | null;
                        note: string | null;
                        number: string | null;
                        organization: string | null;
                        pages: string | null;
                        publisher: string | null;
                        school: string | null;
                        series: string | null;
                        title: string | null;
                        volume: string | null;
                        type: string | null;
                        year: string | null;
                        numpages: string | null;
                        url: string | null;
                        issue: string | null;
                        issn: string | null;
                        abstract: string | null;
                        urldate: string | null;
                        keywords: string | null;
                        copyright: string | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                } & {
                    name: string;
                    description: string | null;
                })[];
            } & {
                id: string;
                BibId: number | null;
                OwnWork: boolean;
                ColleaguesWork: boolean;
                read: boolean;
                htmlCitation: string | null;
                PdfPath: string | null;
                address: string | null;
                annote: string | null;
                author: string | null;
                booktitle: string | null;
                chapter: string | null;
                crossref: string | null;
                doi: string | null;
                edition: string | null;
                editor: string | null;
                email: string | null;
                howpublished: string | null;
                institution: string | null;
                journal: string | null;
                month: string | null;
                note: string | null;
                number: string | null;
                organization: string | null;
                pages: string | null;
                publisher: string | null;
                school: string | null;
                series: string | null;
                title: string | null;
                volume: string | null;
                type: string | null;
                year: string | null;
                numpages: string | null;
                url: string | null;
                issue: string | null;
                issn: string | null;
                abstract: string | null;
                urldate: string | null;
                keywords: string | null;
                copyright: string | null;
                createdAt: Date;
                lastAccess: Date;
            }) | null>;
            addBibItemTag: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    tag: string;
                    bibItemId: string;
                };
                _input_out: {
                    tag: string;
                    bibItemId: string;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
            } & {
                id: string;
                BibId: number | null;
                OwnWork: boolean;
                ColleaguesWork: boolean;
                read: boolean;
                htmlCitation: string | null;
                PdfPath: string | null;
                address: string | null;
                annote: string | null;
                author: string | null;
                booktitle: string | null;
                chapter: string | null;
                crossref: string | null;
                doi: string | null;
                edition: string | null;
                editor: string | null;
                email: string | null;
                howpublished: string | null;
                institution: string | null;
                journal: string | null;
                month: string | null;
                note: string | null;
                number: string | null;
                organization: string | null;
                pages: string | null;
                publisher: string | null;
                school: string | null;
                series: string | null;
                title: string | null;
                volume: string | null;
                type: string | null;
                year: string | null;
                numpages: string | null;
                url: string | null;
                issue: string | null;
                issn: string | null;
                abstract: string | null;
                urldate: string | null;
                keywords: string | null;
                copyright: string | null;
                createdAt: Date;
                lastAccess: Date;
            }>;
            removeBibEntryTag: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    tag: string;
                    bibEntryId: string;
                };
                _input_out: {
                    tag: string;
                    bibEntryId: string;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: string;
                BibId: number | null;
                OwnWork: boolean;
                ColleaguesWork: boolean;
                read: boolean;
                htmlCitation: string | null;
                PdfPath: string | null;
                address: string | null;
                annote: string | null;
                author: string | null;
                booktitle: string | null;
                chapter: string | null;
                crossref: string | null;
                doi: string | null;
                edition: string | null;
                editor: string | null;
                email: string | null;
                howpublished: string | null;
                institution: string | null;
                journal: string | null;
                month: string | null;
                note: string | null;
                number: string | null;
                organization: string | null;
                pages: string | null;
                publisher: string | null;
                school: string | null;
                series: string | null;
                title: string | null;
                volume: string | null;
                type: string | null;
                year: string | null;
                numpages: string | null;
                url: string | null;
                issue: string | null;
                issn: string | null;
                abstract: string | null;
                urldate: string | null;
                keywords: string | null;
                copyright: string | null;
                createdAt: Date;
                lastAccess: Date;
            }>;
            bibEntryUpsert: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: any;
                _input_out: any;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: string;
                BibId: number | null;
                OwnWork: boolean;
                ColleaguesWork: boolean;
                read: boolean;
                htmlCitation: string | null;
                PdfPath: string | null;
                address: string | null;
                annote: string | null;
                author: string | null;
                booktitle: string | null;
                chapter: string | null;
                crossref: string | null;
                doi: string | null;
                edition: string | null;
                editor: string | null;
                email: string | null;
                howpublished: string | null;
                institution: string | null;
                journal: string | null;
                month: string | null;
                note: string | null;
                number: string | null;
                organization: string | null;
                pages: string | null;
                publisher: string | null;
                school: string | null;
                series: string | null;
                title: string | null;
                volume: string | null;
                type: string | null;
                year: string | null;
                numpages: string | null;
                url: string | null;
                issue: string | null;
                issn: string | null;
                abstract: string | null;
                urldate: string | null;
                keywords: string | null;
                copyright: string | null;
                createdAt: Date;
                lastAccess: Date;
            }>;
            bibFilename: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: number | undefined;
                _input_out: number | undefined;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, string | {
                filename: string;
            } | undefined>;
            getCitationGroup: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                entries: ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    MdxNotes: {
                        id: number;
                        summary: string | null;
                        title: string;
                    }[];
                } & {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                })[];
            } & {
                name: string;
                description: string | null;
            }) | null>;
        }>;
        beta: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            parseMdxString: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    content: string;
                };
                _input_out: {
                    content: string;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, string>;
        }>;
    };
    export const appRouter: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
        ctx: object;
        meta: object;
        errorShape: import("@trpc/server").DefaultErrorShape;
        transformer: import("@trpc/server").DefaultDataTransformer;
    }>, {
        autoSettings: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            setAutoSettingsFromConfig: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, void>;
            getAutoSettings: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    type?: "tag" | "topic" | "subject" | undefined;
                    withRegex?: boolean | undefined;
                };
                _input_out: {
                    withRegex: boolean;
                    type?: "tag" | "topic" | "subject" | undefined;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, import("trpc/types").AutoSettingWithRegex[] | {
                id?: number;
                glob: string;
                value: string;
                type: import(".prisma/client").autoSetting;
            }[] | undefined>;
            deleteAutoSettingById: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: number;
                _input_out: number;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
                type: import(".prisma/client").$Enums.autoSetting;
                glob: string;
                value: string;
            }>;
            addAutoSetting: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    type: "tag" | "topic" | "subject";
                    value: string;
                    glob: string;
                    id?: number | undefined;
                };
                _input_out: {
                    type: "tag" | "topic" | "subject";
                    value: string;
                    glob: string;
                    id?: number | undefined;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
                type: import(".prisma/client").$Enums.autoSetting;
                glob: string;
                value: string;
            }>;
        }>;
        sync: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            backupNonFileSystemDB: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, void>;
        }>;
        toDo: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            getToDoLists: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: number | undefined;
                _input_out: number | undefined;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
                label: string;
                active: boolean;
            } | {
                id: number;
                label: string;
                active: boolean;
            }[]>;
            getToDoListById: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: number;
                _input_out: number;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                topics: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                subjects: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
            } & {
                id: number;
                label: string;
                createdAt: Date;
                lastUpdate: Date;
                lastAccess: Date;
            }) | null>;
            getToDos: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    listIds?: string | number | string[] | number[] | undefined;
                    showCompleted?: string | boolean | undefined;
                };
                _input_out: {
                    showCompleted: boolean;
                    listIds?: number[] | undefined;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                todos: {
                    topic: {
                        value: string;
                    }[];
                    subject: {
                        value: string;
                    }[];
                    id: number;
                    label: string;
                    tags: ({
                        value: string;
                        kanbanId?: number | null | undefined;
                    } | {
                        value: string;
                        kanbanId?: number | null | undefined;
                    })[];
                    _count: {
                        topic: number;
                        subject: number;
                        tags: number;
                        tasks: number;
                    };
                    tasks: {
                        id: number;
                        bookmarked: boolean;
                        status: string;
                        task: string;
                        priority: number;
                        createdAt?: any;
                        dueAt?: any;
                        details?: string | null | undefined;
                        parentId?: number | null | undefined;
                        category?: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper" | null | undefined;
                        toDoListId?: number | null | undefined;
                        completedOn?: any;
                    }[];
                    createdAt?: any;
                    lastUpdate?: any;
                }[];
                lists: {
                    id: number;
                    label: string;
                    active: boolean;
                }[];
            }>;
            setToDoStatus: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    status: string;
                    taskIds: number[];
                };
                _input_out: {
                    status: string;
                    taskIds: number[];
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, import(".prisma/client").Prisma.BatchPayload>;
            findListsByTaggables: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    tags?: string[] | undefined;
                    topics?: string[] | undefined;
                    subjects?: string[] | undefined;
                };
                _input_out: {
                    tags: string[];
                    topics: string[];
                    subjects: string[];
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                createdAt: string;
                tasks: {
                    dueAt: string | null;
                    createdAt: string;
                    details: string | null;
                    category: import(".prisma/client").$Enums.TaskCategory | null;
                }[];
                id: number;
                label: string;
                _count: {
                    tasks: number;
                };
            }[]>;
            getOverdueTasksByListId: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: number;
                _input_out: number;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                _count: {
                    tasks: number;
                };
                tasks: {
                    id: number;
                    createdAt: Date;
                    task: string;
                    dueAt: Date | null;
                    details: string | null;
                    parentId: number | null;
                    category: import(".prisma/client").$Enums.TaskCategory | null;
                    bookmarked: boolean;
                    status: string;
                    priority: number;
                    toDoListId: number | null;
                    completedOn: Date | null;
                }[];
            } | null>;
            getOverdueTaskCount: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, number>;
            getOverdueTasks: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, {
                id: number;
                createdAt: Date;
                task: string;
                dueAt: Date | null;
                details: string | null;
                parentId: number | null;
                category: import(".prisma/client").$Enums.TaskCategory | null;
                bookmarked: boolean;
                status: string;
                priority: number;
                toDoListId: number | null;
                completedOn: Date | null;
            }[]>;
            setToDoDueDate: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    dueAt: string | Date | null;
                    taskIds: number[];
                };
                _input_out: {
                    dueAt: Date | null;
                    taskIds: number[];
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, import(".prisma/client").Prisma.BatchPayload>;
            setToDoList: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    taskId: number;
                    listId: number;
                };
                _input_out: {
                    taskId: number;
                    listId: number;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, import(".prisma/client").Prisma.BatchPayload>;
            deleteTaskByIds: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string | number | string[] | number[] | undefined;
                _input_out: number[];
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, import(".prisma/client").Prisma.BatchPayload>;
            toggleToDoBookmark: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    taskId: number;
                    shouldBookmark?: boolean | undefined;
                };
                _input_out: {
                    taskId: number;
                    shouldBookmark?: boolean | undefined;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, import(".prisma/client").Prisma.BatchPayload>;
            setToDoPriority: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    priority: number;
                    taskIds: number[];
                };
                _input_out: {
                    priority: number;
                    taskIds: number[];
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, import(".prisma/client").Prisma.BatchPayload>;
            getToDoDetails: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    toDoId: number;
                };
                _input_out: {
                    toDoId: number;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                topics: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
            } & {
                id: number;
                createdAt: Date;
                task: string;
                dueAt: Date | null;
                details: string | null;
                parentId: number | null;
                category: import(".prisma/client").$Enums.TaskCategory | null;
                bookmarked: boolean;
                status: string;
                priority: number;
                toDoListId: number | null;
                completedOn: Date | null;
            }) | null>;
            createNewTodoList: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    label: string;
                    tags: string[];
                    topics: string[];
                    subjects: string[];
                };
                _input_out: {
                    label: string;
                    tags: string[];
                    topics: string[];
                    subjects: string[];
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
                label: string;
                createdAt: Date;
                lastUpdate: Date;
                lastAccess: Date;
            } | {
                errorKey: "toDoListExists";
            }>;
            createNewToDo: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    task: string;
                    listId: number;
                    status?: string | undefined;
                    dueAt?: string | Date | null | undefined;
                    details?: string | null | undefined;
                    priority?: number | undefined;
                };
                _input_out: {
                    status: string;
                    task: string;
                    priority: number;
                    listId: number;
                    dueAt?: Date | null | undefined;
                    details?: string | null | undefined;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
                label: string;
                createdAt: Date;
                lastUpdate: Date;
                lastAccess: Date;
            }>;
            deleteToDos: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: number[];
                _input_out: number[];
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, import(".prisma/client").Prisma.BatchPayload>;
            editTaskNote: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    note: string | null;
                    taskId: number;
                };
                _input_out: {
                    note: string | null;
                    taskId: number;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
                createdAt: Date;
                task: string;
                dueAt: Date | null;
                details: string | null;
                parentId: number | null;
                category: import(".prisma/client").$Enums.TaskCategory | null;
                bookmarked: boolean;
                status: string;
                priority: number;
                toDoListId: number | null;
                completedOn: Date | null;
            }>;
            getMostRecentToDoListId: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, {
                id: number;
            }[]>;
            markCompleted: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    taskIds: number[];
                };
                _input_out: {
                    taskIds: number[];
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, void>;
            updateTask: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    id: number;
                    task: string;
                    status?: string | undefined;
                    dueAt?: string | Date | null | undefined;
                    details?: string | null | undefined;
                    priority?: number | undefined;
                };
                _input_out: {
                    id: number;
                    status: string;
                    task: string;
                    priority: number;
                    dueAt?: Date | null | undefined;
                    details?: string | null | undefined;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                ToDoList: {
                    id: number;
                } | null;
            }>;
            archiveTasks: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: number[];
                _input_out: number[];
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, import(".prisma/client").Prisma.BatchPayload>;
            getTaskLists: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, {
                id: number;
                label: string;
                lastUpdate: Date;
            }[]>;
            getTasksByCompletionDate: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    start?: Date | undefined;
                    stop?: Date | undefined;
                } | undefined;
                _input_out: {
                    stop: Date;
                    start?: Date | undefined;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, void>;
            getTaskManagerOverview: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, {
                tasks: {
                    id: number;
                    createdAt: Date;
                    status: string;
                    dueAt: Date | null;
                    toDoListId: number | null;
                    completedOn: Date | null;
                }[];
                taskLists: {
                    id: number;
                    label: string;
                    createdAt: Date;
                    _count: {
                        tasks: number;
                        tags: number;
                        topics: number;
                        subjects: number;
                    };
                }[];
                overdueCount: number;
            }>;
        }>;
        equations: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            getEquationById: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    id?: number | undefined;
                    equationId?: string | undefined;
                };
                _input_out: {
                    id?: number | undefined;
                    equationId?: string | undefined;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
                title: string;
                content: string;
                tags: {
                    value: string;
                }[];
                relatedValues: {
                    input: unknown;
                    output: number;
                }[];
                equationId: string | null;
                desc: string | null;
                asPython: string | null;
                variables: string[];
                keywords: string[];
            } | null>;
            getParsedEquationById: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    id: number;
                    title: {
                        options: {
                            width?: number | undefined;
                            container?: boolean | undefined;
                            em?: number | undefined;
                            ex?: number | undefined;
                            inline?: boolean | undefined;
                            styles?: boolean | undefined;
                            fontCache?: boolean | undefined;
                            assistiveMml?: boolean | undefined;
                            autoWrap?: boolean | undefined;
                            matchFontHeight?: boolean | undefined;
                        };
                        appendStylesToId?: string | undefined;
                        appendStylesToClass?: string | undefined;
                    };
                    content: {
                        options: {
                            width?: number | undefined;
                            container?: boolean | undefined;
                            em?: number | undefined;
                            ex?: number | undefined;
                            inline?: boolean | undefined;
                            styles?: boolean | undefined;
                            fontCache?: boolean | undefined;
                            assistiveMml?: boolean | undefined;
                            autoWrap?: boolean | undefined;
                            matchFontHeight?: boolean | undefined;
                        };
                        appendStylesToId?: string | undefined;
                        appendStylesToClass?: string | undefined;
                    };
                    desc: {
                        options: {
                            width?: number | undefined;
                            container?: boolean | undefined;
                            em?: number | undefined;
                            ex?: number | undefined;
                            inline?: boolean | undefined;
                            styles?: boolean | undefined;
                            fontCache?: boolean | undefined;
                            assistiveMml?: boolean | undefined;
                            autoWrap?: boolean | undefined;
                            matchFontHeight?: boolean | undefined;
                        };
                        appendStylesToId?: string | undefined;
                        appendStylesToClass?: string | undefined;
                    };
                    equationId?: string | undefined;
                };
                _input_out: {
                    id: number;
                    title: {
                        options: {
                            width?: number | undefined;
                            container?: boolean | undefined;
                            em?: number | undefined;
                            ex?: number | undefined;
                            inline?: boolean | undefined;
                            styles?: boolean | undefined;
                            fontCache?: boolean | undefined;
                            assistiveMml?: boolean | undefined;
                            autoWrap?: boolean | undefined;
                            matchFontHeight?: boolean | undefined;
                        };
                        appendStylesToId?: string | undefined;
                        appendStylesToClass?: string | undefined;
                    };
                    content: {
                        options: {
                            width?: number | undefined;
                            container?: boolean | undefined;
                            em?: number | undefined;
                            ex?: number | undefined;
                            inline?: boolean | undefined;
                            styles?: boolean | undefined;
                            fontCache?: boolean | undefined;
                            assistiveMml?: boolean | undefined;
                            autoWrap?: boolean | undefined;
                            matchFontHeight?: boolean | undefined;
                        };
                        appendStylesToId?: string | undefined;
                        appendStylesToClass?: string | undefined;
                    };
                    desc: {
                        options: {
                            width?: number | undefined;
                            container?: boolean | undefined;
                            em?: number | undefined;
                            ex?: number | undefined;
                            inline?: boolean | undefined;
                            styles?: boolean | undefined;
                            fontCache?: boolean | undefined;
                            assistiveMml?: boolean | undefined;
                            autoWrap?: boolean | undefined;
                            matchFontHeight?: boolean | undefined;
                        };
                        appendStylesToId?: string | undefined;
                        appendStylesToClass?: string | undefined;
                    };
                    equationId?: string | undefined;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
                tags: ({
                    value: string;
                    kanbanId?: number | null | undefined;
                } | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[];
                variables: string[];
                topics: {
                    value: string;
                }[];
                subjects: {
                    value: string;
                }[];
                title?: string | null | undefined;
                content?: string | null | undefined;
                equationId?: string | null | undefined;
                desc?: string | null | undefined;
                asPython?: string | null | undefined;
                createdAt?: string | Date | null | undefined;
            }>;
            getEquationEmbedProps: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    equationId: string;
                };
                _input_out: {
                    equationId: string;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                rawLatex: string;
                id: number;
                tags: ({
                    value: string;
                    kanbanId?: number | null | undefined;
                } | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[];
                variables: string[];
                topics: {
                    value: string;
                }[];
                subjects: {
                    value: string;
                }[];
                title?: string | null | undefined;
                content?: string | null | undefined;
                equationId?: string | null | undefined;
                desc?: string | null | undefined;
                asPython?: string | null | undefined;
                createdAt?: string | Date | null | undefined;
            }>;
            deleteEquationById: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: number;
                _input_out: number;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
                equationId: string | null;
                title: string;
                desc: string | null;
                content: string;
                asPython: string | null;
                variableLegend: unknown;
                variables: string[];
                keywords: string[];
                createdAt: Date;
                lastAccess: Date;
            }>;
            getEquationsList: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    orderBy: "title" | "createdAt";
                    value?: string | undefined;
                    tags?: string | string[] | undefined;
                    query?: string | undefined;
                    take?: number | undefined;
                    variables?: string | string[] | undefined;
                    page?: number | undefined;
                    sortDir?: "desc" | "asc" | undefined;
                };
                _input_out: {
                    tags: any[];
                    orderBy: "title" | "createdAt";
                    take: number;
                    variables: any[];
                    page: number;
                    sortDir: "desc" | "asc";
                    value?: string | undefined;
                    query?: string | undefined;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                equations: {
                    id: number;
                    equationId: string | null;
                    title: string;
                    desc: string | null;
                    content: string;
                    asPython: string | null;
                    variableLegend: unknown;
                    variables: string[];
                    keywords: string[];
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                tags: string[];
                variables: string[];
            }>;
            addEquation: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    title: string;
                    content: string;
                    variables: string[];
                    keywords: string[];
                    tagInput: string;
                    variableInput: string;
                    keywordInput: string;
                    id?: number | undefined;
                    tags?: string[] | undefined;
                    relatedValues?: {
                        input: Record<string, number>;
                        output: number;
                    }[] | undefined;
                    equationId?: string | undefined;
                    desc?: string | undefined;
                    asPython?: string | undefined;
                };
                _input_out: {
                    title: string;
                    content: string;
                    tags: string[];
                    variables: string[];
                    keywords: string[];
                    tagInput: string;
                    variableInput: string;
                    keywordInput: string;
                    id?: number | undefined;
                    relatedValues?: {
                        input: Record<string, number>;
                        output: number;
                    }[] | undefined;
                    equationId?: string | undefined;
                    desc?: string | undefined;
                    asPython?: string | undefined;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
                equationId: string | null;
                title: string;
                desc: string | null;
                content: string;
                asPython: string | null;
                variableLegend: unknown;
                variables: string[];
                keywords: string[];
                createdAt: Date;
                lastAccess: Date;
            }>;
            mathStringArrayToLatex: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    content: string[];
                    options: {
                        inline?: boolean | undefined;
                    };
                };
                _input_out: {
                    content: string[];
                    options: {
                        inline?: boolean | undefined;
                    };
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                content: string;
            }[]>;
            getIdFromEquationId: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
            } | null>;
        }>;
        commandPalette: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            noteSearch: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, {
                id: number;
                href: string;
                title: string;
                isProtected: boolean | null;
                latexTitle: string | null;
            }[]>;
            tagSearch: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[]>;
            subjectSearch: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, {
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[]>;
            equationSearch: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, {
                id: number;
                title: string;
                content: string;
            }[]>;
            getDefinitions: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    rsc?: boolean | undefined;
                } | undefined;
                _input_out: {
                    rsc: boolean;
                } | undefined;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: string;
                label?: string | null | undefined;
                content?: string | null | undefined;
                mdxNote?: import("classes/prismaMdxRelations/MdxNote").MdxNote | undefined;
                mdxNoteId?: number | null | undefined;
                alphabeticalLabel?: string | null | undefined;
            }[]>;
            getCommandPaletteData: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, {
                notes: {
                    href: string;
                    title: string;
                    isProtected: boolean | null;
                    latexTitle: string | null;
                }[];
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
            }>;
        }>;
        search: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            getNoteHrefFromDefinitionId: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, string | undefined>;
            getSequentialIdListByKey: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                href: string;
                title: string;
                sequentialIndex: number | null;
            }[]>;
            getDefinitionList: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, {
                id: string;
                mdxNoteId: number | null;
                label?: string | undefined;
                content?: string | undefined;
            }[]>;
            rootRelativePathIsBookmarked: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, boolean>;
            getUniqueTags: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, string[]>;
            getUniqueTagTopicAndSubjects: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: "tag" | "topic" | "subject" | null | undefined;
                _input_out: "tag" | "topic" | "subject" | null | undefined;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, string[] | {
                tags: string[];
                topics: string[];
                subjects: string[];
            }>;
            getBookmarked: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, {
                mdxNotes: {
                    id: number;
                    href: string;
                    summary: string | null;
                    title: string;
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    noteType: string;
                    topics: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    subjects: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    firstSync: Date;
                    lastSync: Date;
                    latexTitle: string | null;
                    rootRelativePath: string;
                    sequentialIndex: number | null;
                    citations: {
                        id: string;
                        htmlCitation: string | null;
                    }[];
                    definitions: {
                        id: string;
                        label: string | null;
                        content: string | null;
                        alphabeticalLabel: string | null;
                        mdxNoteId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                }[];
            }>;
            findUnknownDBNoteTypeFromRootRelativePath: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                markdown: {
                    id: number;
                    rootRelativePath: string;
                } | null;
                notebook: {
                    id: number;
                    rootRelativePath: string;
                } | null;
            }>;
        }>;
        boards: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            getAllBoards: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, {
                title: string;
                _count: {
                    lists: number;
                    tags: number;
                    subjects: number;
                    topics: number;
                };
                lists: {
                    _count: {
                        cards: number;
                        Kanban: number;
                    };
                }[];
            }[]>;
            createNewBoard: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    title: string;
                    tags: string[];
                    topics: string[];
                    subjects: string[];
                };
                _input_out: {
                    title: string;
                    tags: string[];
                    topics: string[];
                    subjects: string[];
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
                title: string;
                createdAt: Date;
                lastUpdate: Date;
            }>;
            getBoardById: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: number;
                _input_out: number;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                lists: ({
                    cards: {
                        id: number;
                        listId: number | null;
                        indexWithinList: number;
                        label: string | null;
                        details: string | null;
                    }[];
                } & {
                    id: number;
                    indexWithinBoard: number;
                    title: string | null;
                    boardId: number | null;
                })[];
            } & {
                id: number;
                title: string;
                createdAt: Date;
                lastUpdate: Date;
            }) | null>;
            appendNewListToBoard: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    list: {
                        title: string;
                    };
                    boardId: number;
                };
                _input_out: {
                    list: {
                        title: string;
                    };
                    boardId: number;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                lists: ({
                    cards: {
                        id: number;
                        listId: number | null;
                        indexWithinList: number;
                        label: string | null;
                        details: string | null;
                    }[];
                } & {
                    id: number;
                    indexWithinBoard: number;
                    title: string | null;
                    boardId: number | null;
                })[];
            } & {
                id: number;
                title: string;
                createdAt: Date;
                lastUpdate: Date;
            }) | undefined>;
        }>;
        settings: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            getSettings: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, {
                id: number;
                tooltips: boolean;
                title: string;
                summary_showCitations: boolean;
                summary_showTags: boolean;
                landingImageAlign: import(".prisma/client").$Enums.ImageAlignment;
                lockedLandingImage: string | null;
                cleanOnSync: boolean;
                plotTheme: string | null;
                firstSync: Date;
                lastSync: Date;
            } | null>;
            toggleBooleanSetting: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: "tooltips" | "summary_showCitations" | "summary_showTags" | "cleanOnSync";
                _input_out: "tooltips" | "summary_showCitations" | "summary_showTags" | "cleanOnSync";
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
                tooltips: boolean;
                title: string;
                summary_showCitations: boolean;
                summary_showTags: boolean;
                landingImageAlign: import(".prisma/client").$Enums.ImageAlignment;
                lockedLandingImage: string | null;
                cleanOnSync: boolean;
                plotTheme: string | null;
                firstSync: Date;
                lastSync: Date;
            } | undefined>;
            lockCurrentLandingImage: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                lockedLandingImage: string | null;
            } | undefined>;
            updateSettings: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: import(".prisma/client").Prisma.SettingsCreateInput;
                _input_out: import(".prisma/client").Prisma.SettingsCreateInput;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
                tooltips: boolean;
                title: string;
                summary_showCitations: boolean;
                summary_showTags: boolean;
                landingImageAlign: import(".prisma/client").$Enums.ImageAlignment;
                lockedLandingImage: string | null;
                cleanOnSync: boolean;
                plotTheme: string | null;
                firstSync: Date;
                lastSync: Date;
            } | undefined>;
        }>;
        pluginSettings: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            updatePluginSettings: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    data: Record<string, any>;
                    pluginName: string;
                    options?: import("classes/data/pluginUtils/pluginSettings/types").UpdatePluginSettingOptions | undefined;
                };
                _input_out: {
                    data: Record<string, any>;
                    options: import("classes/data/pluginUtils/pluginSettings/types").UpdatePluginSettingOptions;
                    pluginName: string;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, Record<string, any>>;
            getPluginSettings: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    pluginName: string;
                };
                _input_out: {
                    pluginName: string;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, object | undefined>;
            clearPluginSettings: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    pluginName: string;
                };
                _input_out: {
                    pluginName: string;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, void>;
        }>;
        mdx: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            deleteNoteById: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: number | number[];
                _input_out: any[];
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, import(".prisma/client").Prisma.BatchPayload>;
            toggleBookmarkedById: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: number;
                _input_out: number;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, boolean>;
            getDatabaseMdx: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                equations: {
                    id: number;
                    equationId: string | null;
                    title: string;
                    desc: string | null;
                    content: string;
                    asPython: string | null;
                    variableLegend: unknown;
                    variables: string[];
                    keywords: string[];
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                toDo: {
                    id: number;
                    createdAt: Date;
                    task: string;
                    dueAt: Date | null;
                    details: string | null;
                    parentId: number | null;
                    category: import(".prisma/client").$Enums.TaskCategory | null;
                    bookmarked: boolean;
                    status: string;
                    priority: number;
                    toDoListId: number | null;
                    completedOn: Date | null;
                }[];
                ReadingList: {
                    name: string;
                    description: string | null;
                    createdAt: Date;
                    lastUpdate: Date;
                }[];
                topics: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                subjects: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                _count: {
                    topics: number;
                    subjects: number;
                    tags: number;
                    citations: number;
                    sequentialList: number;
                    ReadingList: number;
                    equations: number;
                    definitions: number;
                    toDo: number;
                };
                citations: {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                sequentialList: {
                    sequentialKey: string;
                } | null;
                definitions: {
                    id: string;
                    label: string | null;
                    content: string | null;
                    alphabeticalLabel: string | null;
                    mdxNoteId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
            } & {
                id: number;
                isProtected: boolean | null;
                dietSummaryKey: string | null;
                title: string;
                latexTitle: string | null;
                rootRelativePath: string;
                noteType: string;
                content: string;
                formatted: string | null;
                summary: string | null;
                citationsListOrder: string[];
                importantValues: number[];
                imageSrc: string | null;
                href: string;
                sequentialKey: string | null;
                sequentialIndex: number | null;
                floatImages: boolean;
                remoteUrl: string | null;
                trackRemote: boolean;
                outgoingQuickLinks: string[];
                quickLink: string | null;
                bookmarked: boolean;
                firstSync: Date;
                lastSync: Date;
                lastAccess: Date;
            }) | null>;
            getDatabaseMdxFromPathname: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                equations: {
                    id: number;
                    equationId: string | null;
                    title: string;
                    desc: string | null;
                    content: string;
                    asPython: string | null;
                    variableLegend: unknown;
                    variables: string[];
                    keywords: string[];
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                toDo: {
                    id: number;
                    createdAt: Date;
                    task: string;
                    dueAt: Date | null;
                    details: string | null;
                    parentId: number | null;
                    category: import(".prisma/client").$Enums.TaskCategory | null;
                    bookmarked: boolean;
                    status: string;
                    priority: number;
                    toDoListId: number | null;
                    completedOn: Date | null;
                }[];
                ReadingList: {
                    name: string;
                    description: string | null;
                    createdAt: Date;
                    lastUpdate: Date;
                }[];
                topics: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                subjects: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                _count: {
                    topics: number;
                    subjects: number;
                    tags: number;
                    citations: number;
                    sequentialList: number;
                    ReadingList: number;
                    equations: number;
                    definitions: number;
                    toDo: number;
                };
                citations: {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                sequentialList: {
                    sequentialKey: string;
                } | null;
                definitions: {
                    id: string;
                    label: string | null;
                    content: string | null;
                    alphabeticalLabel: string | null;
                    mdxNoteId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
            } & {
                id: number;
                isProtected: boolean | null;
                dietSummaryKey: string | null;
                title: string;
                latexTitle: string | null;
                rootRelativePath: string;
                noteType: string;
                content: string;
                formatted: string | null;
                summary: string | null;
                citationsListOrder: string[];
                importantValues: number[];
                imageSrc: string | null;
                href: string;
                sequentialKey: string | null;
                sequentialIndex: number | null;
                floatImages: boolean;
                remoteUrl: string | null;
                trackRemote: boolean;
                outgoingQuickLinks: string[];
                quickLink: string | null;
                bookmarked: boolean;
                firstSync: Date;
                lastSync: Date;
                lastAccess: Date;
            }) | null>;
            getFsMdx: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    rootRelativePath: string;
                    extension: ".md" | ".mdx";
                    useProcessRoot?: boolean | undefined;
                };
                _input_out: {
                    rootRelativePath: string;
                    extension: ".md" | ".mdx";
                    useProcessRoot: boolean;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                content: string;
                details: {
                    quickLink: string | undefined;
                    sequentialKey: string | undefined;
                    sequentialIndex: number | undefined;
                    firstSync: string | Date;
                    lastSync: string | Date;
                    id: number;
                    bookmarked: boolean;
                } | undefined;
            }>;
            setMdxAccessed: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    rootRelativePath: string;
                };
                _input_out: {
                    rootRelativePath: string;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, void>;
            parseAndCompileMdxString: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    props: {
                        raw: string;
                        docTypeData: {
                            label: string;
                            icon: string;
                            UI: {
                                styles: {
                                    dark: {
                                        bg?: string | undefined;
                                        fg?: string | undefined;
                                    };
                                    light: {
                                        bg?: string | undefined;
                                        fg?: string | undefined;
                                    };
                                };
                            };
                            fs: string;
                            id: string;
                            docType: string;
                            matchWeight: number;
                            url: string;
                            urlQuery: Record<string, string | number | string[] | number[]>;
                            keywords: string[];
                            autoTag: string[];
                            autoTopic: string[];
                            autoSubject: string[];
                            inSidebar: boolean;
                            inNavbar: boolean;
                            filePathPattern?: string | undefined;
                            topicLabel?: string | undefined;
                            subjectLabel?: string | undefined;
                        };
                        bookmarked?: boolean | undefined;
                        rootRelativePath?: string | null | undefined;
                    };
                    parseParams: {
                        parser: (args_0: {
                            data: {
                                id?: string | null | undefined;
                                summary?: string | null | undefined;
                                title?: string | null | undefined;
                                tags?: string[] | undefined;
                                topics?: string[] | undefined;
                                subjects?: string[] | undefined;
                                sequentialKey?: string | null | undefined;
                                importantValues?: number[] | undefined;
                                created?: string | null | undefined;
                                updated?: string | null | undefined;
                                sequential?: number | null | undefined;
                                tableStyles?: {
                                    math?: "base" | "lg" | "xl" | "small" | null | undefined;
                                    expand?: boolean | null | undefined;
                                    text?: "base" | "lg" | "xl" | "small" | null | undefined;
                                    float?: "right" | "left" | null | undefined;
                                    fullWidth?: boolean | null | undefined;
                                    tableCenter?: boolean | null | undefined;
                                    textCenter?: boolean | null | undefined;
                                    headingCenter?: boolean | null | undefined;
                                    noMax?: boolean | null | undefined;
                                } | undefined;
                            };
                            content: string;
                            docTypeData: {
                                id: string;
                                url: string;
                                docType: string;
                                label?: string | undefined;
                                keywords?: string[] | undefined;
                                icon?: string | undefined;
                                UI?: {
                                    styles: {
                                        dark: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                        light: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                    };
                                } | undefined;
                                fs?: string | undefined;
                                filePathPattern?: string | undefined;
                                matchWeight?: number | undefined;
                                urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                                topicLabel?: string | undefined;
                                subjectLabel?: string | undefined;
                                autoTag?: string[] | undefined;
                                autoTopic?: string[] | undefined;
                                autoSubject?: string[] | undefined;
                                inSidebar?: boolean | undefined;
                                inNavbar?: boolean | undefined;
                            } | {};
                            appConfig: {
                                fsRoot: string;
                                noteTypes: {
                                    fs: string;
                                    label?: string | undefined;
                                    icon?: string | undefined;
                                    UI?: {
                                        styles: {
                                            dark: {
                                                bg?: string | undefined;
                                                fg?: string | undefined;
                                            };
                                            light: {
                                                bg?: string | undefined;
                                                fg?: string | undefined;
                                            };
                                        };
                                    } | undefined;
                                    id?: string | undefined;
                                    docType?: string | undefined;
                                    filePathPattern?: string | undefined;
                                    matchWeight?: number | undefined;
                                    url?: string | undefined;
                                    urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                                    keywords?: string[] | undefined;
                                    topicLabel?: string | undefined;
                                    subjectLabel?: string | undefined;
                                    autoTag?: string[] | undefined;
                                    autoTopic?: string[] | undefined;
                                    autoSubject?: string[] | undefined;
                                    inSidebar?: boolean | undefined;
                                    inNavbar?: boolean | undefined;
                                }[];
                                code?: {
                                    editor: {
                                        defaultLangauge: string;
                                        useVimMode: boolean;
                                    };
                                    theme: {
                                        dark: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                        light: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                    };
                                    syntaxHighlighting: {
                                        transformers: {
                                            regexHighlight: boolean;
                                            lineHighlight: boolean;
                                            lineFocus: boolean;
                                            lineErrorLevel: boolean;
                                            lineDiff: boolean;
                                        };
                                        defaultLanguage: {
                                            inline: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                            block: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                        };
                                    };
                                } | undefined;
                                database?: {
                                    storeFormatted: boolean;
                                    removeIfNotPresentInFs: boolean;
                                } | undefined;
                                navigation?: {
                                    navbarBreakpoint: {
                                        full: number;
                                        minimal: number;
                                    };
                                    maxResultLength: {
                                        snippets: number;
                                        searchAll: number;
                                        equations: number;
                                        categories: number;
                                    };
                                    navbarLinks: (string | {
                                        label: string;
                                        href?: string | undefined;
                                        icon?: string | undefined;
                                        onClick?: ((...args: unknown[]) => unknown) | undefined;
                                    })[];
                                    sidebarLinks: (string | {
                                        icon: string;
                                        label?: string | undefined;
                                        href?: string | undefined;
                                        Icon?: ((...args: unknown[]) => unknown) | undefined;
                                        onClick?: ((...args: unknown[]) => unknown) | undefined;
                                    })[];
                                } | undefined;
                                terminal?: {
                                    logLevel: "info" | "none" | "debug" | "verbose";
                                } | undefined;
                                jupyter?: {
                                    execute: boolean;
                                    environment: string;
                                    syntaxHighlightTheme: string;
                                    jupyterPort: number;
                                    initiallyFoldCells: boolean;
                                    kernel: string;
                                    jupyterReactProps: {
                                        collaborative: boolean;
                                        lite: boolean;
                                        serverUrls?: {
                                            baseUrl?: string | undefined;
                                            wsUrl?: string | undefined;
                                        } | undefined;
                                    };
                                    nbConvert: {
                                        conversionTimeout: number;
                                        execute: boolean;
                                        nbConvertTemplate: string;
                                        notebookOutputDir: string;
                                        nbconvertPath?: string | undefined;
                                        customConversionFunction?: {
                                            pdf?: ((args_0: string, args_1: string, ...args: unknown[]) => string) | undefined;
                                        } | undefined;
                                    };
                                    jupyterNotebookProps: {
                                        readOnly: boolean;
                                        cellMetadataPanel: boolean;
                                        cellSidebarMargin: number;
                                        bundledIPyWidgets: {
                                            name: string;
                                            module: string | Record<string, string>;
                                            version: string;
                                        }[];
                                        externalIPyWidgets: {
                                            name: string;
                                            version: string;
                                        }[];
                                        nbgrader: boolean;
                                        height?: string | undefined;
                                        maxHeight?: string | undefined;
                                    };
                                    cellInputWrappers: Record<string, {
                                        prefix: string;
                                        suffix: string;
                                    }>;
                                    jupyterToken?: string | undefined;
                                } | undefined;
                                math?: {
                                    latexPackages: string[] | "all";
                                    constants: Record<string, number>;
                                    latexFontUrl?: string | undefined;
                                } | undefined;
                                UI?: {
                                    table: {
                                        maxHeight: string;
                                    };
                                    text: {
                                        blockQuoteItalic: boolean;
                                        fontPaths: "default" | {
                                            weight: "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900";
                                            path: string;
                                            style: "bold" | "italic" | "normal";
                                        }[];
                                    };
                                    media: {
                                        imageMap: Record<string, string | undefined>;
                                        includeDefaultImageMap: boolean;
                                        imageRemoteTest: string[];
                                    };
                                    theme: "ulld" | "red" | "orange" | "yellow" | "green" | "blue" | "rose" | "slate" | "gray" | "stone" | "zinc" | "neutral" | "violet";
                                    colors: Record<string, {
                                        dark?: string | undefined;
                                        light?: string | undefined;
                                    } | undefined>;
                                    autoApplyMdxTitles: boolean;
                                } | undefined;
                                slots?: {
                                    navigation?: any;
                                    bibliography?: any;
                                    math?: any;
                                    snippets?: any;
                                    dashboard?: any;
                                    taskManager?: any;
                                    UI?: any;
                                    pdf?: any;
                                    editor?: any;
                                    form?: any;
                                    commandPalette?: any;
                                } | undefined;
                                build?: {
                                    database: {
                                        type: "postgres" | "sqlite";
                                        postgres: {
                                            connectionURI: string;
                                            port?: undefined;
                                            dbName?: undefined;
                                        } | {
                                            port: number;
                                            dbName: string;
                                            connectionURI?: undefined;
                                        };
                                        prioritize: "size" | "speed";
                                    };
                                    additionalUserContent: {
                                        css?: string | undefined;
                                        logo?: string | undefined;
                                        favicon?: string | undefined;
                                    };
                                } | undefined;
                                autoTag?: {
                                    tag?: string | undefined;
                                    path?: string | undefined;
                                }[] | undefined;
                                autoTopic?: {
                                    path?: string | undefined;
                                    topic?: string | undefined;
                                }[] | undefined;
                                autoSubject?: {
                                    path?: string | undefined;
                                    subject?: string | undefined;
                                }[] | undefined;
                                alwaysPreferFs?: boolean | undefined;
                                ignoreFilepaths?: string[] | undefined;
                                tempDir?: string | undefined;
                                generatedDir?: string | undefined;
                                ignorePreferFsExtensions?: string[] | undefined;
                                fileTypePriority?: (".mdx" | ".ipynb" | ".csv" | ".tsv" | ".excel" | ".numpy" | ".html" | ".pickle" | ".db" | ".sql" | ".pdf" | ".json" | ".tex" | ".hdf5" | ".md")[] | undefined;
                                bibPath?: string | undefined;
                                cslPath?: string | undefined;
                                dateHandling?: {
                                    enableAdvancedFormat: boolean;
                                    format: {
                                        short: string;
                                        long: string;
                                        withTime: string;
                                        timeOnly: string;
                                    };
                                    defaultTimeDisplayType: "summarized" | "analog" | "descriptive";
                                    defaultTimeZone?: string | undefined;
                                } | undefined;
                                linkAliases?: Record<string, string> | undefined;
                                plotting?: {
                                    plotColorList: string[] | {
                                        dark: string[];
                                        light: string[];
                                    };
                                    plotColorCycleMethod: "inOrder" | "random";
                                } | undefined;
                                credentials?: {
                                    googleServiceAccountJsonPath?: string | undefined;
                                } | undefined;
                                performance?: {
                                    latexParsingDebounceTimeout: number;
                                    mdxParsingDebounceTimeout: number;
                                } | undefined;
                                meta?: {
                                    title: string;
                                    desc?: string | undefined;
                                } | undefined;
                                plugins?: {
                                    name: string;
                                    version: string;
                                    parserIndex: number;
                                }[] | undefined;
                            };
                            serverClient?: any;
                            db?: {
                                id: number;
                                firstSync: string | Date;
                                bookmarked: boolean;
                                lastSync: string | Date;
                                sequentialKey?: string | null | undefined;
                                sequentialIndex?: number | null | undefined;
                                quickLink?: string | null | undefined;
                            } | undefined;
                        }, ...args: unknown[]) => Promise<{
                            id?: string | null | undefined;
                            summary?: string | null | undefined;
                            title?: string | null | undefined;
                            tags?: string | string[] | undefined;
                            topics?: string | string[] | undefined;
                            subjects?: string | string[] | undefined;
                            sequentialKey?: string | null | undefined;
                            importantValues?: number[] | undefined;
                            created?: string | null | undefined;
                            updated?: string | null | undefined;
                            sequential?: number | null | undefined;
                            tableStyles?: {
                                math?: "base" | "lg" | "xl" | "small" | null | undefined;
                                expand?: boolean | null | undefined;
                                text?: "base" | "lg" | "xl" | "small" | null | undefined;
                                float?: "right" | "left" | null | undefined;
                                fullWidth?: boolean | null | undefined;
                                tableCenter?: boolean | null | undefined;
                                textCenter?: boolean | null | undefined;
                                headingCenter?: boolean | null | undefined;
                                noMax?: boolean | null | undefined;
                            } | undefined;
                        } & Record<string, string | number | boolean | Record<string, string | number | boolean | null> | Record<string, Record<string, string | number | boolean | null>> | Record<string, string | number | boolean | null>[] | (string | number | boolean | null)[] | (string | number | boolean | null)[][] | null>>;
                        docTypeData?: {
                            label: string;
                            icon: string;
                            UI: {
                                styles: {
                                    dark: {
                                        bg?: string | undefined;
                                        fg?: string | undefined;
                                    };
                                    light: {
                                        bg?: string | undefined;
                                        fg?: string | undefined;
                                    };
                                };
                            };
                            fs: string;
                            id: string;
                            docType: string;
                            matchWeight: number;
                            url: string;
                            urlQuery: Record<string, string | number | string[] | number[]>;
                            keywords: string[];
                            autoTag: string[];
                            autoTopic: string[];
                            autoSubject: string[];
                            inSidebar: boolean;
                            inNavbar: boolean;
                            filePathPattern?: string | undefined;
                            topicLabel?: string | undefined;
                            subjectLabel?: string | undefined;
                        } | {} | undefined;
                        appConfig?: {
                            fsRoot: string;
                            noteTypes: {
                                fs: string;
                                label?: string | undefined;
                                icon?: string | undefined;
                                UI?: {
                                    styles: {
                                        dark: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                        light: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                    };
                                } | undefined;
                                id?: string | undefined;
                                docType?: string | undefined;
                                filePathPattern?: string | undefined;
                                matchWeight?: number | undefined;
                                url?: string | undefined;
                                urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                                keywords?: string[] | undefined;
                                topicLabel?: string | undefined;
                                subjectLabel?: string | undefined;
                                autoTag?: string[] | undefined;
                                autoTopic?: string[] | undefined;
                                autoSubject?: string[] | undefined;
                                inSidebar?: boolean | undefined;
                                inNavbar?: boolean | undefined;
                            }[];
                            code?: {
                                editor: {
                                    defaultLangauge: string;
                                    useVimMode: boolean;
                                };
                                theme: {
                                    dark: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                    light: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                };
                                syntaxHighlighting: {
                                    transformers: {
                                        regexHighlight: boolean;
                                        lineHighlight: boolean;
                                        lineFocus: boolean;
                                        lineErrorLevel: boolean;
                                        lineDiff: boolean;
                                    };
                                    defaultLanguage: {
                                        inline: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                        block: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                    };
                                };
                            } | undefined;
                            database?: {
                                storeFormatted: boolean;
                                removeIfNotPresentInFs: boolean;
                            } | undefined;
                            navigation?: {
                                navbarBreakpoint: {
                                    full: number;
                                    minimal: number;
                                };
                                maxResultLength: {
                                    snippets: number;
                                    searchAll: number;
                                    equations: number;
                                    categories: number;
                                };
                                navbarLinks: (string | {
                                    label: string;
                                    href?: string | undefined;
                                    icon?: string | undefined;
                                    onClick?: ((...args: unknown[]) => unknown) | undefined;
                                })[];
                                sidebarLinks: (string | {
                                    icon: string;
                                    label?: string | undefined;
                                    href?: string | undefined;
                                    Icon?: ((...args: unknown[]) => unknown) | undefined;
                                    onClick?: ((...args: unknown[]) => unknown) | undefined;
                                })[];
                            } | undefined;
                            terminal?: {
                                logLevel: "info" | "none" | "debug" | "verbose";
                            } | undefined;
                            jupyter?: {
                                execute: boolean;
                                environment: string;
                                syntaxHighlightTheme: string;
                                jupyterPort: number;
                                initiallyFoldCells: boolean;
                                kernel: string;
                                jupyterReactProps: {
                                    collaborative: boolean;
                                    lite: boolean;
                                    serverUrls?: {
                                        baseUrl?: string | undefined;
                                        wsUrl?: string | undefined;
                                    } | undefined;
                                };
                                nbConvert: {
                                    conversionTimeout: number;
                                    execute: boolean;
                                    nbConvertTemplate: string;
                                    notebookOutputDir: string;
                                    nbconvertPath?: string | undefined;
                                    customConversionFunction?: {
                                        pdf?: ((args_0: string, args_1: string, ...args: unknown[]) => string) | undefined;
                                    } | undefined;
                                };
                                jupyterNotebookProps: {
                                    readOnly: boolean;
                                    cellMetadataPanel: boolean;
                                    cellSidebarMargin: number;
                                    bundledIPyWidgets: {
                                        name: string;
                                        module: string | Record<string, string>;
                                        version: string;
                                    }[];
                                    externalIPyWidgets: {
                                        name: string;
                                        version: string;
                                    }[];
                                    nbgrader: boolean;
                                    height?: string | undefined;
                                    maxHeight?: string | undefined;
                                };
                                cellInputWrappers: Record<string, {
                                    prefix: string;
                                    suffix: string;
                                }>;
                                jupyterToken?: string | undefined;
                            } | undefined;
                            math?: {
                                latexPackages: string[] | "all";
                                constants: Record<string, number>;
                                latexFontUrl?: string | undefined;
                            } | undefined;
                            UI?: {
                                table: {
                                    maxHeight: string;
                                };
                                text: {
                                    blockQuoteItalic: boolean;
                                    fontPaths: "default" | {
                                        weight: "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900";
                                        path: string;
                                        style: "bold" | "italic" | "normal";
                                    }[];
                                };
                                media: {
                                    imageMap: Record<string, string | undefined>;
                                    includeDefaultImageMap: boolean;
                                    imageRemoteTest: string[];
                                };
                                theme: "ulld" | "red" | "orange" | "yellow" | "green" | "blue" | "rose" | "slate" | "gray" | "stone" | "zinc" | "neutral" | "violet";
                                colors: Record<string, {
                                    dark?: string | undefined;
                                    light?: string | undefined;
                                } | undefined>;
                                autoApplyMdxTitles: boolean;
                            } | undefined;
                            slots?: {
                                navigation?: any;
                                bibliography?: any;
                                math?: any;
                                snippets?: any;
                                dashboard?: any;
                                taskManager?: any;
                                UI?: any;
                                pdf?: any;
                                editor?: any;
                                form?: any;
                                commandPalette?: any;
                            } | undefined;
                            build?: {
                                database: {
                                    type: "postgres" | "sqlite";
                                    postgres: {
                                        connectionURI: string;
                                        port?: undefined;
                                        dbName?: undefined;
                                    } | {
                                        port: number;
                                        dbName: string;
                                        connectionURI?: undefined;
                                    };
                                    prioritize: "size" | "speed";
                                };
                                additionalUserContent: {
                                    css?: string | undefined;
                                    logo?: string | undefined;
                                    favicon?: string | undefined;
                                };
                            } | undefined;
                            autoTag?: {
                                tag?: string | undefined;
                                path?: string | undefined;
                            }[] | undefined;
                            autoTopic?: {
                                path?: string | undefined;
                                topic?: string | undefined;
                            }[] | undefined;
                            autoSubject?: {
                                path?: string | undefined;
                                subject?: string | undefined;
                            }[] | undefined;
                            alwaysPreferFs?: boolean | undefined;
                            ignoreFilepaths?: string[] | undefined;
                            tempDir?: string | undefined;
                            generatedDir?: string | undefined;
                            ignorePreferFsExtensions?: string[] | undefined;
                            fileTypePriority?: (".mdx" | ".ipynb" | ".csv" | ".tsv" | ".excel" | ".numpy" | ".html" | ".pickle" | ".db" | ".sql" | ".pdf" | ".json" | ".tex" | ".hdf5" | ".md")[] | undefined;
                            bibPath?: string | undefined;
                            cslPath?: string | undefined;
                            dateHandling?: {
                                enableAdvancedFormat: boolean;
                                format: {
                                    short: string;
                                    long: string;
                                    withTime: string;
                                    timeOnly: string;
                                };
                                defaultTimeDisplayType: "summarized" | "analog" | "descriptive";
                                defaultTimeZone?: string | undefined;
                            } | undefined;
                            linkAliases?: Record<string, string> | undefined;
                            plotting?: {
                                plotColorList: string[] | {
                                    dark: string[];
                                    light: string[];
                                };
                                plotColorCycleMethod: "inOrder" | "random";
                            } | undefined;
                            credentials?: {
                                googleServiceAccountJsonPath?: string | undefined;
                            } | undefined;
                            performance?: {
                                latexParsingDebounceTimeout: number;
                                mdxParsingDebounceTimeout: number;
                            } | undefined;
                            meta?: {
                                title: string;
                                desc?: string | undefined;
                            } | undefined;
                            plugins?: {
                                name: string;
                                version: string;
                                parserIndex: number;
                            }[] | undefined;
                        } | undefined;
                    };
                    _opts?: {
                        noteTypeId?: string | undefined;
                    } | undefined;
                };
                _input_out: {
                    _opts: {
                        noteTypeId?: string | undefined;
                    };
                    props: {
                        bookmarked: boolean;
                        raw: string;
                        docTypeData: {
                            label: string;
                            icon: string;
                            UI: {
                                styles: {
                                    dark: {
                                        bg?: string | undefined;
                                        fg?: string | undefined;
                                    };
                                    light: {
                                        bg?: string | undefined;
                                        fg?: string | undefined;
                                    };
                                };
                            };
                            fs: string;
                            id: string;
                            docType: string;
                            matchWeight: number;
                            url: string;
                            urlQuery: Record<string, string | number | string[] | number[]>;
                            keywords: string[];
                            autoTag: string[];
                            autoTopic: string[];
                            autoSubject: string[];
                            inSidebar: boolean;
                            inNavbar: boolean;
                            filePathPattern?: string | undefined;
                            topicLabel?: string | undefined;
                            subjectLabel?: string | undefined;
                        };
                        rootRelativePath?: string | null | undefined;
                    };
                    parseParams: {
                        docTypeData: {
                            label: string;
                            icon: string;
                            UI: {
                                styles: {
                                    dark: {
                                        bg?: string | undefined;
                                        fg?: string | undefined;
                                    };
                                    light: {
                                        bg?: string | undefined;
                                        fg?: string | undefined;
                                    };
                                };
                            };
                            fs: string;
                            id: string;
                            docType: string;
                            matchWeight: number;
                            url: string;
                            urlQuery: Record<string, string | number | string[] | number[]>;
                            keywords: string[];
                            autoTag: string[];
                            autoTopic: string[];
                            autoSubject: string[];
                            inSidebar: boolean;
                            inNavbar: boolean;
                            filePathPattern?: string | undefined;
                            topicLabel?: string | undefined;
                            subjectLabel?: string | undefined;
                        } | {};
                        parser: (args_0: {
                            data: {
                                id?: string | null | undefined;
                                summary?: string | null | undefined;
                                title?: string | null | undefined;
                                tags?: string | string[] | undefined;
                                topics?: string | string[] | undefined;
                                subjects?: string | string[] | undefined;
                                sequentialKey?: string | null | undefined;
                                importantValues?: number[] | undefined;
                                created?: string | null | undefined;
                                updated?: string | null | undefined;
                                sequential?: number | null | undefined;
                                tableStyles?: {
                                    math?: "base" | "lg" | "xl" | "small" | null | undefined;
                                    expand?: boolean | null | undefined;
                                    text?: "base" | "lg" | "xl" | "small" | null | undefined;
                                    float?: "right" | "left" | null | undefined;
                                    fullWidth?: boolean | null | undefined;
                                    tableCenter?: boolean | null | undefined;
                                    textCenter?: boolean | null | undefined;
                                    headingCenter?: boolean | null | undefined;
                                    noMax?: boolean | null | undefined;
                                } | undefined;
                            };
                            content: string;
                            appConfig: {
                                fsRoot: string;
                                noteTypes: {
                                    fs: string;
                                    label?: string | undefined;
                                    icon?: string | undefined;
                                    UI?: {
                                        styles: {
                                            dark: {
                                                bg?: string | undefined;
                                                fg?: string | undefined;
                                            };
                                            light: {
                                                bg?: string | undefined;
                                                fg?: string | undefined;
                                            };
                                        };
                                    } | undefined;
                                    id?: string | undefined;
                                    docType?: string | undefined;
                                    filePathPattern?: string | undefined;
                                    matchWeight?: number | undefined;
                                    url?: string | undefined;
                                    urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                                    keywords?: string[] | undefined;
                                    topicLabel?: string | undefined;
                                    subjectLabel?: string | undefined;
                                    autoTag?: string[] | undefined;
                                    autoTopic?: string[] | undefined;
                                    autoSubject?: string[] | undefined;
                                    inSidebar?: boolean | undefined;
                                    inNavbar?: boolean | undefined;
                                }[];
                                code?: {
                                    editor: {
                                        defaultLangauge: string;
                                        useVimMode: boolean;
                                    };
                                    theme: {
                                        dark: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                        light: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                    };
                                    syntaxHighlighting: {
                                        transformers: {
                                            regexHighlight: boolean;
                                            lineHighlight: boolean;
                                            lineFocus: boolean;
                                            lineErrorLevel: boolean;
                                            lineDiff: boolean;
                                        };
                                        defaultLanguage: {
                                            inline: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                            block: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                        };
                                    };
                                } | undefined;
                                database?: {
                                    storeFormatted: boolean;
                                    removeIfNotPresentInFs: boolean;
                                } | undefined;
                                navigation?: {
                                    navbarBreakpoint: {
                                        full: number;
                                        minimal: number;
                                    };
                                    maxResultLength: {
                                        snippets: number;
                                        searchAll: number;
                                        equations: number;
                                        categories: number;
                                    };
                                    navbarLinks: (string | {
                                        label: string;
                                        href?: string | undefined;
                                        icon?: string | undefined;
                                        onClick?: ((...args: unknown[]) => unknown) | undefined;
                                    })[];
                                    sidebarLinks: (string | {
                                        icon: string;
                                        label?: string | undefined;
                                        href?: string | undefined;
                                        Icon?: ((...args: unknown[]) => unknown) | undefined;
                                        onClick?: ((...args: unknown[]) => unknown) | undefined;
                                    })[];
                                } | undefined;
                                terminal?: {
                                    logLevel: "info" | "none" | "debug" | "verbose";
                                } | undefined;
                                jupyter?: {
                                    execute: boolean;
                                    environment: string;
                                    syntaxHighlightTheme: string;
                                    jupyterPort: number;
                                    initiallyFoldCells: boolean;
                                    kernel: string;
                                    jupyterReactProps: {
                                        collaborative: boolean;
                                        lite: boolean;
                                        serverUrls?: {
                                            baseUrl?: string | undefined;
                                            wsUrl?: string | undefined;
                                        } | undefined;
                                    };
                                    nbConvert: {
                                        conversionTimeout: number;
                                        execute: boolean;
                                        nbConvertTemplate: string;
                                        notebookOutputDir: string;
                                        nbconvertPath?: string | undefined;
                                        customConversionFunction?: {
                                            pdf?: ((args_0: string, args_1: string, ...args: unknown[]) => string) | undefined;
                                        } | undefined;
                                    };
                                    jupyterNotebookProps: {
                                        readOnly: boolean;
                                        cellMetadataPanel: boolean;
                                        cellSidebarMargin: number;
                                        bundledIPyWidgets: {
                                            name: string;
                                            module: string | Record<string, string>;
                                            version: string;
                                        }[];
                                        externalIPyWidgets: {
                                            name: string;
                                            version: string;
                                        }[];
                                        nbgrader: boolean;
                                        height?: string | undefined;
                                        maxHeight?: string | undefined;
                                    };
                                    cellInputWrappers: Record<string, {
                                        prefix: string;
                                        suffix: string;
                                    }>;
                                    jupyterToken?: string | undefined;
                                } | undefined;
                                math?: {
                                    latexPackages: string[] | "all";
                                    constants: Record<string, number>;
                                    latexFontUrl?: string | undefined;
                                } | undefined;
                                UI?: {
                                    table: {
                                        maxHeight: string;
                                    };
                                    text: {
                                        blockQuoteItalic: boolean;
                                        fontPaths: "default" | {
                                            weight: "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900";
                                            path: string;
                                            style: "bold" | "italic" | "normal";
                                        }[];
                                    };
                                    media: {
                                        imageMap: Record<string, string | undefined>;
                                        includeDefaultImageMap: boolean;
                                        imageRemoteTest: string[];
                                    };
                                    theme: "ulld" | "red" | "orange" | "yellow" | "green" | "blue" | "rose" | "slate" | "gray" | "stone" | "zinc" | "neutral" | "violet";
                                    colors: Record<string, {
                                        dark?: string | undefined;
                                        light?: string | undefined;
                                    } | undefined>;
                                    autoApplyMdxTitles: boolean;
                                } | undefined;
                                slots?: {
                                    navigation?: any;
                                    bibliography?: any;
                                    math?: any;
                                    snippets?: any;
                                    dashboard?: any;
                                    taskManager?: any;
                                    UI?: any;
                                    pdf?: any;
                                    editor?: any;
                                    form?: any;
                                    commandPalette?: any;
                                } | undefined;
                                build?: {
                                    database: {
                                        type: "postgres" | "sqlite";
                                        postgres: {
                                            connectionURI: string;
                                            port?: undefined;
                                            dbName?: undefined;
                                        } | {
                                            port: number;
                                            dbName: string;
                                            connectionURI?: undefined;
                                        };
                                        prioritize: "size" | "speed";
                                    };
                                    additionalUserContent: {
                                        css?: string | undefined;
                                        logo?: string | undefined;
                                        favicon?: string | undefined;
                                    };
                                } | undefined;
                                autoTag?: {
                                    tag?: string | undefined;
                                    path?: string | undefined;
                                }[] | undefined;
                                autoTopic?: {
                                    path?: string | undefined;
                                    topic?: string | undefined;
                                }[] | undefined;
                                autoSubject?: {
                                    path?: string | undefined;
                                    subject?: string | undefined;
                                }[] | undefined;
                                alwaysPreferFs?: boolean | undefined;
                                ignoreFilepaths?: string[] | undefined;
                                tempDir?: string | undefined;
                                generatedDir?: string | undefined;
                                ignorePreferFsExtensions?: string[] | undefined;
                                fileTypePriority?: (".mdx" | ".ipynb" | ".csv" | ".tsv" | ".excel" | ".numpy" | ".html" | ".pickle" | ".db" | ".sql" | ".pdf" | ".json" | ".tex" | ".hdf5" | ".md")[] | undefined;
                                bibPath?: string | undefined;
                                cslPath?: string | undefined;
                                dateHandling?: {
                                    enableAdvancedFormat: boolean;
                                    format: {
                                        short: string;
                                        long: string;
                                        withTime: string;
                                        timeOnly: string;
                                    };
                                    defaultTimeDisplayType: "summarized" | "analog" | "descriptive";
                                    defaultTimeZone?: string | undefined;
                                } | undefined;
                                linkAliases?: Record<string, string> | undefined;
                                plotting?: {
                                    plotColorList: string[] | {
                                        dark: string[];
                                        light: string[];
                                    };
                                    plotColorCycleMethod: "inOrder" | "random";
                                } | undefined;
                                credentials?: {
                                    googleServiceAccountJsonPath?: string | undefined;
                                } | undefined;
                                performance?: {
                                    latexParsingDebounceTimeout: number;
                                    mdxParsingDebounceTimeout: number;
                                } | undefined;
                                meta?: {
                                    title: string;
                                    desc?: string | undefined;
                                } | undefined;
                                plugins?: {
                                    name: string;
                                    version: string;
                                    parserIndex: number;
                                }[] | undefined;
                            };
                            docTypeData?: {
                                id: string;
                                url: string;
                                docType: string;
                                label?: string | undefined;
                                keywords?: string[] | undefined;
                                icon?: string | undefined;
                                UI?: {
                                    styles: {
                                        dark: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                        light: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                    };
                                } | undefined;
                                fs?: string | undefined;
                                filePathPattern?: string | undefined;
                                matchWeight?: number | undefined;
                                urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                                topicLabel?: string | undefined;
                                subjectLabel?: string | undefined;
                                autoTag?: string[] | undefined;
                                autoTopic?: string[] | undefined;
                                autoSubject?: string[] | undefined;
                                inSidebar?: boolean | undefined;
                                inNavbar?: boolean | undefined;
                            } | {} | undefined;
                            serverClient?: any;
                            db?: {
                                id: number;
                                firstSync: string | Date;
                                bookmarked: boolean;
                                lastSync: string | Date;
                                sequentialKey?: string | null | undefined;
                                sequentialIndex?: number | null | undefined;
                                quickLink?: string | null | undefined;
                            } | undefined;
                        }, ...args: unknown[]) => Promise<{
                            tags: string[];
                            topics: string[];
                            subjects: string[];
                            importantValues: number[];
                            id?: string | null | undefined;
                            summary?: string | null | undefined;
                            title?: string | null | undefined;
                            sequentialKey?: string | null | undefined;
                            created?: string | null | undefined;
                            updated?: string | null | undefined;
                            sequential?: number | null | undefined;
                            tableStyles?: {
                                expand: boolean | null;
                                fullWidth: boolean | null;
                                tableCenter: boolean | null;
                                textCenter: boolean | null;
                                headingCenter: boolean | null;
                                noMax: boolean | null;
                                math?: "base" | "lg" | "xl" | "small" | null | undefined;
                                text?: "base" | "lg" | "xl" | "small" | null | undefined;
                                float?: "right" | "left" | null | undefined;
                            } | undefined;
                        } & Record<string, string | number | boolean | Record<string, string | number | boolean | null> | Record<string, Record<string, string | number | boolean | null>> | Record<string, string | number | boolean | null>[] | (string | number | boolean | null)[] | (string | number | boolean | null)[][] | null>>;
                        appConfig?: {
                            fsRoot: string;
                            noteTypes: {
                                fs: string;
                                label?: string | undefined;
                                icon?: string | undefined;
                                UI?: {
                                    styles: {
                                        dark: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                        light: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                    };
                                } | undefined;
                                id?: string | undefined;
                                docType?: string | undefined;
                                filePathPattern?: string | undefined;
                                matchWeight?: number | undefined;
                                url?: string | undefined;
                                urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                                keywords?: string[] | undefined;
                                topicLabel?: string | undefined;
                                subjectLabel?: string | undefined;
                                autoTag?: string[] | undefined;
                                autoTopic?: string[] | undefined;
                                autoSubject?: string[] | undefined;
                                inSidebar?: boolean | undefined;
                                inNavbar?: boolean | undefined;
                            }[];
                            code?: {
                                editor: {
                                    defaultLangauge: string;
                                    useVimMode: boolean;
                                };
                                theme: {
                                    dark: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                    light: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                };
                                syntaxHighlighting: {
                                    transformers: {
                                        regexHighlight: boolean;
                                        lineHighlight: boolean;
                                        lineFocus: boolean;
                                        lineErrorLevel: boolean;
                                        lineDiff: boolean;
                                    };
                                    defaultLanguage: {
                                        inline: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                        block: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                    };
                                };
                            } | undefined;
                            database?: {
                                storeFormatted: boolean;
                                removeIfNotPresentInFs: boolean;
                            } | undefined;
                            navigation?: {
                                navbarBreakpoint: {
                                    full: number;
                                    minimal: number;
                                };
                                maxResultLength: {
                                    snippets: number;
                                    searchAll: number;
                                    equations: number;
                                    categories: number;
                                };
                                navbarLinks: (string | {
                                    label: string;
                                    href?: string | undefined;
                                    icon?: string | undefined;
                                    onClick?: ((...args: unknown[]) => unknown) | undefined;
                                })[];
                                sidebarLinks: (string | {
                                    icon: string;
                                    label?: string | undefined;
                                    href?: string | undefined;
                                    Icon?: ((...args: unknown[]) => unknown) | undefined;
                                    onClick?: ((...args: unknown[]) => unknown) | undefined;
                                })[];
                            } | undefined;
                            terminal?: {
                                logLevel: "info" | "none" | "debug" | "verbose";
                            } | undefined;
                            jupyter?: {
                                execute: boolean;
                                environment: string;
                                syntaxHighlightTheme: string;
                                jupyterPort: number;
                                initiallyFoldCells: boolean;
                                kernel: string;
                                jupyterReactProps: {
                                    collaborative: boolean;
                                    lite: boolean;
                                    serverUrls?: {
                                        baseUrl?: string | undefined;
                                        wsUrl?: string | undefined;
                                    } | undefined;
                                };
                                nbConvert: {
                                    conversionTimeout: number;
                                    execute: boolean;
                                    nbConvertTemplate: string;
                                    notebookOutputDir: string;
                                    nbconvertPath?: string | undefined;
                                    customConversionFunction?: {
                                        pdf?: ((args_0: string, args_1: string, ...args: unknown[]) => string) | undefined;
                                    } | undefined;
                                };
                                jupyterNotebookProps: {
                                    readOnly: boolean;
                                    cellMetadataPanel: boolean;
                                    cellSidebarMargin: number;
                                    bundledIPyWidgets: {
                                        name: string;
                                        module: string | Record<string, string>;
                                        version: string;
                                    }[];
                                    externalIPyWidgets: {
                                        name: string;
                                        version: string;
                                    }[];
                                    nbgrader: boolean;
                                    height?: string | undefined;
                                    maxHeight?: string | undefined;
                                };
                                cellInputWrappers: Record<string, {
                                    prefix: string;
                                    suffix: string;
                                }>;
                                jupyterToken?: string | undefined;
                            } | undefined;
                            math?: {
                                latexPackages: string[] | "all";
                                constants: Record<string, number>;
                                latexFontUrl?: string | undefined;
                            } | undefined;
                            UI?: {
                                table: {
                                    maxHeight: string;
                                };
                                text: {
                                    blockQuoteItalic: boolean;
                                    fontPaths: "default" | {
                                        weight: "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900";
                                        path: string;
                                        style: "bold" | "italic" | "normal";
                                    }[];
                                };
                                media: {
                                    imageMap: Record<string, string | undefined>;
                                    includeDefaultImageMap: boolean;
                                    imageRemoteTest: string[];
                                };
                                theme: "ulld" | "red" | "orange" | "yellow" | "green" | "blue" | "rose" | "slate" | "gray" | "stone" | "zinc" | "neutral" | "violet";
                                colors: Record<string, {
                                    dark?: string | undefined;
                                    light?: string | undefined;
                                } | undefined>;
                                autoApplyMdxTitles: boolean;
                            } | undefined;
                            slots?: {
                                navigation?: any;
                                bibliography?: any;
                                math?: any;
                                snippets?: any;
                                dashboard?: any;
                                taskManager?: any;
                                UI?: any;
                                pdf?: any;
                                editor?: any;
                                form?: any;
                                commandPalette?: any;
                            } | undefined;
                            build?: {
                                database: {
                                    type: "postgres" | "sqlite";
                                    postgres: {
                                        connectionURI: string;
                                        port?: undefined;
                                        dbName?: undefined;
                                    } | {
                                        port: number;
                                        dbName: string;
                                        connectionURI?: undefined;
                                    };
                                    prioritize: "size" | "speed";
                                };
                                additionalUserContent: {
                                    css?: string | undefined;
                                    logo?: string | undefined;
                                    favicon?: string | undefined;
                                };
                            } | undefined;
                            autoTag?: {
                                tag?: string | undefined;
                                path?: string | undefined;
                            }[] | undefined;
                            autoTopic?: {
                                path?: string | undefined;
                                topic?: string | undefined;
                            }[] | undefined;
                            autoSubject?: {
                                path?: string | undefined;
                                subject?: string | undefined;
                            }[] | undefined;
                            alwaysPreferFs?: boolean | undefined;
                            ignoreFilepaths?: string[] | undefined;
                            tempDir?: string | undefined;
                            generatedDir?: string | undefined;
                            ignorePreferFsExtensions?: string[] | undefined;
                            fileTypePriority?: (".mdx" | ".ipynb" | ".csv" | ".tsv" | ".excel" | ".numpy" | ".html" | ".pickle" | ".db" | ".sql" | ".pdf" | ".json" | ".tex" | ".hdf5" | ".md")[] | undefined;
                            bibPath?: string | undefined;
                            cslPath?: string | undefined;
                            dateHandling?: {
                                enableAdvancedFormat: boolean;
                                format: {
                                    short: string;
                                    long: string;
                                    withTime: string;
                                    timeOnly: string;
                                };
                                defaultTimeDisplayType: "summarized" | "analog" | "descriptive";
                                defaultTimeZone?: string | undefined;
                            } | undefined;
                            linkAliases?: Record<string, string> | undefined;
                            plotting?: {
                                plotColorList: string[] | {
                                    dark: string[];
                                    light: string[];
                                };
                                plotColorCycleMethod: "inOrder" | "random";
                            } | undefined;
                            credentials?: {
                                googleServiceAccountJsonPath?: string | undefined;
                            } | undefined;
                            performance?: {
                                latexParsingDebounceTimeout: number;
                                mdxParsingDebounceTimeout: number;
                            } | undefined;
                            meta?: {
                                title: string;
                                desc?: string | undefined;
                            } | undefined;
                            plugins?: {
                                name: string;
                                version: string;
                                parserIndex: number;
                            }[] | undefined;
                        } | undefined;
                    };
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, string>;
            compileMdxString: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    content: string;
                    opts?: {
                        mathLabels?: "none" | "all" | "ams" | undefined;
                    } | undefined;
                };
                _input_out: {
                    content: string;
                    opts: {
                        mathLabels: "none" | "all" | "ams";
                    };
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, string>;
            streamMdxContent: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, string>;
        }>;
        notebook: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            getRemoteIpynbFromPathname: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                equations: never;
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                toDo: never;
                ReadingList: never;
                topics: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                subjects: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                _count: {
                    tags: number;
                    topics: number;
                    subjects: number;
                    citations: number;
                    sequentialList: number;
                    readingList: number;
                };
                citations: {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                sequentialList: {
                    sequentialKey: string;
                } | null;
                definitions: never;
            } & {
                id: number;
                rootRelativePath: string;
                isProtected: boolean | null;
                title: string;
                latexTitle: string | null;
                citationsListOrder: string[];
                importantValues: number[];
                href: string;
                outgoingQuickLinks: string[];
                raw: Buffer;
                sequentialKey: string | null;
                sequentialIndex: number | null;
                bookmarked: boolean;
                firstSync: Date;
                lastSync: Date;
                lastAccess: Date;
            }) | null>;
            getFsIpynb: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    absolutePath: string;
                };
                _input_out: {
                    absolutePath: string;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, string>;
            getPrismaIpynb: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                readingList: {
                    name: string;
                    description: string | null;
                    createdAt: Date;
                    lastUpdate: Date;
                }[];
                topics: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                citations: {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
            } & {
                id: number;
                rootRelativePath: string;
                isProtected: boolean | null;
                title: string;
                latexTitle: string | null;
                citationsListOrder: string[];
                importantValues: number[];
                href: string;
                outgoingQuickLinks: string[];
                raw: Buffer;
                sequentialKey: string | null;
                sequentialIndex: number | null;
                bookmarked: boolean;
                firstSync: Date;
                lastSync: Date;
                lastAccess: Date;
            }) | null>;
            getAllNotebookPaths: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, string[]>;
            getDatabaseNotebook: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    rootRelativePath: string;
                };
                _input_out: {
                    rootRelativePath: string;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                topics: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                subjects: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
            } & {
                id: number;
                rootRelativePath: string;
                isProtected: boolean | null;
                title: string;
                latexTitle: string | null;
                citationsListOrder: string[];
                importantValues: number[];
                href: string;
                outgoingQuickLinks: string[];
                raw: Buffer;
                sequentialKey: string | null;
                sequentialIndex: number | null;
                bookmarked: boolean;
                firstSync: Date;
                lastSync: Date;
                lastAccess: Date;
            }) | null>;
        }>;
        snippets: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            saveSnippet: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    content: string;
                    description: string;
                    language: "rel" | "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "mdx" | "md" | "json" | "csv" | "html" | "tex" | "jsx" | "fs" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "文言" | "wl" | "yml";
                    id?: number | undefined;
                    keywords?: string[] | {
                        set: string[];
                    } | undefined;
                };
                _input_out: {
                    content: string;
                    description: string;
                    language: "rel" | "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "mdx" | "md" | "json" | "csv" | "html" | "tex" | "jsx" | "fs" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "文言" | "wl" | "yml";
                    id?: number | undefined;
                    keywords?: string[] | {
                        set: string[];
                    } | undefined;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, boolean>;
            deleteSnippet: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: number;
                _input_out: number;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
                content: string;
                description: string;
                keywords: string[];
                language: string;
                createdAt: Date;
            }>;
            getSnippets: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    query?: string | undefined;
                    language?: string | undefined;
                };
                _input_out: {
                    query?: string | undefined;
                    language?: string | undefined;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
                content: string;
                description: string;
                keywords: string[];
                language: string;
                createdAt: Date;
            }[]>;
            getSpecificSnippet: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: number;
                _input_out: number;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: number;
                content: string;
                description: string;
                keywords: string[];
                language: string;
                createdAt: Date;
            } | null>;
        }>;
        fsUtils: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            getParsableFiletypesAtPath: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                ".csv": boolean;
                ".tsv": boolean;
                ".excel": boolean;
                ".numpy": boolean;
                ".html": boolean;
                ".pickle": boolean;
                ".db": boolean;
                ".sql": boolean;
                ".pdf": boolean;
                ".json": boolean;
                ".tex": boolean;
                ".hdf5": boolean;
                ".md": boolean;
                ".mdx": boolean;
                ".ipynb": boolean;
            }>;
            getAllRootRelativePathsOfFiletype: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: ".md" | ".mdx" | ".ipynb";
                _input_out: ".md" | ".mdx" | ".ipynb";
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, string[]>;
            clearTempDir: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, void>;
            getUtf8File: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    rootRelativePath: string;
                    useProcessRoot?: boolean | undefined;
                };
                _input_out: {
                    rootRelativePath: string;
                    useProcessRoot: boolean;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, string>;
        }>;
        readingList: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            addToReadingList: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    type: "BibEntry" | "MdxNote";
                    itemId: string | number;
                    readingListName?: string | undefined;
                };
                _input_out: {
                    type: "BibEntry" | "MdxNote";
                    readingListName: string;
                    itemId: string | number;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                name: string;
                description: string | null;
                createdAt: Date;
                lastUpdate: Date;
            }>;
            getReadingListContent: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                bibEntries: ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    MdxNotes: {
                        id: number;
                        isProtected: boolean | null;
                        dietSummaryKey: string | null;
                        title: string;
                        latexTitle: string | null;
                        rootRelativePath: string;
                        noteType: string;
                        content: string;
                        formatted: string | null;
                        summary: string | null;
                        citationsListOrder: string[];
                        importantValues: number[];
                        imageSrc: string | null;
                        href: string;
                        sequentialKey: string | null;
                        sequentialIndex: number | null;
                        floatImages: boolean;
                        remoteUrl: string | null;
                        trackRemote: boolean;
                        outgoingQuickLinks: string[];
                        quickLink: string | null;
                        bookmarked: boolean;
                        firstSync: Date;
                        lastSync: Date;
                        lastAccess: Date;
                    }[];
                    citationGroups: {
                        name: string;
                        description: string | null;
                    }[];
                } & {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                })[];
            } & {
                name: string;
                description: string | null;
                createdAt: Date;
                lastUpdate: Date;
            }) | null>;
        }>;
        universalNotes: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            getSummaryOfAllNotes: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, {
                summary: string | null;
                title: string;
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                subjects: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                _count: {
                    topics: number;
                    subjects: number;
                    tags: number;
                    citations: number;
                    sequentialList: number;
                    ReadingList: number;
                    equations: number;
                    definitions: number;
                    toDo: number;
                };
            }[]>;
            getNoteIdByHref: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, number | null>;
            getFsNoteOfUnknownFormat: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                content: string;
                format: string;
            } | undefined>;
            getQuickLinkHref: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                href: string;
            } | null>;
            getUniqueNoteTypes: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, string[]>;
            getCategoryNoteCount: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, number>;
            getUserOverview: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, {
                overallFirstSync: Date | undefined;
                totalNotes: {
                    mdx: number;
                    notebook: number;
                    total: number;
                };
                uniqueNoteTypes: string[];
                lastAccessNotes: ({
                    type: "mdxNote";
                    id: number;
                    href: string;
                    title: string;
                    noteType: string;
                    lastAccess: Date;
                    firstSync: Date;
                    lastSync: Date;
                } | {
                    type: "notebook";
                    id: number;
                    href: string;
                    title: string;
                    lastAccess: Date;
                    firstSync: Date;
                    lastSync: Date;
                })[];
            }>;
        }>;
        media: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            getImagesInDir: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    ignore?: string | string[] | null | undefined;
                    returnAs?: "absolute" | "rootRelative" | undefined;
                    includeSvg?: boolean | undefined;
                };
                _input_out: {
                    returnAs: "absolute" | "rootRelative";
                    includeSvg: boolean;
                    ignore?: string | string[] | null | undefined;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, any>;
            removeImageBackground: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    absolutePath: string;
                    config?: {
                        output?: "x-alpha8" | "x-rgba8" | "png" | "jpeg" | "webp" | undefined;
                        quality?: number | undefined;
                        model?: "small" | "medium" | "large" | undefined;
                    } | undefined;
                };
                _input_out: {
                    absolutePath: string;
                    config: {
                        output: "x-alpha8" | "x-rgba8" | "png" | "jpeg" | "webp";
                        quality: number;
                        model: "small" | "medium" | "large";
                    };
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, string>;
            getRandomBackgroundSettings: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, {
                path?: string | undefined;
                createdAt?: Date | undefined;
                landingImageAlign?: import(".prisma/client").$Enums.ImageAlignment | undefined;
                lockedLandingImage?: string | null | undefined;
            }>;
            deleteRandomImage: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    path: string;
                };
                _input_out: {
                    path: string;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                path: string;
                createdAt: Date;
            }>;
            updateRandomImageBackground: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    path: string;
                };
                _input_out: {
                    path: string;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                path: string;
                createdAt: Date;
            }>;
        }>;
        qa: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            saveQA: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    question: string;
                    answer: string;
                    id?: string | undefined;
                    tags?: string[] | undefined;
                    topics?: string[] | undefined;
                    subjects?: string[] | undefined;
                    description?: string | undefined;
                };
                _input_out: {
                    tags: string[];
                    topics: string[];
                    subjects: string[];
                    question: string;
                    answer: string;
                    id?: string | undefined;
                    description?: string | undefined;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: string;
                question: string;
                answer: string;
                description: string | null;
                secondaryLabel: string | null;
                correctCount: number;
                inCorrectCount: number;
            }>;
            getSpecificQA: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                topics: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                subjects: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
            } & {
                id: string;
                question: string;
                answer: string;
                description: string | null;
                secondaryLabel: string | null;
                correctCount: number;
                inCorrectCount: number;
            }) | null>;
            addQAResult: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    success: boolean;
                    id: string;
                };
                _input_out: {
                    success: boolean;
                    id: string;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: string;
                question: string;
                answer: string;
                description: string | null;
                secondaryLabel: string | null;
                correctCount: number;
                inCorrectCount: number;
            } | undefined>;
            getQaAutocompleteOptions: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, string[]>;
            getQaExam: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    tags?: string[] | undefined;
                    topics?: string[] | undefined;
                    subjects?: string[] | undefined;
                };
                _input_out: {
                    tags?: string[] | undefined;
                    topics?: string[] | undefined;
                    subjects?: string[] | undefined;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                id: string;
                question: string;
                answer: string;
                description: string | null;
                secondaryLabel: string | null;
                correctCount: number;
                inCorrectCount: number;
            } & {
                randomId: number;
            })[]>;
        }>;
        whiteboard: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            save: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    id: string;
                    data: string;
                };
                _input_out: {
                    id: string;
                    data: string;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: string;
                data: Buffer;
            }>;
            getById: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    id: string;
                };
                _input_out: {
                    id: string;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: string;
                data: Buffer;
            } | null>;
            deleteById: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    id: string;
                };
                _input_out: {
                    id: string;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: string;
                data: Buffer;
            }>;
        }>;
        bibliography: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            getPrismaBib: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, ({
                entries: ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    MdxNotes: {
                        id: number;
                        href: string;
                        title: string;
                    }[];
                    citationGroups: {
                        name: string;
                        description: string | null;
                    }[];
                } & {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                })[];
            } & {
                id: number;
                filename: string;
                firstSync: Date;
                lastSync: Date;
            }) | null>;
            syncBib: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    bibId?: number | undefined;
                };
                _input_out: {
                    bibId: number;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                entries: ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    MdxNotes: {
                        id: number;
                        href: string;
                        title: string;
                    }[];
                    citationGroups: {
                        name: string;
                        description: string | null;
                    }[];
                } & {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                })[];
            } & {
                id: number;
                filename: string;
                firstSync: Date;
                lastSync: Date;
            }) | {
                errorKey: "bibPathFileDoesNotExist";
            }>;
            syncBibServerSide: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: number | undefined;
                _input_out: number | undefined;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                entries: ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    MdxNotes: {
                        id: number;
                        href: string;
                        title: string;
                    }[];
                    citationGroups: {
                        name: string;
                        description: string | null;
                    }[];
                } & {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                })[];
            } & {
                id: number;
                filename: string;
                firstSync: Date;
                lastSync: Date;
            }) | {
                errorKey: "bibPathFileDoesNotExist";
            }>;
            readBibFromFileSystem: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _ctx_out: object;
                _input_in: typeof import("@trpc/server").unsetMarker;
                _input_out: typeof import("@trpc/server").unsetMarker;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
                _meta: object;
            }, string | undefined>;
            setBibEntryPdfPath: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    bibEntryId: string;
                    pdfPath: string | null;
                };
                _input_out: {
                    bibEntryId: string;
                    pdfPath: string | null;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: string;
                BibId: number | null;
                OwnWork: boolean;
                ColleaguesWork: boolean;
                read: boolean;
                htmlCitation: string | null;
                PdfPath: string | null;
                address: string | null;
                annote: string | null;
                author: string | null;
                booktitle: string | null;
                chapter: string | null;
                crossref: string | null;
                doi: string | null;
                edition: string | null;
                editor: string | null;
                email: string | null;
                howpublished: string | null;
                institution: string | null;
                journal: string | null;
                month: string | null;
                note: string | null;
                number: string | null;
                organization: string | null;
                pages: string | null;
                publisher: string | null;
                school: string | null;
                series: string | null;
                title: string | null;
                volume: string | null;
                type: string | null;
                year: string | null;
                numpages: string | null;
                url: string | null;
                issue: string | null;
                issn: string | null;
                abstract: string | null;
                urldate: string | null;
                keywords: string | null;
                copyright: string | null;
                createdAt: Date;
                lastAccess: Date;
            }>;
            getBib: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: number;
                _input_out: number;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                entries: ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    readingList: {
                        name: string;
                        description: string | null;
                        createdAt: Date;
                        lastUpdate: Date;
                    }[];
                    MdxNotes: ({
                        tags: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                        topics: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                        subjects: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                    } & {
                        id: number;
                        isProtected: boolean | null;
                        dietSummaryKey: string | null;
                        title: string;
                        latexTitle: string | null;
                        rootRelativePath: string;
                        noteType: string;
                        content: string;
                        formatted: string | null;
                        summary: string | null;
                        citationsListOrder: string[];
                        importantValues: number[];
                        imageSrc: string | null;
                        href: string;
                        sequentialKey: string | null;
                        sequentialIndex: number | null;
                        floatImages: boolean;
                        remoteUrl: string | null;
                        trackRemote: boolean;
                        outgoingQuickLinks: string[];
                        quickLink: string | null;
                        bookmarked: boolean;
                        firstSync: Date;
                        lastSync: Date;
                        lastAccess: Date;
                    })[];
                    citationGroups: {
                        name: string;
                        description: string | null;
                    }[];
                } & {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                })[];
            } & {
                id: number;
                filename: string;
                firstSync: Date;
                lastSync: Date;
            }) | null>;
            getBibCitation: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string[];
                _input_out: string[];
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: string;
                type: string | null;
                htmlCitation: string | null;
            }[]>;
            getBibEntry: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                readingList: ({
                    bibEntries: {
                        id: string;
                        title: string | null;
                        createdAt: Date;
                    }[];
                } & {
                    name: string;
                    description: string | null;
                    createdAt: Date;
                    lastUpdate: Date;
                })[];
                MdxNotes: ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    topics: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    subjects: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    citations: {
                        id: string;
                        BibId: number | null;
                        OwnWork: boolean;
                        ColleaguesWork: boolean;
                        read: boolean;
                        htmlCitation: string | null;
                        PdfPath: string | null;
                        address: string | null;
                        annote: string | null;
                        author: string | null;
                        booktitle: string | null;
                        chapter: string | null;
                        crossref: string | null;
                        doi: string | null;
                        edition: string | null;
                        editor: string | null;
                        email: string | null;
                        howpublished: string | null;
                        institution: string | null;
                        journal: string | null;
                        month: string | null;
                        note: string | null;
                        number: string | null;
                        organization: string | null;
                        pages: string | null;
                        publisher: string | null;
                        school: string | null;
                        series: string | null;
                        title: string | null;
                        volume: string | null;
                        type: string | null;
                        year: string | null;
                        numpages: string | null;
                        url: string | null;
                        issue: string | null;
                        issn: string | null;
                        abstract: string | null;
                        urldate: string | null;
                        keywords: string | null;
                        copyright: string | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                } & {
                    id: number;
                    isProtected: boolean | null;
                    dietSummaryKey: string | null;
                    title: string;
                    latexTitle: string | null;
                    rootRelativePath: string;
                    noteType: string;
                    content: string;
                    formatted: string | null;
                    summary: string | null;
                    citationsListOrder: string[];
                    importantValues: number[];
                    imageSrc: string | null;
                    href: string;
                    sequentialKey: string | null;
                    sequentialIndex: number | null;
                    floatImages: boolean;
                    remoteUrl: string | null;
                    trackRemote: boolean;
                    outgoingQuickLinks: string[];
                    quickLink: string | null;
                    bookmarked: boolean;
                    firstSync: Date;
                    lastSync: Date;
                    lastAccess: Date;
                })[];
                citationGroups: ({
                    entries: {
                        id: string;
                        BibId: number | null;
                        OwnWork: boolean;
                        ColleaguesWork: boolean;
                        read: boolean;
                        htmlCitation: string | null;
                        PdfPath: string | null;
                        address: string | null;
                        annote: string | null;
                        author: string | null;
                        booktitle: string | null;
                        chapter: string | null;
                        crossref: string | null;
                        doi: string | null;
                        edition: string | null;
                        editor: string | null;
                        email: string | null;
                        howpublished: string | null;
                        institution: string | null;
                        journal: string | null;
                        month: string | null;
                        note: string | null;
                        number: string | null;
                        organization: string | null;
                        pages: string | null;
                        publisher: string | null;
                        school: string | null;
                        series: string | null;
                        title: string | null;
                        volume: string | null;
                        type: string | null;
                        year: string | null;
                        numpages: string | null;
                        url: string | null;
                        issue: string | null;
                        issn: string | null;
                        abstract: string | null;
                        urldate: string | null;
                        keywords: string | null;
                        copyright: string | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                } & {
                    name: string;
                    description: string | null;
                })[];
            } & {
                id: string;
                BibId: number | null;
                OwnWork: boolean;
                ColleaguesWork: boolean;
                read: boolean;
                htmlCitation: string | null;
                PdfPath: string | null;
                address: string | null;
                annote: string | null;
                author: string | null;
                booktitle: string | null;
                chapter: string | null;
                crossref: string | null;
                doi: string | null;
                edition: string | null;
                editor: string | null;
                email: string | null;
                howpublished: string | null;
                institution: string | null;
                journal: string | null;
                month: string | null;
                note: string | null;
                number: string | null;
                organization: string | null;
                pages: string | null;
                publisher: string | null;
                school: string | null;
                series: string | null;
                title: string | null;
                volume: string | null;
                type: string | null;
                year: string | null;
                numpages: string | null;
                url: string | null;
                issue: string | null;
                issn: string | null;
                abstract: string | null;
                urldate: string | null;
                keywords: string | null;
                copyright: string | null;
                createdAt: Date;
                lastAccess: Date;
            }) | null>;
            addBibItemTag: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    tag: string;
                    bibItemId: string;
                };
                _input_out: {
                    tag: string;
                    bibItemId: string;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
            } & {
                id: string;
                BibId: number | null;
                OwnWork: boolean;
                ColleaguesWork: boolean;
                read: boolean;
                htmlCitation: string | null;
                PdfPath: string | null;
                address: string | null;
                annote: string | null;
                author: string | null;
                booktitle: string | null;
                chapter: string | null;
                crossref: string | null;
                doi: string | null;
                edition: string | null;
                editor: string | null;
                email: string | null;
                howpublished: string | null;
                institution: string | null;
                journal: string | null;
                month: string | null;
                note: string | null;
                number: string | null;
                organization: string | null;
                pages: string | null;
                publisher: string | null;
                school: string | null;
                series: string | null;
                title: string | null;
                volume: string | null;
                type: string | null;
                year: string | null;
                numpages: string | null;
                url: string | null;
                issue: string | null;
                issn: string | null;
                abstract: string | null;
                urldate: string | null;
                keywords: string | null;
                copyright: string | null;
                createdAt: Date;
                lastAccess: Date;
            }>;
            removeBibEntryTag: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    tag: string;
                    bibEntryId: string;
                };
                _input_out: {
                    tag: string;
                    bibEntryId: string;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: string;
                BibId: number | null;
                OwnWork: boolean;
                ColleaguesWork: boolean;
                read: boolean;
                htmlCitation: string | null;
                PdfPath: string | null;
                address: string | null;
                annote: string | null;
                author: string | null;
                booktitle: string | null;
                chapter: string | null;
                crossref: string | null;
                doi: string | null;
                edition: string | null;
                editor: string | null;
                email: string | null;
                howpublished: string | null;
                institution: string | null;
                journal: string | null;
                month: string | null;
                note: string | null;
                number: string | null;
                organization: string | null;
                pages: string | null;
                publisher: string | null;
                school: string | null;
                series: string | null;
                title: string | null;
                volume: string | null;
                type: string | null;
                year: string | null;
                numpages: string | null;
                url: string | null;
                issue: string | null;
                issn: string | null;
                abstract: string | null;
                urldate: string | null;
                keywords: string | null;
                copyright: string | null;
                createdAt: Date;
                lastAccess: Date;
            }>;
            bibEntryUpsert: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: any;
                _input_out: any;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, {
                id: string;
                BibId: number | null;
                OwnWork: boolean;
                ColleaguesWork: boolean;
                read: boolean;
                htmlCitation: string | null;
                PdfPath: string | null;
                address: string | null;
                annote: string | null;
                author: string | null;
                booktitle: string | null;
                chapter: string | null;
                crossref: string | null;
                doi: string | null;
                edition: string | null;
                editor: string | null;
                email: string | null;
                howpublished: string | null;
                institution: string | null;
                journal: string | null;
                month: string | null;
                note: string | null;
                number: string | null;
                organization: string | null;
                pages: string | null;
                publisher: string | null;
                school: string | null;
                series: string | null;
                title: string | null;
                volume: string | null;
                type: string | null;
                year: string | null;
                numpages: string | null;
                url: string | null;
                issue: string | null;
                issn: string | null;
                abstract: string | null;
                urldate: string | null;
                keywords: string | null;
                copyright: string | null;
                createdAt: Date;
                lastAccess: Date;
            }>;
            bibFilename: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: number | undefined;
                _input_out: number | undefined;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, string | {
                filename: string;
            } | undefined>;
            getCitationGroup: import("@trpc/server").BuildProcedure<"query", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: string;
                _input_out: string;
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, ({
                entries: ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    MdxNotes: {
                        id: number;
                        summary: string | null;
                        title: string;
                    }[];
                } & {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                })[];
            } & {
                name: string;
                description: string | null;
            }) | null>;
        }>;
        beta: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            parseMdxString: import("@trpc/server").BuildProcedure<"mutation", {
                _config: import("@trpc/server").RootConfig<{
                    ctx: object;
                    meta: object;
                    errorShape: import("@trpc/server").DefaultErrorShape;
                    transformer: import("@trpc/server").DefaultDataTransformer;
                }>;
                _meta: object;
                _ctx_out: object;
                _input_in: {
                    content: string;
                };
                _input_out: {
                    content: string;
                };
                _output_in: typeof import("@trpc/server").unsetMarker;
                _output_out: typeof import("@trpc/server").unsetMarker;
            }, string>;
        }>;
    }>;
    export type AppRouterType = typeof appRouter;
}
declare module "trpc/serverClient" {
    export const serverClient: {
        autoSettings: {
            setAutoSettingsFromConfig: (input: void | undefined) => Promise<void>;
            getAutoSettings: (input: {
                type?: "tag" | "topic" | "subject" | undefined;
                withRegex?: boolean | undefined;
            }) => Promise<import("trpc/types").AutoSettingWithRegex[] | {
                id?: number;
                glob: string;
                value: string;
                type: import(".prisma/client").autoSetting;
            }[] | undefined>;
            deleteAutoSettingById: (input: number) => Promise<{
                id: number;
                type: import(".prisma/client").$Enums.autoSetting;
                glob: string;
                value: string;
            }>;
            addAutoSetting: (input: {
                type: "tag" | "topic" | "subject";
                value: string;
                glob: string;
                id?: number | undefined;
            }) => Promise<{
                id: number;
                type: import(".prisma/client").$Enums.autoSetting;
                glob: string;
                value: string;
            }>;
        };
        sync: {
            backupNonFileSystemDB: (input: void | undefined) => Promise<void>;
        };
        toDo: {
            getToDoLists: (input: number | void | undefined) => Promise<{
                id: number;
                label: string;
                active: boolean;
            } | {
                id: number;
                label: string;
                active: boolean;
            }[]>;
            getToDoListById: (input: number) => Promise<({
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                topics: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                subjects: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
            } & {
                id: number;
                label: string;
                createdAt: Date;
                lastUpdate: Date;
                lastAccess: Date;
            }) | null>;
            getToDos: (input: {
                listIds?: string | number | string[] | number[] | undefined;
                showCompleted?: string | boolean | undefined;
            }) => Promise<{
                todos: {
                    topic: {
                        value: string;
                    }[];
                    subject: {
                        value: string;
                    }[];
                    id: number;
                    label: string;
                    tags: ({
                        value: string;
                        kanbanId?: number | null | undefined;
                    } | {
                        value: string;
                        kanbanId?: number | null | undefined;
                    })[];
                    _count: {
                        topic: number;
                        subject: number;
                        tags: number;
                        tasks: number;
                    };
                    tasks: {
                        id: number;
                        bookmarked: boolean;
                        status: string;
                        task: string;
                        priority: number;
                        createdAt?: any;
                        dueAt?: any;
                        details?: string | null | undefined;
                        parentId?: number | null | undefined;
                        category?: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper" | null | undefined;
                        toDoListId?: number | null | undefined;
                        completedOn?: any;
                    }[];
                    createdAt?: any;
                    lastUpdate?: any;
                }[];
                lists: {
                    id: number;
                    label: string;
                    active: boolean;
                }[];
            }>;
            setToDoStatus: (input: {
                status: string;
                taskIds: number[];
            }) => Promise<import(".prisma/client").Prisma.BatchPayload>;
            findListsByTaggables: (input: {
                tags?: string[] | undefined;
                topics?: string[] | undefined;
                subjects?: string[] | undefined;
            }) => Promise<{
                createdAt: string;
                tasks: {
                    dueAt: string | null;
                    createdAt: string;
                    details: string | null;
                    category: import(".prisma/client").$Enums.TaskCategory | null;
                }[];
                id: number;
                label: string;
                _count: {
                    tasks: number;
                };
            }[]>;
            getOverdueTasksByListId: (input: number) => Promise<{
                _count: {
                    tasks: number;
                };
                tasks: {
                    id: number;
                    createdAt: Date;
                    task: string;
                    dueAt: Date | null;
                    details: string | null;
                    parentId: number | null;
                    category: import(".prisma/client").$Enums.TaskCategory | null;
                    bookmarked: boolean;
                    status: string;
                    priority: number;
                    toDoListId: number | null;
                    completedOn: Date | null;
                }[];
            } | null>;
            getOverdueTaskCount: (input: void | undefined) => Promise<number>;
            getOverdueTasks: (input: void | undefined) => Promise<{
                id: number;
                createdAt: Date;
                task: string;
                dueAt: Date | null;
                details: string | null;
                parentId: number | null;
                category: import(".prisma/client").$Enums.TaskCategory | null;
                bookmarked: boolean;
                status: string;
                priority: number;
                toDoListId: number | null;
                completedOn: Date | null;
            }[]>;
            setToDoDueDate: (input: {
                dueAt: string | Date | null;
                taskIds: number[];
            }) => Promise<import(".prisma/client").Prisma.BatchPayload>;
            setToDoList: (input: {
                taskId: number;
                listId: number;
            }) => Promise<import(".prisma/client").Prisma.BatchPayload>;
            deleteTaskByIds: (input: string | number | void | string[] | number[] | undefined) => Promise<import(".prisma/client").Prisma.BatchPayload>;
            toggleToDoBookmark: (input: {
                taskId: number;
                shouldBookmark?: boolean | undefined;
            }) => Promise<import(".prisma/client").Prisma.BatchPayload>;
            setToDoPriority: (input: {
                priority: number;
                taskIds: number[];
            }) => Promise<import(".prisma/client").Prisma.BatchPayload>;
            getToDoDetails: (input: {
                toDoId: number;
            }) => Promise<({
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                topics: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
            } & {
                id: number;
                createdAt: Date;
                task: string;
                dueAt: Date | null;
                details: string | null;
                parentId: number | null;
                category: import(".prisma/client").$Enums.TaskCategory | null;
                bookmarked: boolean;
                status: string;
                priority: number;
                toDoListId: number | null;
                completedOn: Date | null;
            }) | null>;
            createNewTodoList: (input: {
                label: string;
                tags: string[];
                topics: string[];
                subjects: string[];
            }) => Promise<{
                id: number;
                label: string;
                createdAt: Date;
                lastUpdate: Date;
                lastAccess: Date;
            } | {
                errorKey: "toDoListExists";
            }>;
            createNewToDo: (input: {
                task: string;
                listId: number;
                status?: string | undefined;
                dueAt?: string | Date | null | undefined;
                details?: string | null | undefined;
                priority?: number | undefined;
            }) => Promise<{
                id: number;
                label: string;
                createdAt: Date;
                lastUpdate: Date;
                lastAccess: Date;
            }>;
            deleteToDos: (input: number[]) => Promise<import(".prisma/client").Prisma.BatchPayload>;
            editTaskNote: (input: {
                note: string | null;
                taskId: number;
            }) => Promise<{
                id: number;
                createdAt: Date;
                task: string;
                dueAt: Date | null;
                details: string | null;
                parentId: number | null;
                category: import(".prisma/client").$Enums.TaskCategory | null;
                bookmarked: boolean;
                status: string;
                priority: number;
                toDoListId: number | null;
                completedOn: Date | null;
            }>;
            getMostRecentToDoListId: (input: void | undefined) => Promise<{
                id: number;
            }[]>;
            markCompleted: (input: {
                taskIds: number[];
            }) => Promise<void>;
            updateTask: (input: {
                id: number;
                task: string;
                status?: string | undefined;
                dueAt?: string | Date | null | undefined;
                details?: string | null | undefined;
                priority?: number | undefined;
            }) => Promise<{
                ToDoList: {
                    id: number;
                } | null;
            }>;
            archiveTasks: (input: number[]) => Promise<import(".prisma/client").Prisma.BatchPayload>;
            getTaskLists: (input: void | undefined) => Promise<{
                id: number;
                label: string;
                lastUpdate: Date;
            }[]>;
            getTasksByCompletionDate: (input: void | {
                start?: Date | undefined;
                stop?: Date | undefined;
            } | undefined) => Promise<void>;
            getTaskManagerOverview: (input: void | undefined) => Promise<{
                tasks: {
                    id: number;
                    createdAt: Date;
                    status: string;
                    dueAt: Date | null;
                    toDoListId: number | null;
                    completedOn: Date | null;
                }[];
                taskLists: {
                    id: number;
                    label: string;
                    createdAt: Date;
                    _count: {
                        tasks: number;
                        tags: number;
                        topics: number;
                        subjects: number;
                    };
                }[];
                overdueCount: number;
            }>;
        };
        equations: {
            getEquationById: (input: {
                id?: number | undefined;
                equationId?: string | undefined;
            }) => Promise<{
                id: number;
                title: string;
                content: string;
                tags: {
                    value: string;
                }[];
                relatedValues: {
                    input: unknown;
                    output: number;
                }[];
                equationId: string | null;
                desc: string | null;
                asPython: string | null;
                variables: string[];
                keywords: string[];
            } | null>;
            getParsedEquationById: (input: {
                id: number;
                title: {
                    options: {
                        width?: number | undefined;
                        container?: boolean | undefined;
                        em?: number | undefined;
                        ex?: number | undefined;
                        inline?: boolean | undefined;
                        styles?: boolean | undefined;
                        fontCache?: boolean | undefined;
                        assistiveMml?: boolean | undefined;
                        autoWrap?: boolean | undefined;
                        matchFontHeight?: boolean | undefined;
                    };
                    appendStylesToId?: string | undefined;
                    appendStylesToClass?: string | undefined;
                };
                content: {
                    options: {
                        width?: number | undefined;
                        container?: boolean | undefined;
                        em?: number | undefined;
                        ex?: number | undefined;
                        inline?: boolean | undefined;
                        styles?: boolean | undefined;
                        fontCache?: boolean | undefined;
                        assistiveMml?: boolean | undefined;
                        autoWrap?: boolean | undefined;
                        matchFontHeight?: boolean | undefined;
                    };
                    appendStylesToId?: string | undefined;
                    appendStylesToClass?: string | undefined;
                };
                desc: {
                    options: {
                        width?: number | undefined;
                        container?: boolean | undefined;
                        em?: number | undefined;
                        ex?: number | undefined;
                        inline?: boolean | undefined;
                        styles?: boolean | undefined;
                        fontCache?: boolean | undefined;
                        assistiveMml?: boolean | undefined;
                        autoWrap?: boolean | undefined;
                        matchFontHeight?: boolean | undefined;
                    };
                    appendStylesToId?: string | undefined;
                    appendStylesToClass?: string | undefined;
                };
                equationId?: string | undefined;
            }) => Promise<{
                id: number;
                tags: ({
                    value: string;
                    kanbanId?: number | null | undefined;
                } | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[];
                variables: string[];
                topics: {
                    value: string;
                }[];
                subjects: {
                    value: string;
                }[];
                title?: string | null | undefined;
                content?: string | null | undefined;
                equationId?: string | null | undefined;
                desc?: string | null | undefined;
                asPython?: string | null | undefined;
                createdAt?: string | Date | null | undefined;
            }>;
            getEquationEmbedProps: (input: {
                equationId: string;
            }) => Promise<{
                rawLatex: string;
                id: number;
                tags: ({
                    value: string;
                    kanbanId?: number | null | undefined;
                } | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[];
                variables: string[];
                topics: {
                    value: string;
                }[];
                subjects: {
                    value: string;
                }[];
                title?: string | null | undefined;
                content?: string | null | undefined;
                equationId?: string | null | undefined;
                desc?: string | null | undefined;
                asPython?: string | null | undefined;
                createdAt?: string | Date | null | undefined;
            }>;
            deleteEquationById: (input: number) => Promise<{
                id: number;
                equationId: string | null;
                title: string;
                desc: string | null;
                content: string;
                asPython: string | null;
                variableLegend: unknown;
                variables: string[];
                keywords: string[];
                createdAt: Date;
                lastAccess: Date;
            }>;
            getEquationsList: (input: {
                orderBy: "title" | "createdAt";
                value?: string | undefined;
                tags?: string | string[] | undefined;
                query?: string | undefined;
                take?: number | undefined;
                variables?: string | string[] | undefined;
                page?: number | undefined;
                sortDir?: "desc" | "asc" | undefined;
            }) => Promise<{
                equations: {
                    id: number;
                    equationId: string | null;
                    title: string;
                    desc: string | null;
                    content: string;
                    asPython: string | null;
                    variableLegend: unknown;
                    variables: string[];
                    keywords: string[];
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                tags: string[];
                variables: string[];
            }>;
            addEquation: (input: {
                title: string;
                content: string;
                variables: string[];
                keywords: string[];
                tagInput: string;
                variableInput: string;
                keywordInput: string;
                id?: number | undefined;
                tags?: string[] | undefined;
                relatedValues?: {
                    input: Record<string, number>;
                    output: number;
                }[] | undefined;
                equationId?: string | undefined;
                desc?: string | undefined;
                asPython?: string | undefined;
            }) => Promise<{
                id: number;
                equationId: string | null;
                title: string;
                desc: string | null;
                content: string;
                asPython: string | null;
                variableLegend: unknown;
                variables: string[];
                keywords: string[];
                createdAt: Date;
                lastAccess: Date;
            }>;
            mathStringArrayToLatex: (input: {
                content: string[];
                options: {
                    inline?: boolean | undefined;
                };
            }) => Promise<{
                content: string;
            }[]>;
            getIdFromEquationId: (input: string) => Promise<{
                id: number;
            } | null>;
        };
        commandPalette: {
            noteSearch: (input: void | undefined) => Promise<{
                id: number;
                href: string;
                title: string;
                isProtected: boolean | null;
                latexTitle: string | null;
            }[]>;
            tagSearch: (input: void | undefined) => Promise<{
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[]>;
            subjectSearch: (input: void | undefined) => Promise<{
                value: string;
                kanbanId: number | null;
                createdAt: Date;
                lastAccess: Date;
            }[]>;
            equationSearch: (input: void | undefined) => Promise<{
                id: number;
                title: string;
                content: string;
            }[]>;
            getDefinitions: (input: void | {
                rsc?: boolean | undefined;
            } | undefined) => Promise<{
                id: string;
                label?: string | null | undefined;
                content?: string | null | undefined;
                mdxNote?: import("classes/prismaMdxRelations/MdxNote").MdxNote | undefined;
                mdxNoteId?: number | null | undefined;
                alphabeticalLabel?: string | null | undefined;
            }[]>;
            getCommandPaletteData: (input: void | undefined) => Promise<{
                notes: {
                    href: string;
                    title: string;
                    isProtected: boolean | null;
                    latexTitle: string | null;
                }[];
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
            }>;
        };
        search: {
            getNoteHrefFromDefinitionId: (input: string) => Promise<string | undefined>;
            getSequentialIdListByKey: (input: string) => Promise<{
                href: string;
                title: string;
                sequentialIndex: number | null;
            }[]>;
            getDefinitionList: (input: void | undefined) => Promise<{
                id: string;
                mdxNoteId: number | null;
                label?: string | undefined;
                content?: string | undefined;
            }[]>;
            rootRelativePathIsBookmarked: (input: string) => Promise<boolean>;
            getUniqueTags: (input: void | undefined) => Promise<string[]>;
            getUniqueTagTopicAndSubjects: (input: void | "tag" | "topic" | "subject" | null | undefined) => Promise<string[] | {
                tags: string[];
                topics: string[];
                subjects: string[];
            }>;
            getBookmarked: (input: void | undefined) => Promise<{
                mdxNotes: {
                    id: number;
                    href: string;
                    summary: string | null;
                    title: string;
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    noteType: string;
                    topics: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    subjects: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    firstSync: Date;
                    lastSync: Date;
                    latexTitle: string | null;
                    rootRelativePath: string;
                    sequentialIndex: number | null;
                    citations: {
                        id: string;
                        htmlCitation: string | null;
                    }[];
                    definitions: {
                        id: string;
                        label: string | null;
                        content: string | null;
                        alphabeticalLabel: string | null;
                        mdxNoteId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                }[];
            }>;
            findUnknownDBNoteTypeFromRootRelativePath: (input: string) => Promise<{
                markdown: {
                    id: number;
                    rootRelativePath: string;
                } | null;
                notebook: {
                    id: number;
                    rootRelativePath: string;
                } | null;
            }>;
        };
        boards: {
            getAllBoards: (input: void | undefined) => Promise<{
                title: string;
                _count: {
                    lists: number;
                    tags: number;
                    subjects: number;
                    topics: number;
                };
                lists: {
                    _count: {
                        cards: number;
                        Kanban: number;
                    };
                }[];
            }[]>;
            createNewBoard: (input: {
                title: string;
                tags: string[];
                topics: string[];
                subjects: string[];
            }) => Promise<{
                id: number;
                title: string;
                createdAt: Date;
                lastUpdate: Date;
            }>;
            getBoardById: (input: number) => Promise<({
                lists: ({
                    cards: {
                        id: number;
                        listId: number | null;
                        indexWithinList: number;
                        label: string | null;
                        details: string | null;
                    }[];
                } & {
                    id: number;
                    indexWithinBoard: number;
                    title: string | null;
                    boardId: number | null;
                })[];
            } & {
                id: number;
                title: string;
                createdAt: Date;
                lastUpdate: Date;
            }) | null>;
            appendNewListToBoard: (input: {
                list: {
                    title: string;
                };
                boardId: number;
            }) => Promise<({
                lists: ({
                    cards: {
                        id: number;
                        listId: number | null;
                        indexWithinList: number;
                        label: string | null;
                        details: string | null;
                    }[];
                } & {
                    id: number;
                    indexWithinBoard: number;
                    title: string | null;
                    boardId: number | null;
                })[];
            } & {
                id: number;
                title: string;
                createdAt: Date;
                lastUpdate: Date;
            }) | undefined>;
        };
        settings: {
            getSettings: (input: void | undefined) => Promise<{
                id: number;
                tooltips: boolean;
                title: string;
                summary_showCitations: boolean;
                summary_showTags: boolean;
                landingImageAlign: import(".prisma/client").$Enums.ImageAlignment;
                lockedLandingImage: string | null;
                cleanOnSync: boolean;
                plotTheme: string | null;
                firstSync: Date;
                lastSync: Date;
            } | null>;
            toggleBooleanSetting: (input: "tooltips" | "summary_showCitations" | "summary_showTags" | "cleanOnSync") => Promise<{
                id: number;
                tooltips: boolean;
                title: string;
                summary_showCitations: boolean;
                summary_showTags: boolean;
                landingImageAlign: import(".prisma/client").$Enums.ImageAlignment;
                lockedLandingImage: string | null;
                cleanOnSync: boolean;
                plotTheme: string | null;
                firstSync: Date;
                lastSync: Date;
            } | undefined>;
            lockCurrentLandingImage: (input: string) => Promise<{
                lockedLandingImage: string | null;
            } | undefined>;
            updateSettings: (input: import(".prisma/client").Prisma.SettingsCreateInput) => Promise<{
                id: number;
                tooltips: boolean;
                title: string;
                summary_showCitations: boolean;
                summary_showTags: boolean;
                landingImageAlign: import(".prisma/client").$Enums.ImageAlignment;
                lockedLandingImage: string | null;
                cleanOnSync: boolean;
                plotTheme: string | null;
                firstSync: Date;
                lastSync: Date;
            } | undefined>;
        };
        pluginSettings: {
            updatePluginSettings: (input: {
                data: Record<string, any>;
                pluginName: string;
                options?: import("classes/data/pluginUtils/pluginSettings/types").UpdatePluginSettingOptions | undefined;
            }) => Promise<Record<string, any>>;
            getPluginSettings: (input: {
                pluginName: string;
            }) => Promise<object | undefined>;
            clearPluginSettings: (input: {
                pluginName: string;
            }) => Promise<void>;
        };
        mdx: {
            deleteNoteById: (input: number | number[]) => Promise<import(".prisma/client").Prisma.BatchPayload>;
            toggleBookmarkedById: (input: number) => Promise<boolean>;
            getDatabaseMdx: (input: string) => Promise<({
                equations: {
                    id: number;
                    equationId: string | null;
                    title: string;
                    desc: string | null;
                    content: string;
                    asPython: string | null;
                    variableLegend: unknown;
                    variables: string[];
                    keywords: string[];
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                toDo: {
                    id: number;
                    createdAt: Date;
                    task: string;
                    dueAt: Date | null;
                    details: string | null;
                    parentId: number | null;
                    category: import(".prisma/client").$Enums.TaskCategory | null;
                    bookmarked: boolean;
                    status: string;
                    priority: number;
                    toDoListId: number | null;
                    completedOn: Date | null;
                }[];
                ReadingList: {
                    name: string;
                    description: string | null;
                    createdAt: Date;
                    lastUpdate: Date;
                }[];
                topics: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                subjects: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                _count: {
                    topics: number;
                    subjects: number;
                    tags: number;
                    citations: number;
                    sequentialList: number;
                    ReadingList: number;
                    equations: number;
                    definitions: number;
                    toDo: number;
                };
                citations: {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                sequentialList: {
                    sequentialKey: string;
                } | null;
                definitions: {
                    id: string;
                    label: string | null;
                    content: string | null;
                    alphabeticalLabel: string | null;
                    mdxNoteId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
            } & {
                id: number;
                isProtected: boolean | null;
                dietSummaryKey: string | null;
                title: string;
                latexTitle: string | null;
                rootRelativePath: string;
                noteType: string;
                content: string;
                formatted: string | null;
                summary: string | null;
                citationsListOrder: string[];
                importantValues: number[];
                imageSrc: string | null;
                href: string;
                sequentialKey: string | null;
                sequentialIndex: number | null;
                floatImages: boolean;
                remoteUrl: string | null;
                trackRemote: boolean;
                outgoingQuickLinks: string[];
                quickLink: string | null;
                bookmarked: boolean;
                firstSync: Date;
                lastSync: Date;
                lastAccess: Date;
            }) | null>;
            getDatabaseMdxFromPathname: (input: string) => Promise<({
                equations: {
                    id: number;
                    equationId: string | null;
                    title: string;
                    desc: string | null;
                    content: string;
                    asPython: string | null;
                    variableLegend: unknown;
                    variables: string[];
                    keywords: string[];
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                toDo: {
                    id: number;
                    createdAt: Date;
                    task: string;
                    dueAt: Date | null;
                    details: string | null;
                    parentId: number | null;
                    category: import(".prisma/client").$Enums.TaskCategory | null;
                    bookmarked: boolean;
                    status: string;
                    priority: number;
                    toDoListId: number | null;
                    completedOn: Date | null;
                }[];
                ReadingList: {
                    name: string;
                    description: string | null;
                    createdAt: Date;
                    lastUpdate: Date;
                }[];
                topics: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                subjects: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                _count: {
                    topics: number;
                    subjects: number;
                    tags: number;
                    citations: number;
                    sequentialList: number;
                    ReadingList: number;
                    equations: number;
                    definitions: number;
                    toDo: number;
                };
                citations: {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                sequentialList: {
                    sequentialKey: string;
                } | null;
                definitions: {
                    id: string;
                    label: string | null;
                    content: string | null;
                    alphabeticalLabel: string | null;
                    mdxNoteId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
            } & {
                id: number;
                isProtected: boolean | null;
                dietSummaryKey: string | null;
                title: string;
                latexTitle: string | null;
                rootRelativePath: string;
                noteType: string;
                content: string;
                formatted: string | null;
                summary: string | null;
                citationsListOrder: string[];
                importantValues: number[];
                imageSrc: string | null;
                href: string;
                sequentialKey: string | null;
                sequentialIndex: number | null;
                floatImages: boolean;
                remoteUrl: string | null;
                trackRemote: boolean;
                outgoingQuickLinks: string[];
                quickLink: string | null;
                bookmarked: boolean;
                firstSync: Date;
                lastSync: Date;
                lastAccess: Date;
            }) | null>;
            getFsMdx: (input: {
                rootRelativePath: string;
                extension: ".md" | ".mdx";
                useProcessRoot?: boolean | undefined;
            }) => Promise<{
                content: string;
                details: {
                    quickLink: string | undefined;
                    sequentialKey: string | undefined;
                    sequentialIndex: number | undefined;
                    firstSync: string | Date;
                    lastSync: string | Date;
                    id: number;
                    bookmarked: boolean;
                } | undefined;
            }>;
            setMdxAccessed: (input: {
                rootRelativePath: string;
            }) => Promise<void>;
            parseAndCompileMdxString: (input: {
                props: {
                    raw: string;
                    docTypeData: {
                        label: string;
                        icon: string;
                        UI: {
                            styles: {
                                dark: {
                                    bg?: string | undefined;
                                    fg?: string | undefined;
                                };
                                light: {
                                    bg?: string | undefined;
                                    fg?: string | undefined;
                                };
                            };
                        };
                        fs: string;
                        id: string;
                        docType: string;
                        matchWeight: number;
                        url: string;
                        urlQuery: Record<string, string | number | string[] | number[]>;
                        keywords: string[];
                        autoTag: string[];
                        autoTopic: string[];
                        autoSubject: string[];
                        inSidebar: boolean;
                        inNavbar: boolean;
                        filePathPattern?: string | undefined;
                        topicLabel?: string | undefined;
                        subjectLabel?: string | undefined;
                    };
                    bookmarked?: boolean | undefined;
                    rootRelativePath?: string | null | undefined;
                };
                parseParams: {
                    parser: (args_0: {
                        data: {
                            id?: string | null | undefined;
                            summary?: string | null | undefined;
                            title?: string | null | undefined;
                            tags?: string[] | undefined;
                            topics?: string[] | undefined;
                            subjects?: string[] | undefined;
                            sequentialKey?: string | null | undefined;
                            importantValues?: number[] | undefined;
                            created?: string | null | undefined;
                            updated?: string | null | undefined;
                            sequential?: number | null | undefined;
                            tableStyles?: {
                                math?: "base" | "lg" | "xl" | "small" | null | undefined;
                                expand?: boolean | null | undefined;
                                text?: "base" | "lg" | "xl" | "small" | null | undefined;
                                float?: "right" | "left" | null | undefined;
                                fullWidth?: boolean | null | undefined;
                                tableCenter?: boolean | null | undefined;
                                textCenter?: boolean | null | undefined;
                                headingCenter?: boolean | null | undefined;
                                noMax?: boolean | null | undefined;
                            } | undefined;
                        };
                        content: string;
                        docTypeData: {
                            id: string;
                            url: string;
                            docType: string;
                            label?: string | undefined;
                            keywords?: string[] | undefined;
                            icon?: string | undefined;
                            UI?: {
                                styles: {
                                    dark: {
                                        bg?: string | undefined;
                                        fg?: string | undefined;
                                    };
                                    light: {
                                        bg?: string | undefined;
                                        fg?: string | undefined;
                                    };
                                };
                            } | undefined;
                            fs?: string | undefined;
                            filePathPattern?: string | undefined;
                            matchWeight?: number | undefined;
                            urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                            topicLabel?: string | undefined;
                            subjectLabel?: string | undefined;
                            autoTag?: string[] | undefined;
                            autoTopic?: string[] | undefined;
                            autoSubject?: string[] | undefined;
                            inSidebar?: boolean | undefined;
                            inNavbar?: boolean | undefined;
                        } | {};
                        appConfig: {
                            fsRoot: string;
                            noteTypes: {
                                fs: string;
                                label?: string | undefined;
                                icon?: string | undefined;
                                UI?: {
                                    styles: {
                                        dark: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                        light: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                    };
                                } | undefined;
                                id?: string | undefined;
                                docType?: string | undefined;
                                filePathPattern?: string | undefined;
                                matchWeight?: number | undefined;
                                url?: string | undefined;
                                urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                                keywords?: string[] | undefined;
                                topicLabel?: string | undefined;
                                subjectLabel?: string | undefined;
                                autoTag?: string[] | undefined;
                                autoTopic?: string[] | undefined;
                                autoSubject?: string[] | undefined;
                                inSidebar?: boolean | undefined;
                                inNavbar?: boolean | undefined;
                            }[];
                            code?: {
                                editor: {
                                    defaultLangauge: string;
                                    useVimMode: boolean;
                                };
                                theme: {
                                    dark: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                    light: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                };
                                syntaxHighlighting: {
                                    transformers: {
                                        regexHighlight: boolean;
                                        lineHighlight: boolean;
                                        lineFocus: boolean;
                                        lineErrorLevel: boolean;
                                        lineDiff: boolean;
                                    };
                                    defaultLanguage: {
                                        inline: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                        block: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                    };
                                };
                            } | undefined;
                            database?: {
                                storeFormatted: boolean;
                                removeIfNotPresentInFs: boolean;
                            } | undefined;
                            navigation?: {
                                navbarBreakpoint: {
                                    full: number;
                                    minimal: number;
                                };
                                maxResultLength: {
                                    snippets: number;
                                    searchAll: number;
                                    equations: number;
                                    categories: number;
                                };
                                navbarLinks: (string | {
                                    label: string;
                                    href?: string | undefined;
                                    icon?: string | undefined;
                                    onClick?: ((...args: unknown[]) => unknown) | undefined;
                                })[];
                                sidebarLinks: (string | {
                                    icon: string;
                                    label?: string | undefined;
                                    href?: string | undefined;
                                    Icon?: ((...args: unknown[]) => unknown) | undefined;
                                    onClick?: ((...args: unknown[]) => unknown) | undefined;
                                })[];
                            } | undefined;
                            terminal?: {
                                logLevel: "info" | "none" | "debug" | "verbose";
                            } | undefined;
                            jupyter?: {
                                execute: boolean;
                                environment: string;
                                syntaxHighlightTheme: string;
                                jupyterPort: number;
                                initiallyFoldCells: boolean;
                                kernel: string;
                                jupyterReactProps: {
                                    collaborative: boolean;
                                    lite: boolean;
                                    serverUrls?: {
                                        baseUrl?: string | undefined;
                                        wsUrl?: string | undefined;
                                    } | undefined;
                                };
                                nbConvert: {
                                    conversionTimeout: number;
                                    execute: boolean;
                                    nbConvertTemplate: string;
                                    notebookOutputDir: string;
                                    nbconvertPath?: string | undefined;
                                    customConversionFunction?: {
                                        pdf?: ((args_0: string, args_1: string, ...args: unknown[]) => string) | undefined;
                                    } | undefined;
                                };
                                jupyterNotebookProps: {
                                    readOnly: boolean;
                                    cellMetadataPanel: boolean;
                                    cellSidebarMargin: number;
                                    bundledIPyWidgets: {
                                        name: string;
                                        module: string | Record<string, string>;
                                        version: string;
                                    }[];
                                    externalIPyWidgets: {
                                        name: string;
                                        version: string;
                                    }[];
                                    nbgrader: boolean;
                                    height?: string | undefined;
                                    maxHeight?: string | undefined;
                                };
                                cellInputWrappers: Record<string, {
                                    prefix: string;
                                    suffix: string;
                                }>;
                                jupyterToken?: string | undefined;
                            } | undefined;
                            math?: {
                                latexPackages: string[] | "all";
                                constants: Record<string, number>;
                                latexFontUrl?: string | undefined;
                            } | undefined;
                            UI?: {
                                table: {
                                    maxHeight: string;
                                };
                                text: {
                                    blockQuoteItalic: boolean;
                                    fontPaths: "default" | {
                                        weight: "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900";
                                        path: string;
                                        style: "bold" | "italic" | "normal";
                                    }[];
                                };
                                media: {
                                    imageMap: Record<string, string | undefined>;
                                    includeDefaultImageMap: boolean;
                                    imageRemoteTest: string[];
                                };
                                theme: "ulld" | "red" | "orange" | "yellow" | "green" | "blue" | "rose" | "slate" | "gray" | "stone" | "zinc" | "neutral" | "violet";
                                colors: Record<string, {
                                    dark?: string | undefined;
                                    light?: string | undefined;
                                } | undefined>;
                                autoApplyMdxTitles: boolean;
                            } | undefined;
                            slots?: {
                                navigation?: any;
                                bibliography?: any;
                                math?: any;
                                snippets?: any;
                                dashboard?: any;
                                taskManager?: any;
                                UI?: any;
                                pdf?: any;
                                editor?: any;
                                form?: any;
                                commandPalette?: any;
                            } | undefined;
                            build?: {
                                database: {
                                    type: "postgres" | "sqlite";
                                    postgres: {
                                        connectionURI: string;
                                        port?: undefined;
                                        dbName?: undefined;
                                    } | {
                                        port: number;
                                        dbName: string;
                                        connectionURI?: undefined;
                                    };
                                    prioritize: "size" | "speed";
                                };
                                additionalUserContent: {
                                    css?: string | undefined;
                                    logo?: string | undefined;
                                    favicon?: string | undefined;
                                };
                            } | undefined;
                            autoTag?: {
                                tag?: string | undefined;
                                path?: string | undefined;
                            }[] | undefined;
                            autoTopic?: {
                                path?: string | undefined;
                                topic?: string | undefined;
                            }[] | undefined;
                            autoSubject?: {
                                path?: string | undefined;
                                subject?: string | undefined;
                            }[] | undefined;
                            alwaysPreferFs?: boolean | undefined;
                            ignoreFilepaths?: string[] | undefined;
                            tempDir?: string | undefined;
                            generatedDir?: string | undefined;
                            ignorePreferFsExtensions?: string[] | undefined;
                            fileTypePriority?: (".mdx" | ".ipynb" | ".csv" | ".tsv" | ".excel" | ".numpy" | ".html" | ".pickle" | ".db" | ".sql" | ".pdf" | ".json" | ".tex" | ".hdf5" | ".md")[] | undefined;
                            bibPath?: string | undefined;
                            cslPath?: string | undefined;
                            dateHandling?: {
                                enableAdvancedFormat: boolean;
                                format: {
                                    short: string;
                                    long: string;
                                    withTime: string;
                                    timeOnly: string;
                                };
                                defaultTimeDisplayType: "summarized" | "analog" | "descriptive";
                                defaultTimeZone?: string | undefined;
                            } | undefined;
                            linkAliases?: Record<string, string> | undefined;
                            plotting?: {
                                plotColorList: string[] | {
                                    dark: string[];
                                    light: string[];
                                };
                                plotColorCycleMethod: "inOrder" | "random";
                            } | undefined;
                            credentials?: {
                                googleServiceAccountJsonPath?: string | undefined;
                            } | undefined;
                            performance?: {
                                latexParsingDebounceTimeout: number;
                                mdxParsingDebounceTimeout: number;
                            } | undefined;
                            meta?: {
                                title: string;
                                desc?: string | undefined;
                            } | undefined;
                            plugins?: {
                                name: string;
                                version: string;
                                parserIndex: number;
                            }[] | undefined;
                        };
                        serverClient?: any;
                        db?: {
                            id: number;
                            firstSync: string | Date;
                            bookmarked: boolean;
                            lastSync: string | Date;
                            sequentialKey?: string | null | undefined;
                            sequentialIndex?: number | null | undefined;
                            quickLink?: string | null | undefined;
                        } | undefined;
                    }, ...args: unknown[]) => Promise<{
                        id?: string | null | undefined;
                        summary?: string | null | undefined;
                        title?: string | null | undefined;
                        tags?: string | string[] | undefined;
                        topics?: string | string[] | undefined;
                        subjects?: string | string[] | undefined;
                        sequentialKey?: string | null | undefined;
                        importantValues?: number[] | undefined;
                        created?: string | null | undefined;
                        updated?: string | null | undefined;
                        sequential?: number | null | undefined;
                        tableStyles?: {
                            math?: "base" | "lg" | "xl" | "small" | null | undefined;
                            expand?: boolean | null | undefined;
                            text?: "base" | "lg" | "xl" | "small" | null | undefined;
                            float?: "right" | "left" | null | undefined;
                            fullWidth?: boolean | null | undefined;
                            tableCenter?: boolean | null | undefined;
                            textCenter?: boolean | null | undefined;
                            headingCenter?: boolean | null | undefined;
                            noMax?: boolean | null | undefined;
                        } | undefined;
                    } & Record<string, string | number | boolean | Record<string, string | number | boolean | null> | Record<string, Record<string, string | number | boolean | null>> | Record<string, string | number | boolean | null>[] | (string | number | boolean | null)[] | (string | number | boolean | null)[][] | null>>;
                    docTypeData?: {
                        label: string;
                        icon: string;
                        UI: {
                            styles: {
                                dark: {
                                    bg?: string | undefined;
                                    fg?: string | undefined;
                                };
                                light: {
                                    bg?: string | undefined;
                                    fg?: string | undefined;
                                };
                            };
                        };
                        fs: string;
                        id: string;
                        docType: string;
                        matchWeight: number;
                        url: string;
                        urlQuery: Record<string, string | number | string[] | number[]>;
                        keywords: string[];
                        autoTag: string[];
                        autoTopic: string[];
                        autoSubject: string[];
                        inSidebar: boolean;
                        inNavbar: boolean;
                        filePathPattern?: string | undefined;
                        topicLabel?: string | undefined;
                        subjectLabel?: string | undefined;
                    } | {} | undefined;
                    appConfig?: {
                        fsRoot: string;
                        noteTypes: {
                            fs: string;
                            label?: string | undefined;
                            icon?: string | undefined;
                            UI?: {
                                styles: {
                                    dark: {
                                        bg?: string | undefined;
                                        fg?: string | undefined;
                                    };
                                    light: {
                                        bg?: string | undefined;
                                        fg?: string | undefined;
                                    };
                                };
                            } | undefined;
                            id?: string | undefined;
                            docType?: string | undefined;
                            filePathPattern?: string | undefined;
                            matchWeight?: number | undefined;
                            url?: string | undefined;
                            urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                            keywords?: string[] | undefined;
                            topicLabel?: string | undefined;
                            subjectLabel?: string | undefined;
                            autoTag?: string[] | undefined;
                            autoTopic?: string[] | undefined;
                            autoSubject?: string[] | undefined;
                            inSidebar?: boolean | undefined;
                            inNavbar?: boolean | undefined;
                        }[];
                        code?: {
                            editor: {
                                defaultLangauge: string;
                                useVimMode: boolean;
                            };
                            theme: {
                                dark: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                light: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                            };
                            syntaxHighlighting: {
                                transformers: {
                                    regexHighlight: boolean;
                                    lineHighlight: boolean;
                                    lineFocus: boolean;
                                    lineErrorLevel: boolean;
                                    lineDiff: boolean;
                                };
                                defaultLanguage: {
                                    inline: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                    block: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                };
                            };
                        } | undefined;
                        database?: {
                            storeFormatted: boolean;
                            removeIfNotPresentInFs: boolean;
                        } | undefined;
                        navigation?: {
                            navbarBreakpoint: {
                                full: number;
                                minimal: number;
                            };
                            maxResultLength: {
                                snippets: number;
                                searchAll: number;
                                equations: number;
                                categories: number;
                            };
                            navbarLinks: (string | {
                                label: string;
                                href?: string | undefined;
                                icon?: string | undefined;
                                onClick?: ((...args: unknown[]) => unknown) | undefined;
                            })[];
                            sidebarLinks: (string | {
                                icon: string;
                                label?: string | undefined;
                                href?: string | undefined;
                                Icon?: ((...args: unknown[]) => unknown) | undefined;
                                onClick?: ((...args: unknown[]) => unknown) | undefined;
                            })[];
                        } | undefined;
                        terminal?: {
                            logLevel: "info" | "none" | "debug" | "verbose";
                        } | undefined;
                        jupyter?: {
                            execute: boolean;
                            environment: string;
                            syntaxHighlightTheme: string;
                            jupyterPort: number;
                            initiallyFoldCells: boolean;
                            kernel: string;
                            jupyterReactProps: {
                                collaborative: boolean;
                                lite: boolean;
                                serverUrls?: {
                                    baseUrl?: string | undefined;
                                    wsUrl?: string | undefined;
                                } | undefined;
                            };
                            nbConvert: {
                                conversionTimeout: number;
                                execute: boolean;
                                nbConvertTemplate: string;
                                notebookOutputDir: string;
                                nbconvertPath?: string | undefined;
                                customConversionFunction?: {
                                    pdf?: ((args_0: string, args_1: string, ...args: unknown[]) => string) | undefined;
                                } | undefined;
                            };
                            jupyterNotebookProps: {
                                readOnly: boolean;
                                cellMetadataPanel: boolean;
                                cellSidebarMargin: number;
                                bundledIPyWidgets: {
                                    name: string;
                                    module: string | Record<string, string>;
                                    version: string;
                                }[];
                                externalIPyWidgets: {
                                    name: string;
                                    version: string;
                                }[];
                                nbgrader: boolean;
                                height?: string | undefined;
                                maxHeight?: string | undefined;
                            };
                            cellInputWrappers: Record<string, {
                                prefix: string;
                                suffix: string;
                            }>;
                            jupyterToken?: string | undefined;
                        } | undefined;
                        math?: {
                            latexPackages: string[] | "all";
                            constants: Record<string, number>;
                            latexFontUrl?: string | undefined;
                        } | undefined;
                        UI?: {
                            table: {
                                maxHeight: string;
                            };
                            text: {
                                blockQuoteItalic: boolean;
                                fontPaths: "default" | {
                                    weight: "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900";
                                    path: string;
                                    style: "bold" | "italic" | "normal";
                                }[];
                            };
                            media: {
                                imageMap: Record<string, string | undefined>;
                                includeDefaultImageMap: boolean;
                                imageRemoteTest: string[];
                            };
                            theme: "ulld" | "red" | "orange" | "yellow" | "green" | "blue" | "rose" | "slate" | "gray" | "stone" | "zinc" | "neutral" | "violet";
                            colors: Record<string, {
                                dark?: string | undefined;
                                light?: string | undefined;
                            } | undefined>;
                            autoApplyMdxTitles: boolean;
                        } | undefined;
                        slots?: {
                            navigation?: any;
                            bibliography?: any;
                            math?: any;
                            snippets?: any;
                            dashboard?: any;
                            taskManager?: any;
                            UI?: any;
                            pdf?: any;
                            editor?: any;
                            form?: any;
                            commandPalette?: any;
                        } | undefined;
                        build?: {
                            database: {
                                type: "postgres" | "sqlite";
                                postgres: {
                                    connectionURI: string;
                                    port?: undefined;
                                    dbName?: undefined;
                                } | {
                                    port: number;
                                    dbName: string;
                                    connectionURI?: undefined;
                                };
                                prioritize: "size" | "speed";
                            };
                            additionalUserContent: {
                                css?: string | undefined;
                                logo?: string | undefined;
                                favicon?: string | undefined;
                            };
                        } | undefined;
                        autoTag?: {
                            tag?: string | undefined;
                            path?: string | undefined;
                        }[] | undefined;
                        autoTopic?: {
                            path?: string | undefined;
                            topic?: string | undefined;
                        }[] | undefined;
                        autoSubject?: {
                            path?: string | undefined;
                            subject?: string | undefined;
                        }[] | undefined;
                        alwaysPreferFs?: boolean | undefined;
                        ignoreFilepaths?: string[] | undefined;
                        tempDir?: string | undefined;
                        generatedDir?: string | undefined;
                        ignorePreferFsExtensions?: string[] | undefined;
                        fileTypePriority?: (".mdx" | ".ipynb" | ".csv" | ".tsv" | ".excel" | ".numpy" | ".html" | ".pickle" | ".db" | ".sql" | ".pdf" | ".json" | ".tex" | ".hdf5" | ".md")[] | undefined;
                        bibPath?: string | undefined;
                        cslPath?: string | undefined;
                        dateHandling?: {
                            enableAdvancedFormat: boolean;
                            format: {
                                short: string;
                                long: string;
                                withTime: string;
                                timeOnly: string;
                            };
                            defaultTimeDisplayType: "summarized" | "analog" | "descriptive";
                            defaultTimeZone?: string | undefined;
                        } | undefined;
                        linkAliases?: Record<string, string> | undefined;
                        plotting?: {
                            plotColorList: string[] | {
                                dark: string[];
                                light: string[];
                            };
                            plotColorCycleMethod: "inOrder" | "random";
                        } | undefined;
                        credentials?: {
                            googleServiceAccountJsonPath?: string | undefined;
                        } | undefined;
                        performance?: {
                            latexParsingDebounceTimeout: number;
                            mdxParsingDebounceTimeout: number;
                        } | undefined;
                        meta?: {
                            title: string;
                            desc?: string | undefined;
                        } | undefined;
                        plugins?: {
                            name: string;
                            version: string;
                            parserIndex: number;
                        }[] | undefined;
                    } | undefined;
                };
                _opts?: {
                    noteTypeId?: string | undefined;
                } | undefined;
            }) => Promise<string>;
            compileMdxString: (input: {
                content: string;
                opts?: {
                    mathLabels?: "none" | "all" | "ams" | undefined;
                } | undefined;
            }) => Promise<string>;
            streamMdxContent: (input: string) => Promise<string>;
        };
        notebook: {
            getRemoteIpynbFromPathname: (input: string) => Promise<({
                equations: never;
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                toDo: never;
                ReadingList: never;
                topics: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                subjects: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                _count: {
                    tags: number;
                    topics: number;
                    subjects: number;
                    citations: number;
                    sequentialList: number;
                    readingList: number;
                };
                citations: {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                sequentialList: {
                    sequentialKey: string;
                } | null;
                definitions: never;
            } & {
                id: number;
                rootRelativePath: string;
                isProtected: boolean | null;
                title: string;
                latexTitle: string | null;
                citationsListOrder: string[];
                importantValues: number[];
                href: string;
                outgoingQuickLinks: string[];
                raw: Buffer;
                sequentialKey: string | null;
                sequentialIndex: number | null;
                bookmarked: boolean;
                firstSync: Date;
                lastSync: Date;
                lastAccess: Date;
            }) | null>;
            getFsIpynb: (input: {
                absolutePath: string;
            }) => Promise<string>;
            getPrismaIpynb: (input: string) => Promise<({
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                readingList: {
                    name: string;
                    description: string | null;
                    createdAt: Date;
                    lastUpdate: Date;
                }[];
                topics: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                citations: {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
            } & {
                id: number;
                rootRelativePath: string;
                isProtected: boolean | null;
                title: string;
                latexTitle: string | null;
                citationsListOrder: string[];
                importantValues: number[];
                href: string;
                outgoingQuickLinks: string[];
                raw: Buffer;
                sequentialKey: string | null;
                sequentialIndex: number | null;
                bookmarked: boolean;
                firstSync: Date;
                lastSync: Date;
                lastAccess: Date;
            }) | null>;
            getAllNotebookPaths: (input: void | undefined) => Promise<string[]>;
            getDatabaseNotebook: (input: {
                rootRelativePath: string;
            }) => Promise<({
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                topics: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                subjects: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
            } & {
                id: number;
                rootRelativePath: string;
                isProtected: boolean | null;
                title: string;
                latexTitle: string | null;
                citationsListOrder: string[];
                importantValues: number[];
                href: string;
                outgoingQuickLinks: string[];
                raw: Buffer;
                sequentialKey: string | null;
                sequentialIndex: number | null;
                bookmarked: boolean;
                firstSync: Date;
                lastSync: Date;
                lastAccess: Date;
            }) | null>;
        };
        snippets: {
            saveSnippet: (input: {
                content: string;
                description: string;
                language: "rel" | "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "mdx" | "md" | "json" | "csv" | "html" | "tex" | "jsx" | "fs" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "文言" | "wl" | "yml";
                id?: number | undefined;
                keywords?: string[] | {
                    set: string[];
                } | undefined;
            }) => Promise<boolean>;
            deleteSnippet: (input: number) => Promise<{
                id: number;
                content: string;
                description: string;
                keywords: string[];
                language: string;
                createdAt: Date;
            }>;
            getSnippets: (input: {
                query?: string | undefined;
                language?: string | undefined;
            }) => Promise<{
                id: number;
                content: string;
                description: string;
                keywords: string[];
                language: string;
                createdAt: Date;
            }[]>;
            getSpecificSnippet: (input: number) => Promise<{
                id: number;
                content: string;
                description: string;
                keywords: string[];
                language: string;
                createdAt: Date;
            } | null>;
        };
        fsUtils: {
            getParsableFiletypesAtPath: (input: string) => Promise<{
                ".csv": boolean;
                ".tsv": boolean;
                ".excel": boolean;
                ".numpy": boolean;
                ".html": boolean;
                ".pickle": boolean;
                ".db": boolean;
                ".sql": boolean;
                ".pdf": boolean;
                ".json": boolean;
                ".tex": boolean;
                ".hdf5": boolean;
                ".md": boolean;
                ".mdx": boolean;
                ".ipynb": boolean;
            }>;
            getAllRootRelativePathsOfFiletype: (input: ".md" | ".mdx" | ".ipynb") => Promise<string[]>;
            clearTempDir: (input: void | undefined) => Promise<void>;
            getUtf8File: (input: {
                rootRelativePath: string;
                useProcessRoot?: boolean | undefined;
            }) => Promise<string>;
        };
        readingList: {
            addToReadingList: (input: {
                type: "BibEntry" | "MdxNote";
                itemId: string | number;
                readingListName?: string | undefined;
            }) => Promise<{
                name: string;
                description: string | null;
                createdAt: Date;
                lastUpdate: Date;
            }>;
            getReadingListContent: (input: string) => Promise<({
                bibEntries: ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    MdxNotes: {
                        id: number;
                        isProtected: boolean | null;
                        dietSummaryKey: string | null;
                        title: string;
                        latexTitle: string | null;
                        rootRelativePath: string;
                        noteType: string;
                        content: string;
                        formatted: string | null;
                        summary: string | null;
                        citationsListOrder: string[];
                        importantValues: number[];
                        imageSrc: string | null;
                        href: string;
                        sequentialKey: string | null;
                        sequentialIndex: number | null;
                        floatImages: boolean;
                        remoteUrl: string | null;
                        trackRemote: boolean;
                        outgoingQuickLinks: string[];
                        quickLink: string | null;
                        bookmarked: boolean;
                        firstSync: Date;
                        lastSync: Date;
                        lastAccess: Date;
                    }[];
                    citationGroups: {
                        name: string;
                        description: string | null;
                    }[];
                } & {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                })[];
            } & {
                name: string;
                description: string | null;
                createdAt: Date;
                lastUpdate: Date;
            }) | null>;
        };
        universalNotes: {
            getSummaryOfAllNotes: (input: void | undefined) => Promise<{
                summary: string | null;
                title: string;
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                subjects: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                _count: {
                    topics: number;
                    subjects: number;
                    tags: number;
                    citations: number;
                    sequentialList: number;
                    ReadingList: number;
                    equations: number;
                    definitions: number;
                    toDo: number;
                };
            }[]>;
            getNoteIdByHref: (input: string) => Promise<number | null>;
            getFsNoteOfUnknownFormat: (input: string) => Promise<{
                content: string;
                format: string;
            } | undefined>;
            getQuickLinkHref: (input: string) => Promise<{
                href: string;
            } | null>;
            getUniqueNoteTypes: (input: void | undefined) => Promise<string[]>;
            getCategoryNoteCount: (input: string) => Promise<number>;
            getUserOverview: (input: void | undefined) => Promise<{
                overallFirstSync: Date | undefined;
                totalNotes: {
                    mdx: number;
                    notebook: number;
                    total: number;
                };
                uniqueNoteTypes: string[];
                lastAccessNotes: ({
                    type: "mdxNote";
                    id: number;
                    href: string;
                    title: string;
                    noteType: string;
                    lastAccess: Date;
                    firstSync: Date;
                    lastSync: Date;
                } | {
                    type: "notebook";
                    id: number;
                    href: string;
                    title: string;
                    lastAccess: Date;
                    firstSync: Date;
                    lastSync: Date;
                })[];
            }>;
        };
        media: {
            getImagesInDir: (input: {
                ignore?: string | string[] | null | undefined;
                returnAs?: "absolute" | "rootRelative" | undefined;
                includeSvg?: boolean | undefined;
            }) => Promise<any>;
            removeImageBackground: (input: {
                absolutePath: string;
                config?: {
                    output?: "x-alpha8" | "x-rgba8" | "png" | "jpeg" | "webp" | undefined;
                    quality?: number | undefined;
                    model?: "small" | "medium" | "large" | undefined;
                } | undefined;
            }) => Promise<string>;
            getRandomBackgroundSettings: (input: void | undefined) => Promise<{
                path?: string | undefined;
                createdAt?: Date | undefined;
                landingImageAlign?: import(".prisma/client").$Enums.ImageAlignment | undefined;
                lockedLandingImage?: string | null | undefined;
            }>;
            deleteRandomImage: (input: {
                path: string;
            }) => Promise<{
                path: string;
                createdAt: Date;
            }>;
            updateRandomImageBackground: (input: {
                path: string;
            }) => Promise<{
                path: string;
                createdAt: Date;
            }>;
        };
        qa: {
            saveQA: (input: {
                question: string;
                answer: string;
                id?: string | undefined;
                tags?: string[] | undefined;
                topics?: string[] | undefined;
                subjects?: string[] | undefined;
                description?: string | undefined;
            }) => Promise<{
                id: string;
                question: string;
                answer: string;
                description: string | null;
                secondaryLabel: string | null;
                correctCount: number;
                inCorrectCount: number;
            }>;
            getSpecificQA: (input: string) => Promise<({
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                topics: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                subjects: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
            } & {
                id: string;
                question: string;
                answer: string;
                description: string | null;
                secondaryLabel: string | null;
                correctCount: number;
                inCorrectCount: number;
            }) | null>;
            addQAResult: (input: {
                success: boolean;
                id: string;
            }) => Promise<{
                id: string;
                question: string;
                answer: string;
                description: string | null;
                secondaryLabel: string | null;
                correctCount: number;
                inCorrectCount: number;
            } | undefined>;
            getQaAutocompleteOptions: (input: void | undefined) => Promise<string[]>;
            getQaExam: (input: {
                tags?: string[] | undefined;
                topics?: string[] | undefined;
                subjects?: string[] | undefined;
            }) => Promise<({
                id: string;
                question: string;
                answer: string;
                description: string | null;
                secondaryLabel: string | null;
                correctCount: number;
                inCorrectCount: number;
            } & {
                randomId: number;
            })[]>;
        };
        whiteboard: {
            save: (input: {
                id: string;
                data: string;
            }) => Promise<{
                id: string;
                data: Buffer;
            }>;
            getById: (input: {
                id: string;
            }) => Promise<{
                id: string;
                data: Buffer;
            } | null>;
            deleteById: (input: {
                id: string;
            }) => Promise<{
                id: string;
                data: Buffer;
            }>;
        };
        bibliography: {
            getPrismaBib: (input: void | undefined) => Promise<({
                entries: ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    MdxNotes: {
                        id: number;
                        href: string;
                        title: string;
                    }[];
                    citationGroups: {
                        name: string;
                        description: string | null;
                    }[];
                } & {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                })[];
            } & {
                id: number;
                filename: string;
                firstSync: Date;
                lastSync: Date;
            }) | null>;
            syncBib: (input: {
                bibId?: number | undefined;
            }) => Promise<({
                entries: ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    MdxNotes: {
                        id: number;
                        href: string;
                        title: string;
                    }[];
                    citationGroups: {
                        name: string;
                        description: string | null;
                    }[];
                } & {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                })[];
            } & {
                id: number;
                filename: string;
                firstSync: Date;
                lastSync: Date;
            }) | {
                errorKey: "bibPathFileDoesNotExist";
            }>;
            syncBibServerSide: (input: number | void | undefined) => Promise<({
                entries: ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    MdxNotes: {
                        id: number;
                        href: string;
                        title: string;
                    }[];
                    citationGroups: {
                        name: string;
                        description: string | null;
                    }[];
                } & {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                })[];
            } & {
                id: number;
                filename: string;
                firstSync: Date;
                lastSync: Date;
            }) | {
                errorKey: "bibPathFileDoesNotExist";
            }>;
            readBibFromFileSystem: (input: void | undefined) => Promise<string | undefined>;
            setBibEntryPdfPath: (input: {
                bibEntryId: string;
                pdfPath: string | null;
            }) => Promise<{
                id: string;
                BibId: number | null;
                OwnWork: boolean;
                ColleaguesWork: boolean;
                read: boolean;
                htmlCitation: string | null;
                PdfPath: string | null;
                address: string | null;
                annote: string | null;
                author: string | null;
                booktitle: string | null;
                chapter: string | null;
                crossref: string | null;
                doi: string | null;
                edition: string | null;
                editor: string | null;
                email: string | null;
                howpublished: string | null;
                institution: string | null;
                journal: string | null;
                month: string | null;
                note: string | null;
                number: string | null;
                organization: string | null;
                pages: string | null;
                publisher: string | null;
                school: string | null;
                series: string | null;
                title: string | null;
                volume: string | null;
                type: string | null;
                year: string | null;
                numpages: string | null;
                url: string | null;
                issue: string | null;
                issn: string | null;
                abstract: string | null;
                urldate: string | null;
                keywords: string | null;
                copyright: string | null;
                createdAt: Date;
                lastAccess: Date;
            }>;
            getBib: (input: number) => Promise<({
                entries: ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    readingList: {
                        name: string;
                        description: string | null;
                        createdAt: Date;
                        lastUpdate: Date;
                    }[];
                    MdxNotes: ({
                        tags: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                        topics: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                        subjects: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                    } & {
                        id: number;
                        isProtected: boolean | null;
                        dietSummaryKey: string | null;
                        title: string;
                        latexTitle: string | null;
                        rootRelativePath: string;
                        noteType: string;
                        content: string;
                        formatted: string | null;
                        summary: string | null;
                        citationsListOrder: string[];
                        importantValues: number[];
                        imageSrc: string | null;
                        href: string;
                        sequentialKey: string | null;
                        sequentialIndex: number | null;
                        floatImages: boolean;
                        remoteUrl: string | null;
                        trackRemote: boolean;
                        outgoingQuickLinks: string[];
                        quickLink: string | null;
                        bookmarked: boolean;
                        firstSync: Date;
                        lastSync: Date;
                        lastAccess: Date;
                    })[];
                    citationGroups: {
                        name: string;
                        description: string | null;
                    }[];
                } & {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                })[];
            } & {
                id: number;
                filename: string;
                firstSync: Date;
                lastSync: Date;
            }) | null>;
            getBibCitation: (input: string[]) => Promise<{
                id: string;
                type: string | null;
                htmlCitation: string | null;
            }[]>;
            getBibEntry: (input: string) => Promise<({
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                readingList: ({
                    bibEntries: {
                        id: string;
                        title: string | null;
                        createdAt: Date;
                    }[];
                } & {
                    name: string;
                    description: string | null;
                    createdAt: Date;
                    lastUpdate: Date;
                })[];
                MdxNotes: ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    topics: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    subjects: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    citations: {
                        id: string;
                        BibId: number | null;
                        OwnWork: boolean;
                        ColleaguesWork: boolean;
                        read: boolean;
                        htmlCitation: string | null;
                        PdfPath: string | null;
                        address: string | null;
                        annote: string | null;
                        author: string | null;
                        booktitle: string | null;
                        chapter: string | null;
                        crossref: string | null;
                        doi: string | null;
                        edition: string | null;
                        editor: string | null;
                        email: string | null;
                        howpublished: string | null;
                        institution: string | null;
                        journal: string | null;
                        month: string | null;
                        note: string | null;
                        number: string | null;
                        organization: string | null;
                        pages: string | null;
                        publisher: string | null;
                        school: string | null;
                        series: string | null;
                        title: string | null;
                        volume: string | null;
                        type: string | null;
                        year: string | null;
                        numpages: string | null;
                        url: string | null;
                        issue: string | null;
                        issn: string | null;
                        abstract: string | null;
                        urldate: string | null;
                        keywords: string | null;
                        copyright: string | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                } & {
                    id: number;
                    isProtected: boolean | null;
                    dietSummaryKey: string | null;
                    title: string;
                    latexTitle: string | null;
                    rootRelativePath: string;
                    noteType: string;
                    content: string;
                    formatted: string | null;
                    summary: string | null;
                    citationsListOrder: string[];
                    importantValues: number[];
                    imageSrc: string | null;
                    href: string;
                    sequentialKey: string | null;
                    sequentialIndex: number | null;
                    floatImages: boolean;
                    remoteUrl: string | null;
                    trackRemote: boolean;
                    outgoingQuickLinks: string[];
                    quickLink: string | null;
                    bookmarked: boolean;
                    firstSync: Date;
                    lastSync: Date;
                    lastAccess: Date;
                })[];
                citationGroups: ({
                    entries: {
                        id: string;
                        BibId: number | null;
                        OwnWork: boolean;
                        ColleaguesWork: boolean;
                        read: boolean;
                        htmlCitation: string | null;
                        PdfPath: string | null;
                        address: string | null;
                        annote: string | null;
                        author: string | null;
                        booktitle: string | null;
                        chapter: string | null;
                        crossref: string | null;
                        doi: string | null;
                        edition: string | null;
                        editor: string | null;
                        email: string | null;
                        howpublished: string | null;
                        institution: string | null;
                        journal: string | null;
                        month: string | null;
                        note: string | null;
                        number: string | null;
                        organization: string | null;
                        pages: string | null;
                        publisher: string | null;
                        school: string | null;
                        series: string | null;
                        title: string | null;
                        volume: string | null;
                        type: string | null;
                        year: string | null;
                        numpages: string | null;
                        url: string | null;
                        issue: string | null;
                        issn: string | null;
                        abstract: string | null;
                        urldate: string | null;
                        keywords: string | null;
                        copyright: string | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                } & {
                    name: string;
                    description: string | null;
                })[];
            } & {
                id: string;
                BibId: number | null;
                OwnWork: boolean;
                ColleaguesWork: boolean;
                read: boolean;
                htmlCitation: string | null;
                PdfPath: string | null;
                address: string | null;
                annote: string | null;
                author: string | null;
                booktitle: string | null;
                chapter: string | null;
                crossref: string | null;
                doi: string | null;
                edition: string | null;
                editor: string | null;
                email: string | null;
                howpublished: string | null;
                institution: string | null;
                journal: string | null;
                month: string | null;
                note: string | null;
                number: string | null;
                organization: string | null;
                pages: string | null;
                publisher: string | null;
                school: string | null;
                series: string | null;
                title: string | null;
                volume: string | null;
                type: string | null;
                year: string | null;
                numpages: string | null;
                url: string | null;
                issue: string | null;
                issn: string | null;
                abstract: string | null;
                urldate: string | null;
                keywords: string | null;
                copyright: string | null;
                createdAt: Date;
                lastAccess: Date;
            }) | null>;
            addBibItemTag: (input: {
                tag: string;
                bibItemId: string;
            }) => Promise<{
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
            } & {
                id: string;
                BibId: number | null;
                OwnWork: boolean;
                ColleaguesWork: boolean;
                read: boolean;
                htmlCitation: string | null;
                PdfPath: string | null;
                address: string | null;
                annote: string | null;
                author: string | null;
                booktitle: string | null;
                chapter: string | null;
                crossref: string | null;
                doi: string | null;
                edition: string | null;
                editor: string | null;
                email: string | null;
                howpublished: string | null;
                institution: string | null;
                journal: string | null;
                month: string | null;
                note: string | null;
                number: string | null;
                organization: string | null;
                pages: string | null;
                publisher: string | null;
                school: string | null;
                series: string | null;
                title: string | null;
                volume: string | null;
                type: string | null;
                year: string | null;
                numpages: string | null;
                url: string | null;
                issue: string | null;
                issn: string | null;
                abstract: string | null;
                urldate: string | null;
                keywords: string | null;
                copyright: string | null;
                createdAt: Date;
                lastAccess: Date;
            }>;
            removeBibEntryTag: (input: {
                tag: string;
                bibEntryId: string;
            }) => Promise<{
                id: string;
                BibId: number | null;
                OwnWork: boolean;
                ColleaguesWork: boolean;
                read: boolean;
                htmlCitation: string | null;
                PdfPath: string | null;
                address: string | null;
                annote: string | null;
                author: string | null;
                booktitle: string | null;
                chapter: string | null;
                crossref: string | null;
                doi: string | null;
                edition: string | null;
                editor: string | null;
                email: string | null;
                howpublished: string | null;
                institution: string | null;
                journal: string | null;
                month: string | null;
                note: string | null;
                number: string | null;
                organization: string | null;
                pages: string | null;
                publisher: string | null;
                school: string | null;
                series: string | null;
                title: string | null;
                volume: string | null;
                type: string | null;
                year: string | null;
                numpages: string | null;
                url: string | null;
                issue: string | null;
                issn: string | null;
                abstract: string | null;
                urldate: string | null;
                keywords: string | null;
                copyright: string | null;
                createdAt: Date;
                lastAccess: Date;
            }>;
            bibEntryUpsert: (input: any) => Promise<{
                id: string;
                BibId: number | null;
                OwnWork: boolean;
                ColleaguesWork: boolean;
                read: boolean;
                htmlCitation: string | null;
                PdfPath: string | null;
                address: string | null;
                annote: string | null;
                author: string | null;
                booktitle: string | null;
                chapter: string | null;
                crossref: string | null;
                doi: string | null;
                edition: string | null;
                editor: string | null;
                email: string | null;
                howpublished: string | null;
                institution: string | null;
                journal: string | null;
                month: string | null;
                note: string | null;
                number: string | null;
                organization: string | null;
                pages: string | null;
                publisher: string | null;
                school: string | null;
                series: string | null;
                title: string | null;
                volume: string | null;
                type: string | null;
                year: string | null;
                numpages: string | null;
                url: string | null;
                issue: string | null;
                issn: string | null;
                abstract: string | null;
                urldate: string | null;
                keywords: string | null;
                copyright: string | null;
                createdAt: Date;
                lastAccess: Date;
            }>;
            bibFilename: (input: number | void | undefined) => Promise<string | {
                filename: string;
            } | undefined>;
            getCitationGroup: (input: string) => Promise<({
                entries: ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    MdxNotes: {
                        id: number;
                        summary: string | null;
                        title: string;
                    }[];
                } & {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                })[];
            } & {
                name: string;
                description: string | null;
            }) | null>;
        };
        beta: {
            parseMdxString: (input: {
                content: string;
            }) => Promise<string>;
        };
    } & {
        query: <TProcedure extends {}[TPath], TPath extends never>(path: TPath, ...args: import("@trpc/server").ProcedureArgs<import("@trpc/server").inferProcedureParams<TProcedure>>) => Promise<import("@trpc/server").inferProcedureOutput<TProcedure>>;
        mutation: <TProcedure extends {}[TPath], TPath extends never>(path: TPath, ...args: import("@trpc/server").ProcedureArgs<import("@trpc/server").inferProcedureParams<TProcedure>>) => Promise<import("@trpc/server").inferProcedureOutput<TProcedure>>;
        subscription: <TProcedure extends {}[TPath], TPath extends never>(path: TPath, ...args: import("@trpc/server").ProcedureArgs<import("@trpc/server").inferProcedureParams<TProcedure>>) => Promise<import("@trpc/server").inferProcedureOutput<TProcedure>>;
    };
}
declare module "individualTypesForDocumentation/parser/unifiedMdxParserParams" {
    import { FrontMatterType } from "@ulld/types";
    import { serverClient } from "trpc/serverClient";
    import { AppConfigSchemaOutput } from "@ulld/configschema/types";
    import { MdxDetailsReturnType } from "types";
    import { MinimalParsableAppConfigOutput } from "@ulld/schemas/mdx-parsing-params";
    export interface UnifiedMdxParserParams {
        content: string;
        docTypeData: AppConfigSchemaOutput["noteTypes"][number] | {};
        data: Partial<FrontMatterType>;
        appConfig: MinimalParsableAppConfigOutput;
        serverClient: typeof serverClient;
        db: MdxDetailsReturnType;
    }
}
declare module "trpcTypes/main" {
    import { ParserKey } from "@ulld/configschema/developer";
    import { FrontMatterType } from "@ulld/types";
    import { UnifiedMdxParserParams } from "individualTypesForDocumentation/parser/unifiedMdxParserParams";
    import { serverClient } from "trpc/serverClient";
    export type MdxNoteWithAll = Awaited<ReturnType<typeof serverClient.mdx.getDatabaseMdx | typeof serverClient.mdx.getDatabaseMdxFromPathname>>;
    export type ReadingListReturned = Awaited<ReturnType<typeof serverClient.readingList.getReadingListContent>>;
    export type CitationGroupReturned = Awaited<ReturnType<typeof serverClient.bibliography.getCitationGroup>>;
    export type BibEntryReturned = Awaited<ReturnType<typeof serverClient.bibliography.getBibEntry>>;
    export type BibReturnType = Awaited<ReturnType<typeof serverClient.bibliography.getBib>>;
    export type FsMdxReturnType = Awaited<ReturnType<typeof serverClient.mdx.getFsMdx>>;
    export type MdxNoteSummary = Awaited<ReturnType<typeof serverClient.universalNotes.getSummaryOfAllNotes>>[number];
    export type RetrievedSettings = Awaited<ReturnType<typeof serverClient.settings.getSettings>>;
    export type MdxParserReturnType<T extends object = {}> = {
        content: string;
        data?: FrontMatterType & T;
    };
    export type UnifiedMdxParser<ExtendedFrontMatterType extends object = {}> = (parserProps: UnifiedMdxParserParams) => Promise<MdxParserReturnType<ExtendedFrontMatterType>>;
    type UnifiedParserMap<ExtendedFrontMatterType extends object = {}> = {
        mdx: UnifiedMdxParser<ExtendedFrontMatterType>;
    };
    export type UnifiedParserOfType<T extends ParserKey, ExtendedFrontMatterType extends object = {}> = UnifiedParserMap<ExtendedFrontMatterType>[T];
}
declare module "trpcTypes/returnTypes/commandPalette" {
    import type { client } from "trpc/client";
    import type { serverClient } from "trpc/serverClient";
    export type NoteCmdItems = Awaited<ReturnType<typeof serverClient.commandPalette.noteSearch>>;
    export type EquationSearchResult = Awaited<ReturnType<typeof serverClient.commandPalette.equationSearch>>;
    export type DefinitionSearchResult = Awaited<ReturnType<typeof client.commandPalette.getDefinitions.query>>;
}
declare module "trpcTypes/returnTypes/bib" {
    import type { Prisma } from "@ulld/database";
    import type { getBibWithEntries } from "trpc/routers/bibliography/methods";
    export type BibWithEntries = Prisma.PromiseReturnType<typeof getBibWithEntries>;
}
declare module "trpcTypes/returnTypes/notes/mdx" {
    import { serverClient } from "trpc/serverClient";
    export type MdxFileSystemReturnType = Awaited<ReturnType<typeof serverClient.mdx.getFsMdx>>;
    export type MdxDetailsReturnType = MdxFileSystemReturnType["details"];
}
declare module "types" {
    export type * from "trpcTypes/valueTableSearch";
    export type * from "trpcTypes/main";
    export type * from "trpcTypes/returnTypes/commandPalette";
    export type * from "trpcTypes/returnTypes/bib";
    export type * from "trpcTypes/returnTypes/notes/mdx";
    export type * from "individualTypesForDocumentation/parser/unifiedMdxParserParams";
}
declare module "__tests__/testData/sampleMdxString" {
    export const testMdx = "\n# Some Title\n_some italic_ content, some **bold** content, and a [link](http://google.com)\n";
}
declare module "actions/syncing" {
    export const syncRootDirectory: () => Promise<boolean>;
    export const backupData: () => Promise<void>;
    export const restoreData: (data: Record<string, any>) => Promise<void>;
}
declare module "actions/clientOnly/bookmarking" {
    export const toggleBookmark: (noteId?: number) => Promise<void>;
}
declare module "actions/server/getOnlineStatus" {
    export const getOnlineStatusServerSide: () => Promise<boolean | undefined>;
}
declare module "bytes/general" {
    export const jsonStringify: (d: object) => string;
    export const jsonParse: (d: string) => any;
}
declare module "bytes/fromBytes" {
    export const fromBytes: (data: Buffer) => any;
}
declare module "bytes/toBytes" {
    export const toBytes: (data: string | object) => Buffer;
}
declare module "classes/data/dateTime" {
    import dayjs, { Dayjs } from 'dayjs';
    import duration from 'dayjs/plugin/duration';
    import { ParsedAppConfig } from '@ulld/configschema/types';
    import { TimeDisplayType } from '@ulld/configschema/zod/dateParseConfig';
    export class DateTime {
        t: Date;
        dayjs: Dayjs;
        withoutSuffix: boolean;
        timezone: string;
        flat: boolean;
        constructor(t: Date | string, _config?: ParsedAppConfig);
        private getTimezone;
        djs(t: Date | string | Dayjs): dayjs.Dayjs;
        updateOnInterval(intervalSeconds: number, type: TimeDisplayType, callback: (s: string) => void): NodeJS.Timeout;
        formatDate(withTime?: boolean): string;
        now(asValue?: boolean): number | Date;
        secondDifference(fromTo?: Date): number;
        diffAsDuration(t?: Date): duration.Duration;
        formatTimeDiff(duration?: duration.Duration, t?: Date): {
            years: number;
            days: number;
            asDays: number;
            months: number;
            hours: number;
            minutes: number;
            seconds: number;
        };
        private getDiffBaseString;
        private relativeTimeAnalog;
        private relativeTimeDescriptive;
        private relativeTimeSummarized;
        replaceExtraNegatives(t: string): string;
        relativeTime(type: "descriptive" | "analog" | "summarized"): string;
    }
}
declare module "classes/data/googleCalendarTypes" {
    import { z } from 'zod';
    export enum CalendarSortOptions {
        startTime = "startTime"
    }
    export interface CalendarOptions {
        calendarId?: string;
        sortBy?: CalendarSortOptions;
        take?: number;
        includePast?: boolean;
    }
    export const CalendarOptionsZod: z.ZodType<CalendarOptions | undefined>;
    export interface AddCalendarEventFormType {
    }
}
declare module "classes/data/tabularParser" {
    export const getFilepath: (file: string) => string;
    export class TabularDataHandler {
        fileContent: string;
        rows: any[];
        constructor(fileContent: string, fileName: string);
    }
}
declare module "classes/data/health/healthReportingManager" {
    export class HealthReportingManager {
        now: Date;
        dietNames: string[];
        constructor();
        getAllHealthReports(): Promise<void>;
        getReportsByDiet(dietName: string): Promise<void>;
    }
}
declare module "classes/data/pluginUtils/pluginSettings/pluginSettings" {
    import type { PluginSettingsRecord } from "@ulld/types";
    import type { PluginSettingsConstructorProps, PluginSettingsImplementation, UpdateDataOpts, UpdatePluginSettingOptions } from "classes/data/pluginUtils/pluginSettings/types";
    export abstract class PluginSettings<T extends PluginSettingsRecord> implements PluginSettingsImplementation<T> {
        #private;
        pluginName: string;
        constructor(props: PluginSettingsConstructorProps);
        updateSettings(newData: Partial<T>, opts: UpdateDataOpts<T>): void;
        updateSettingsPromise(newData: Partial<T>, opts: UpdateDataOpts<T>): Promise<Partial<T>> | undefined;
        get data(): Partial<T>;
        set data(val: Partial<T>);
        abstract getSettings(): Promise<Partial<T> | undefined>;
        abstract sync(opts: UpdatePluginSettingOptions): Promise<Partial<T>>;
    }
}
declare module "classes/data/pluginUtils/pluginSettings/client" {
    import type { PluginSettingsRecord } from "@ulld/types";
    import { PluginSettings as PS } from "classes/data/pluginUtils/pluginSettings/pluginSettings";
    import type { UpdatePluginSettingOptionsSchema } from "classes/data/pluginUtils/pluginSettings/schemas";
    export class PluginSettings<T extends PluginSettingsRecord> extends PS<T> {
        getSettings(): Promise<Partial<T> | undefined>;
        sync(options?: UpdatePluginSettingOptionsSchema): Promise<Partial<T>>;
    }
}
declare module "classes/data/pluginUtils/pluginSettings/server" {
    import type { PluginSettingsRecord } from "@ulld/types";
    import { PluginSettings as PS } from "classes/data/pluginUtils/pluginSettings/pluginSettings";
    import type { UpdatePluginSettingOptionsSchema } from "classes/data/pluginUtils/pluginSettings/schemas";
    export class PluginSettings<T extends PluginSettingsRecord> extends PS<T> {
        getSettings(): Promise<Partial<T> | undefined>;
        sync(options?: UpdatePluginSettingOptionsSchema): Promise<Partial<T>>;
    }
}
declare module "classes/prismaMdxRelations/QaPair" {
    interface QAFlashCardProps {
        question: string;
        answer: string;
        description?: string;
        secondaryLabel?: string;
        topic?: string[];
        subject?: string[];
        tags?: string[];
        referenceId: string;
    }
    export class QuestionAnswerFlashCard implements QAFlashCardProps {
        question: string;
        answer: string;
        description?: string;
        secondaryLabel?: string;
        topic?: string[];
        subject?: string[];
        tags?: string[];
        referenceId: string;
        constructor(props: QAFlashCardProps, referenceId: string);
        createInput(): {
            topic?: {
                connectOrCreate: {
                    where: {
                        name: string;
                    };
                    create: {
                        name: string;
                    };
                }[];
            } | undefined;
            subject?: {
                connectOrCreate: {
                    where: {
                        value: string;
                    };
                    create: {
                        value: string;
                    };
                }[];
            } | undefined;
            tags?: {
                connectOrCreate: {
                    where: {
                        value: string;
                    };
                    create: {
                        value: string;
                    };
                }[];
            } | undefined;
            id: string;
            question: string;
            answer: string;
            description: string | undefined;
            secondaryLabel: string | undefined;
        };
        upsert(): Promise<void>;
    }
}
declare module "classes/prismaMdxRelations/protocols/bib" {
    import { BibReturnType } from "trpcTypes/main";
    import type { BibCore } from "classes/prismaMdxRelations/Bib";
    import type { PrismaMdxRelationshipProtocol } from "classes/prismaMdxRelations/type";
    import type { Prisma, BibEntry as PrismaBibEntries } from "@ulld/database/internalDatabaseTypes";
    export abstract class BibProtocol implements PrismaMdxRelationshipProtocol<Prisma.BibDelegate> {
        abstract createArgs(): Prisma.BibCreateArgs;
        abstract upsertArgs(): Prisma.BibUpsertArgs;
        abstract connectOrCreateArgs(): Prisma.BibCreateOrConnectWithoutEntriesInput;
        abstract whereUniqueInput(): Prisma.BibWhereUniqueInput;
        abstract createInput(): Prisma.BibCreateInput;
        abstract whereInput(): Prisma.BibWhereInput;
        static fromPrisma: (item: NonNullable<BibReturnType> | {
            id: number;
            filename: string;
            lastSync: Date;
            entries: PrismaBibEntries[];
        }) => BibCore;
    }
}
declare module "classes/prismaMdxRelations/protocols/citationGroup" {
    import { CitationGroupReturned } from "trpcTypes/main";
    import type { CitationGroup } from "classes/prismaMdxRelations/CitationGroup";
    import type { PrismaMdxRelationshipProtocol } from "classes/prismaMdxRelations/type";
    import type { Prisma } from "@ulld/database/internalDatabaseTypes";
    export abstract class CitationGroupProtocol implements PrismaMdxRelationshipProtocol<Prisma.CitationsGroupDelegate> {
        abstract createArgs(): Prisma.CitationsGroupCreateArgs;
        abstract upsertArgs(): Prisma.CitationsGroupUpsertArgs;
        abstract connectOrCreateArgs(): Prisma.CitationsGroupCreateOrConnectWithoutEntriesInput;
        abstract whereUniqueInput(): Prisma.CitationsGroupWhereUniqueInput;
        abstract createInput(): Prisma.CitationsGroupCreateInput;
        abstract whereInput(): Prisma.CitationsGroupWhereInput;
        static fromPrisma: (item: NonNullable<CitationGroupReturned>) => CitationGroup;
    }
}
declare module "classes/prismaMdxRelations/protocols/ipynbProtocol" {
    import type { ParsableExtensions } from "@ulld/types";
    import type { Prisma } from "@ulld/database/internalDatabaseTypes";
    import type { serverClient } from "trpc/serverClient";
    import type { IpynbNote } from "classes/prismaMdxRelations/IpynbNote";
    import { NoteBase } from "classes/prismaMdxRelations/NoteBase";
    import type { PrismaMdxRelationshipProtocol } from "classes/prismaMdxRelations/type";
    export type IpynbPrismaReturnType = Awaited<ReturnType<typeof serverClient["notebook"]["getPrismaIpynb"]>>;
    export type IypnbFsReturnType = Awaited<ReturnType<typeof serverClient["notebook"]["getFsIpynb"]>>;
    export abstract class IpynbProtocol extends NoteBase implements PrismaMdxRelationshipProtocol<Prisma.IpynbDelegate> {
        constructor(rootRelativePath: string, extension?: ParsableExtensions);
        abstract createArgs(): Prisma.IpynbCreateArgs | null;
        abstract upsertArgs(): Prisma.IpynbUpsertArgs | null;
        abstract connectOrCreateArgs(): Prisma.IpynbCreateOrConnectWithoutTagsInput | null;
        abstract whereUniqueInput(): Prisma.IpynbWhereUniqueInput | null;
        abstract createInput(): Prisma.IpynbCreateInput | null;
        abstract whereInput(): Prisma.IpynbWhereInput | null;
        static fromPrisma: (item: NonNullable<IpynbPrismaReturnType>) => IpynbNote;
        static fromList: (items: (IpynbPrismaReturnType | undefined | null)[]) => IpynbNote[];
    }
}
declare module "classes/prismaMdxRelations/protocols/readingList" {
    import { ReadingListReturned } from "trpcTypes/main";
    import type { ReadingList } from "classes/prismaMdxRelations/readingList";
    import type { PrismaMdxRelationshipProtocol } from "classes/prismaMdxRelations/type";
    import type { Prisma } from "@ulld/database/internalDatabaseTypes";
    export abstract class ReadingListProtocol implements PrismaMdxRelationshipProtocol<Prisma.ReadingListDelegate> {
        abstract createArgs(): Prisma.ReadingListCreateArgs;
        abstract upsertArgs(): Prisma.ReadingListUpsertArgs;
        abstract connectOrCreateArgs(): Prisma.ReadingListCreateOrConnectWithoutBibEntriesInput;
        abstract whereUniqueInput(): Prisma.ReadingListWhereUniqueInput;
        abstract createInput(): Prisma.ReadingListCreateInput;
        abstract whereInput(): Prisma.ReadingListWhereInput;
        static fromPrisma: (item: NonNullable<ReadingListReturned>) => ReadingList;
    }
}
declare module "classes/prismaMdxRelations/protocols/subject" {
    import type { Subject } from "classes/prismaMdxRelations/subject";
    import type { PrismaMdxRelationshipProtocol } from "classes/prismaMdxRelations/type";
    import type { Prisma, Subject as PrismaSubject } from "@ulld/database/internalDatabaseTypes";
    export abstract class SubjectProtocol implements PrismaMdxRelationshipProtocol<Prisma.SubjectDelegate> {
        abstract whereInput(): Prisma.SubjectWhereInput;
        abstract whereUniqueInput(): Prisma.SubjectWhereUniqueInput;
        abstract createInput(): Prisma.SubjectCreateInput;
        abstract createArgs(): Prisma.SubjectCreateArgs;
        abstract upsertArgs(): Prisma.SubjectUpsertArgs;
        abstract connectOrCreateArgs(): Prisma.SubjectCreateOrConnectWithoutMdxNotesInput;
        static fromPrisma: (item: PrismaSubject) => Subject;
    }
}
declare module "classes/prismaMdxRelations/protocols/tag" {
    import type { Tag } from "classes/prismaMdxRelations/tag";
    import type { PrismaMdxRelationshipProtocol } from "classes/prismaMdxRelations/type";
    import type { Prisma, Tag as PrismaTag } from "@ulld/database/internalDatabaseTypes";
    export abstract class TagProtocol implements PrismaMdxRelationshipProtocol<Prisma.TagDelegate> {
        abstract createArgs(): Prisma.TagCreateArgs;
        abstract upsertArgs(): Prisma.TagUpsertArgs;
        abstract connectOrCreateArgs(): Prisma.TagCreateOrConnectWithoutMdxNotesInput;
        abstract whereUniqueInput(): Prisma.TagWhereUniqueInput;
        abstract createInput(): Prisma.TagCreateInput;
        abstract whereInput(): Prisma.TagWhereInput;
        static fromPrisma: (item: PrismaTag) => Tag;
    }
}
declare module "classes/prismaMdxRelations/protocols/topic" {
    import { ParsedAppConfig } from "@ulld/configschema/types";
    import type { MdxNote } from "classes/prismaMdxRelations/MdxNote";
    import type { Topic } from "classes/prismaMdxRelations/topic";
    import type { PrismaMdxRelationshipProtocol } from "classes/prismaMdxRelations/type";
    import type { Prisma, Topic as PrismaTopic } from "@ulld/database/internalDatabaseTypes";
    export interface TopicWithNoteIds extends PrismaTopic {
        MdxNote: MdxNote[] | string[];
    }
    export abstract class TopicProtocol implements PrismaMdxRelationshipProtocol<Prisma.TopicDelegate> {
        abstract createArgs(config: ParsedAppConfig): Prisma.TopicCreateArgs;
        abstract upsertArgs(config: ParsedAppConfig): Prisma.TopicUpsertArgs;
        abstract connectOrCreateArgs(): Prisma.TopicCreateOrConnectWithoutMdxNotesInput;
        abstract whereUniqueInput(): Prisma.TopicWhereUniqueInput;
        abstract createInput(config: ParsedAppConfig): Prisma.TopicCreateInput;
        abstract whereInput(): Prisma.TopicWhereInput;
        static fromPrisma: (item: TopicWithNoteIds) => Topic;
    }
}
declare module "classes/search/noteFilter" {
    import type { SerializeMdxConfig } from "@ulld/parsers/mdx/types";
    import type { SearchAllParams } from "@ulld/utilities/types";
    import { MdxNote } from "classes/prismaMdxRelations/MdxNote";
    import { MdxNoteSummaryOutputWithMdxTransforms } from "classes/prismaMdxRelations/schemas/withMdxTransforms";
    import type { Prisma } from "@ulld/database";
    import { AppConfigSchemaOutput } from "@ulld/configschema/zod/main";
    type SortedResult = MdxNote & {
        sortRank?: number;
    };
    export interface IntriguingValueSummary {
        rootRelativePath: string;
        noteType: string;
        id: number;
        title: string;
        href: string;
        firstSync: Date;
        lastSync: Date;
        importantValues: number[];
    }
    export class NoteFilter implements Omit<SearchAllParams, "perPage" | "page"> {
        type: string | "all";
        params?: SearchAllParams | undefined;
        serializeConfig?: SerializeMdxConfig | undefined;
        preParseNotes: MdxNote[];
        notes: MdxNoteSummaryOutputWithMdxTransforms[];
        perPage: number;
        page: number;
        query?: string;
        tags?: string[];
        totalFound: number;
        categories?: string[];
        citations?: string[];
        tagRegex?: RegExp[];
        topics?: string[];
        subjects?: string[];
        equationId?: string;
        sequentialId?: string;
        skip: number;
        remote: boolean;
        secondaryData: {
            topics: string[];
            subjects: string[];
            tags: string[];
        };
        constructor(type: string | "all", params?: SearchAllParams | undefined, serializeConfig?: SerializeMdxConfig | undefined);
        regex(value: string): RegExp;
        formatSummary(): Promise<{
            id: number | null;
            href: string | null;
            title: string;
            tags: {
                value: string;
            }[];
            noteType: string;
            topics: import("classes/prismaMdxRelations/topic").Topic[];
            subjects: import("classes/prismaMdxRelations/subject").Subject[];
            isProtected: boolean | null;
            latexTitle: string | null;
            citationsListOrder: string[];
            importantValues: number[];
            sequentialIndex: number | null;
            floatImages: boolean;
            trackRemote: boolean;
            outgoingQuickLinks: string[];
            bookmarked: boolean;
            equationIds: string[];
            noLog: boolean;
            saveFormatted: boolean;
            summary?: string | null | undefined;
            firstSync?: string | undefined;
            lastSync?: string | undefined;
            rootRelativePath?: string | null | undefined;
            formatted?: string | null | undefined;
            sequentialKey?: string | null | undefined;
            remoteUrl?: string | null | undefined;
            sequentialList?: {
                sequentialKey: string;
            } | null | undefined;
            quickLinkId?: string | null | undefined;
        }[]>;
        formatNotes(): Promise<{
            title: string;
            tags: ({
                value: string;
                kanbanId?: number | null | undefined;
            } | {
                value: string;
                kanbanId?: number | null | undefined;
            })[];
            noteType: string;
            isProtected: boolean;
            rootRelativePath: string;
            importantValues: number[];
            floatImages: boolean;
            trackRemote: boolean;
            bookmarked: boolean;
            citations: {
                tags: ({
                    value: string;
                    kanbanId?: number | null | undefined;
                } | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[];
                readingList: {
                    name: string;
                    description: string | null;
                    createdAt?: any;
                    lastUpdate?: any;
                }[];
                OwnWork: boolean;
                ColleaguesWork: boolean;
                read: boolean;
                PdfPath: string;
                citationGroups: {
                    name: string;
                    description?: string | null | undefined;
                }[];
                number?: string | null | undefined;
                journal?: string | null | undefined;
                editor?: string | null | undefined;
                note?: string | null | undefined;
                abstract?: string | null | undefined;
                id?: string | null | undefined;
                type?: string | null | undefined;
                title?: string | null | undefined;
                copyright?: string | null | undefined;
                school?: string | null | undefined;
                volume?: string | null | undefined;
                keywords?: string | null | undefined;
                BibId?: number | null | undefined;
                htmlCitation?: string | null | undefined;
                address?: string | null | undefined;
                annote?: string | null | undefined;
                author?: string | null | undefined;
                booktitle?: string | null | undefined;
                chapter?: string | null | undefined;
                crossref?: string | null | undefined;
                doi?: string | null | undefined;
                edition?: string | null | undefined;
                email?: string | null | undefined;
                howpublished?: string | null | undefined;
                institution?: string | null | undefined;
                month?: string | null | undefined;
                organization?: string | null | undefined;
                pages?: string | null | undefined;
                publisher?: string | null | undefined;
                series?: string | null | undefined;
                year?: string | null | undefined;
                numpages?: string | null | undefined;
                url?: string | null | undefined;
                issue?: string | null | undefined;
                issn?: string | null | undefined;
                urldate?: string | undefined;
                tempPageIndex?: number | null | undefined;
            }[];
            definitions: {
                id: string;
                label?: string | null | undefined;
                content?: string | null | undefined;
                mdxNoteId?: number | null | undefined;
            }[];
            raw: string;
            saveFormatted: boolean;
            ftExtension: ".md" | ".mdx" | ".ipynb";
            id?: number | undefined;
            href?: string | null | undefined;
            summary?: string | null | undefined;
            topics?: {
                value: string;
            }[] | undefined;
            subjects?: {
                value: string;
            }[] | undefined;
            firstSync?: any;
            lastSync?: any;
            latexTitle?: string | null | undefined;
            formatted?: string | null | undefined;
            citationsListOrder?: string[] | undefined;
            imageSrc?: string | null | undefined;
            sequentialKey?: string | null | undefined;
            sequentialIndex?: number | null | undefined;
            remoteUrl?: string | null | undefined;
            outgoingQuickLinks?: string[] | undefined;
            quickLinkId?: string | null | undefined;
            equationIds?: string[] | undefined;
            frontMatter?: {
                tags: string[];
                topics: string[];
                subjects: string[];
                importantValues: number[];
                id?: string | null | undefined;
                summary?: string | null | undefined;
                title?: string | null | undefined;
                sequentialKey?: string | null | undefined;
                created?: string | null | undefined;
                updated?: string | null | undefined;
                sequential?: number | null | undefined;
                tableStyles?: {
                    expand: boolean | null;
                    fullWidth: boolean | null;
                    tableCenter: boolean | null;
                    textCenter: boolean | null;
                    headingCenter: boolean | null;
                    noMax: boolean | null;
                    math?: "base" | "lg" | "xl" | "small" | null | undefined;
                    text?: "base" | "lg" | "xl" | "small" | null | undefined;
                    float?: "right" | "left" | null | undefined;
                } | undefined;
            } | undefined;
        }[]>;
        getBookmarked(config?: AppConfigSchemaOutput): Promise<{
            id: number | null;
            href: string | null;
            title: string;
            tags: {
                value: string;
            }[];
            noteType: string;
            topics: import("classes/prismaMdxRelations/topic").Topic[];
            subjects: import("classes/prismaMdxRelations/subject").Subject[];
            isProtected: boolean | null;
            latexTitle: string | null;
            citationsListOrder: string[];
            importantValues: number[];
            sequentialIndex: number | null;
            floatImages: boolean;
            trackRemote: boolean;
            outgoingQuickLinks: string[];
            bookmarked: boolean;
            equationIds: string[];
            noLog: boolean;
            saveFormatted: boolean;
            summary?: string | null | undefined;
            firstSync?: string | undefined;
            lastSync?: string | undefined;
            rootRelativePath?: string | null | undefined;
            formatted?: string | null | undefined;
            sequentialKey?: string | null | undefined;
            remoteUrl?: string | null | undefined;
            sequentialList?: {
                sequentialKey: string;
            } | null | undefined;
            quickLinkId?: string | null | undefined;
        }[]>;
        flattenForClient(): object[];
        citationsOverlap(items: MdxNote[]): MdxNote[];
        getNoteType(config: AppConfigSchemaOutput): typeof config.noteTypes | undefined;
        getMatchingTypes(config: AppConfigSchemaOutput): {
            docType: string;
            id: string;
            url: string;
            label: string;
            icon: string;
            UI: {
                styles: {
                    dark: {
                        bg?: string | undefined;
                        fg?: string | undefined;
                    };
                    light: {
                        bg?: string | undefined;
                        fg?: string | undefined;
                    };
                };
            };
            fs: string;
            matchWeight: number;
            urlQuery: Record<string, string | number | string[] | number[]>;
            keywords: string[];
            autoTag: string[];
            autoTopic: string[];
            autoSubject: string[];
            inSidebar: boolean;
            inNavbar: boolean;
            filePathPattern?: string | undefined;
            topicLabel?: string | undefined;
            subjectLabel?: string | undefined;
        }[] | null;
        tagMatch(note: SortedResult): boolean;
        titleMatch(note: SortedResult): boolean;
        defaultCategorySearch(noSecondary: boolean | undefined, config: AppConfigSchemaOutput): Promise<{
            id: number | null;
            href: string | null;
            title: string;
            tags: {
                value: string;
            }[];
            noteType: string;
            topics: import("classes/prismaMdxRelations/topic").Topic[];
            subjects: import("classes/prismaMdxRelations/subject").Subject[];
            isProtected: boolean | null;
            latexTitle: string | null;
            citationsListOrder: string[];
            importantValues: number[];
            sequentialIndex: number | null;
            floatImages: boolean;
            trackRemote: boolean;
            outgoingQuickLinks: string[];
            bookmarked: boolean;
            equationIds: string[];
            noLog: boolean;
            saveFormatted: boolean;
            summary?: string | null | undefined;
            firstSync?: string | undefined;
            lastSync?: string | undefined;
            rootRelativePath?: string | null | undefined;
            formatted?: string | null | undefined;
            sequentialKey?: string | null | undefined;
            remoteUrl?: string | null | undefined;
            sequentialList?: {
                sequentialKey: string;
            } | null | undefined;
            quickLinkId?: string | null | undefined;
        }[]>;
        withQuery(a: string[] | string): string[];
        defaultWhereInput(config: AppConfigSchemaOutput): {
            equations?: {
                some: {
                    id: number;
                } | {
                    equationId: string;
                };
            } | undefined;
            title?: {
                search: string;
                mode: "insensitive";
            } | undefined;
            content?: {
                search: string;
                mode: "insensitive";
            } | undefined;
            subject?: {
                some: {
                    value: {
                        in: string[];
                    };
                };
            } | undefined;
            topics?: {
                some: {
                    value: {
                        in: string[];
                    };
                };
            } | undefined;
            remoteUrl?: {
                equals: null;
            } | undefined;
            tags?: {
                some: {
                    value: {
                        in: string[];
                    };
                };
            } | undefined;
            citations?: {
                some: {
                    id: {
                        in: string[];
                    };
                };
            } | undefined;
            noteType?: {
                in: string[];
            } | undefined;
        };
        toValueSearchTable(config: AppConfigSchemaOutput): Promise<import("types").ValueSearchTableItem[]>;
        getQuerySecondaryData(config: AppConfigSchemaOutput): Promise<{
            topics: string[];
            subjects: string[];
            tags: string[];
        }>;
        defaultSelectInput(): {
            title: true;
            id: true;
            rootRelativePath: true;
            latexTitle: true;
            sequentialIndex: true;
            summary: true;
            subjects: true;
            topics: true;
            tags: true;
            href: true;
            lastSync: true;
            firstSync: true;
            noteType: true;
            bookmarked: true;
            citations: {
                select: {
                    id: true;
                };
            };
        };
        paginationInput(): {
            skip: number;
            take: number;
        };
        defaultOrderBy(): ({
            bookmarked: "desc";
            firstSync?: undefined;
        } | {
            firstSync: "desc";
            bookmarked?: undefined;
        })[];
        getCountFromWhereInput(whereInput: NonNullable<Prisma.MdxNoteWhereInput>): Promise<number>;
        parseMdxNote(nt: MdxNote): Promise<{
            title: string;
            tags: ({
                value: string;
                kanbanId?: number | null | undefined;
            } | {
                value: string;
                kanbanId?: number | null | undefined;
            })[];
            noteType: string;
            isProtected: boolean;
            rootRelativePath: string;
            importantValues: number[];
            floatImages: boolean;
            trackRemote: boolean;
            bookmarked: boolean;
            citations: {
                tags: ({
                    value: string;
                    kanbanId?: number | null | undefined;
                } | {
                    value: string;
                    kanbanId?: number | null | undefined;
                })[];
                readingList: {
                    name: string;
                    description: string | null;
                    createdAt?: any;
                    lastUpdate?: any;
                }[];
                OwnWork: boolean;
                ColleaguesWork: boolean;
                read: boolean;
                PdfPath: string;
                citationGroups: {
                    name: string;
                    description?: string | null | undefined;
                }[];
                number?: string | null | undefined;
                journal?: string | null | undefined;
                editor?: string | null | undefined;
                note?: string | null | undefined;
                abstract?: string | null | undefined;
                id?: string | null | undefined;
                type?: string | null | undefined;
                title?: string | null | undefined;
                copyright?: string | null | undefined;
                school?: string | null | undefined;
                volume?: string | null | undefined;
                keywords?: string | null | undefined;
                BibId?: number | null | undefined;
                htmlCitation?: string | null | undefined;
                address?: string | null | undefined;
                annote?: string | null | undefined;
                author?: string | null | undefined;
                booktitle?: string | null | undefined;
                chapter?: string | null | undefined;
                crossref?: string | null | undefined;
                doi?: string | null | undefined;
                edition?: string | null | undefined;
                email?: string | null | undefined;
                howpublished?: string | null | undefined;
                institution?: string | null | undefined;
                month?: string | null | undefined;
                organization?: string | null | undefined;
                pages?: string | null | undefined;
                publisher?: string | null | undefined;
                series?: string | null | undefined;
                year?: string | null | undefined;
                numpages?: string | null | undefined;
                url?: string | null | undefined;
                issue?: string | null | undefined;
                issn?: string | null | undefined;
                urldate?: string | undefined;
                tempPageIndex?: number | null | undefined;
            }[];
            definitions: {
                id: string;
                label?: string | null | undefined;
                content?: string | null | undefined;
                mdxNoteId?: number | null | undefined;
            }[];
            raw: string;
            saveFormatted: boolean;
            ftExtension: ".md" | ".mdx" | ".ipynb";
            id?: number | undefined;
            href?: string | null | undefined;
            summary?: string | null | undefined;
            topics?: {
                value: string;
            }[] | undefined;
            subjects?: {
                value: string;
            }[] | undefined;
            firstSync?: any;
            lastSync?: any;
            latexTitle?: string | null | undefined;
            formatted?: string | null | undefined;
            citationsListOrder?: string[] | undefined;
            imageSrc?: string | null | undefined;
            sequentialKey?: string | null | undefined;
            sequentialIndex?: number | null | undefined;
            remoteUrl?: string | null | undefined;
            outgoingQuickLinks?: string[] | undefined;
            quickLinkId?: string | null | undefined;
            equationIds?: string[] | undefined;
            frontMatter?: {
                tags: string[];
                topics: string[];
                subjects: string[];
                importantValues: number[];
                id?: string | null | undefined;
                summary?: string | null | undefined;
                title?: string | null | undefined;
                sequentialKey?: string | null | undefined;
                created?: string | null | undefined;
                updated?: string | null | undefined;
                sequential?: number | null | undefined;
                tableStyles?: {
                    expand: boolean | null;
                    fullWidth: boolean | null;
                    tableCenter: boolean | null;
                    textCenter: boolean | null;
                    headingCenter: boolean | null;
                    noMax: boolean | null;
                    math?: "base" | "lg" | "xl" | "small" | null | undefined;
                    text?: "base" | "lg" | "xl" | "small" | null | undefined;
                    float?: "right" | "left" | null | undefined;
                } | undefined;
            } | undefined;
        }>;
        getSequentialList(sequentialId: string): Promise<{
            notes: {
                id: number;
                href: string;
                summary: string | null;
                title: string;
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                noteType: string;
                topics: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                subjects: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                firstSync: Date;
                lastSync: Date;
                latexTitle: string | null;
                rootRelativePath: string;
                sequentialIndex: number | null;
                bookmarked: boolean;
                citations: {
                    id: string;
                }[];
            }[];
            totalFound: number;
        }>;
        getResultsBeforeParse(config: AppConfigSchemaOutput): Promise<{
            notes: {
                id: number;
                href: string;
                summary: string | null;
                title: string;
                tags: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                noteType: string;
                topics: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                subjects: {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[];
                firstSync: Date;
                lastSync: Date;
                latexTitle: string | null;
                rootRelativePath: string;
                sequentialIndex: number | null;
                bookmarked: boolean;
                citations: {
                    id: string;
                }[];
            }[];
            totalFound: number;
        }>;
        getResults(config: AppConfigSchemaOutput): Promise<{
            id: number | null;
            href: string | null;
            title: string;
            tags: {
                value: string;
            }[];
            noteType: string;
            topics: import("classes/prismaMdxRelations/topic").Topic[];
            subjects: import("classes/prismaMdxRelations/subject").Subject[];
            isProtected: boolean | null;
            latexTitle: string | null;
            citationsListOrder: string[];
            importantValues: number[];
            sequentialIndex: number | null;
            floatImages: boolean;
            trackRemote: boolean;
            outgoingQuickLinks: string[];
            bookmarked: boolean;
            equationIds: string[];
            noLog: boolean;
            saveFormatted: boolean;
            summary?: string | null | undefined;
            firstSync?: string | undefined;
            lastSync?: string | undefined;
            rootRelativePath?: string | null | undefined;
            formatted?: string | null | undefined;
            sequentialKey?: string | null | undefined;
            remoteUrl?: string | null | undefined;
            sequentialList?: {
                sequentialKey: string;
            } | null | undefined;
            quickLinkId?: string | null | undefined;
        }[]>;
        intriguingValueSelectInput(): {
            title: true;
            id: true;
            rootRelativePath: true;
            href: true;
            lastSync: true;
            firstSync: true;
            noteType: true;
            importantValues: true;
        };
        intriguingValueWhereInput(config: AppConfigSchemaOutput): {
            importantValues: {
                isEmpty: false;
            };
            equations?: {
                some: {
                    id: number;
                } | {
                    equationId: string;
                };
            } | undefined;
            title?: {
                search: string;
                mode: "insensitive";
            } | undefined;
            content?: {
                search: string;
                mode: "insensitive";
            } | undefined;
            subject?: {
                some: {
                    value: {
                        in: string[];
                    };
                };
            } | undefined;
            topics?: {
                some: {
                    value: {
                        in: string[];
                    };
                };
            } | undefined;
            remoteUrl?: {
                equals: null;
            } | undefined;
            tags?: {
                some: {
                    value: {
                        in: string[];
                    };
                };
            } | undefined;
            citations?: {
                some: {
                    id: {
                        in: string[];
                    };
                };
            } | undefined;
            noteType?: {
                in: string[];
            } | undefined;
        };
        intriguingValueSearch(config: AppConfigSchemaOutput): Promise<void>;
        sortByLastModified(preparse?: boolean): void;
    }
}
declare module "classes/specificNoteQuery/documentConfigMap" {
    import { DocumentTypeConfig } from "@ulld/configschema/zod/documentConfigSchema";
    import { AppConfigSchemaOutput } from "@ulld/configschema/zod/main";
    type ConfigMap = Record<string, DocumentTypeConfig>;
    export const documentConfigMap: (parsedConfig: AppConfigSchemaOutput) => ConfigMap;
}
declare module "classes/specificNoteQuery/specificNoteQueryManager" {
    import type { DocumentTypeConfig } from "@ulld/configschema/zod/documentConfigSchema";
    import type { WithFSSearchParams } from "@ulld/state/searchParamSchemas/utilities/formatSearchAllParams";
    import type { SearchAllParams } from "@ulld/utilities/types";
    import type { AppConfigSchemaOutput } from "@ulld/configschema/zod/main";
    import type { MinimalParsableAppConfigOutput } from "@ulld/configschema/types";
    import type { BuildStaticDataOutput } from "@ulld/configschema/buildTypes";
    import { FsRootGlob } from "@ulld/utilities/fsRootGlob";
    import type { NotePropertiesOutput, ParsableExtensions } from "@ulld/types";
    interface NotePropsBeforeRun {
        slug: string;
        docType: string | AppConfigSchemaOutput["noteTypes"][number];
        preferFs: boolean;
        searchParams: (SearchAllParams & {
            fs?: string | boolean | null | undefined;
            vid?: string | undefined;
            time?: string | undefined;
        }) | undefined;
    }
    export class SpecificNoteQueryManager {
        appConfig: AppConfigSchemaOutput;
        pathname?: string | null;
        preferFs: boolean;
        props: Omit<NotePropsBeforeRun, "slug"> & {
            slug: string;
        };
        docType: string;
        filetype?: ParsableExtensions | null;
        fsPath: string;
        docTypeConfig: DocumentTypeConfig;
        alwaysPreferFs: boolean;
        fsRoot: string;
        filetypeSpecificAppendices: BuildStaticDataOutput["filetypeSpecificAppendices"];
        constructor(props: NotePropsBeforeRun, docType: string | AppConfigSchemaOutput["noteTypes"][number], filetype: ParsableExtensions | undefined, pathname: string | null, appConfig: AppConfigSchemaOutput, buildData: BuildStaticDataOutput);
        checkTypesExist(): ReturnType<InstanceType<typeof FsRootGlob>["getFileMatches"]>;
        private __getFsPath;
        doesPreferFs(): boolean;
        shouldUseFilesystem(config: MinimalParsableAppConfigOutput): boolean;
        getFiletypeFromPathname(config: AppConfigSchemaOutput): string;
        getFormatFromPath(p: string): ParsableExtensions | undefined;
        run(): Promise<NotePropertiesOutput>;
        static formatNoteProps<T extends WithFSSearchParams>(docType: AppConfigSchemaOutput["noteTypes"][number], params: T["params"], searchParams: WithFSSearchParams["searchParams"], appConfig: AppConfigSchemaOutput, buildData: BuildStaticDataOutput): Promise<{
            noteProps: NotePropertiesOutput;
            slug: string;
            docType: {
                docType: string;
                id: string;
                url: string;
                label: string;
                icon: string;
                UI: {
                    styles: {
                        dark: {
                            bg?: string | undefined;
                            fg?: string | undefined;
                        };
                        light: {
                            bg?: string | undefined;
                            fg?: string | undefined;
                        };
                    };
                };
                fs: string;
                matchWeight: number;
                urlQuery: Record<string, string | number | string[] | number[]>;
                keywords: string[];
                autoTag: string[];
                autoTopic: string[];
                autoSubject: string[];
                inSidebar: boolean;
                inNavbar: boolean;
                filePathPattern?: string | undefined;
                topicLabel?: string | undefined;
                subjectLabel?: string | undefined;
            };
            preferFs: boolean;
            searchParams: (SearchAllParams & {
                fs?: boolean | string | undefined | null;
                vid?: string;
                time?: string;
            }) | undefined;
        }>;
    }
}
declare module "events/onSync/functionList" {
    import { EventMethods } from "@ulld/configschema/types";
    const onSyncMethodList: EventMethods<any>["onSync"][];
    export default onSyncMethodList;
}
declare module "parsers/mdx/parsers/parseDefinitionTags" {
    import { Definition } from "classes/prismaMdxRelations/definition";
    import { UnifiedMdxParser } from "types";
    interface ExtendedFrontMatter {
        definitions: Definition[];
    }
    export const parseDefinitionTags: UnifiedMdxParser<ExtendedFrontMatter>;
}
declare module "parsers/mdx/parsers/parseQuickLinks" {
    import { UnifiedMdxParser } from "types";
    interface ExtendedFrontMatter {
        outgoingQuickLinks: string[];
    }
    export const parseQuickLinks: UnifiedMdxParser<ExtendedFrontMatter>;
}
declare module "parsers/mdx/parsers/parseTags" {
    import { UnifiedMdxParser } from "types";
    interface ExtendedFrontMatter {
        tags: string[];
    }
    export const parseTags: UnifiedMdxParser<ExtendedFrontMatter>;
}
declare module "parsers/mdx/parsers/parseVideoTimeStampLinks" {
    import { UnifiedMdxParser } from "types";
    export const parseVideoTimeStampLinks: UnifiedMdxParser;
}
declare module "plugins/native/health/reportUtilities" {
    import { HealthReport } from '@ulld/database/internalDatabaseTypes';
    import { z } from 'zod';
    export interface DateInput {
        month: number;
        day: number;
        year: number;
    }
    export const healthDashboardSchema: z.ZodObject<{
        start: z.ZodOptional<z.ZodString>;
        end: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        start?: string | undefined;
        end?: string | undefined;
    }, {
        start?: string | undefined;
        end?: string | undefined;
    }>;
    export const DateInputSchema: z.ZodObject<{
        month: z.ZodNumber;
        year: z.ZodNumber;
        day: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        month: number;
        year: number;
        day: number;
    }, {
        month: number;
        year: number;
        day: number;
    }>;
    export const healthDashboardFormSchema: z.ZodObject<{
        start: z.ZodObject<{
            month: z.ZodNumber;
            year: z.ZodNumber;
            day: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            month: number;
            year: number;
            day: number;
        }, {
            month: number;
            year: number;
            day: number;
        }>;
        end: z.ZodObject<{
            month: z.ZodNumber;
            year: z.ZodNumber;
            day: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            month: number;
            year: number;
            day: number;
        }, {
            month: number;
            year: number;
            day: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        start: {
            month: number;
            year: number;
            day: number;
        };
        end: {
            month: number;
            year: number;
            day: number;
        };
    }, {
        start: {
            month: number;
            year: number;
            day: number;
        };
        end: {
            month: number;
            year: number;
            day: number;
        };
    }>;
    export type HealthDashboardSearchForm = z.infer<typeof healthDashboardFormSchema>;
    export type HealthDashboardSearchParams = z.infer<typeof healthDashboardSchema>;
    export const healthReportFieldNameDisplayMap: {
        [k in keyof HealthReport]: string;
    };
    export const healthReportRatingFieldKeys: (keyof HealthReport)[];
    export const getHealthReportFieldHintMap: () => {
        [k: string]: "id" | "summary" | "title" | "weight" | "created" | "overall" | "skin" | "bloat" | "weight_feeling" | "fullness" | "cardiacCapacity" | "jawLine" | "joints" | "flexibility" | "anxiety" | "anxiety_desc" | "mood_desc" | "mood" | "sexDrive" | "intruisiveThoughts" | "caffeineIntake" | "glutenIntake" | "sugarIntake" | "artificialSweetenerIntake" | "artificalDyes" | "sleepQuality" | "hydration" | "twitching" | "sleepHours" | "calorie_est" | "times_meals_more_than_gap_apart" | "estHoursInExcessFast" | "dietId";
    };
    export const healthReportRatingFieldHints: Partial<{
        [k in keyof HealthReport]: string;
    }>;
}
declare module "plugins/native/health/formUtils" {
    import { HealthReport } from "@ulld/database/internalDatabaseTypes";
    import { ZodDate, ZodOptional, ZodString, ZodUnion, z } from "zod";
    import { HealthDashboardSearchParams, DateInput } from "plugins/native/health/reportUtilities";
    export const dietFormFieldValues: {
        name: ZodString;
        summary: ZodOptional<ZodString>;
        activelyFollowing: z.ZodDefault<z.ZodBoolean>;
        gf: z.ZodNativeEnum<{
            on: "on";
            off: "off";
            partial: "partial";
        }>;
        fasting: z.ZodNativeEnum<{
            on: "on";
            off: "off";
            partial: "partial";
        }>;
        cardioTraining: z.ZodNativeEnum<{
            on: "on";
            off: "off";
            partial: "partial";
        }>;
        weightTraining: z.ZodNativeEnum<{
            on: "on";
            off: "off";
            partial: "partial";
        }>;
        vegan: z.ZodDefault<z.ZodBoolean>;
        pescatarian: z.ZodDefault<z.ZodBoolean>;
        vegetarian: z.ZodDefault<z.ZodBoolean>;
        carb: ZodOptional<z.ZodNumber>;
        pro: ZodOptional<z.ZodNumber>;
        fat: ZodOptional<z.ZodNumber>;
    };
    export const dietOnlySchema: z.ZodObject<{
        name: ZodString;
        summary: ZodOptional<ZodString>;
        activelyFollowing: z.ZodDefault<z.ZodBoolean>;
        gf: z.ZodNativeEnum<{
            on: "on";
            off: "off";
            partial: "partial";
        }>;
        fasting: z.ZodNativeEnum<{
            on: "on";
            off: "off";
            partial: "partial";
        }>;
        cardioTraining: z.ZodNativeEnum<{
            on: "on";
            off: "off";
            partial: "partial";
        }>;
        weightTraining: z.ZodNativeEnum<{
            on: "on";
            off: "off";
            partial: "partial";
        }>;
        vegan: z.ZodDefault<z.ZodBoolean>;
        pescatarian: z.ZodDefault<z.ZodBoolean>;
        vegetarian: z.ZodDefault<z.ZodBoolean>;
        carb: ZodOptional<z.ZodNumber>;
        pro: ZodOptional<z.ZodNumber>;
        fat: ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        vegan: boolean;
        activelyFollowing: boolean;
        gf: "on" | "off" | "partial";
        fasting: "on" | "off" | "partial";
        cardioTraining: "on" | "off" | "partial";
        weightTraining: "on" | "off" | "partial";
        pescatarian: boolean;
        vegetarian: boolean;
        summary?: string | undefined;
        carb?: number | undefined;
        pro?: number | undefined;
        fat?: number | undefined;
    }, {
        name: string;
        gf: "on" | "off" | "partial";
        fasting: "on" | "off" | "partial";
        cardioTraining: "on" | "off" | "partial";
        weightTraining: "on" | "off" | "partial";
        summary?: string | undefined;
        vegan?: boolean | undefined;
        activelyFollowing?: boolean | undefined;
        pescatarian?: boolean | undefined;
        vegetarian?: boolean | undefined;
        carb?: number | undefined;
        pro?: number | undefined;
        fat?: number | undefined;
    }>;
    export const dietAdditionalSchema: z.ZodObject<{
        macrosMatter: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        macrosMatter: boolean;
    }, {
        macrosMatter?: boolean | undefined;
    }>;
    export const dietFormSchema: z.ZodObject<z.objectUtil.extendShape<{
        name: ZodString;
        summary: ZodOptional<ZodString>;
        activelyFollowing: z.ZodDefault<z.ZodBoolean>;
        gf: z.ZodNativeEnum<{
            on: "on";
            off: "off";
            partial: "partial";
        }>;
        fasting: z.ZodNativeEnum<{
            on: "on";
            off: "off";
            partial: "partial";
        }>;
        cardioTraining: z.ZodNativeEnum<{
            on: "on";
            off: "off";
            partial: "partial";
        }>;
        weightTraining: z.ZodNativeEnum<{
            on: "on";
            off: "off";
            partial: "partial";
        }>;
        vegan: z.ZodDefault<z.ZodBoolean>;
        pescatarian: z.ZodDefault<z.ZodBoolean>;
        vegetarian: z.ZodDefault<z.ZodBoolean>;
        carb: ZodOptional<z.ZodNumber>;
        pro: ZodOptional<z.ZodNumber>;
        fat: ZodOptional<z.ZodNumber>;
    }, {
        macrosMatter: z.ZodDefault<z.ZodBoolean>;
    }>, "strip", z.ZodTypeAny, {
        name: string;
        vegan: boolean;
        activelyFollowing: boolean;
        gf: "on" | "off" | "partial";
        fasting: "on" | "off" | "partial";
        cardioTraining: "on" | "off" | "partial";
        weightTraining: "on" | "off" | "partial";
        pescatarian: boolean;
        vegetarian: boolean;
        macrosMatter: boolean;
        summary?: string | undefined;
        carb?: number | undefined;
        pro?: number | undefined;
        fat?: number | undefined;
    }, {
        name: string;
        gf: "on" | "off" | "partial";
        fasting: "on" | "off" | "partial";
        cardioTraining: "on" | "off" | "partial";
        weightTraining: "on" | "off" | "partial";
        summary?: string | undefined;
        vegan?: boolean | undefined;
        activelyFollowing?: boolean | undefined;
        pescatarian?: boolean | undefined;
        vegetarian?: boolean | undefined;
        carb?: number | undefined;
        pro?: number | undefined;
        fat?: number | undefined;
        macrosMatter?: boolean | undefined;
    }>;
    export type DietFormSchema = z.infer<typeof dietFormSchema>;
    export const dietFormDefaultValues: DietFormSchema;
    type StringToNum = Pick<HealthReport, "sleepHours" | "weight" | "calorie_est" | "times_meals_more_than_gap_apart" | "estHoursInExcessFast">;
    type StringNumRecord = Record<keyof StringToNum, ZodOptional<ZodString>> & {
        created: z.ZodOptional<ZodUnion<[ZodDate, ZodString]>>;
    };
    export const healthReportFormFieldValues: Omit<{
        [k in keyof HealthReport]: z.ZodType<HealthReport[k]> | z.ZodOptional<z.ZodType<HealthReport[k]>>;
    }, "created" | "dietId" | keyof StringToNum> & StringNumRecord;
    export const healthReportFormFieldBackend: Omit<{
        [k in keyof typeof healthReportFormFieldValues]: z.ZodType<HealthReport[k]> | z.ZodOptional<z.ZodType<HealthReport[k]>>;
    }, "created">;
    export const healthReportOnlySchema: z.ZodObject<Omit<{
        id: z.ZodType<number, z.ZodTypeDef, number> | ZodOptional<z.ZodType<number, z.ZodTypeDef, number>>;
        title: z.ZodType<string | null, z.ZodTypeDef, string | null> | ZodOptional<z.ZodType<string | null, z.ZodTypeDef, string | null>>;
        summary: z.ZodType<string | null, z.ZodTypeDef, string | null> | ZodOptional<z.ZodType<string | null, z.ZodTypeDef, string | null>>;
        overall: z.ZodType<number, z.ZodTypeDef, number> | ZodOptional<z.ZodType<number, z.ZodTypeDef, number>>;
        skin: z.ZodType<number, z.ZodTypeDef, number> | ZodOptional<z.ZodType<number, z.ZodTypeDef, number>>;
        bloat: z.ZodType<number, z.ZodTypeDef, number> | ZodOptional<z.ZodType<number, z.ZodTypeDef, number>>;
        weight_feeling: z.ZodType<number, z.ZodTypeDef, number> | ZodOptional<z.ZodType<number, z.ZodTypeDef, number>>;
        fullness: z.ZodType<number, z.ZodTypeDef, number> | ZodOptional<z.ZodType<number, z.ZodTypeDef, number>>;
        weight: z.ZodType<number | null, z.ZodTypeDef, number | null> | ZodOptional<z.ZodType<number | null, z.ZodTypeDef, number | null>>;
        cardiacCapacity: z.ZodType<number, z.ZodTypeDef, number> | ZodOptional<z.ZodType<number, z.ZodTypeDef, number>>;
        jawLine: z.ZodType<number, z.ZodTypeDef, number> | ZodOptional<z.ZodType<number, z.ZodTypeDef, number>>;
        joints: z.ZodType<number, z.ZodTypeDef, number> | ZodOptional<z.ZodType<number, z.ZodTypeDef, number>>;
        flexibility: z.ZodType<number, z.ZodTypeDef, number> | ZodOptional<z.ZodType<number, z.ZodTypeDef, number>>;
        anxiety: z.ZodType<number, z.ZodTypeDef, number> | ZodOptional<z.ZodType<number, z.ZodTypeDef, number>>;
        anxiety_desc: z.ZodType<string | null, z.ZodTypeDef, string | null> | ZodOptional<z.ZodType<string | null, z.ZodTypeDef, string | null>>;
        mood_desc: z.ZodType<string | null, z.ZodTypeDef, string | null> | ZodOptional<z.ZodType<string | null, z.ZodTypeDef, string | null>>;
        mood: z.ZodType<number, z.ZodTypeDef, number> | ZodOptional<z.ZodType<number, z.ZodTypeDef, number>>;
        sexDrive: z.ZodType<number, z.ZodTypeDef, number> | ZodOptional<z.ZodType<number, z.ZodTypeDef, number>>;
        intruisiveThoughts: z.ZodType<number, z.ZodTypeDef, number> | ZodOptional<z.ZodType<number, z.ZodTypeDef, number>>;
        caffeineIntake: z.ZodType<number, z.ZodTypeDef, number> | ZodOptional<z.ZodType<number, z.ZodTypeDef, number>>;
        glutenIntake: z.ZodType<number, z.ZodTypeDef, number> | ZodOptional<z.ZodType<number, z.ZodTypeDef, number>>;
        sugarIntake: z.ZodType<number, z.ZodTypeDef, number> | ZodOptional<z.ZodType<number, z.ZodTypeDef, number>>;
        artificialSweetenerIntake: z.ZodType<number, z.ZodTypeDef, number> | ZodOptional<z.ZodType<number, z.ZodTypeDef, number>>;
        artificalDyes: z.ZodType<number, z.ZodTypeDef, number> | ZodOptional<z.ZodType<number, z.ZodTypeDef, number>>;
        sleepQuality: z.ZodType<number, z.ZodTypeDef, number> | ZodOptional<z.ZodType<number, z.ZodTypeDef, number>>;
        hydration: z.ZodType<number, z.ZodTypeDef, number> | ZodOptional<z.ZodType<number, z.ZodTypeDef, number>>;
        twitching: z.ZodType<number, z.ZodTypeDef, number> | ZodOptional<z.ZodType<number, z.ZodTypeDef, number>>;
        sleepHours: z.ZodType<number | null, z.ZodTypeDef, number | null> | ZodOptional<z.ZodType<number | null, z.ZodTypeDef, number | null>>;
        calorie_est: z.ZodType<number | null, z.ZodTypeDef, number | null> | ZodOptional<z.ZodType<number | null, z.ZodTypeDef, number | null>>;
        times_meals_more_than_gap_apart: z.ZodType<number | null, z.ZodTypeDef, number | null> | ZodOptional<z.ZodType<number | null, z.ZodTypeDef, number | null>>;
        estHoursInExcessFast: z.ZodType<number | null, z.ZodTypeDef, number | null> | ZodOptional<z.ZodType<number | null, z.ZodTypeDef, number | null>>;
        dietId: z.ZodType<string | null, z.ZodTypeDef, string | null> | ZodOptional<z.ZodType<string | null, z.ZodTypeDef, string | null>>;
        created: z.ZodType<Date, z.ZodTypeDef, Date> | ZodOptional<z.ZodType<Date, z.ZodTypeDef, Date>>;
    }, "weight" | "created" | "sleepHours" | "calorie_est" | "times_meals_more_than_gap_apart" | "estHoursInExcessFast" | "dietId"> & Record<"weight" | "sleepHours" | "calorie_est" | "times_meals_more_than_gap_apart" | "estHoursInExcessFast", ZodOptional<ZodString>> & {
        created: z.ZodOptional<ZodUnion<[ZodDate, ZodString]>>;
    }, "strip", z.ZodTypeAny, {
        id?: number | undefined;
        summary?: string | null | undefined;
        title?: string | null | undefined;
        weight?: string | undefined;
        created?: string | Date | undefined;
        overall?: number | undefined;
        skin?: number | undefined;
        bloat?: number | undefined;
        weight_feeling?: number | undefined;
        fullness?: number | undefined;
        cardiacCapacity?: number | undefined;
        jawLine?: number | undefined;
        joints?: number | undefined;
        flexibility?: number | undefined;
        anxiety?: number | undefined;
        anxiety_desc?: string | null | undefined;
        mood_desc?: string | null | undefined;
        mood?: number | undefined;
        sexDrive?: number | undefined;
        intruisiveThoughts?: number | undefined;
        caffeineIntake?: number | undefined;
        glutenIntake?: number | undefined;
        sugarIntake?: number | undefined;
        artificialSweetenerIntake?: number | undefined;
        artificalDyes?: number | undefined;
        sleepQuality?: number | undefined;
        hydration?: number | undefined;
        twitching?: number | undefined;
        sleepHours?: string | undefined;
        calorie_est?: string | undefined;
        times_meals_more_than_gap_apart?: string | undefined;
        estHoursInExcessFast?: string | undefined;
    }, {
        id?: number | undefined;
        summary?: string | null | undefined;
        title?: string | null | undefined;
        weight?: string | undefined;
        created?: string | Date | undefined;
        overall?: number | undefined;
        skin?: number | undefined;
        bloat?: number | undefined;
        weight_feeling?: number | undefined;
        fullness?: number | undefined;
        cardiacCapacity?: number | undefined;
        jawLine?: number | undefined;
        joints?: number | undefined;
        flexibility?: number | undefined;
        anxiety?: number | undefined;
        anxiety_desc?: string | null | undefined;
        mood_desc?: string | null | undefined;
        mood?: number | undefined;
        sexDrive?: number | undefined;
        intruisiveThoughts?: number | undefined;
        caffeineIntake?: number | undefined;
        glutenIntake?: number | undefined;
        sugarIntake?: number | undefined;
        artificialSweetenerIntake?: number | undefined;
        artificalDyes?: number | undefined;
        sleepQuality?: number | undefined;
        hydration?: number | undefined;
        twitching?: number | undefined;
        sleepHours?: string | undefined;
        calorie_est?: string | undefined;
        times_meals_more_than_gap_apart?: string | undefined;
        estHoursInExcessFast?: string | undefined;
    }>;
    export type HealthReportFormSchema = z.infer<typeof healthReportOnlySchema>;
    type TempHalfAssedType = Omit<HealthReportFormSchema, "created" | "dietId"> & {
        created?: Date | string;
        dietId?: number | null;
    };
    export const healthReportFormDefaultValues: TempHalfAssedType;
    export const getSearchParamDateString: (day: number, month: number, year: number) => string;
    export const parseSearchParamDateString: (s: string) => Date | undefined;
    export const getDashboardSearchParams: (sp: Omit<Partial<HealthDashboardSearchParams>, "start" | "stop"> & {
        start?: DateInput;
        stop?: DateInput;
    }) => string;
    export const getHealthDashboardData: (sp: HealthDashboardSearchParams) => Promise<{
        id: number;
        title: string | null;
        summary: string | null;
        overall: number;
        skin: number;
        bloat: number;
        weight_feeling: number;
        fullness: number;
        weight: number | null;
        cardiacCapacity: number;
        jawLine: number;
        joints: number;
        flexibility: number;
        anxiety: number;
        anxiety_desc: string | null;
        mood_desc: string | null;
        mood: number;
        sexDrive: number;
        intruisiveThoughts: number;
        caffeineIntake: number;
        glutenIntake: number;
        sugarIntake: number;
        artificialSweetenerIntake: number;
        artificalDyes: number;
        sleepQuality: number;
        hydration: number;
        twitching: number;
        sleepHours: number | null;
        calorie_est: number | null;
        times_meals_more_than_gap_apart: number | null;
        estHoursInExcessFast: number | null;
        dietId: string | null;
        created: Date;
    }[]>;
}
declare module "schemas/contentParsing/mdx" {
    import { z } from "zod";
    export const zodSerializeMdxInputSchema: z.ZodObject<{
        content: z.ZodString;
        rsc: z.ZodOptional<z.ZodBoolean>;
        config: z.ZodOptional<z.ZodObject<{
            dontLoadPlugins: z.ZodDefault<z.ZodArray<z.ZodUnion<[z.ZodLiteral<"mermaid">, z.ZodLiteral<"all">]>, "many">>;
            parseFrontMatter: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            dontLoadPlugins: ("all" | "mermaid")[];
            parseFrontMatter: boolean;
        }, {
            dontLoadPlugins?: ("all" | "mermaid")[] | undefined;
            parseFrontMatter?: boolean | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        content: string;
        rsc?: boolean | undefined;
        config?: {
            dontLoadPlugins: ("all" | "mermaid")[];
            parseFrontMatter: boolean;
        } | undefined;
    }, {
        content: string;
        rsc?: boolean | undefined;
        config?: {
            dontLoadPlugins?: ("all" | "mermaid")[] | undefined;
            parseFrontMatter?: boolean | undefined;
        } | undefined;
    }>;
}
declare module "schemas/search/searchResult" {
    import { DocTypes } from "@ulld/configschema/configUtilityTypes/docTypes";
    export interface SearchResult {
        title: string;
        created?: Date | string;
        summary?: string;
        tags?: string[];
        type: DocTypes;
    }
}
declare module "schemas/syncing/syncOptions" {
    import { OnSyncOptions } from "@ulld/types";
    import { ZodType } from "zod";
    export const syncOptionsSchema: ZodType<OnSyncOptions>;
}
declare module "search/getFilteredSearchResults" {
    import { AppConfigSchemaOutput } from "@ulld/configschema/types";
    import { NoteFilter } from "classes/search/noteFilter";
    import { SearchAllParams } from "@ulld/utilities/types";
    interface GetFilteredSearchResultsProps {
        appConfig: AppConfigSchemaOutput;
        categoryId: string;
        searchParams: SearchAllParams;
    }
    export const getFilteredSearchResults: ({ appConfig, searchParams, categoryId }: GetFilteredSearchResultsProps) => Promise<{
        docTypeData: {
            docType: string;
            id: string;
            url: string;
            label: string;
            icon: string;
            UI: {
                styles: {
                    dark: {
                        bg?: string | undefined;
                        fg?: string | undefined;
                    };
                    light: {
                        bg?: string | undefined;
                        fg?: string | undefined;
                    };
                };
            };
            fs: string;
            matchWeight: number;
            urlQuery: Record<string, string | number | string[] | number[]>;
            keywords: string[];
            autoTag: string[];
            autoTopic: string[];
            autoSubject: string[];
            inSidebar: boolean;
            inNavbar: boolean;
            filePathPattern?: string | undefined;
            topicLabel?: string | undefined;
            subjectLabel?: string | undefined;
        } | undefined;
        secondaryData: {
            topics: string[];
            subjects: string[];
            tags: string[];
        };
        filter: NoteFilter;
        sp: URLSearchParams;
    }>;
}
declare module "trpc/extend" {
    import { type CreateRouterInner, type ProcedureRouterRecord } from "@trpc/server";
    import { type trpcRoot, type router } from "trpc/trpc";
    type AcceptedRouterTypes = Record<string, ReturnType<typeof router>> | Record<string, CreateRouterInner<typeof trpcRoot._config, any>> | ProcedureRouterRecord;
    export const extendAppRouter: <T extends AcceptedRouterTypes>() => {
        client: import("@trpc/client").CreateTRPCProxyClient<CreateRouterInner<import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: import("@trpc/server").DefaultErrorShape;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>, {
            autoSettings: CreateRouterInner<import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>, {
                setAutoSettingsFromConfig: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, void>;
                getAutoSettings: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        type?: "tag" | "topic" | "subject" | undefined;
                        withRegex?: boolean | undefined;
                    };
                    _input_out: {
                        withRegex: boolean;
                        type?: "tag" | "topic" | "subject" | undefined;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, import("trpc/types").AutoSettingWithRegex[] | {
                    id?: number;
                    glob: string;
                    value: string;
                    type: import(".prisma/client").autoSetting;
                }[] | undefined>;
                deleteAutoSettingById: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: number;
                    _input_out: number;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                    type: import(".prisma/client").$Enums.autoSetting;
                    glob: string;
                    value: string;
                }>;
                addAutoSetting: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        type: "tag" | "topic" | "subject";
                        value: string;
                        glob: string;
                        id?: number | undefined;
                    };
                    _input_out: {
                        type: "tag" | "topic" | "subject";
                        value: string;
                        glob: string;
                        id?: number | undefined;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                    type: import(".prisma/client").$Enums.autoSetting;
                    glob: string;
                    value: string;
                }>;
            }>;
            sync: CreateRouterInner<import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>, {
                backupNonFileSystemDB: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, void>;
            }>;
            toDo: CreateRouterInner<import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>, {
                getToDoLists: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: number | undefined;
                    _input_out: number | undefined;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                    label: string;
                    active: boolean;
                } | {
                    id: number;
                    label: string;
                    active: boolean;
                }[]>;
                getToDoListById: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: number;
                    _input_out: number;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    topics: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    subjects: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                } & {
                    id: number;
                    label: string;
                    createdAt: Date;
                    lastUpdate: Date;
                    lastAccess: Date;
                }) | null>;
                getToDos: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        listIds?: string | number | string[] | number[] | undefined;
                        showCompleted?: string | boolean | undefined;
                    };
                    _input_out: {
                        showCompleted: boolean;
                        listIds?: number[] | undefined;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    todos: {
                        topic: {
                            value: string;
                        }[];
                        subject: {
                            value: string;
                        }[];
                        id: number;
                        label: string;
                        tags: ({
                            value: string;
                            kanbanId?: number | null | undefined;
                        } | {
                            value: string;
                            kanbanId?: number | null | undefined;
                        })[];
                        _count: {
                            topic: number;
                            subject: number;
                            tags: number;
                            tasks: number;
                        };
                        tasks: {
                            id: number;
                            bookmarked: boolean;
                            status: string;
                            task: string;
                            priority: number;
                            createdAt?: any;
                            dueAt?: any;
                            details?: string | null | undefined;
                            parentId?: number | null | undefined;
                            category?: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper" | null | undefined;
                            toDoListId?: number | null | undefined;
                            completedOn?: any;
                        }[];
                        createdAt?: any;
                        lastUpdate?: any;
                    }[];
                    lists: {
                        id: number;
                        label: string;
                        active: boolean;
                    }[];
                }>;
                setToDoStatus: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        status: string;
                        taskIds: number[];
                    };
                    _input_out: {
                        status: string;
                        taskIds: number[];
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, import(".prisma/client").Prisma.BatchPayload>;
                findListsByTaggables: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        tags?: string[] | undefined;
                        topics?: string[] | undefined;
                        subjects?: string[] | undefined;
                    };
                    _input_out: {
                        tags: string[];
                        topics: string[];
                        subjects: string[];
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    createdAt: string;
                    tasks: {
                        dueAt: string | null;
                        createdAt: string;
                        details: string | null;
                        category: import(".prisma/client").$Enums.TaskCategory | null;
                    }[];
                    id: number;
                    label: string;
                    _count: {
                        tasks: number;
                    };
                }[]>;
                getOverdueTasksByListId: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: number;
                    _input_out: number;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    _count: {
                        tasks: number;
                    };
                    tasks: {
                        id: number;
                        createdAt: Date;
                        task: string;
                        dueAt: Date | null;
                        details: string | null;
                        parentId: number | null;
                        category: import(".prisma/client").$Enums.TaskCategory | null;
                        bookmarked: boolean;
                        status: string;
                        priority: number;
                        toDoListId: number | null;
                        completedOn: Date | null;
                    }[];
                } | null>;
                getOverdueTaskCount: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, number>;
                getOverdueTasks: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, {
                    id: number;
                    createdAt: Date;
                    task: string;
                    dueAt: Date | null;
                    details: string | null;
                    parentId: number | null;
                    category: import(".prisma/client").$Enums.TaskCategory | null;
                    bookmarked: boolean;
                    status: string;
                    priority: number;
                    toDoListId: number | null;
                    completedOn: Date | null;
                }[]>;
                setToDoDueDate: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        dueAt: string | Date | null;
                        taskIds: number[];
                    };
                    _input_out: {
                        dueAt: Date | null;
                        taskIds: number[];
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, import(".prisma/client").Prisma.BatchPayload>;
                setToDoList: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        taskId: number;
                        listId: number;
                    };
                    _input_out: {
                        taskId: number;
                        listId: number;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, import(".prisma/client").Prisma.BatchPayload>;
                deleteTaskByIds: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string | number | string[] | number[] | undefined;
                    _input_out: number[];
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, import(".prisma/client").Prisma.BatchPayload>;
                toggleToDoBookmark: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        taskId: number;
                        shouldBookmark?: boolean | undefined;
                    };
                    _input_out: {
                        taskId: number;
                        shouldBookmark?: boolean | undefined;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, import(".prisma/client").Prisma.BatchPayload>;
                setToDoPriority: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        priority: number;
                        taskIds: number[];
                    };
                    _input_out: {
                        priority: number;
                        taskIds: number[];
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, import(".prisma/client").Prisma.BatchPayload>;
                getToDoDetails: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        toDoId: number;
                    };
                    _input_out: {
                        toDoId: number;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    topics: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                } & {
                    id: number;
                    createdAt: Date;
                    task: string;
                    dueAt: Date | null;
                    details: string | null;
                    parentId: number | null;
                    category: import(".prisma/client").$Enums.TaskCategory | null;
                    bookmarked: boolean;
                    status: string;
                    priority: number;
                    toDoListId: number | null;
                    completedOn: Date | null;
                }) | null>;
                createNewTodoList: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        label: string;
                        tags: string[];
                        topics: string[];
                        subjects: string[];
                    };
                    _input_out: {
                        label: string;
                        tags: string[];
                        topics: string[];
                        subjects: string[];
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                    label: string;
                    createdAt: Date;
                    lastUpdate: Date;
                    lastAccess: Date;
                } | {
                    errorKey: "toDoListExists";
                }>;
                createNewToDo: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        task: string;
                        listId: number;
                        status?: string | undefined;
                        dueAt?: string | Date | null | undefined;
                        details?: string | null | undefined;
                        priority?: number | undefined;
                    };
                    _input_out: {
                        status: string;
                        task: string;
                        priority: number;
                        listId: number;
                        dueAt?: Date | null | undefined;
                        details?: string | null | undefined;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                    label: string;
                    createdAt: Date;
                    lastUpdate: Date;
                    lastAccess: Date;
                }>;
                deleteToDos: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: number[];
                    _input_out: number[];
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, import(".prisma/client").Prisma.BatchPayload>;
                editTaskNote: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        note: string | null;
                        taskId: number;
                    };
                    _input_out: {
                        note: string | null;
                        taskId: number;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                    createdAt: Date;
                    task: string;
                    dueAt: Date | null;
                    details: string | null;
                    parentId: number | null;
                    category: import(".prisma/client").$Enums.TaskCategory | null;
                    bookmarked: boolean;
                    status: string;
                    priority: number;
                    toDoListId: number | null;
                    completedOn: Date | null;
                }>;
                getMostRecentToDoListId: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, {
                    id: number;
                }[]>;
                markCompleted: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        taskIds: number[];
                    };
                    _input_out: {
                        taskIds: number[];
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, void>;
                updateTask: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        id: number;
                        task: string;
                        status?: string | undefined;
                        dueAt?: string | Date | null | undefined;
                        details?: string | null | undefined;
                        priority?: number | undefined;
                    };
                    _input_out: {
                        id: number;
                        status: string;
                        task: string;
                        priority: number;
                        dueAt?: Date | null | undefined;
                        details?: string | null | undefined;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    ToDoList: {
                        id: number;
                    } | null;
                }>;
                archiveTasks: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: number[];
                    _input_out: number[];
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, import(".prisma/client").Prisma.BatchPayload>;
                getTaskLists: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, {
                    id: number;
                    label: string;
                    lastUpdate: Date;
                }[]>;
                getTasksByCompletionDate: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        start?: Date | undefined;
                        stop?: Date | undefined;
                    } | undefined;
                    _input_out: {
                        stop: Date;
                        start?: Date | undefined;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, void>;
                getTaskManagerOverview: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, {
                    tasks: {
                        id: number;
                        createdAt: Date;
                        status: string;
                        dueAt: Date | null;
                        toDoListId: number | null;
                        completedOn: Date | null;
                    }[];
                    taskLists: {
                        id: number;
                        label: string;
                        createdAt: Date;
                        _count: {
                            tasks: number;
                            tags: number;
                            topics: number;
                            subjects: number;
                        };
                    }[];
                    overdueCount: number;
                }>;
            }>;
            equations: CreateRouterInner<import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>, {
                getEquationById: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        id?: number | undefined;
                        equationId?: string | undefined;
                    };
                    _input_out: {
                        id?: number | undefined;
                        equationId?: string | undefined;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                    title: string;
                    content: string;
                    tags: {
                        value: string;
                    }[];
                    relatedValues: {
                        input: unknown;
                        output: number;
                    }[];
                    equationId: string | null;
                    desc: string | null;
                    asPython: string | null;
                    variables: string[];
                    keywords: string[];
                } | null>;
                getParsedEquationById: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        id: number;
                        title: {
                            options: {
                                width?: number | undefined;
                                container?: boolean | undefined;
                                em?: number | undefined;
                                ex?: number | undefined;
                                inline?: boolean | undefined;
                                styles?: boolean | undefined;
                                fontCache?: boolean | undefined;
                                assistiveMml?: boolean | undefined;
                                autoWrap?: boolean | undefined;
                                matchFontHeight?: boolean | undefined;
                            };
                            appendStylesToId?: string | undefined;
                            appendStylesToClass?: string | undefined;
                        };
                        content: {
                            options: {
                                width?: number | undefined;
                                container?: boolean | undefined;
                                em?: number | undefined;
                                ex?: number | undefined;
                                inline?: boolean | undefined;
                                styles?: boolean | undefined;
                                fontCache?: boolean | undefined;
                                assistiveMml?: boolean | undefined;
                                autoWrap?: boolean | undefined;
                                matchFontHeight?: boolean | undefined;
                            };
                            appendStylesToId?: string | undefined;
                            appendStylesToClass?: string | undefined;
                        };
                        desc: {
                            options: {
                                width?: number | undefined;
                                container?: boolean | undefined;
                                em?: number | undefined;
                                ex?: number | undefined;
                                inline?: boolean | undefined;
                                styles?: boolean | undefined;
                                fontCache?: boolean | undefined;
                                assistiveMml?: boolean | undefined;
                                autoWrap?: boolean | undefined;
                                matchFontHeight?: boolean | undefined;
                            };
                            appendStylesToId?: string | undefined;
                            appendStylesToClass?: string | undefined;
                        };
                        equationId?: string | undefined;
                    };
                    _input_out: {
                        id: number;
                        title: {
                            options: {
                                width?: number | undefined;
                                container?: boolean | undefined;
                                em?: number | undefined;
                                ex?: number | undefined;
                                inline?: boolean | undefined;
                                styles?: boolean | undefined;
                                fontCache?: boolean | undefined;
                                assistiveMml?: boolean | undefined;
                                autoWrap?: boolean | undefined;
                                matchFontHeight?: boolean | undefined;
                            };
                            appendStylesToId?: string | undefined;
                            appendStylesToClass?: string | undefined;
                        };
                        content: {
                            options: {
                                width?: number | undefined;
                                container?: boolean | undefined;
                                em?: number | undefined;
                                ex?: number | undefined;
                                inline?: boolean | undefined;
                                styles?: boolean | undefined;
                                fontCache?: boolean | undefined;
                                assistiveMml?: boolean | undefined;
                                autoWrap?: boolean | undefined;
                                matchFontHeight?: boolean | undefined;
                            };
                            appendStylesToId?: string | undefined;
                            appendStylesToClass?: string | undefined;
                        };
                        desc: {
                            options: {
                                width?: number | undefined;
                                container?: boolean | undefined;
                                em?: number | undefined;
                                ex?: number | undefined;
                                inline?: boolean | undefined;
                                styles?: boolean | undefined;
                                fontCache?: boolean | undefined;
                                assistiveMml?: boolean | undefined;
                                autoWrap?: boolean | undefined;
                                matchFontHeight?: boolean | undefined;
                            };
                            appendStylesToId?: string | undefined;
                            appendStylesToClass?: string | undefined;
                        };
                        equationId?: string | undefined;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                    tags: ({
                        value: string;
                        kanbanId?: number | null | undefined;
                    } | {
                        value: string;
                        kanbanId?: number | null | undefined;
                    })[];
                    variables: string[];
                    topics: {
                        value: string;
                    }[];
                    subjects: {
                        value: string;
                    }[];
                    title?: string | null | undefined;
                    content?: string | null | undefined;
                    equationId?: string | null | undefined;
                    desc?: string | null | undefined;
                    asPython?: string | null | undefined;
                    createdAt?: string | Date | null | undefined;
                }>;
                getEquationEmbedProps: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        equationId: string;
                    };
                    _input_out: {
                        equationId: string;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    rawLatex: string;
                    id: number;
                    tags: ({
                        value: string;
                        kanbanId?: number | null | undefined;
                    } | {
                        value: string;
                        kanbanId?: number | null | undefined;
                    })[];
                    variables: string[];
                    topics: {
                        value: string;
                    }[];
                    subjects: {
                        value: string;
                    }[];
                    title?: string | null | undefined;
                    content?: string | null | undefined;
                    equationId?: string | null | undefined;
                    desc?: string | null | undefined;
                    asPython?: string | null | undefined;
                    createdAt?: string | Date | null | undefined;
                }>;
                deleteEquationById: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: number;
                    _input_out: number;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                    equationId: string | null;
                    title: string;
                    desc: string | null;
                    content: string;
                    asPython: string | null;
                    variableLegend: unknown;
                    variables: string[];
                    keywords: string[];
                    createdAt: Date;
                    lastAccess: Date;
                }>;
                getEquationsList: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        orderBy: "title" | "createdAt";
                        value?: string | undefined;
                        tags?: string | string[] | undefined;
                        query?: string | undefined;
                        take?: number | undefined;
                        variables?: string | string[] | undefined;
                        page?: number | undefined;
                        sortDir?: "desc" | "asc" | undefined;
                    };
                    _input_out: {
                        tags: any[];
                        orderBy: "title" | "createdAt";
                        take: number;
                        variables: any[];
                        page: number;
                        sortDir: "desc" | "asc";
                        value?: string | undefined;
                        query?: string | undefined;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    equations: {
                        id: number;
                        equationId: string | null;
                        title: string;
                        desc: string | null;
                        content: string;
                        asPython: string | null;
                        variableLegend: unknown;
                        variables: string[];
                        keywords: string[];
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    tags: string[];
                    variables: string[];
                }>;
                addEquation: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        title: string;
                        content: string;
                        variables: string[];
                        keywords: string[];
                        tagInput: string;
                        variableInput: string;
                        keywordInput: string;
                        id?: number | undefined;
                        tags?: string[] | undefined;
                        relatedValues?: {
                            input: Record<string, number>;
                            output: number;
                        }[] | undefined;
                        equationId?: string | undefined;
                        desc?: string | undefined;
                        asPython?: string | undefined;
                    };
                    _input_out: {
                        title: string;
                        content: string;
                        tags: string[];
                        variables: string[];
                        keywords: string[];
                        tagInput: string;
                        variableInput: string;
                        keywordInput: string;
                        id?: number | undefined;
                        relatedValues?: {
                            input: Record<string, number>;
                            output: number;
                        }[] | undefined;
                        equationId?: string | undefined;
                        desc?: string | undefined;
                        asPython?: string | undefined;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                    equationId: string | null;
                    title: string;
                    desc: string | null;
                    content: string;
                    asPython: string | null;
                    variableLegend: unknown;
                    variables: string[];
                    keywords: string[];
                    createdAt: Date;
                    lastAccess: Date;
                }>;
                mathStringArrayToLatex: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        content: string[];
                        options: {
                            inline?: boolean | undefined;
                        };
                    };
                    _input_out: {
                        content: string[];
                        options: {
                            inline?: boolean | undefined;
                        };
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    content: string;
                }[]>;
                getIdFromEquationId: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                } | null>;
            }>;
            commandPalette: CreateRouterInner<import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>, {
                noteSearch: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, {
                    id: number;
                    href: string;
                    title: string;
                    isProtected: boolean | null;
                    latexTitle: string | null;
                }[]>;
                tagSearch: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[]>;
                subjectSearch: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, {
                    value: string;
                    kanbanId: number | null;
                    createdAt: Date;
                    lastAccess: Date;
                }[]>;
                equationSearch: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, {
                    id: number;
                    title: string;
                    content: string;
                }[]>;
                getDefinitions: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        rsc?: boolean | undefined;
                    } | undefined;
                    _input_out: {
                        rsc: boolean;
                    } | undefined;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: string;
                    label?: string | null | undefined;
                    content?: string | null | undefined;
                    mdxNote?: import("classes/prismaMdxRelations/MdxNote").MdxNote | undefined;
                    mdxNoteId?: number | null | undefined;
                    alphabeticalLabel?: string | null | undefined;
                }[]>;
                getCommandPaletteData: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, {
                    notes: {
                        href: string;
                        title: string;
                        isProtected: boolean | null;
                        latexTitle: string | null;
                    }[];
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                }>;
            }>;
            search: CreateRouterInner<import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>, {
                getNoteHrefFromDefinitionId: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, string | undefined>;
                getSequentialIdListByKey: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    href: string;
                    title: string;
                    sequentialIndex: number | null;
                }[]>;
                getDefinitionList: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, {
                    id: string;
                    mdxNoteId: number | null;
                    label?: string | undefined;
                    content?: string | undefined;
                }[]>;
                rootRelativePathIsBookmarked: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, boolean>;
                getUniqueTags: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, string[]>;
                getUniqueTagTopicAndSubjects: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: "tag" | "topic" | "subject" | null | undefined;
                    _input_out: "tag" | "topic" | "subject" | null | undefined;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, string[] | {
                    tags: string[];
                    topics: string[];
                    subjects: string[];
                }>;
                getBookmarked: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, {
                    mdxNotes: {
                        id: number;
                        href: string;
                        summary: string | null;
                        title: string;
                        tags: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                        noteType: string;
                        topics: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                        subjects: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                        firstSync: Date;
                        lastSync: Date;
                        latexTitle: string | null;
                        rootRelativePath: string;
                        sequentialIndex: number | null;
                        citations: {
                            id: string;
                            htmlCitation: string | null;
                        }[];
                        definitions: {
                            id: string;
                            label: string | null;
                            content: string | null;
                            alphabeticalLabel: string | null;
                            mdxNoteId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                    }[];
                }>;
                findUnknownDBNoteTypeFromRootRelativePath: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    markdown: {
                        id: number;
                        rootRelativePath: string;
                    } | null;
                    notebook: {
                        id: number;
                        rootRelativePath: string;
                    } | null;
                }>;
            }>;
            boards: CreateRouterInner<import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>, {
                getAllBoards: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, {
                    title: string;
                    _count: {
                        lists: number;
                        tags: number;
                        subjects: number;
                        topics: number;
                    };
                    lists: {
                        _count: {
                            cards: number;
                            Kanban: number;
                        };
                    }[];
                }[]>;
                createNewBoard: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        title: string;
                        tags: string[];
                        topics: string[];
                        subjects: string[];
                    };
                    _input_out: {
                        title: string;
                        tags: string[];
                        topics: string[];
                        subjects: string[];
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                    title: string;
                    createdAt: Date;
                    lastUpdate: Date;
                }>;
                getBoardById: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: number;
                    _input_out: number;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    lists: ({
                        cards: {
                            id: number;
                            listId: number | null;
                            indexWithinList: number;
                            label: string | null;
                            details: string | null;
                        }[];
                    } & {
                        id: number;
                        indexWithinBoard: number;
                        title: string | null;
                        boardId: number | null;
                    })[];
                } & {
                    id: number;
                    title: string;
                    createdAt: Date;
                    lastUpdate: Date;
                }) | null>;
                appendNewListToBoard: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        list: {
                            title: string;
                        };
                        boardId: number;
                    };
                    _input_out: {
                        list: {
                            title: string;
                        };
                        boardId: number;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    lists: ({
                        cards: {
                            id: number;
                            listId: number | null;
                            indexWithinList: number;
                            label: string | null;
                            details: string | null;
                        }[];
                    } & {
                        id: number;
                        indexWithinBoard: number;
                        title: string | null;
                        boardId: number | null;
                    })[];
                } & {
                    id: number;
                    title: string;
                    createdAt: Date;
                    lastUpdate: Date;
                }) | undefined>;
            }>;
            settings: CreateRouterInner<import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>, {
                getSettings: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, {
                    id: number;
                    tooltips: boolean;
                    title: string;
                    summary_showCitations: boolean;
                    summary_showTags: boolean;
                    landingImageAlign: import(".prisma/client").$Enums.ImageAlignment;
                    lockedLandingImage: string | null;
                    cleanOnSync: boolean;
                    plotTheme: string | null;
                    firstSync: Date;
                    lastSync: Date;
                } | null>;
                toggleBooleanSetting: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: "tooltips" | "summary_showCitations" | "summary_showTags" | "cleanOnSync";
                    _input_out: "tooltips" | "summary_showCitations" | "summary_showTags" | "cleanOnSync";
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                    tooltips: boolean;
                    title: string;
                    summary_showCitations: boolean;
                    summary_showTags: boolean;
                    landingImageAlign: import(".prisma/client").$Enums.ImageAlignment;
                    lockedLandingImage: string | null;
                    cleanOnSync: boolean;
                    plotTheme: string | null;
                    firstSync: Date;
                    lastSync: Date;
                } | undefined>;
                lockCurrentLandingImage: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    lockedLandingImage: string | null;
                } | undefined>;
                updateSettings: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: import(".prisma/client").Prisma.SettingsCreateInput;
                    _input_out: import(".prisma/client").Prisma.SettingsCreateInput;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                    tooltips: boolean;
                    title: string;
                    summary_showCitations: boolean;
                    summary_showTags: boolean;
                    landingImageAlign: import(".prisma/client").$Enums.ImageAlignment;
                    lockedLandingImage: string | null;
                    cleanOnSync: boolean;
                    plotTheme: string | null;
                    firstSync: Date;
                    lastSync: Date;
                } | undefined>;
            }>;
            pluginSettings: CreateRouterInner<import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>, {
                updatePluginSettings: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        data: Record<string, any>;
                        pluginName: string;
                        options?: import("classes/data/pluginUtils/pluginSettings/types").UpdatePluginSettingOptions | undefined;
                    };
                    _input_out: {
                        data: Record<string, any>;
                        options: import("classes/data/pluginUtils/pluginSettings/types").UpdatePluginSettingOptions;
                        pluginName: string;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, Record<string, any>>;
                getPluginSettings: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        pluginName: string;
                    };
                    _input_out: {
                        pluginName: string;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, object | undefined>;
                clearPluginSettings: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        pluginName: string;
                    };
                    _input_out: {
                        pluginName: string;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, void>;
            }>;
            mdx: CreateRouterInner<import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>, {
                deleteNoteById: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: number | number[];
                    _input_out: any[];
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, import(".prisma/client").Prisma.BatchPayload>;
                toggleBookmarkedById: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: number;
                    _input_out: number;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, boolean>;
                getDatabaseMdx: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    equations: {
                        id: number;
                        equationId: string | null;
                        title: string;
                        desc: string | null;
                        content: string;
                        asPython: string | null;
                        variableLegend: unknown;
                        variables: string[];
                        keywords: string[];
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    toDo: {
                        id: number;
                        createdAt: Date;
                        task: string;
                        dueAt: Date | null;
                        details: string | null;
                        parentId: number | null;
                        category: import(".prisma/client").$Enums.TaskCategory | null;
                        bookmarked: boolean;
                        status: string;
                        priority: number;
                        toDoListId: number | null;
                        completedOn: Date | null;
                    }[];
                    ReadingList: {
                        name: string;
                        description: string | null;
                        createdAt: Date;
                        lastUpdate: Date;
                    }[];
                    topics: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    subjects: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    _count: {
                        topics: number;
                        subjects: number;
                        tags: number;
                        citations: number;
                        sequentialList: number;
                        ReadingList: number;
                        equations: number;
                        definitions: number;
                        toDo: number;
                    };
                    citations: {
                        id: string;
                        BibId: number | null;
                        OwnWork: boolean;
                        ColleaguesWork: boolean;
                        read: boolean;
                        htmlCitation: string | null;
                        PdfPath: string | null;
                        address: string | null;
                        annote: string | null;
                        author: string | null;
                        booktitle: string | null;
                        chapter: string | null;
                        crossref: string | null;
                        doi: string | null;
                        edition: string | null;
                        editor: string | null;
                        email: string | null;
                        howpublished: string | null;
                        institution: string | null;
                        journal: string | null;
                        month: string | null;
                        note: string | null;
                        number: string | null;
                        organization: string | null;
                        pages: string | null;
                        publisher: string | null;
                        school: string | null;
                        series: string | null;
                        title: string | null;
                        volume: string | null;
                        type: string | null;
                        year: string | null;
                        numpages: string | null;
                        url: string | null;
                        issue: string | null;
                        issn: string | null;
                        abstract: string | null;
                        urldate: string | null;
                        keywords: string | null;
                        copyright: string | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    sequentialList: {
                        sequentialKey: string;
                    } | null;
                    definitions: {
                        id: string;
                        label: string | null;
                        content: string | null;
                        alphabeticalLabel: string | null;
                        mdxNoteId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                } & {
                    id: number;
                    isProtected: boolean | null;
                    dietSummaryKey: string | null;
                    title: string;
                    latexTitle: string | null;
                    rootRelativePath: string;
                    noteType: string;
                    content: string;
                    formatted: string | null;
                    summary: string | null;
                    citationsListOrder: string[];
                    importantValues: number[];
                    imageSrc: string | null;
                    href: string;
                    sequentialKey: string | null;
                    sequentialIndex: number | null;
                    floatImages: boolean;
                    remoteUrl: string | null;
                    trackRemote: boolean;
                    outgoingQuickLinks: string[];
                    quickLink: string | null;
                    bookmarked: boolean;
                    firstSync: Date;
                    lastSync: Date;
                    lastAccess: Date;
                }) | null>;
                getDatabaseMdxFromPathname: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    equations: {
                        id: number;
                        equationId: string | null;
                        title: string;
                        desc: string | null;
                        content: string;
                        asPython: string | null;
                        variableLegend: unknown;
                        variables: string[];
                        keywords: string[];
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    toDo: {
                        id: number;
                        createdAt: Date;
                        task: string;
                        dueAt: Date | null;
                        details: string | null;
                        parentId: number | null;
                        category: import(".prisma/client").$Enums.TaskCategory | null;
                        bookmarked: boolean;
                        status: string;
                        priority: number;
                        toDoListId: number | null;
                        completedOn: Date | null;
                    }[];
                    ReadingList: {
                        name: string;
                        description: string | null;
                        createdAt: Date;
                        lastUpdate: Date;
                    }[];
                    topics: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    subjects: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    _count: {
                        topics: number;
                        subjects: number;
                        tags: number;
                        citations: number;
                        sequentialList: number;
                        ReadingList: number;
                        equations: number;
                        definitions: number;
                        toDo: number;
                    };
                    citations: {
                        id: string;
                        BibId: number | null;
                        OwnWork: boolean;
                        ColleaguesWork: boolean;
                        read: boolean;
                        htmlCitation: string | null;
                        PdfPath: string | null;
                        address: string | null;
                        annote: string | null;
                        author: string | null;
                        booktitle: string | null;
                        chapter: string | null;
                        crossref: string | null;
                        doi: string | null;
                        edition: string | null;
                        editor: string | null;
                        email: string | null;
                        howpublished: string | null;
                        institution: string | null;
                        journal: string | null;
                        month: string | null;
                        note: string | null;
                        number: string | null;
                        organization: string | null;
                        pages: string | null;
                        publisher: string | null;
                        school: string | null;
                        series: string | null;
                        title: string | null;
                        volume: string | null;
                        type: string | null;
                        year: string | null;
                        numpages: string | null;
                        url: string | null;
                        issue: string | null;
                        issn: string | null;
                        abstract: string | null;
                        urldate: string | null;
                        keywords: string | null;
                        copyright: string | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    sequentialList: {
                        sequentialKey: string;
                    } | null;
                    definitions: {
                        id: string;
                        label: string | null;
                        content: string | null;
                        alphabeticalLabel: string | null;
                        mdxNoteId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                } & {
                    id: number;
                    isProtected: boolean | null;
                    dietSummaryKey: string | null;
                    title: string;
                    latexTitle: string | null;
                    rootRelativePath: string;
                    noteType: string;
                    content: string;
                    formatted: string | null;
                    summary: string | null;
                    citationsListOrder: string[];
                    importantValues: number[];
                    imageSrc: string | null;
                    href: string;
                    sequentialKey: string | null;
                    sequentialIndex: number | null;
                    floatImages: boolean;
                    remoteUrl: string | null;
                    trackRemote: boolean;
                    outgoingQuickLinks: string[];
                    quickLink: string | null;
                    bookmarked: boolean;
                    firstSync: Date;
                    lastSync: Date;
                    lastAccess: Date;
                }) | null>;
                getFsMdx: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        rootRelativePath: string;
                        extension: ".md" | ".mdx";
                        useProcessRoot?: boolean | undefined;
                    };
                    _input_out: {
                        rootRelativePath: string;
                        extension: ".md" | ".mdx";
                        useProcessRoot: boolean;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    content: string;
                    details: {
                        quickLink: string | undefined;
                        sequentialKey: string | undefined;
                        sequentialIndex: number | undefined;
                        firstSync: string | Date;
                        lastSync: string | Date;
                        id: number;
                        bookmarked: boolean;
                    } | undefined;
                }>;
                setMdxAccessed: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        rootRelativePath: string;
                    };
                    _input_out: {
                        rootRelativePath: string;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, void>;
                parseAndCompileMdxString: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        props: {
                            raw: string;
                            docTypeData: {
                                label: string;
                                icon: string;
                                UI: {
                                    styles: {
                                        dark: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                        light: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                    };
                                };
                                fs: string;
                                id: string;
                                docType: string;
                                matchWeight: number;
                                url: string;
                                urlQuery: Record<string, string | number | string[] | number[]>;
                                keywords: string[];
                                autoTag: string[];
                                autoTopic: string[];
                                autoSubject: string[];
                                inSidebar: boolean;
                                inNavbar: boolean;
                                filePathPattern?: string | undefined;
                                topicLabel?: string | undefined;
                                subjectLabel?: string | undefined;
                            };
                            bookmarked?: boolean | undefined;
                            rootRelativePath?: string | null | undefined;
                        };
                        parseParams: {
                            parser: (args_0: {
                                data: {
                                    id?: string | null | undefined;
                                    summary?: string | null | undefined;
                                    title?: string | null | undefined;
                                    tags?: string[] | undefined;
                                    topics?: string[] | undefined;
                                    subjects?: string[] | undefined;
                                    sequentialKey?: string | null | undefined;
                                    importantValues?: number[] | undefined;
                                    created?: string | null | undefined;
                                    updated?: string | null | undefined;
                                    sequential?: number | null | undefined;
                                    tableStyles?: {
                                        math?: "base" | "lg" | "xl" | "small" | null | undefined;
                                        expand?: boolean | null | undefined;
                                        text?: "base" | "lg" | "xl" | "small" | null | undefined;
                                        float?: "right" | "left" | null | undefined;
                                        fullWidth?: boolean | null | undefined;
                                        tableCenter?: boolean | null | undefined;
                                        textCenter?: boolean | null | undefined;
                                        headingCenter?: boolean | null | undefined;
                                        noMax?: boolean | null | undefined;
                                    } | undefined;
                                };
                                content: string;
                                docTypeData: {
                                    id: string;
                                    url: string;
                                    docType: string;
                                    label?: string | undefined;
                                    keywords?: string[] | undefined;
                                    icon?: string | undefined;
                                    UI?: {
                                        styles: {
                                            dark: {
                                                bg?: string | undefined;
                                                fg?: string | undefined;
                                            };
                                            light: {
                                                bg?: string | undefined;
                                                fg?: string | undefined;
                                            };
                                        };
                                    } | undefined;
                                    fs?: string | undefined;
                                    filePathPattern?: string | undefined;
                                    matchWeight?: number | undefined;
                                    urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                                    topicLabel?: string | undefined;
                                    subjectLabel?: string | undefined;
                                    autoTag?: string[] | undefined;
                                    autoTopic?: string[] | undefined;
                                    autoSubject?: string[] | undefined;
                                    inSidebar?: boolean | undefined;
                                    inNavbar?: boolean | undefined;
                                } | {};
                                appConfig: {
                                    fsRoot: string;
                                    noteTypes: {
                                        fs: string;
                                        label?: string | undefined;
                                        icon?: string | undefined;
                                        UI?: {
                                            styles: {
                                                dark: {
                                                    bg?: string | undefined;
                                                    fg?: string | undefined;
                                                };
                                                light: {
                                                    bg?: string | undefined;
                                                    fg?: string | undefined;
                                                };
                                            };
                                        } | undefined;
                                        id?: string | undefined;
                                        docType?: string | undefined;
                                        filePathPattern?: string | undefined;
                                        matchWeight?: number | undefined;
                                        url?: string | undefined;
                                        urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                                        keywords?: string[] | undefined;
                                        topicLabel?: string | undefined;
                                        subjectLabel?: string | undefined;
                                        autoTag?: string[] | undefined;
                                        autoTopic?: string[] | undefined;
                                        autoSubject?: string[] | undefined;
                                        inSidebar?: boolean | undefined;
                                        inNavbar?: boolean | undefined;
                                    }[];
                                    code?: {
                                        editor: {
                                            defaultLangauge: string;
                                            useVimMode: boolean;
                                        };
                                        theme: {
                                            dark: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                            light: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                        };
                                        syntaxHighlighting: {
                                            transformers: {
                                                regexHighlight: boolean;
                                                lineHighlight: boolean;
                                                lineFocus: boolean;
                                                lineErrorLevel: boolean;
                                                lineDiff: boolean;
                                            };
                                            defaultLanguage: {
                                                inline: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                                block: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                            };
                                        };
                                    } | undefined;
                                    database?: {
                                        storeFormatted: boolean;
                                        removeIfNotPresentInFs: boolean;
                                    } | undefined;
                                    navigation?: {
                                        navbarBreakpoint: {
                                            full: number;
                                            minimal: number;
                                        };
                                        maxResultLength: {
                                            snippets: number;
                                            searchAll: number;
                                            equations: number;
                                            categories: number;
                                        };
                                        navbarLinks: (string | {
                                            label: string;
                                            href?: string | undefined;
                                            icon?: string | undefined;
                                            onClick?: ((...args: unknown[]) => unknown) | undefined;
                                        })[];
                                        sidebarLinks: (string | {
                                            icon: string;
                                            label?: string | undefined;
                                            href?: string | undefined;
                                            Icon?: ((...args: unknown[]) => unknown) | undefined;
                                            onClick?: ((...args: unknown[]) => unknown) | undefined;
                                        })[];
                                    } | undefined;
                                    terminal?: {
                                        logLevel: "info" | "none" | "debug" | "verbose";
                                    } | undefined;
                                    jupyter?: {
                                        execute: boolean;
                                        environment: string;
                                        syntaxHighlightTheme: string;
                                        jupyterPort: number;
                                        initiallyFoldCells: boolean;
                                        kernel: string;
                                        jupyterReactProps: {
                                            collaborative: boolean;
                                            lite: boolean;
                                            serverUrls?: {
                                                baseUrl?: string | undefined;
                                                wsUrl?: string | undefined;
                                            } | undefined;
                                        };
                                        nbConvert: {
                                            conversionTimeout: number;
                                            execute: boolean;
                                            nbConvertTemplate: string;
                                            notebookOutputDir: string;
                                            nbconvertPath?: string | undefined;
                                            customConversionFunction?: {
                                                pdf?: ((args_0: string, args_1: string, ...args: unknown[]) => string) | undefined;
                                            } | undefined;
                                        };
                                        jupyterNotebookProps: {
                                            readOnly: boolean;
                                            cellMetadataPanel: boolean;
                                            cellSidebarMargin: number;
                                            bundledIPyWidgets: {
                                                name: string;
                                                module: string | Record<string, string>;
                                                version: string;
                                            }[];
                                            externalIPyWidgets: {
                                                name: string;
                                                version: string;
                                            }[];
                                            nbgrader: boolean;
                                            height?: string | undefined;
                                            maxHeight?: string | undefined;
                                        };
                                        cellInputWrappers: Record<string, {
                                            prefix: string;
                                            suffix: string;
                                        }>;
                                        jupyterToken?: string | undefined;
                                    } | undefined;
                                    math?: {
                                        latexPackages: string[] | "all";
                                        constants: Record<string, number>;
                                        latexFontUrl?: string | undefined;
                                    } | undefined;
                                    UI?: {
                                        table: {
                                            maxHeight: string;
                                        };
                                        text: {
                                            blockQuoteItalic: boolean;
                                            fontPaths: "default" | {
                                                weight: "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900";
                                                path: string;
                                                style: "bold" | "italic" | "normal";
                                            }[];
                                        };
                                        media: {
                                            imageMap: Record<string, string | undefined>;
                                            includeDefaultImageMap: boolean;
                                            imageRemoteTest: string[];
                                        };
                                        theme: "ulld" | "red" | "orange" | "yellow" | "green" | "blue" | "rose" | "slate" | "gray" | "stone" | "zinc" | "neutral" | "violet";
                                        colors: Record<string, {
                                            dark?: string | undefined;
                                            light?: string | undefined;
                                        } | undefined>;
                                        autoApplyMdxTitles: boolean;
                                    } | undefined;
                                    slots?: {
                                        navigation?: any;
                                        bibliography?: any;
                                        math?: any;
                                        snippets?: any;
                                        dashboard?: any;
                                        taskManager?: any;
                                        UI?: any;
                                        pdf?: any;
                                        editor?: any;
                                        form?: any;
                                        commandPalette?: any;
                                    } | undefined;
                                    build?: {
                                        database: {
                                            type: "postgres" | "sqlite";
                                            postgres: {
                                                connectionURI: string;
                                                port?: undefined;
                                                dbName?: undefined;
                                            } | {
                                                port: number;
                                                dbName: string;
                                                connectionURI?: undefined;
                                            };
                                            prioritize: "size" | "speed";
                                        };
                                        additionalUserContent: {
                                            css?: string | undefined;
                                            logo?: string | undefined;
                                            favicon?: string | undefined;
                                        };
                                    } | undefined;
                                    autoTag?: {
                                        tag?: string | undefined;
                                        path?: string | undefined;
                                    }[] | undefined;
                                    autoTopic?: {
                                        path?: string | undefined;
                                        topic?: string | undefined;
                                    }[] | undefined;
                                    autoSubject?: {
                                        path?: string | undefined;
                                        subject?: string | undefined;
                                    }[] | undefined;
                                    alwaysPreferFs?: boolean | undefined;
                                    ignoreFilepaths?: string[] | undefined;
                                    tempDir?: string | undefined;
                                    generatedDir?: string | undefined;
                                    ignorePreferFsExtensions?: string[] | undefined;
                                    fileTypePriority?: (".mdx" | ".ipynb" | ".csv" | ".tsv" | ".excel" | ".numpy" | ".html" | ".pickle" | ".db" | ".sql" | ".pdf" | ".json" | ".tex" | ".hdf5" | ".md")[] | undefined;
                                    bibPath?: string | undefined;
                                    cslPath?: string | undefined;
                                    dateHandling?: {
                                        enableAdvancedFormat: boolean;
                                        format: {
                                            short: string;
                                            long: string;
                                            withTime: string;
                                            timeOnly: string;
                                        };
                                        defaultTimeDisplayType: "summarized" | "analog" | "descriptive";
                                        defaultTimeZone?: string | undefined;
                                    } | undefined;
                                    linkAliases?: Record<string, string> | undefined;
                                    plotting?: {
                                        plotColorList: string[] | {
                                            dark: string[];
                                            light: string[];
                                        };
                                        plotColorCycleMethod: "inOrder" | "random";
                                    } | undefined;
                                    credentials?: {
                                        googleServiceAccountJsonPath?: string | undefined;
                                    } | undefined;
                                    performance?: {
                                        latexParsingDebounceTimeout: number;
                                        mdxParsingDebounceTimeout: number;
                                    } | undefined;
                                    meta?: {
                                        title: string;
                                        desc?: string | undefined;
                                    } | undefined;
                                    plugins?: {
                                        name: string;
                                        version: string;
                                        parserIndex: number;
                                    }[] | undefined;
                                };
                                serverClient?: any;
                                db?: {
                                    id: number;
                                    firstSync: string | Date;
                                    bookmarked: boolean;
                                    lastSync: string | Date;
                                    sequentialKey?: string | null | undefined;
                                    sequentialIndex?: number | null | undefined;
                                    quickLink?: string | null | undefined;
                                } | undefined;
                            }, ...args: unknown[]) => Promise<{
                                id?: string | null | undefined;
                                summary?: string | null | undefined;
                                title?: string | null | undefined;
                                tags?: string | string[] | undefined;
                                topics?: string | string[] | undefined;
                                subjects?: string | string[] | undefined;
                                sequentialKey?: string | null | undefined;
                                importantValues?: number[] | undefined;
                                created?: string | null | undefined;
                                updated?: string | null | undefined;
                                sequential?: number | null | undefined;
                                tableStyles?: {
                                    math?: "base" | "lg" | "xl" | "small" | null | undefined;
                                    expand?: boolean | null | undefined;
                                    text?: "base" | "lg" | "xl" | "small" | null | undefined;
                                    float?: "right" | "left" | null | undefined;
                                    fullWidth?: boolean | null | undefined;
                                    tableCenter?: boolean | null | undefined;
                                    textCenter?: boolean | null | undefined;
                                    headingCenter?: boolean | null | undefined;
                                    noMax?: boolean | null | undefined;
                                } | undefined;
                            } & Record<string, string | number | boolean | Record<string, string | number | boolean | null> | Record<string, Record<string, string | number | boolean | null>> | Record<string, string | number | boolean | null>[] | (string | number | boolean | null)[] | (string | number | boolean | null)[][] | null>>;
                            docTypeData?: {
                                label: string;
                                icon: string;
                                UI: {
                                    styles: {
                                        dark: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                        light: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                    };
                                };
                                fs: string;
                                id: string;
                                docType: string;
                                matchWeight: number;
                                url: string;
                                urlQuery: Record<string, string | number | string[] | number[]>;
                                keywords: string[];
                                autoTag: string[];
                                autoTopic: string[];
                                autoSubject: string[];
                                inSidebar: boolean;
                                inNavbar: boolean;
                                filePathPattern?: string | undefined;
                                topicLabel?: string | undefined;
                                subjectLabel?: string | undefined;
                            } | {} | undefined;
                            appConfig?: {
                                fsRoot: string;
                                noteTypes: {
                                    fs: string;
                                    label?: string | undefined;
                                    icon?: string | undefined;
                                    UI?: {
                                        styles: {
                                            dark: {
                                                bg?: string | undefined;
                                                fg?: string | undefined;
                                            };
                                            light: {
                                                bg?: string | undefined;
                                                fg?: string | undefined;
                                            };
                                        };
                                    } | undefined;
                                    id?: string | undefined;
                                    docType?: string | undefined;
                                    filePathPattern?: string | undefined;
                                    matchWeight?: number | undefined;
                                    url?: string | undefined;
                                    urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                                    keywords?: string[] | undefined;
                                    topicLabel?: string | undefined;
                                    subjectLabel?: string | undefined;
                                    autoTag?: string[] | undefined;
                                    autoTopic?: string[] | undefined;
                                    autoSubject?: string[] | undefined;
                                    inSidebar?: boolean | undefined;
                                    inNavbar?: boolean | undefined;
                                }[];
                                code?: {
                                    editor: {
                                        defaultLangauge: string;
                                        useVimMode: boolean;
                                    };
                                    theme: {
                                        dark: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                        light: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                    };
                                    syntaxHighlighting: {
                                        transformers: {
                                            regexHighlight: boolean;
                                            lineHighlight: boolean;
                                            lineFocus: boolean;
                                            lineErrorLevel: boolean;
                                            lineDiff: boolean;
                                        };
                                        defaultLanguage: {
                                            inline: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                            block: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                        };
                                    };
                                } | undefined;
                                database?: {
                                    storeFormatted: boolean;
                                    removeIfNotPresentInFs: boolean;
                                } | undefined;
                                navigation?: {
                                    navbarBreakpoint: {
                                        full: number;
                                        minimal: number;
                                    };
                                    maxResultLength: {
                                        snippets: number;
                                        searchAll: number;
                                        equations: number;
                                        categories: number;
                                    };
                                    navbarLinks: (string | {
                                        label: string;
                                        href?: string | undefined;
                                        icon?: string | undefined;
                                        onClick?: ((...args: unknown[]) => unknown) | undefined;
                                    })[];
                                    sidebarLinks: (string | {
                                        icon: string;
                                        label?: string | undefined;
                                        href?: string | undefined;
                                        Icon?: ((...args: unknown[]) => unknown) | undefined;
                                        onClick?: ((...args: unknown[]) => unknown) | undefined;
                                    })[];
                                } | undefined;
                                terminal?: {
                                    logLevel: "info" | "none" | "debug" | "verbose";
                                } | undefined;
                                jupyter?: {
                                    execute: boolean;
                                    environment: string;
                                    syntaxHighlightTheme: string;
                                    jupyterPort: number;
                                    initiallyFoldCells: boolean;
                                    kernel: string;
                                    jupyterReactProps: {
                                        collaborative: boolean;
                                        lite: boolean;
                                        serverUrls?: {
                                            baseUrl?: string | undefined;
                                            wsUrl?: string | undefined;
                                        } | undefined;
                                    };
                                    nbConvert: {
                                        conversionTimeout: number;
                                        execute: boolean;
                                        nbConvertTemplate: string;
                                        notebookOutputDir: string;
                                        nbconvertPath?: string | undefined;
                                        customConversionFunction?: {
                                            pdf?: ((args_0: string, args_1: string, ...args: unknown[]) => string) | undefined;
                                        } | undefined;
                                    };
                                    jupyterNotebookProps: {
                                        readOnly: boolean;
                                        cellMetadataPanel: boolean;
                                        cellSidebarMargin: number;
                                        bundledIPyWidgets: {
                                            name: string;
                                            module: string | Record<string, string>;
                                            version: string;
                                        }[];
                                        externalIPyWidgets: {
                                            name: string;
                                            version: string;
                                        }[];
                                        nbgrader: boolean;
                                        height?: string | undefined;
                                        maxHeight?: string | undefined;
                                    };
                                    cellInputWrappers: Record<string, {
                                        prefix: string;
                                        suffix: string;
                                    }>;
                                    jupyterToken?: string | undefined;
                                } | undefined;
                                math?: {
                                    latexPackages: string[] | "all";
                                    constants: Record<string, number>;
                                    latexFontUrl?: string | undefined;
                                } | undefined;
                                UI?: {
                                    table: {
                                        maxHeight: string;
                                    };
                                    text: {
                                        blockQuoteItalic: boolean;
                                        fontPaths: "default" | {
                                            weight: "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900";
                                            path: string;
                                            style: "bold" | "italic" | "normal";
                                        }[];
                                    };
                                    media: {
                                        imageMap: Record<string, string | undefined>;
                                        includeDefaultImageMap: boolean;
                                        imageRemoteTest: string[];
                                    };
                                    theme: "ulld" | "red" | "orange" | "yellow" | "green" | "blue" | "rose" | "slate" | "gray" | "stone" | "zinc" | "neutral" | "violet";
                                    colors: Record<string, {
                                        dark?: string | undefined;
                                        light?: string | undefined;
                                    } | undefined>;
                                    autoApplyMdxTitles: boolean;
                                } | undefined;
                                slots?: {
                                    navigation?: any;
                                    bibliography?: any;
                                    math?: any;
                                    snippets?: any;
                                    dashboard?: any;
                                    taskManager?: any;
                                    UI?: any;
                                    pdf?: any;
                                    editor?: any;
                                    form?: any;
                                    commandPalette?: any;
                                } | undefined;
                                build?: {
                                    database: {
                                        type: "postgres" | "sqlite";
                                        postgres: {
                                            connectionURI: string;
                                            port?: undefined;
                                            dbName?: undefined;
                                        } | {
                                            port: number;
                                            dbName: string;
                                            connectionURI?: undefined;
                                        };
                                        prioritize: "size" | "speed";
                                    };
                                    additionalUserContent: {
                                        css?: string | undefined;
                                        logo?: string | undefined;
                                        favicon?: string | undefined;
                                    };
                                } | undefined;
                                autoTag?: {
                                    tag?: string | undefined;
                                    path?: string | undefined;
                                }[] | undefined;
                                autoTopic?: {
                                    path?: string | undefined;
                                    topic?: string | undefined;
                                }[] | undefined;
                                autoSubject?: {
                                    path?: string | undefined;
                                    subject?: string | undefined;
                                }[] | undefined;
                                alwaysPreferFs?: boolean | undefined;
                                ignoreFilepaths?: string[] | undefined;
                                tempDir?: string | undefined;
                                generatedDir?: string | undefined;
                                ignorePreferFsExtensions?: string[] | undefined;
                                fileTypePriority?: (".mdx" | ".ipynb" | ".csv" | ".tsv" | ".excel" | ".numpy" | ".html" | ".pickle" | ".db" | ".sql" | ".pdf" | ".json" | ".tex" | ".hdf5" | ".md")[] | undefined;
                                bibPath?: string | undefined;
                                cslPath?: string | undefined;
                                dateHandling?: {
                                    enableAdvancedFormat: boolean;
                                    format: {
                                        short: string;
                                        long: string;
                                        withTime: string;
                                        timeOnly: string;
                                    };
                                    defaultTimeDisplayType: "summarized" | "analog" | "descriptive";
                                    defaultTimeZone?: string | undefined;
                                } | undefined;
                                linkAliases?: Record<string, string> | undefined;
                                plotting?: {
                                    plotColorList: string[] | {
                                        dark: string[];
                                        light: string[];
                                    };
                                    plotColorCycleMethod: "inOrder" | "random";
                                } | undefined;
                                credentials?: {
                                    googleServiceAccountJsonPath?: string | undefined;
                                } | undefined;
                                performance?: {
                                    latexParsingDebounceTimeout: number;
                                    mdxParsingDebounceTimeout: number;
                                } | undefined;
                                meta?: {
                                    title: string;
                                    desc?: string | undefined;
                                } | undefined;
                                plugins?: {
                                    name: string;
                                    version: string;
                                    parserIndex: number;
                                }[] | undefined;
                            } | undefined;
                        };
                        _opts?: {
                            noteTypeId?: string | undefined;
                        } | undefined;
                    };
                    _input_out: {
                        _opts: {
                            noteTypeId?: string | undefined;
                        };
                        props: {
                            bookmarked: boolean;
                            raw: string;
                            docTypeData: {
                                label: string;
                                icon: string;
                                UI: {
                                    styles: {
                                        dark: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                        light: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                    };
                                };
                                fs: string;
                                id: string;
                                docType: string;
                                matchWeight: number;
                                url: string;
                                urlQuery: Record<string, string | number | string[] | number[]>;
                                keywords: string[];
                                autoTag: string[];
                                autoTopic: string[];
                                autoSubject: string[];
                                inSidebar: boolean;
                                inNavbar: boolean;
                                filePathPattern?: string | undefined;
                                topicLabel?: string | undefined;
                                subjectLabel?: string | undefined;
                            };
                            rootRelativePath?: string | null | undefined;
                        };
                        parseParams: {
                            docTypeData: {
                                label: string;
                                icon: string;
                                UI: {
                                    styles: {
                                        dark: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                        light: {
                                            bg?: string | undefined;
                                            fg?: string | undefined;
                                        };
                                    };
                                };
                                fs: string;
                                id: string;
                                docType: string;
                                matchWeight: number;
                                url: string;
                                urlQuery: Record<string, string | number | string[] | number[]>;
                                keywords: string[];
                                autoTag: string[];
                                autoTopic: string[];
                                autoSubject: string[];
                                inSidebar: boolean;
                                inNavbar: boolean;
                                filePathPattern?: string | undefined;
                                topicLabel?: string | undefined;
                                subjectLabel?: string | undefined;
                            } | {};
                            parser: (args_0: {
                                data: {
                                    id?: string | null | undefined;
                                    summary?: string | null | undefined;
                                    title?: string | null | undefined;
                                    tags?: string | string[] | undefined;
                                    topics?: string | string[] | undefined;
                                    subjects?: string | string[] | undefined;
                                    sequentialKey?: string | null | undefined;
                                    importantValues?: number[] | undefined;
                                    created?: string | null | undefined;
                                    updated?: string | null | undefined;
                                    sequential?: number | null | undefined;
                                    tableStyles?: {
                                        math?: "base" | "lg" | "xl" | "small" | null | undefined;
                                        expand?: boolean | null | undefined;
                                        text?: "base" | "lg" | "xl" | "small" | null | undefined;
                                        float?: "right" | "left" | null | undefined;
                                        fullWidth?: boolean | null | undefined;
                                        tableCenter?: boolean | null | undefined;
                                        textCenter?: boolean | null | undefined;
                                        headingCenter?: boolean | null | undefined;
                                        noMax?: boolean | null | undefined;
                                    } | undefined;
                                };
                                content: string;
                                appConfig: {
                                    fsRoot: string;
                                    noteTypes: {
                                        fs: string;
                                        label?: string | undefined;
                                        icon?: string | undefined;
                                        UI?: {
                                            styles: {
                                                dark: {
                                                    bg?: string | undefined;
                                                    fg?: string | undefined;
                                                };
                                                light: {
                                                    bg?: string | undefined;
                                                    fg?: string | undefined;
                                                };
                                            };
                                        } | undefined;
                                        id?: string | undefined;
                                        docType?: string | undefined;
                                        filePathPattern?: string | undefined;
                                        matchWeight?: number | undefined;
                                        url?: string | undefined;
                                        urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                                        keywords?: string[] | undefined;
                                        topicLabel?: string | undefined;
                                        subjectLabel?: string | undefined;
                                        autoTag?: string[] | undefined;
                                        autoTopic?: string[] | undefined;
                                        autoSubject?: string[] | undefined;
                                        inSidebar?: boolean | undefined;
                                        inNavbar?: boolean | undefined;
                                    }[];
                                    code?: {
                                        editor: {
                                            defaultLangauge: string;
                                            useVimMode: boolean;
                                        };
                                        theme: {
                                            dark: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                            light: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                        };
                                        syntaxHighlighting: {
                                            transformers: {
                                                regexHighlight: boolean;
                                                lineHighlight: boolean;
                                                lineFocus: boolean;
                                                lineErrorLevel: boolean;
                                                lineDiff: boolean;
                                            };
                                            defaultLanguage: {
                                                inline: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                                block: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                            };
                                        };
                                    } | undefined;
                                    database?: {
                                        storeFormatted: boolean;
                                        removeIfNotPresentInFs: boolean;
                                    } | undefined;
                                    navigation?: {
                                        navbarBreakpoint: {
                                            full: number;
                                            minimal: number;
                                        };
                                        maxResultLength: {
                                            snippets: number;
                                            searchAll: number;
                                            equations: number;
                                            categories: number;
                                        };
                                        navbarLinks: (string | {
                                            label: string;
                                            href?: string | undefined;
                                            icon?: string | undefined;
                                            onClick?: ((...args: unknown[]) => unknown) | undefined;
                                        })[];
                                        sidebarLinks: (string | {
                                            icon: string;
                                            label?: string | undefined;
                                            href?: string | undefined;
                                            Icon?: ((...args: unknown[]) => unknown) | undefined;
                                            onClick?: ((...args: unknown[]) => unknown) | undefined;
                                        })[];
                                    } | undefined;
                                    terminal?: {
                                        logLevel: "info" | "none" | "debug" | "verbose";
                                    } | undefined;
                                    jupyter?: {
                                        execute: boolean;
                                        environment: string;
                                        syntaxHighlightTheme: string;
                                        jupyterPort: number;
                                        initiallyFoldCells: boolean;
                                        kernel: string;
                                        jupyterReactProps: {
                                            collaborative: boolean;
                                            lite: boolean;
                                            serverUrls?: {
                                                baseUrl?: string | undefined;
                                                wsUrl?: string | undefined;
                                            } | undefined;
                                        };
                                        nbConvert: {
                                            conversionTimeout: number;
                                            execute: boolean;
                                            nbConvertTemplate: string;
                                            notebookOutputDir: string;
                                            nbconvertPath?: string | undefined;
                                            customConversionFunction?: {
                                                pdf?: ((args_0: string, args_1: string, ...args: unknown[]) => string) | undefined;
                                            } | undefined;
                                        };
                                        jupyterNotebookProps: {
                                            readOnly: boolean;
                                            cellMetadataPanel: boolean;
                                            cellSidebarMargin: number;
                                            bundledIPyWidgets: {
                                                name: string;
                                                module: string | Record<string, string>;
                                                version: string;
                                            }[];
                                            externalIPyWidgets: {
                                                name: string;
                                                version: string;
                                            }[];
                                            nbgrader: boolean;
                                            height?: string | undefined;
                                            maxHeight?: string | undefined;
                                        };
                                        cellInputWrappers: Record<string, {
                                            prefix: string;
                                            suffix: string;
                                        }>;
                                        jupyterToken?: string | undefined;
                                    } | undefined;
                                    math?: {
                                        latexPackages: string[] | "all";
                                        constants: Record<string, number>;
                                        latexFontUrl?: string | undefined;
                                    } | undefined;
                                    UI?: {
                                        table: {
                                            maxHeight: string;
                                        };
                                        text: {
                                            blockQuoteItalic: boolean;
                                            fontPaths: "default" | {
                                                weight: "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900";
                                                path: string;
                                                style: "bold" | "italic" | "normal";
                                            }[];
                                        };
                                        media: {
                                            imageMap: Record<string, string | undefined>;
                                            includeDefaultImageMap: boolean;
                                            imageRemoteTest: string[];
                                        };
                                        theme: "ulld" | "red" | "orange" | "yellow" | "green" | "blue" | "rose" | "slate" | "gray" | "stone" | "zinc" | "neutral" | "violet";
                                        colors: Record<string, {
                                            dark?: string | undefined;
                                            light?: string | undefined;
                                        } | undefined>;
                                        autoApplyMdxTitles: boolean;
                                    } | undefined;
                                    slots?: {
                                        navigation?: any;
                                        bibliography?: any;
                                        math?: any;
                                        snippets?: any;
                                        dashboard?: any;
                                        taskManager?: any;
                                        UI?: any;
                                        pdf?: any;
                                        editor?: any;
                                        form?: any;
                                        commandPalette?: any;
                                    } | undefined;
                                    build?: {
                                        database: {
                                            type: "postgres" | "sqlite";
                                            postgres: {
                                                connectionURI: string;
                                                port?: undefined;
                                                dbName?: undefined;
                                            } | {
                                                port: number;
                                                dbName: string;
                                                connectionURI?: undefined;
                                            };
                                            prioritize: "size" | "speed";
                                        };
                                        additionalUserContent: {
                                            css?: string | undefined;
                                            logo?: string | undefined;
                                            favicon?: string | undefined;
                                        };
                                    } | undefined;
                                    autoTag?: {
                                        tag?: string | undefined;
                                        path?: string | undefined;
                                    }[] | undefined;
                                    autoTopic?: {
                                        path?: string | undefined;
                                        topic?: string | undefined;
                                    }[] | undefined;
                                    autoSubject?: {
                                        path?: string | undefined;
                                        subject?: string | undefined;
                                    }[] | undefined;
                                    alwaysPreferFs?: boolean | undefined;
                                    ignoreFilepaths?: string[] | undefined;
                                    tempDir?: string | undefined;
                                    generatedDir?: string | undefined;
                                    ignorePreferFsExtensions?: string[] | undefined;
                                    fileTypePriority?: (".mdx" | ".ipynb" | ".csv" | ".tsv" | ".excel" | ".numpy" | ".html" | ".pickle" | ".db" | ".sql" | ".pdf" | ".json" | ".tex" | ".hdf5" | ".md")[] | undefined;
                                    bibPath?: string | undefined;
                                    cslPath?: string | undefined;
                                    dateHandling?: {
                                        enableAdvancedFormat: boolean;
                                        format: {
                                            short: string;
                                            long: string;
                                            withTime: string;
                                            timeOnly: string;
                                        };
                                        defaultTimeDisplayType: "summarized" | "analog" | "descriptive";
                                        defaultTimeZone?: string | undefined;
                                    } | undefined;
                                    linkAliases?: Record<string, string> | undefined;
                                    plotting?: {
                                        plotColorList: string[] | {
                                            dark: string[];
                                            light: string[];
                                        };
                                        plotColorCycleMethod: "inOrder" | "random";
                                    } | undefined;
                                    credentials?: {
                                        googleServiceAccountJsonPath?: string | undefined;
                                    } | undefined;
                                    performance?: {
                                        latexParsingDebounceTimeout: number;
                                        mdxParsingDebounceTimeout: number;
                                    } | undefined;
                                    meta?: {
                                        title: string;
                                        desc?: string | undefined;
                                    } | undefined;
                                    plugins?: {
                                        name: string;
                                        version: string;
                                        parserIndex: number;
                                    }[] | undefined;
                                };
                                docTypeData?: {
                                    id: string;
                                    url: string;
                                    docType: string;
                                    label?: string | undefined;
                                    keywords?: string[] | undefined;
                                    icon?: string | undefined;
                                    UI?: {
                                        styles: {
                                            dark: {
                                                bg?: string | undefined;
                                                fg?: string | undefined;
                                            };
                                            light: {
                                                bg?: string | undefined;
                                                fg?: string | undefined;
                                            };
                                        };
                                    } | undefined;
                                    fs?: string | undefined;
                                    filePathPattern?: string | undefined;
                                    matchWeight?: number | undefined;
                                    urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                                    topicLabel?: string | undefined;
                                    subjectLabel?: string | undefined;
                                    autoTag?: string[] | undefined;
                                    autoTopic?: string[] | undefined;
                                    autoSubject?: string[] | undefined;
                                    inSidebar?: boolean | undefined;
                                    inNavbar?: boolean | undefined;
                                } | {} | undefined;
                                serverClient?: any;
                                db?: {
                                    id: number;
                                    firstSync: string | Date;
                                    bookmarked: boolean;
                                    lastSync: string | Date;
                                    sequentialKey?: string | null | undefined;
                                    sequentialIndex?: number | null | undefined;
                                    quickLink?: string | null | undefined;
                                } | undefined;
                            }, ...args: unknown[]) => Promise<{
                                tags: string[];
                                topics: string[];
                                subjects: string[];
                                importantValues: number[];
                                id?: string | null | undefined;
                                summary?: string | null | undefined;
                                title?: string | null | undefined;
                                sequentialKey?: string | null | undefined;
                                created?: string | null | undefined;
                                updated?: string | null | undefined;
                                sequential?: number | null | undefined;
                                tableStyles?: {
                                    expand: boolean | null;
                                    fullWidth: boolean | null;
                                    tableCenter: boolean | null;
                                    textCenter: boolean | null;
                                    headingCenter: boolean | null;
                                    noMax: boolean | null;
                                    math?: "base" | "lg" | "xl" | "small" | null | undefined;
                                    text?: "base" | "lg" | "xl" | "small" | null | undefined;
                                    float?: "right" | "left" | null | undefined;
                                } | undefined;
                            } & Record<string, string | number | boolean | Record<string, string | number | boolean | null> | Record<string, Record<string, string | number | boolean | null>> | Record<string, string | number | boolean | null>[] | (string | number | boolean | null)[] | (string | number | boolean | null)[][] | null>>;
                            appConfig?: {
                                fsRoot: string;
                                noteTypes: {
                                    fs: string;
                                    label?: string | undefined;
                                    icon?: string | undefined;
                                    UI?: {
                                        styles: {
                                            dark: {
                                                bg?: string | undefined;
                                                fg?: string | undefined;
                                            };
                                            light: {
                                                bg?: string | undefined;
                                                fg?: string | undefined;
                                            };
                                        };
                                    } | undefined;
                                    id?: string | undefined;
                                    docType?: string | undefined;
                                    filePathPattern?: string | undefined;
                                    matchWeight?: number | undefined;
                                    url?: string | undefined;
                                    urlQuery?: Record<string, string | number | string[] | number[]> | undefined;
                                    keywords?: string[] | undefined;
                                    topicLabel?: string | undefined;
                                    subjectLabel?: string | undefined;
                                    autoTag?: string[] | undefined;
                                    autoTopic?: string[] | undefined;
                                    autoSubject?: string[] | undefined;
                                    inSidebar?: boolean | undefined;
                                    inNavbar?: boolean | undefined;
                                }[];
                                code?: {
                                    editor: {
                                        defaultLangauge: string;
                                        useVimMode: boolean;
                                    };
                                    theme: {
                                        dark: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                        light: "andromeeda" | "aurora-x" | "ayu-dark" | "catppuccin-frappe" | "catppuccin-latte" | "catppuccin-macchiato" | "catppuccin-mocha" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "night-owl" | "nord" | "one-dark-pro" | "poimandres" | "red" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "synthwave-84" | "tokyo-night" | "vesper" | "vitesse-black" | "vitesse-dark" | "vitesse-light";
                                    };
                                    syntaxHighlighting: {
                                        transformers: {
                                            regexHighlight: boolean;
                                            lineHighlight: boolean;
                                            lineFocus: boolean;
                                            lineErrorLevel: boolean;
                                            lineDiff: boolean;
                                        };
                                        defaultLanguage: {
                                            inline: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                            block: "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "fs" | "json" | "rel" | "mdx" | "md" | "csv" | "html" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "jsx" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "tex" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "\u6587\u8A00" | "wl" | "yml";
                                        };
                                    };
                                } | undefined;
                                database?: {
                                    storeFormatted: boolean;
                                    removeIfNotPresentInFs: boolean;
                                } | undefined;
                                navigation?: {
                                    navbarBreakpoint: {
                                        full: number;
                                        minimal: number;
                                    };
                                    maxResultLength: {
                                        snippets: number;
                                        searchAll: number;
                                        equations: number;
                                        categories: number;
                                    };
                                    navbarLinks: (string | {
                                        label: string;
                                        href?: string | undefined;
                                        icon?: string | undefined;
                                        onClick?: ((...args: unknown[]) => unknown) | undefined;
                                    })[];
                                    sidebarLinks: (string | {
                                        icon: string;
                                        label?: string | undefined;
                                        href?: string | undefined;
                                        Icon?: ((...args: unknown[]) => unknown) | undefined;
                                        onClick?: ((...args: unknown[]) => unknown) | undefined;
                                    })[];
                                } | undefined;
                                terminal?: {
                                    logLevel: "info" | "none" | "debug" | "verbose";
                                } | undefined;
                                jupyter?: {
                                    execute: boolean;
                                    environment: string;
                                    syntaxHighlightTheme: string;
                                    jupyterPort: number;
                                    initiallyFoldCells: boolean;
                                    kernel: string;
                                    jupyterReactProps: {
                                        collaborative: boolean;
                                        lite: boolean;
                                        serverUrls?: {
                                            baseUrl?: string | undefined;
                                            wsUrl?: string | undefined;
                                        } | undefined;
                                    };
                                    nbConvert: {
                                        conversionTimeout: number;
                                        execute: boolean;
                                        nbConvertTemplate: string;
                                        notebookOutputDir: string;
                                        nbconvertPath?: string | undefined;
                                        customConversionFunction?: {
                                            pdf?: ((args_0: string, args_1: string, ...args: unknown[]) => string) | undefined;
                                        } | undefined;
                                    };
                                    jupyterNotebookProps: {
                                        readOnly: boolean;
                                        cellMetadataPanel: boolean;
                                        cellSidebarMargin: number;
                                        bundledIPyWidgets: {
                                            name: string;
                                            module: string | Record<string, string>;
                                            version: string;
                                        }[];
                                        externalIPyWidgets: {
                                            name: string;
                                            version: string;
                                        }[];
                                        nbgrader: boolean;
                                        height?: string | undefined;
                                        maxHeight?: string | undefined;
                                    };
                                    cellInputWrappers: Record<string, {
                                        prefix: string;
                                        suffix: string;
                                    }>;
                                    jupyterToken?: string | undefined;
                                } | undefined;
                                math?: {
                                    latexPackages: string[] | "all";
                                    constants: Record<string, number>;
                                    latexFontUrl?: string | undefined;
                                } | undefined;
                                UI?: {
                                    table: {
                                        maxHeight: string;
                                    };
                                    text: {
                                        blockQuoteItalic: boolean;
                                        fontPaths: "default" | {
                                            weight: "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900";
                                            path: string;
                                            style: "bold" | "italic" | "normal";
                                        }[];
                                    };
                                    media: {
                                        imageMap: Record<string, string | undefined>;
                                        includeDefaultImageMap: boolean;
                                        imageRemoteTest: string[];
                                    };
                                    theme: "ulld" | "red" | "orange" | "yellow" | "green" | "blue" | "rose" | "slate" | "gray" | "stone" | "zinc" | "neutral" | "violet";
                                    colors: Record<string, {
                                        dark?: string | undefined;
                                        light?: string | undefined;
                                    } | undefined>;
                                    autoApplyMdxTitles: boolean;
                                } | undefined;
                                slots?: {
                                    navigation?: any;
                                    bibliography?: any;
                                    math?: any;
                                    snippets?: any;
                                    dashboard?: any;
                                    taskManager?: any;
                                    UI?: any;
                                    pdf?: any;
                                    editor?: any;
                                    form?: any;
                                    commandPalette?: any;
                                } | undefined;
                                build?: {
                                    database: {
                                        type: "postgres" | "sqlite";
                                        postgres: {
                                            connectionURI: string;
                                            port?: undefined;
                                            dbName?: undefined;
                                        } | {
                                            port: number;
                                            dbName: string;
                                            connectionURI?: undefined;
                                        };
                                        prioritize: "size" | "speed";
                                    };
                                    additionalUserContent: {
                                        css?: string | undefined;
                                        logo?: string | undefined;
                                        favicon?: string | undefined;
                                    };
                                } | undefined;
                                autoTag?: {
                                    tag?: string | undefined;
                                    path?: string | undefined;
                                }[] | undefined;
                                autoTopic?: {
                                    path?: string | undefined;
                                    topic?: string | undefined;
                                }[] | undefined;
                                autoSubject?: {
                                    path?: string | undefined;
                                    subject?: string | undefined;
                                }[] | undefined;
                                alwaysPreferFs?: boolean | undefined;
                                ignoreFilepaths?: string[] | undefined;
                                tempDir?: string | undefined;
                                generatedDir?: string | undefined;
                                ignorePreferFsExtensions?: string[] | undefined;
                                fileTypePriority?: (".mdx" | ".ipynb" | ".csv" | ".tsv" | ".excel" | ".numpy" | ".html" | ".pickle" | ".db" | ".sql" | ".pdf" | ".json" | ".tex" | ".hdf5" | ".md")[] | undefined;
                                bibPath?: string | undefined;
                                cslPath?: string | undefined;
                                dateHandling?: {
                                    enableAdvancedFormat: boolean;
                                    format: {
                                        short: string;
                                        long: string;
                                        withTime: string;
                                        timeOnly: string;
                                    };
                                    defaultTimeDisplayType: "summarized" | "analog" | "descriptive";
                                    defaultTimeZone?: string | undefined;
                                } | undefined;
                                linkAliases?: Record<string, string> | undefined;
                                plotting?: {
                                    plotColorList: string[] | {
                                        dark: string[];
                                        light: string[];
                                    };
                                    plotColorCycleMethod: "inOrder" | "random";
                                } | undefined;
                                credentials?: {
                                    googleServiceAccountJsonPath?: string | undefined;
                                } | undefined;
                                performance?: {
                                    latexParsingDebounceTimeout: number;
                                    mdxParsingDebounceTimeout: number;
                                } | undefined;
                                meta?: {
                                    title: string;
                                    desc?: string | undefined;
                                } | undefined;
                                plugins?: {
                                    name: string;
                                    version: string;
                                    parserIndex: number;
                                }[] | undefined;
                            } | undefined;
                        };
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, string>;
                compileMdxString: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        content: string;
                        opts?: {
                            mathLabels?: "none" | "all" | "ams" | undefined;
                        } | undefined;
                    };
                    _input_out: {
                        content: string;
                        opts: {
                            mathLabels: "none" | "all" | "ams";
                        };
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, string>;
                streamMdxContent: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, string>;
            }>;
            notebook: CreateRouterInner<import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>, {
                getRemoteIpynbFromPathname: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    equations: never;
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    toDo: never;
                    ReadingList: never;
                    topics: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    subjects: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    _count: {
                        tags: number;
                        topics: number;
                        subjects: number;
                        citations: number;
                        sequentialList: number;
                        readingList: number;
                    };
                    citations: {
                        id: string;
                        BibId: number | null;
                        OwnWork: boolean;
                        ColleaguesWork: boolean;
                        read: boolean;
                        htmlCitation: string | null;
                        PdfPath: string | null;
                        address: string | null;
                        annote: string | null;
                        author: string | null;
                        booktitle: string | null;
                        chapter: string | null;
                        crossref: string | null;
                        doi: string | null;
                        edition: string | null;
                        editor: string | null;
                        email: string | null;
                        howpublished: string | null;
                        institution: string | null;
                        journal: string | null;
                        month: string | null;
                        note: string | null;
                        number: string | null;
                        organization: string | null;
                        pages: string | null;
                        publisher: string | null;
                        school: string | null;
                        series: string | null;
                        title: string | null;
                        volume: string | null;
                        type: string | null;
                        year: string | null;
                        numpages: string | null;
                        url: string | null;
                        issue: string | null;
                        issn: string | null;
                        abstract: string | null;
                        urldate: string | null;
                        keywords: string | null;
                        copyright: string | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    sequentialList: {
                        sequentialKey: string;
                    } | null;
                    definitions: never;
                } & {
                    id: number;
                    rootRelativePath: string;
                    isProtected: boolean | null;
                    title: string;
                    latexTitle: string | null;
                    citationsListOrder: string[];
                    importantValues: number[];
                    href: string;
                    outgoingQuickLinks: string[];
                    raw: Buffer;
                    sequentialKey: string | null;
                    sequentialIndex: number | null;
                    bookmarked: boolean;
                    firstSync: Date;
                    lastSync: Date;
                    lastAccess: Date;
                }) | null>;
                getFsIpynb: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        absolutePath: string;
                    };
                    _input_out: {
                        absolutePath: string;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, string>;
                getPrismaIpynb: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    readingList: {
                        name: string;
                        description: string | null;
                        createdAt: Date;
                        lastUpdate: Date;
                    }[];
                    topics: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    citations: {
                        id: string;
                        BibId: number | null;
                        OwnWork: boolean;
                        ColleaguesWork: boolean;
                        read: boolean;
                        htmlCitation: string | null;
                        PdfPath: string | null;
                        address: string | null;
                        annote: string | null;
                        author: string | null;
                        booktitle: string | null;
                        chapter: string | null;
                        crossref: string | null;
                        doi: string | null;
                        edition: string | null;
                        editor: string | null;
                        email: string | null;
                        howpublished: string | null;
                        institution: string | null;
                        journal: string | null;
                        month: string | null;
                        note: string | null;
                        number: string | null;
                        organization: string | null;
                        pages: string | null;
                        publisher: string | null;
                        school: string | null;
                        series: string | null;
                        title: string | null;
                        volume: string | null;
                        type: string | null;
                        year: string | null;
                        numpages: string | null;
                        url: string | null;
                        issue: string | null;
                        issn: string | null;
                        abstract: string | null;
                        urldate: string | null;
                        keywords: string | null;
                        copyright: string | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                } & {
                    id: number;
                    rootRelativePath: string;
                    isProtected: boolean | null;
                    title: string;
                    latexTitle: string | null;
                    citationsListOrder: string[];
                    importantValues: number[];
                    href: string;
                    outgoingQuickLinks: string[];
                    raw: Buffer;
                    sequentialKey: string | null;
                    sequentialIndex: number | null;
                    bookmarked: boolean;
                    firstSync: Date;
                    lastSync: Date;
                    lastAccess: Date;
                }) | null>;
                getAllNotebookPaths: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, string[]>;
                getDatabaseNotebook: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        rootRelativePath: string;
                    };
                    _input_out: {
                        rootRelativePath: string;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    topics: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    subjects: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                } & {
                    id: number;
                    rootRelativePath: string;
                    isProtected: boolean | null;
                    title: string;
                    latexTitle: string | null;
                    citationsListOrder: string[];
                    importantValues: number[];
                    href: string;
                    outgoingQuickLinks: string[];
                    raw: Buffer;
                    sequentialKey: string | null;
                    sequentialIndex: number | null;
                    bookmarked: boolean;
                    firstSync: Date;
                    lastSync: Date;
                    lastAccess: Date;
                }) | null>;
            }>;
            snippets: CreateRouterInner<import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>, {
                saveSnippet: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        content: string;
                        description: string;
                        language: "rel" | "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "mdx" | "md" | "json" | "csv" | "html" | "tex" | "jsx" | "fs" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "文言" | "wl" | "yml";
                        id?: number | undefined;
                        keywords?: string[] | {
                            set: string[];
                        } | undefined;
                    };
                    _input_out: {
                        content: string;
                        description: string;
                        language: "rel" | "coffee" | "diff" | "fish" | "move" | "shell" | "turtle" | "swift" | "python" | "markdown" | "kotlin" | "css" | "latex" | "mdx" | "md" | "json" | "csv" | "html" | "tex" | "jsx" | "fs" | "abap" | "actionscript-3" | "ada" | "angular-html" | "angular-ts" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "bat" | "beancount" | "berry" | "bibtex" | "bicep" | "blade" | "c" | "cadence" | "clarity" | "clojure" | "cmake" | "cobol" | "codeql" | "cpp" | "crystal" | "csharp" | "cue" | "cypher" | "d" | "dart" | "dax" | "docker" | "dream-maker" | "elixir" | "elm" | "erb" | "erlang" | "fortran-fixed-form" | "fortran-free-form" | "fsharp" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glimmer-js" | "glimmer-ts" | "glsl" | "gnuplot" | "go" | "graphql" | "groovy" | "hack" | "haml" | "handlebars" | "haskell" | "hcl" | "hjson" | "hlsl" | "html-derivative" | "http" | "imba" | "ini" | "java" | "javascript" | "jinja" | "jison" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jssm" | "julia" | "kusto" | "less" | "liquid" | "lisp" | "logo" | "lua" | "make" | "marko" | "matlab" | "mdc" | "mermaid" | "mojo" | "narrat" | "nextflow" | "nginx" | "nim" | "nix" | "nushell" | "objective-c" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "powershell" | "prisma" | "prolog" | "proto" | "pug" | "puppet" | "purescript" | "r" | "raku" | "razor" | "reg" | "riscv" | "rst" | "ruby" | "rust" | "sas" | "sass" | "scala" | "scheme" | "scss" | "shaderlab" | "shellscript" | "shellsession" | "smalltalk" | "solidity" | "sparql" | "splunk" | "sql" | "ssh-config" | "stata" | "stylus" | "svelte" | "system-verilog" | "tasl" | "tcl" | "terraform" | "toml" | "tsx" | "twig" | "typescript" | "typst" | "v" | "vb" | "verilog" | "vhdl" | "viml" | "vue" | "vue-html" | "vyper" | "wasm" | "wenyan" | "wgsl" | "wolfram" | "xml" | "xsl" | "yaml" | "zenscript" | "zig" | "batch" | "be" | "cdc" | "clj" | "ql" | "coffeescript" | "c++" | "c#" | "cs" | "cql" | "dockerfile" | "erl" | "f" | "for" | "f77" | "f90" | "f95" | "f03" | "f08" | "f18" | "f#" | "gjs" | "gts" | "gql" | "hbs" | "hs" | "properties" | "js" | "fsl" | "kt" | "kts" | "kql" | "makefile" | "nar" | "nf" | "nu" | "objc" | "ps" | "ps1" | "jade" | "py" | "perl6" | "rb" | "rs" | "shader" | "bash" | "sh" | "zsh" | "console" | "spl" | "styl" | "tf" | "tfvars" | "ts" | "typ" | "cmd" | "vim" | "vimscript" | "vy" | "文言" | "wl" | "yml";
                        id?: number | undefined;
                        keywords?: string[] | {
                            set: string[];
                        } | undefined;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, boolean>;
                deleteSnippet: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: number;
                    _input_out: number;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                    content: string;
                    description: string;
                    keywords: string[];
                    language: string;
                    createdAt: Date;
                }>;
                getSnippets: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        query?: string | undefined;
                        language?: string | undefined;
                    };
                    _input_out: {
                        query?: string | undefined;
                        language?: string | undefined;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                    content: string;
                    description: string;
                    keywords: string[];
                    language: string;
                    createdAt: Date;
                }[]>;
                getSpecificSnippet: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: number;
                    _input_out: number;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: number;
                    content: string;
                    description: string;
                    keywords: string[];
                    language: string;
                    createdAt: Date;
                } | null>;
            }>;
            fsUtils: CreateRouterInner<import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>, {
                getParsableFiletypesAtPath: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    ".csv": boolean;
                    ".tsv": boolean;
                    ".excel": boolean;
                    ".numpy": boolean;
                    ".html": boolean;
                    ".pickle": boolean;
                    ".db": boolean;
                    ".sql": boolean;
                    ".pdf": boolean;
                    ".json": boolean;
                    ".tex": boolean;
                    ".hdf5": boolean;
                    ".md": boolean;
                    ".mdx": boolean;
                    ".ipynb": boolean;
                }>;
                getAllRootRelativePathsOfFiletype: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: ".md" | ".mdx" | ".ipynb";
                    _input_out: ".md" | ".mdx" | ".ipynb";
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, string[]>;
                clearTempDir: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, void>;
                getUtf8File: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        rootRelativePath: string;
                        useProcessRoot?: boolean | undefined;
                    };
                    _input_out: {
                        rootRelativePath: string;
                        useProcessRoot: boolean;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, string>;
            }>;
            readingList: CreateRouterInner<import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>, {
                addToReadingList: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        type: "BibEntry" | "MdxNote";
                        itemId: string | number;
                        readingListName?: string | undefined;
                    };
                    _input_out: {
                        type: "BibEntry" | "MdxNote";
                        readingListName: string;
                        itemId: string | number;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    name: string;
                    description: string | null;
                    createdAt: Date;
                    lastUpdate: Date;
                }>;
                getReadingListContent: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    bibEntries: ({
                        tags: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                        MdxNotes: {
                            id: number;
                            isProtected: boolean | null;
                            dietSummaryKey: string | null;
                            title: string;
                            latexTitle: string | null;
                            rootRelativePath: string;
                            noteType: string;
                            content: string;
                            formatted: string | null;
                            summary: string | null;
                            citationsListOrder: string[];
                            importantValues: number[];
                            imageSrc: string | null;
                            href: string;
                            sequentialKey: string | null;
                            sequentialIndex: number | null;
                            floatImages: boolean;
                            remoteUrl: string | null;
                            trackRemote: boolean;
                            outgoingQuickLinks: string[];
                            quickLink: string | null;
                            bookmarked: boolean;
                            firstSync: Date;
                            lastSync: Date;
                            lastAccess: Date;
                        }[];
                        citationGroups: {
                            name: string;
                            description: string | null;
                        }[];
                    } & {
                        id: string;
                        BibId: number | null;
                        OwnWork: boolean;
                        ColleaguesWork: boolean;
                        read: boolean;
                        htmlCitation: string | null;
                        PdfPath: string | null;
                        address: string | null;
                        annote: string | null;
                        author: string | null;
                        booktitle: string | null;
                        chapter: string | null;
                        crossref: string | null;
                        doi: string | null;
                        edition: string | null;
                        editor: string | null;
                        email: string | null;
                        howpublished: string | null;
                        institution: string | null;
                        journal: string | null;
                        month: string | null;
                        note: string | null;
                        number: string | null;
                        organization: string | null;
                        pages: string | null;
                        publisher: string | null;
                        school: string | null;
                        series: string | null;
                        title: string | null;
                        volume: string | null;
                        type: string | null;
                        year: string | null;
                        numpages: string | null;
                        url: string | null;
                        issue: string | null;
                        issn: string | null;
                        abstract: string | null;
                        urldate: string | null;
                        keywords: string | null;
                        copyright: string | null;
                        createdAt: Date;
                        lastAccess: Date;
                    })[];
                } & {
                    name: string;
                    description: string | null;
                    createdAt: Date;
                    lastUpdate: Date;
                }) | null>;
            }>;
            universalNotes: CreateRouterInner<import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>, {
                getSummaryOfAllNotes: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, {
                    summary: string | null;
                    title: string;
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    subjects: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    _count: {
                        topics: number;
                        subjects: number;
                        tags: number;
                        citations: number;
                        sequentialList: number;
                        ReadingList: number;
                        equations: number;
                        definitions: number;
                        toDo: number;
                    };
                }[]>;
                getNoteIdByHref: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, number | null>;
                getFsNoteOfUnknownFormat: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    content: string;
                    format: string;
                } | undefined>;
                getQuickLinkHref: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    href: string;
                } | null>;
                getUniqueNoteTypes: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, string[]>;
                getCategoryNoteCount: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, number>;
                getUserOverview: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, {
                    overallFirstSync: Date | undefined;
                    totalNotes: {
                        mdx: number;
                        notebook: number;
                        total: number;
                    };
                    uniqueNoteTypes: string[];
                    lastAccessNotes: ({
                        type: "mdxNote";
                        id: number;
                        href: string;
                        title: string;
                        noteType: string;
                        lastAccess: Date;
                        firstSync: Date;
                        lastSync: Date;
                    } | {
                        type: "notebook";
                        id: number;
                        href: string;
                        title: string;
                        lastAccess: Date;
                        firstSync: Date;
                        lastSync: Date;
                    })[];
                }>;
            }>;
            media: CreateRouterInner<import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>, {
                getImagesInDir: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        ignore?: string | string[] | null | undefined;
                        returnAs?: "absolute" | "rootRelative" | undefined;
                        includeSvg?: boolean | undefined;
                    };
                    _input_out: {
                        returnAs: "absolute" | "rootRelative";
                        includeSvg: boolean;
                        ignore?: string | string[] | null | undefined;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, any>;
                removeImageBackground: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        absolutePath: string;
                        config?: {
                            output?: "x-alpha8" | "x-rgba8" | "png" | "jpeg" | "webp" | undefined;
                            quality?: number | undefined;
                            model?: "small" | "medium" | "large" | undefined;
                        } | undefined;
                    };
                    _input_out: {
                        absolutePath: string;
                        config: {
                            output: "x-alpha8" | "x-rgba8" | "png" | "jpeg" | "webp";
                            quality: number;
                            model: "small" | "medium" | "large";
                        };
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, string>;
                getRandomBackgroundSettings: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, {
                    path?: string | undefined;
                    createdAt?: Date | undefined;
                    landingImageAlign?: import(".prisma/client").$Enums.ImageAlignment | undefined;
                    lockedLandingImage?: string | null | undefined;
                }>;
                deleteRandomImage: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        path: string;
                    };
                    _input_out: {
                        path: string;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    path: string;
                    createdAt: Date;
                }>;
                updateRandomImageBackground: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        path: string;
                    };
                    _input_out: {
                        path: string;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    path: string;
                    createdAt: Date;
                }>;
            }>;
            qa: CreateRouterInner<import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>, {
                saveQA: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        question: string;
                        answer: string;
                        id?: string | undefined;
                        tags?: string[] | undefined;
                        topics?: string[] | undefined;
                        subjects?: string[] | undefined;
                        description?: string | undefined;
                    };
                    _input_out: {
                        tags: string[];
                        topics: string[];
                        subjects: string[];
                        question: string;
                        answer: string;
                        id?: string | undefined;
                        description?: string | undefined;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: string;
                    question: string;
                    answer: string;
                    description: string | null;
                    secondaryLabel: string | null;
                    correctCount: number;
                    inCorrectCount: number;
                }>;
                getSpecificQA: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    topics: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    subjects: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                } & {
                    id: string;
                    question: string;
                    answer: string;
                    description: string | null;
                    secondaryLabel: string | null;
                    correctCount: number;
                    inCorrectCount: number;
                }) | null>;
                addQAResult: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        success: boolean;
                        id: string;
                    };
                    _input_out: {
                        success: boolean;
                        id: string;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: string;
                    question: string;
                    answer: string;
                    description: string | null;
                    secondaryLabel: string | null;
                    correctCount: number;
                    inCorrectCount: number;
                } | undefined>;
                getQaAutocompleteOptions: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, string[]>;
                getQaExam: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        tags?: string[] | undefined;
                        topics?: string[] | undefined;
                        subjects?: string[] | undefined;
                    };
                    _input_out: {
                        tags?: string[] | undefined;
                        topics?: string[] | undefined;
                        subjects?: string[] | undefined;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    id: string;
                    question: string;
                    answer: string;
                    description: string | null;
                    secondaryLabel: string | null;
                    correctCount: number;
                    inCorrectCount: number;
                } & {
                    randomId: number;
                })[]>;
            }>;
            whiteboard: CreateRouterInner<import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>, {
                save: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        id: string;
                        data: string;
                    };
                    _input_out: {
                        id: string;
                        data: string;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: string;
                    data: Buffer;
                }>;
                getById: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        id: string;
                    };
                    _input_out: {
                        id: string;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: string;
                    data: Buffer;
                } | null>;
                deleteById: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        id: string;
                    };
                    _input_out: {
                        id: string;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: string;
                    data: Buffer;
                }>;
            }>;
            bibliography: CreateRouterInner<import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>, {
                getPrismaBib: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, ({
                    entries: ({
                        tags: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                        MdxNotes: {
                            id: number;
                            href: string;
                            title: string;
                        }[];
                        citationGroups: {
                            name: string;
                            description: string | null;
                        }[];
                    } & {
                        id: string;
                        BibId: number | null;
                        OwnWork: boolean;
                        ColleaguesWork: boolean;
                        read: boolean;
                        htmlCitation: string | null;
                        PdfPath: string | null;
                        address: string | null;
                        annote: string | null;
                        author: string | null;
                        booktitle: string | null;
                        chapter: string | null;
                        crossref: string | null;
                        doi: string | null;
                        edition: string | null;
                        editor: string | null;
                        email: string | null;
                        howpublished: string | null;
                        institution: string | null;
                        journal: string | null;
                        month: string | null;
                        note: string | null;
                        number: string | null;
                        organization: string | null;
                        pages: string | null;
                        publisher: string | null;
                        school: string | null;
                        series: string | null;
                        title: string | null;
                        volume: string | null;
                        type: string | null;
                        year: string | null;
                        numpages: string | null;
                        url: string | null;
                        issue: string | null;
                        issn: string | null;
                        abstract: string | null;
                        urldate: string | null;
                        keywords: string | null;
                        copyright: string | null;
                        createdAt: Date;
                        lastAccess: Date;
                    })[];
                } & {
                    id: number;
                    filename: string;
                    firstSync: Date;
                    lastSync: Date;
                }) | null>;
                syncBib: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        bibId?: number | undefined;
                    };
                    _input_out: {
                        bibId: number;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    entries: ({
                        tags: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                        MdxNotes: {
                            id: number;
                            href: string;
                            title: string;
                        }[];
                        citationGroups: {
                            name: string;
                            description: string | null;
                        }[];
                    } & {
                        id: string;
                        BibId: number | null;
                        OwnWork: boolean;
                        ColleaguesWork: boolean;
                        read: boolean;
                        htmlCitation: string | null;
                        PdfPath: string | null;
                        address: string | null;
                        annote: string | null;
                        author: string | null;
                        booktitle: string | null;
                        chapter: string | null;
                        crossref: string | null;
                        doi: string | null;
                        edition: string | null;
                        editor: string | null;
                        email: string | null;
                        howpublished: string | null;
                        institution: string | null;
                        journal: string | null;
                        month: string | null;
                        note: string | null;
                        number: string | null;
                        organization: string | null;
                        pages: string | null;
                        publisher: string | null;
                        school: string | null;
                        series: string | null;
                        title: string | null;
                        volume: string | null;
                        type: string | null;
                        year: string | null;
                        numpages: string | null;
                        url: string | null;
                        issue: string | null;
                        issn: string | null;
                        abstract: string | null;
                        urldate: string | null;
                        keywords: string | null;
                        copyright: string | null;
                        createdAt: Date;
                        lastAccess: Date;
                    })[];
                } & {
                    id: number;
                    filename: string;
                    firstSync: Date;
                    lastSync: Date;
                }) | {
                    errorKey: "bibPathFileDoesNotExist";
                }>;
                syncBibServerSide: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: number | undefined;
                    _input_out: number | undefined;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    entries: ({
                        tags: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                        MdxNotes: {
                            id: number;
                            href: string;
                            title: string;
                        }[];
                        citationGroups: {
                            name: string;
                            description: string | null;
                        }[];
                    } & {
                        id: string;
                        BibId: number | null;
                        OwnWork: boolean;
                        ColleaguesWork: boolean;
                        read: boolean;
                        htmlCitation: string | null;
                        PdfPath: string | null;
                        address: string | null;
                        annote: string | null;
                        author: string | null;
                        booktitle: string | null;
                        chapter: string | null;
                        crossref: string | null;
                        doi: string | null;
                        edition: string | null;
                        editor: string | null;
                        email: string | null;
                        howpublished: string | null;
                        institution: string | null;
                        journal: string | null;
                        month: string | null;
                        note: string | null;
                        number: string | null;
                        organization: string | null;
                        pages: string | null;
                        publisher: string | null;
                        school: string | null;
                        series: string | null;
                        title: string | null;
                        volume: string | null;
                        type: string | null;
                        year: string | null;
                        numpages: string | null;
                        url: string | null;
                        issue: string | null;
                        issn: string | null;
                        abstract: string | null;
                        urldate: string | null;
                        keywords: string | null;
                        copyright: string | null;
                        createdAt: Date;
                        lastAccess: Date;
                    })[];
                } & {
                    id: number;
                    filename: string;
                    firstSync: Date;
                    lastSync: Date;
                }) | {
                    errorKey: "bibPathFileDoesNotExist";
                }>;
                readBibFromFileSystem: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _ctx_out: object;
                    _input_in: typeof import("@trpc/server").unsetMarker;
                    _input_out: typeof import("@trpc/server").unsetMarker;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                    _meta: object;
                }, string | undefined>;
                setBibEntryPdfPath: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        bibEntryId: string;
                        pdfPath: string | null;
                    };
                    _input_out: {
                        bibEntryId: string;
                        pdfPath: string | null;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                }>;
                getBib: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: number;
                    _input_out: number;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    entries: ({
                        tags: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                        readingList: {
                            name: string;
                            description: string | null;
                            createdAt: Date;
                            lastUpdate: Date;
                        }[];
                        MdxNotes: ({
                            tags: {
                                value: string;
                                kanbanId: number | null;
                                createdAt: Date;
                                lastAccess: Date;
                            }[];
                            topics: {
                                value: string;
                                kanbanId: number | null;
                                createdAt: Date;
                                lastAccess: Date;
                            }[];
                            subjects: {
                                value: string;
                                kanbanId: number | null;
                                createdAt: Date;
                                lastAccess: Date;
                            }[];
                        } & {
                            id: number;
                            isProtected: boolean | null;
                            dietSummaryKey: string | null;
                            title: string;
                            latexTitle: string | null;
                            rootRelativePath: string;
                            noteType: string;
                            content: string;
                            formatted: string | null;
                            summary: string | null;
                            citationsListOrder: string[];
                            importantValues: number[];
                            imageSrc: string | null;
                            href: string;
                            sequentialKey: string | null;
                            sequentialIndex: number | null;
                            floatImages: boolean;
                            remoteUrl: string | null;
                            trackRemote: boolean;
                            outgoingQuickLinks: string[];
                            quickLink: string | null;
                            bookmarked: boolean;
                            firstSync: Date;
                            lastSync: Date;
                            lastAccess: Date;
                        })[];
                        citationGroups: {
                            name: string;
                            description: string | null;
                        }[];
                    } & {
                        id: string;
                        BibId: number | null;
                        OwnWork: boolean;
                        ColleaguesWork: boolean;
                        read: boolean;
                        htmlCitation: string | null;
                        PdfPath: string | null;
                        address: string | null;
                        annote: string | null;
                        author: string | null;
                        booktitle: string | null;
                        chapter: string | null;
                        crossref: string | null;
                        doi: string | null;
                        edition: string | null;
                        editor: string | null;
                        email: string | null;
                        howpublished: string | null;
                        institution: string | null;
                        journal: string | null;
                        month: string | null;
                        note: string | null;
                        number: string | null;
                        organization: string | null;
                        pages: string | null;
                        publisher: string | null;
                        school: string | null;
                        series: string | null;
                        title: string | null;
                        volume: string | null;
                        type: string | null;
                        year: string | null;
                        numpages: string | null;
                        url: string | null;
                        issue: string | null;
                        issn: string | null;
                        abstract: string | null;
                        urldate: string | null;
                        keywords: string | null;
                        copyright: string | null;
                        createdAt: Date;
                        lastAccess: Date;
                    })[];
                } & {
                    id: number;
                    filename: string;
                    firstSync: Date;
                    lastSync: Date;
                }) | null>;
                getBibCitation: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string[];
                    _input_out: string[];
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: string;
                    type: string | null;
                    htmlCitation: string | null;
                }[]>;
                getBibEntry: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                    readingList: ({
                        bibEntries: {
                            id: string;
                            title: string | null;
                            createdAt: Date;
                        }[];
                    } & {
                        name: string;
                        description: string | null;
                        createdAt: Date;
                        lastUpdate: Date;
                    })[];
                    MdxNotes: ({
                        tags: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                        topics: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                        subjects: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                        citations: {
                            id: string;
                            BibId: number | null;
                            OwnWork: boolean;
                            ColleaguesWork: boolean;
                            read: boolean;
                            htmlCitation: string | null;
                            PdfPath: string | null;
                            address: string | null;
                            annote: string | null;
                            author: string | null;
                            booktitle: string | null;
                            chapter: string | null;
                            crossref: string | null;
                            doi: string | null;
                            edition: string | null;
                            editor: string | null;
                            email: string | null;
                            howpublished: string | null;
                            institution: string | null;
                            journal: string | null;
                            month: string | null;
                            note: string | null;
                            number: string | null;
                            organization: string | null;
                            pages: string | null;
                            publisher: string | null;
                            school: string | null;
                            series: string | null;
                            title: string | null;
                            volume: string | null;
                            type: string | null;
                            year: string | null;
                            numpages: string | null;
                            url: string | null;
                            issue: string | null;
                            issn: string | null;
                            abstract: string | null;
                            urldate: string | null;
                            keywords: string | null;
                            copyright: string | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                    } & {
                        id: number;
                        isProtected: boolean | null;
                        dietSummaryKey: string | null;
                        title: string;
                        latexTitle: string | null;
                        rootRelativePath: string;
                        noteType: string;
                        content: string;
                        formatted: string | null;
                        summary: string | null;
                        citationsListOrder: string[];
                        importantValues: number[];
                        imageSrc: string | null;
                        href: string;
                        sequentialKey: string | null;
                        sequentialIndex: number | null;
                        floatImages: boolean;
                        remoteUrl: string | null;
                        trackRemote: boolean;
                        outgoingQuickLinks: string[];
                        quickLink: string | null;
                        bookmarked: boolean;
                        firstSync: Date;
                        lastSync: Date;
                        lastAccess: Date;
                    })[];
                    citationGroups: ({
                        entries: {
                            id: string;
                            BibId: number | null;
                            OwnWork: boolean;
                            ColleaguesWork: boolean;
                            read: boolean;
                            htmlCitation: string | null;
                            PdfPath: string | null;
                            address: string | null;
                            annote: string | null;
                            author: string | null;
                            booktitle: string | null;
                            chapter: string | null;
                            crossref: string | null;
                            doi: string | null;
                            edition: string | null;
                            editor: string | null;
                            email: string | null;
                            howpublished: string | null;
                            institution: string | null;
                            journal: string | null;
                            month: string | null;
                            note: string | null;
                            number: string | null;
                            organization: string | null;
                            pages: string | null;
                            publisher: string | null;
                            school: string | null;
                            series: string | null;
                            title: string | null;
                            volume: string | null;
                            type: string | null;
                            year: string | null;
                            numpages: string | null;
                            url: string | null;
                            issue: string | null;
                            issn: string | null;
                            abstract: string | null;
                            urldate: string | null;
                            keywords: string | null;
                            copyright: string | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                    } & {
                        name: string;
                        description: string | null;
                    })[];
                } & {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                }) | null>;
                addBibItemTag: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        tag: string;
                        bibItemId: string;
                    };
                    _input_out: {
                        tag: string;
                        bibItemId: string;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    tags: {
                        value: string;
                        kanbanId: number | null;
                        createdAt: Date;
                        lastAccess: Date;
                    }[];
                } & {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                }>;
                removeBibEntryTag: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        tag: string;
                        bibEntryId: string;
                    };
                    _input_out: {
                        tag: string;
                        bibEntryId: string;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                }>;
                bibEntryUpsert: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: any;
                    _input_out: any;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, {
                    id: string;
                    BibId: number | null;
                    OwnWork: boolean;
                    ColleaguesWork: boolean;
                    read: boolean;
                    htmlCitation: string | null;
                    PdfPath: string | null;
                    address: string | null;
                    annote: string | null;
                    author: string | null;
                    booktitle: string | null;
                    chapter: string | null;
                    crossref: string | null;
                    doi: string | null;
                    edition: string | null;
                    editor: string | null;
                    email: string | null;
                    howpublished: string | null;
                    institution: string | null;
                    journal: string | null;
                    month: string | null;
                    note: string | null;
                    number: string | null;
                    organization: string | null;
                    pages: string | null;
                    publisher: string | null;
                    school: string | null;
                    series: string | null;
                    title: string | null;
                    volume: string | null;
                    type: string | null;
                    year: string | null;
                    numpages: string | null;
                    url: string | null;
                    issue: string | null;
                    issn: string | null;
                    abstract: string | null;
                    urldate: string | null;
                    keywords: string | null;
                    copyright: string | null;
                    createdAt: Date;
                    lastAccess: Date;
                }>;
                bibFilename: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: number | undefined;
                    _input_out: number | undefined;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, string | {
                    filename: string;
                } | undefined>;
                getCitationGroup: import("@trpc/server").BuildProcedure<"query", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: string;
                    _input_out: string;
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, ({
                    entries: ({
                        tags: {
                            value: string;
                            kanbanId: number | null;
                            createdAt: Date;
                            lastAccess: Date;
                        }[];
                        MdxNotes: {
                            id: number;
                            summary: string | null;
                            title: string;
                        }[];
                    } & {
                        id: string;
                        BibId: number | null;
                        OwnWork: boolean;
                        ColleaguesWork: boolean;
                        read: boolean;
                        htmlCitation: string | null;
                        PdfPath: string | null;
                        address: string | null;
                        annote: string | null;
                        author: string | null;
                        booktitle: string | null;
                        chapter: string | null;
                        crossref: string | null;
                        doi: string | null;
                        edition: string | null;
                        editor: string | null;
                        email: string | null;
                        howpublished: string | null;
                        institution: string | null;
                        journal: string | null;
                        month: string | null;
                        note: string | null;
                        number: string | null;
                        organization: string | null;
                        pages: string | null;
                        publisher: string | null;
                        school: string | null;
                        series: string | null;
                        title: string | null;
                        volume: string | null;
                        type: string | null;
                        year: string | null;
                        numpages: string | null;
                        url: string | null;
                        issue: string | null;
                        issn: string | null;
                        abstract: string | null;
                        urldate: string | null;
                        keywords: string | null;
                        copyright: string | null;
                        createdAt: Date;
                        lastAccess: Date;
                    })[];
                } & {
                    name: string;
                    description: string | null;
                }) | null>;
            }>;
            beta: CreateRouterInner<import("@trpc/server").RootConfig<{
                ctx: object;
                meta: object;
                errorShape: import("@trpc/server").DefaultErrorShape;
                transformer: import("@trpc/server").DefaultDataTransformer;
            }>, {
                parseMdxString: import("@trpc/server").BuildProcedure<"mutation", {
                    _config: import("@trpc/server").RootConfig<{
                        ctx: object;
                        meta: object;
                        errorShape: import("@trpc/server").DefaultErrorShape;
                        transformer: import("@trpc/server").DefaultDataTransformer;
                    }>;
                    _meta: object;
                    _ctx_out: object;
                    _input_in: {
                        content: string;
                    };
                    _input_out: {
                        content: string;
                    };
                    _output_in: typeof import("@trpc/server").unsetMarker;
                    _output_out: typeof import("@trpc/server").unsetMarker;
                }, string>;
            }>;
        } & T>>;
    };
}
declare module "trpc/extendServerClient" {
    import type { CreateRouterInner, ProcedureRouterRecord } from "@trpc/server";
    import type { trpcRoot, UlldRouterType } from "trpc/trpc";
    import { router } from "trpc/trpc";
    import { _appRouter } from "trpc/main";
    export type AcceptedRouterTypes = ProcedureRouterRecord | Record<string, CreateRouterInner<typeof trpcRoot._config, any>> | Record<string, ReturnType<UlldRouterType>>;
    type MergedRouters<T extends AcceptedRouterTypes> = T & typeof _appRouter;
    type ExtendedAppRouter<T extends AcceptedRouterTypes> = ReturnType<typeof router<MergedRouters<T>>>;
    interface ExtendedTrpcRouter<T extends AcceptedRouterTypes> {
        appRouter: ExtendedAppRouter<T>;
        serverClient: any;
    }
    export const extendServerClient: <T extends AcceptedRouterTypes>(routerExtension: T) => ExtendedTrpcRouter<T>;
}
declare module "trpcInternalMethods/filesystem/getPathnameFromHeaders" {
    export const getPathnameFromHeaders: () => string | null;
}
declare module "trpcInternalMethods/maintenance/types" {
    export type ValidityResponse = "keep" | "delete";
    export type TagResponseType = {
        value: string;
        practiceExam: {
            id: number;
        }[];
        toDo: {
            id: number;
        }[];
        QAPair: {
            id: string;
        }[];
        bibEntries: {
            id: string;
        }[];
        equations: {
            id: number;
        }[];
        todoList: {
            id: number;
        }[];
    }[];
    export type SubjectResponseType = {
        value: string;
        practiceExam: {
            id: number;
        }[];
        toDo: {
            id: number;
        }[];
        QaPair: {
            id: string;
        }[];
        todoList: {
            id: number;
        }[];
    }[];
    export type TopicResponseType = {
        practiceExam: {
            id: number;
        }[];
        toDo: {
            id: number;
        }[];
        QAPair: {
            id: string;
        }[];
        name: string;
        todoList: {
            id: number;
        }[];
    }[];
}
declare module "trpcInternalMethods/maintenance/databaseCleanValidityCheck" {
    import { TagResponseType, ValidityResponse, SubjectResponseType, TopicResponseType } from "trpcInternalMethods/maintenance/types";
    export const databaseCleanValidityCheck: {
        tagsShouldBeDeleted: (t: TagResponseType[number]) => ValidityResponse;
        subjectsShouldBeDeleted: (t: SubjectResponseType[number]) => ValidityResponse;
        topicsShouldBeDeleted: (t: TopicResponseType[number]) => ValidityResponse;
    };
}
declare module "trpcInternalMethods/maintenance/cleanDatabase" {
    import { PrismaClient } from "@ulld/database";
    export const cleanDatabase: (prisma: PrismaClient) => Promise<void>;
}
declare module "trpcInternalMethods/syncing/config/syncConfig" {
    import { ParsedAppConfig } from '@ulld/configschema/types';
    export const syncConfig: (_config?: ParsedAppConfig) => Promise<void>;
}
declare module "trpcInternalMethods/syncing/mdx/fileOutputHandling/componentMapOutput" {
    import { getComponentMap } from "@ulld/component-map/server";
    export interface OutputComponentMapIdsProps {
        mdxContent: string;
        opts: Parameters<typeof getComponentMap>[1];
        additionalComponents: Parameters<typeof getComponentMap>[2];
    }
    export interface ComponentMapLabels {
        /** Strings that coincide with the label field for each component in the mdx note's content. */
        componentLabels: string[];
    }
    export const outputComponentMapIds: (props: OutputComponentMapIdsProps) => ComponentMapLabels;
}
declare module "trpcInternalMethods/syncing/mdx/saveMdxNote" {
    import { prisma } from "@ulld/database/db";
    import type { AutoSettingWithRegex } from "../../../trpc/types";
    import type { MdxNote } from "classes/prismaMdxRelations/MdxNote";
    type SaveMdxReturnType = ReturnType<typeof prisma.mdxNote.create>;
    export const saveMdxNote: (note: MdxNote, autoSettings: AutoSettingWithRegex[], config: Parameters<InstanceType<typeof MdxNote>["createArgs"]>[1]) => Promise<SaveMdxReturnType | undefined>;
}
declare module "trpcInternalMethods/syncing/mdx/updateMdx" {
    import { prisma } from "@ulld/database/db";
    import type { MdxNote } from "classes/prismaMdxRelations/MdxNote";
    import type { AutoSettingWithRegex } from "../../../trpc/types";
    type UpdateMdxNoteReturnType = ReturnType<typeof prisma.mdxNote.upsert>;
    export const updateMdxNote: (note: MdxNote, autoSettings: AutoSettingWithRegex[], config: Parameters<InstanceType<typeof MdxNote>["upsertArgs"]>[1]) => Promise<UpdateMdxNoteReturnType | undefined>;
}
declare module "trpcInternalMethods/syncing/mdx/syncMdx" {
    import type { UnifiedMdxParser } from "@ulld/schemas/types";
    import type { OnSyncOptions } from "@ulld/types";
    import type { PrismaClient } from "@ulld/database";
    import type { AppConfigSchemaOutput, MinimalParsableAppConfigOutput } from "@ulld/configschema/types";
    import type { AutoSettingWithRegex } from "../../../trpc/types";
    import { saveMdxNote } from "trpcInternalMethods/syncing/mdx/saveMdxNote";
    import { updateMdxNote } from "trpcInternalMethods/syncing/mdx/updateMdx";
    export interface SyncMdxProps {
        file: string;
        rootRelativePath: string;
        bookmarked: boolean;
        autoSettings: AutoSettingWithRegex[];
        opts: Partial<OnSyncOptions>;
        appConfig: MinimalParsableAppConfigOutput;
        unifiedMdxParser: UnifiedMdxParser;
        prisma: PrismaClient;
        docTypeData: AppConfigSchemaOutput["noteTypes"][number];
    }
    export const syncMdx: ({ file, autoSettings, opts, appConfig, unifiedMdxParser, prisma, bookmarked, rootRelativePath, docTypeData, }: SyncMdxProps) => Promise<ReturnType<typeof updateMdxNote | typeof saveMdxNote>>;
}
declare module "trpcInternalMethods/syncing/mdx/getParsedMdxFileContent" {
    import type { AppConfigSchemaDeepPartialOutput } from "@ulld/configschema/types";
    import type { WithRequired } from "@ulld/utilities/types";
    import { type ComponentMapLabels, type OutputComponentMapIdsProps } from "trpcInternalMethods/syncing/mdx/fileOutputHandling/componentMapOutput";
    import type { SyncMdxProps } from "trpcInternalMethods/syncing/mdx/syncMdx";
    import { FrontMatterType } from "@ulld/schemas/frontMatter";
    export type GetParsedMdxFileContent = Omit<SyncMdxProps, "autoSettings" | "buildData" | "prisma" | "appConfig"> & Pick<OutputComponentMapIdsProps, "additionalComponents"> & {
        outputDir: string;
        metaDataDir?: string;
        appConfig: WithRequired<AppConfigSchemaDeepPartialOutput, "fsRoot" | "noteTypes">;
    };
    export interface GeneratedMdxNoteMetaDataJson extends ComponentMapLabels {
        frontMatter: FrontMatterType;
    }
    export const getParsedMdxFileContent: ({ file, outputDir, opts, appConfig, unifiedMdxParser, bookmarked, rootRelativePath, docTypeData, metaDataDir, additionalComponents, }: GetParsedMdxFileContent) => Promise<void>;
}
declare module "trpcInternalMethods/syncing/mdx/syncDirRecursively" {
    import type { SyncMdxProps } from "trpcInternalMethods/syncing/mdx/syncMdx";
    export type UniversalMdxProps = Omit<SyncMdxProps, "file" | "dir" | "docTypeData" | "bookmarked" | "rootRelativePath">;
    export const syncDirRecursively: (props: UniversalMdxProps) => Promise<void>;
}
declare module "trpcInternalMethods/syncing/mdx/writeParsedDirToFilesystem" {
    import { type GetParsedMdxFileContent } from "trpcInternalMethods/syncing/mdx/getParsedMdxFileContent";
    export type WriteParsedDirProps = Omit<GetParsedMdxFileContent, "rootRelativePath" | "bookmarked" | "docTypeData" | "file"> & {
        docTypeData?: GetParsedMdxFileContent["docTypeData"];
    };
    export const writeParsedDirToFileSystem: (props: WriteParsedDirProps) => Promise<void>;
}
declare module "ulld_root/middleware" {
    import { NextRequest, NextResponse } from "next/server";
    export function middleware(req: NextRequest): NextResponse<unknown>;
}
declare module "utils/applyRecursiveParser" {
    import { UnifiedMdxParserParams } from "individualTypesForDocumentation/parser/unifiedMdxParserParams";
    import { MdxParserReturnType, UnifiedMdxParser } from "types";
    export const applyRecursiveMdxParsers: <T extends object = {}>(data: UnifiedMdxParserParams, parsers: UnifiedMdxParser[]) => Promise<MdxParserReturnType<T>>;
}
declare module "utils/seedIfNotExists" {
    import { AppConfigSchemaOutput } from "@ulld/configschema/types";
    export const seedTargetAppIfNotExists: (appConfig: AppConfigSchemaOutput) => Promise<void>;
}
declare module "actions/universal/appendStyleSheet" {
    interface AppendStyleSheetProps {
        content: string | undefined | null;
        stylesId?: string;
    }
    export const AppendStyleSheet: {
        ({ content, stylesId }: AppendStyleSheetProps): null;
        displayName: string;
    };
}
declare module "parsers/mdx/main" {
    import { UnifiedMdxParser } from "types";
    const coreMdxParser: UnifiedMdxParser;
    export default coreMdxParser;
}
declare module "trpc/TrpcProvider" {
    import React from 'react';
    interface TrpcProviderProps {
        children: React.ReactNode;
    }
    const TrpcProvider: {
        ({ children }: TrpcProviderProps): React.JSX.Element;
        displayName: string;
    };
    export default TrpcProvider;
}
//# sourceMappingURL=unifiedTypes.d.ts.map