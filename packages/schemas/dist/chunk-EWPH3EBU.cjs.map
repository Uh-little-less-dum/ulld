{"version":3,"sources":["../src/database/inputTypeSchemas/NestedStringFilterSchema.ts"],"names":[],"mappings":";AAEA,SAAS,SAAS;AAEX,IAAM,2BAAiE,EAAE,OAAO;AAAA,EACrF,QAAQ,EAAE,OAAO,EAAE,SAAS;AAAA,EAC5B,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,SAAS;AAAA,EAChC,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,SAAS;AAAA,EACnC,IAAI,EAAE,OAAO,EAAE,SAAS;AAAA,EACxB,KAAK,EAAE,OAAO,EAAE,SAAS;AAAA,EACzB,IAAI,EAAE,OAAO,EAAE,SAAS;AAAA,EACxB,KAAK,EAAE,OAAO,EAAE,SAAS;AAAA,EACzB,UAAU,EAAE,OAAO,EAAE,SAAS;AAAA,EAC9B,YAAY,EAAE,OAAO,EAAE,SAAS;AAAA,EAChC,UAAU,EAAE,OAAO,EAAE,SAAS;AAAA,EAC9B,QAAQ,EAAE,OAAO,EAAE,SAAS;AAAA,EAC5B,KAAK,EAAE,MAAM,CAAE,EAAE,OAAO,GAAE,EAAE,KAAK,MAAM,wBAAwB,CAAE,CAAC,EAAE,SAAS;AAC/E,CAAC,EAAE,OAAO;AAEV,IAAO,mCAAQ","sourcesContent":["import type { Prisma } from '@prisma/client';\n\nimport { z } from 'zod';\n\nexport const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z.object({\n  equals: z.string().optional(),\n  in: z.string().array().optional(),\n  notIn: z.string().array().optional(),\n  lt: z.string().optional(),\n  lte: z.string().optional(),\n  gt: z.string().optional(),\n  gte: z.string().optional(),\n  contains: z.string().optional(),\n  startsWith: z.string().optional(),\n  endsWith: z.string().optional(),\n  search: z.string().optional(),\n  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),\n}).strict();\n\nexport default NestedStringFilterSchema;\n"]}