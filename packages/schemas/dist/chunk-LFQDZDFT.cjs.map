{"version":3,"sources":["../src/database/modelSchema/BibSchema.ts","../src/database/modelSchema/BibEntrySchema.ts","../src/database/modelSchema/CitationsGroupSchema.ts","../src/database/modelSchema/TagSchema.ts","../src/database/modelSchema/MdxNoteSchema.ts","../src/database/modelSchema/TopicSchema.ts","../src/database/modelSchema/IpynbSchema.ts","../src/database/modelSchema/SubjectSchema.ts","../src/database/modelSchema/QAPairSchema.ts","../src/database/modelSchema/PracticeExamSchema.ts","../src/database/modelSchema/KanbanSchema.ts","../src/database/modelSchema/KanBanListSchema.ts","../src/database/modelSchema/KanBanCardSchema.ts","../src/database/modelSchema/ToDoListSchema.ts","../src/database/modelSchema/ToDoSchema.ts","../src/database/modelSchema/EquationSchema.ts","../src/database/modelSchema/RelatedValuesSchema.ts","../src/database/modelSchema/SequentialNoteListSchema.ts","../src/database/modelSchema/ReadingListSchema.ts","../src/database/modelSchema/DefinitionSchema.ts"],"names":["z"],"mappings":"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","sourcesContent":["import { z } from 'zod';\nimport type { BibEntryWithRelations } from './BibEntrySchema'\nimport type { BibEntryPartialWithRelations } from './BibEntrySchema'\nimport { BibEntryWithRelationsSchema } from './BibEntrySchema'\nimport { BibEntryPartialWithRelationsSchema } from './BibEntrySchema'\n\n/////////////////////////////////////////\n// BIB SCHEMA\n/////////////////////////////////////////\n\nexport const BibSchema = z.object({\n  id: z.number().int(),\n  filename: z.string(),\n  firstSync: z.coerce.date(),\n  lastSync: z.coerce.date(),\n})\n\nexport type Bib = z.infer<typeof BibSchema>\n\n/////////////////////////////////////////\n// BIB PARTIAL SCHEMA\n/////////////////////////////////////////\n\nexport const BibPartialSchema = BibSchema.partial()\n\nexport type BibPartial = z.infer<typeof BibPartialSchema>\n\n/////////////////////////////////////////\n// BIB RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type BibRelations = {\n  entries: BibEntryWithRelations[];\n};\n\nexport type BibWithRelations = z.infer<typeof BibSchema> & BibRelations\n\nexport const BibWithRelationsSchema: z.ZodType<BibWithRelations> = BibSchema.merge(z.object({\n  entries: z.lazy(() => BibEntryWithRelationsSchema).array(),\n}))\n\n/////////////////////////////////////////\n// BIB PARTIAL RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type BibPartialRelations = {\n  entries?: BibEntryPartialWithRelations[];\n};\n\nexport type BibPartialWithRelations = z.infer<typeof BibPartialSchema> & BibPartialRelations\n\nexport const BibPartialWithRelationsSchema: z.ZodType<BibPartialWithRelations> = BibPartialSchema.merge(z.object({\n  entries: z.lazy(() => BibEntryPartialWithRelationsSchema).array(),\n})).partial()\n\nexport type BibWithPartialRelations = z.infer<typeof BibSchema> & BibPartialRelations\n\nexport const BibWithPartialRelationsSchema: z.ZodType<BibWithPartialRelations> = BibSchema.merge(z.object({\n  entries: z.lazy(() => BibEntryPartialWithRelationsSchema).array(),\n}).partial())\n\nexport default BibSchema;\n","import { z } from 'zod';\nimport type { BibWithRelations } from './BibSchema'\nimport type { BibPartialWithRelations } from './BibSchema'\nimport type { CitationsGroupWithRelations } from './CitationsGroupSchema'\nimport type { CitationsGroupPartialWithRelations } from './CitationsGroupSchema'\nimport type { TagWithRelations } from './TagSchema'\nimport type { TagPartialWithRelations } from './TagSchema'\nimport type { TopicWithRelations } from './TopicSchema'\nimport type { TopicPartialWithRelations } from './TopicSchema'\nimport type { SubjectWithRelations } from './SubjectSchema'\nimport type { SubjectPartialWithRelations } from './SubjectSchema'\nimport type { MdxNoteWithRelations } from './MdxNoteSchema'\nimport type { MdxNotePartialWithRelations } from './MdxNoteSchema'\nimport type { IpynbWithRelations } from './IpynbSchema'\nimport type { IpynbPartialWithRelations } from './IpynbSchema'\nimport type { ReadingListWithRelations } from './ReadingListSchema'\nimport type { ReadingListPartialWithRelations } from './ReadingListSchema'\nimport { BibWithRelationsSchema } from './BibSchema'\nimport { BibPartialWithRelationsSchema } from './BibSchema'\nimport { CitationsGroupWithRelationsSchema } from './CitationsGroupSchema'\nimport { CitationsGroupPartialWithRelationsSchema } from './CitationsGroupSchema'\nimport { TagWithRelationsSchema } from './TagSchema'\nimport { TagPartialWithRelationsSchema } from './TagSchema'\nimport { TopicWithRelationsSchema } from './TopicSchema'\nimport { TopicPartialWithRelationsSchema } from './TopicSchema'\nimport { SubjectWithRelationsSchema } from './SubjectSchema'\nimport { SubjectPartialWithRelationsSchema } from './SubjectSchema'\nimport { MdxNoteWithRelationsSchema } from './MdxNoteSchema'\nimport { MdxNotePartialWithRelationsSchema } from './MdxNoteSchema'\nimport { IpynbWithRelationsSchema } from './IpynbSchema'\nimport { IpynbPartialWithRelationsSchema } from './IpynbSchema'\nimport { ReadingListWithRelationsSchema } from './ReadingListSchema'\nimport { ReadingListPartialWithRelationsSchema } from './ReadingListSchema'\n\n/////////////////////////////////////////\n// BIB ENTRY SCHEMA\n/////////////////////////////////////////\n\nexport const BibEntrySchema = z.object({\n  id: z.string(),\n  BibId: z.number().int().nullable(),\n  OwnWork: z.boolean(),\n  ColleaguesWork: z.boolean(),\n  read: z.boolean(),\n  htmlCitation: z.string().nullable(),\n  PdfPath: z.string().nullable(),\n  address: z.string().nullable(),\n  annote: z.string().nullable(),\n  author: z.string().nullable(),\n  booktitle: z.string().nullable(),\n  chapter: z.string().nullable(),\n  crossref: z.string().nullable(),\n  doi: z.string().nullable(),\n  edition: z.string().nullable(),\n  editor: z.string().nullable(),\n  email: z.string().nullable(),\n  howpublished: z.string().nullable(),\n  institution: z.string().nullable(),\n  journal: z.string().nullable(),\n  month: z.string().nullable(),\n  note: z.string().nullable(),\n  number: z.string().nullable(),\n  organization: z.string().nullable(),\n  pages: z.string().nullable(),\n  publisher: z.string().nullable(),\n  school: z.string().nullable(),\n  series: z.string().nullable(),\n  title: z.string().nullable(),\n  volume: z.string().nullable(),\n  type: z.string().nullable(),\n  year: z.string().nullable(),\n  numpages: z.string().nullable(),\n  url: z.string().nullable(),\n  issue: z.string().nullable(),\n  issn: z.string().nullable(),\n  abstract: z.string().nullable(),\n  urldate: z.string().nullable(),\n  keywords: z.string().nullable(),\n  copyright: z.string().nullable(),\n  createdAt: z.coerce.date(),\n  lastAccess: z.coerce.date(),\n})\n\nexport type BibEntry = z.infer<typeof BibEntrySchema>\n\n/////////////////////////////////////////\n// BIB ENTRY PARTIAL SCHEMA\n/////////////////////////////////////////\n\nexport const BibEntryPartialSchema = BibEntrySchema.partial()\n\nexport type BibEntryPartial = z.infer<typeof BibEntryPartialSchema>\n\n/////////////////////////////////////////\n// BIB ENTRY RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type BibEntryRelations = {\n  Bib?: BibWithRelations | null;\n  citationGroups: CitationsGroupWithRelations[];\n  tags: TagWithRelations[];\n  topics: TopicWithRelations[];\n  subjects: SubjectWithRelations[];\n  MdxNotes: MdxNoteWithRelations[];\n  ipynbNotes: IpynbWithRelations[];\n  readingList: ReadingListWithRelations[];\n};\n\nexport type BibEntryWithRelations = z.infer<typeof BibEntrySchema> & BibEntryRelations\n\nexport const BibEntryWithRelationsSchema: z.ZodType<BibEntryWithRelations> = BibEntrySchema.merge(z.object({\n  Bib: z.lazy(() => BibWithRelationsSchema).nullable(),\n  citationGroups: z.lazy(() => CitationsGroupWithRelationsSchema).array(),\n  tags: z.lazy(() => TagWithRelationsSchema).array(),\n  topics: z.lazy(() => TopicWithRelationsSchema).array(),\n  subjects: z.lazy(() => SubjectWithRelationsSchema).array(),\n  MdxNotes: z.lazy(() => MdxNoteWithRelationsSchema).array(),\n  ipynbNotes: z.lazy(() => IpynbWithRelationsSchema).array(),\n  readingList: z.lazy(() => ReadingListWithRelationsSchema).array(),\n}))\n\n/////////////////////////////////////////\n// BIB ENTRY PARTIAL RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type BibEntryPartialRelations = {\n  Bib?: BibPartialWithRelations | null;\n  citationGroups?: CitationsGroupPartialWithRelations[];\n  tags?: TagPartialWithRelations[];\n  topics?: TopicPartialWithRelations[];\n  subjects?: SubjectPartialWithRelations[];\n  MdxNotes?: MdxNotePartialWithRelations[];\n  ipynbNotes?: IpynbPartialWithRelations[];\n  readingList?: ReadingListPartialWithRelations[];\n};\n\nexport type BibEntryPartialWithRelations = z.infer<typeof BibEntryPartialSchema> & BibEntryPartialRelations\n\nexport const BibEntryPartialWithRelationsSchema: z.ZodType<BibEntryPartialWithRelations> = BibEntryPartialSchema.merge(z.object({\n  Bib: z.lazy(() => BibPartialWithRelationsSchema).nullable(),\n  citationGroups: z.lazy(() => CitationsGroupPartialWithRelationsSchema).array(),\n  tags: z.lazy(() => TagPartialWithRelationsSchema).array(),\n  topics: z.lazy(() => TopicPartialWithRelationsSchema).array(),\n  subjects: z.lazy(() => SubjectPartialWithRelationsSchema).array(),\n  MdxNotes: z.lazy(() => MdxNotePartialWithRelationsSchema).array(),\n  ipynbNotes: z.lazy(() => IpynbPartialWithRelationsSchema).array(),\n  readingList: z.lazy(() => ReadingListPartialWithRelationsSchema).array(),\n})).partial()\n\nexport type BibEntryWithPartialRelations = z.infer<typeof BibEntrySchema> & BibEntryPartialRelations\n\nexport const BibEntryWithPartialRelationsSchema: z.ZodType<BibEntryWithPartialRelations> = BibEntrySchema.merge(z.object({\n  Bib: z.lazy(() => BibPartialWithRelationsSchema).nullable(),\n  citationGroups: z.lazy(() => CitationsGroupPartialWithRelationsSchema).array(),\n  tags: z.lazy(() => TagPartialWithRelationsSchema).array(),\n  topics: z.lazy(() => TopicPartialWithRelationsSchema).array(),\n  subjects: z.lazy(() => SubjectPartialWithRelationsSchema).array(),\n  MdxNotes: z.lazy(() => MdxNotePartialWithRelationsSchema).array(),\n  ipynbNotes: z.lazy(() => IpynbPartialWithRelationsSchema).array(),\n  readingList: z.lazy(() => ReadingListPartialWithRelationsSchema).array(),\n}).partial())\n\nexport default BibEntrySchema;\n","import { z } from 'zod';\nimport type { BibEntryWithRelations } from './BibEntrySchema'\nimport type { BibEntryPartialWithRelations } from './BibEntrySchema'\nimport { BibEntryWithRelationsSchema } from './BibEntrySchema'\nimport { BibEntryPartialWithRelationsSchema } from './BibEntrySchema'\n\n/////////////////////////////////////////\n// CITATIONS GROUP SCHEMA\n/////////////////////////////////////////\n\nexport const CitationsGroupSchema = z.object({\n  name: z.string(),\n  description: z.string().nullable(),\n})\n\nexport type CitationsGroup = z.infer<typeof CitationsGroupSchema>\n\n/////////////////////////////////////////\n// CITATIONS GROUP PARTIAL SCHEMA\n/////////////////////////////////////////\n\nexport const CitationsGroupPartialSchema = CitationsGroupSchema.partial()\n\nexport type CitationsGroupPartial = z.infer<typeof CitationsGroupPartialSchema>\n\n/////////////////////////////////////////\n// CITATIONS GROUP RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type CitationsGroupRelations = {\n  entries: BibEntryWithRelations[];\n};\n\nexport type CitationsGroupWithRelations = z.infer<typeof CitationsGroupSchema> & CitationsGroupRelations\n\nexport const CitationsGroupWithRelationsSchema: z.ZodType<CitationsGroupWithRelations> = CitationsGroupSchema.merge(z.object({\n  entries: z.lazy(() => BibEntryWithRelationsSchema).array(),\n}))\n\n/////////////////////////////////////////\n// CITATIONS GROUP PARTIAL RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type CitationsGroupPartialRelations = {\n  entries?: BibEntryPartialWithRelations[];\n};\n\nexport type CitationsGroupPartialWithRelations = z.infer<typeof CitationsGroupPartialSchema> & CitationsGroupPartialRelations\n\nexport const CitationsGroupPartialWithRelationsSchema: z.ZodType<CitationsGroupPartialWithRelations> = CitationsGroupPartialSchema.merge(z.object({\n  entries: z.lazy(() => BibEntryPartialWithRelationsSchema).array(),\n})).partial()\n\nexport type CitationsGroupWithPartialRelations = z.infer<typeof CitationsGroupSchema> & CitationsGroupPartialRelations\n\nexport const CitationsGroupWithPartialRelationsSchema: z.ZodType<CitationsGroupWithPartialRelations> = CitationsGroupSchema.merge(z.object({\n  entries: z.lazy(() => BibEntryPartialWithRelationsSchema).array(),\n}).partial())\n\nexport default CitationsGroupSchema;\n","import { z } from 'zod';\nimport type { MdxNoteWithRelations } from './MdxNoteSchema'\nimport type { MdxNotePartialWithRelations } from './MdxNoteSchema'\nimport type { BibEntryWithRelations } from './BibEntrySchema'\nimport type { BibEntryPartialWithRelations } from './BibEntrySchema'\nimport type { IpynbWithRelations } from './IpynbSchema'\nimport type { IpynbPartialWithRelations } from './IpynbSchema'\nimport type { QAPairWithRelations } from './QAPairSchema'\nimport type { QAPairPartialWithRelations } from './QAPairSchema'\nimport type { PracticeExamWithRelations } from './PracticeExamSchema'\nimport type { PracticeExamPartialWithRelations } from './PracticeExamSchema'\nimport type { EquationWithRelations } from './EquationSchema'\nimport type { EquationPartialWithRelations } from './EquationSchema'\nimport type { ToDoWithRelations } from './ToDoSchema'\nimport type { ToDoPartialWithRelations } from './ToDoSchema'\nimport type { KanbanWithRelations } from './KanbanSchema'\nimport type { KanbanPartialWithRelations } from './KanbanSchema'\nimport type { ToDoListWithRelations } from './ToDoListSchema'\nimport type { ToDoListPartialWithRelations } from './ToDoListSchema'\nimport { MdxNoteWithRelationsSchema } from './MdxNoteSchema'\nimport { MdxNotePartialWithRelationsSchema } from './MdxNoteSchema'\nimport { BibEntryWithRelationsSchema } from './BibEntrySchema'\nimport { BibEntryPartialWithRelationsSchema } from './BibEntrySchema'\nimport { IpynbWithRelationsSchema } from './IpynbSchema'\nimport { IpynbPartialWithRelationsSchema } from './IpynbSchema'\nimport { QAPairWithRelationsSchema } from './QAPairSchema'\nimport { QAPairPartialWithRelationsSchema } from './QAPairSchema'\nimport { PracticeExamWithRelationsSchema } from './PracticeExamSchema'\nimport { PracticeExamPartialWithRelationsSchema } from './PracticeExamSchema'\nimport { EquationWithRelationsSchema } from './EquationSchema'\nimport { EquationPartialWithRelationsSchema } from './EquationSchema'\nimport { ToDoWithRelationsSchema } from './ToDoSchema'\nimport { ToDoPartialWithRelationsSchema } from './ToDoSchema'\nimport { KanbanWithRelationsSchema } from './KanbanSchema'\nimport { KanbanPartialWithRelationsSchema } from './KanbanSchema'\nimport { ToDoListWithRelationsSchema } from './ToDoListSchema'\nimport { ToDoListPartialWithRelationsSchema } from './ToDoListSchema'\n\n/////////////////////////////////////////\n// TAG SCHEMA\n/////////////////////////////////////////\n\nexport const TagSchema = z.object({\n  value: z.string(),\n  kanbanId: z.number().int().nullable(),\n  createdAt: z.coerce.date(),\n  lastAccess: z.coerce.date(),\n})\n\nexport type Tag = z.infer<typeof TagSchema>\n\n/////////////////////////////////////////\n// TAG PARTIAL SCHEMA\n/////////////////////////////////////////\n\nexport const TagPartialSchema = TagSchema.partial()\n\nexport type TagPartial = z.infer<typeof TagPartialSchema>\n\n/////////////////////////////////////////\n// TAG RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type TagRelations = {\n  MdxNotes: MdxNoteWithRelations[];\n  bibEntries: BibEntryWithRelations[];\n  ipynbNotes: IpynbWithRelations[];\n  QAPair: QAPairWithRelations[];\n  practiceExam: PracticeExamWithRelations[];\n  equations: EquationWithRelations[];\n  toDo: ToDoWithRelations[];\n  Kanban?: KanbanWithRelations | null;\n  todoList: ToDoListWithRelations[];\n};\n\nexport type TagWithRelations = z.infer<typeof TagSchema> & TagRelations\n\nexport const TagWithRelationsSchema: z.ZodType<TagWithRelations> = TagSchema.merge(z.object({\n  MdxNotes: z.lazy(() => MdxNoteWithRelationsSchema).array(),\n  bibEntries: z.lazy(() => BibEntryWithRelationsSchema).array(),\n  ipynbNotes: z.lazy(() => IpynbWithRelationsSchema).array(),\n  QAPair: z.lazy(() => QAPairWithRelationsSchema).array(),\n  practiceExam: z.lazy(() => PracticeExamWithRelationsSchema).array(),\n  equations: z.lazy(() => EquationWithRelationsSchema).array(),\n  toDo: z.lazy(() => ToDoWithRelationsSchema).array(),\n  Kanban: z.lazy(() => KanbanWithRelationsSchema).nullable(),\n  todoList: z.lazy(() => ToDoListWithRelationsSchema).array(),\n}))\n\n/////////////////////////////////////////\n// TAG PARTIAL RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type TagPartialRelations = {\n  MdxNotes?: MdxNotePartialWithRelations[];\n  bibEntries?: BibEntryPartialWithRelations[];\n  ipynbNotes?: IpynbPartialWithRelations[];\n  QAPair?: QAPairPartialWithRelations[];\n  practiceExam?: PracticeExamPartialWithRelations[];\n  equations?: EquationPartialWithRelations[];\n  toDo?: ToDoPartialWithRelations[];\n  Kanban?: KanbanPartialWithRelations | null;\n  todoList?: ToDoListPartialWithRelations[];\n};\n\nexport type TagPartialWithRelations = z.infer<typeof TagPartialSchema> & TagPartialRelations\n\nexport const TagPartialWithRelationsSchema: z.ZodType<TagPartialWithRelations> = TagPartialSchema.merge(z.object({\n  MdxNotes: z.lazy(() => MdxNotePartialWithRelationsSchema).array(),\n  bibEntries: z.lazy(() => BibEntryPartialWithRelationsSchema).array(),\n  ipynbNotes: z.lazy(() => IpynbPartialWithRelationsSchema).array(),\n  QAPair: z.lazy(() => QAPairPartialWithRelationsSchema).array(),\n  practiceExam: z.lazy(() => PracticeExamPartialWithRelationsSchema).array(),\n  equations: z.lazy(() => EquationPartialWithRelationsSchema).array(),\n  toDo: z.lazy(() => ToDoPartialWithRelationsSchema).array(),\n  Kanban: z.lazy(() => KanbanPartialWithRelationsSchema).nullable(),\n  todoList: z.lazy(() => ToDoListPartialWithRelationsSchema).array(),\n})).partial()\n\nexport type TagWithPartialRelations = z.infer<typeof TagSchema> & TagPartialRelations\n\nexport const TagWithPartialRelationsSchema: z.ZodType<TagWithPartialRelations> = TagSchema.merge(z.object({\n  MdxNotes: z.lazy(() => MdxNotePartialWithRelationsSchema).array(),\n  bibEntries: z.lazy(() => BibEntryPartialWithRelationsSchema).array(),\n  ipynbNotes: z.lazy(() => IpynbPartialWithRelationsSchema).array(),\n  QAPair: z.lazy(() => QAPairPartialWithRelationsSchema).array(),\n  practiceExam: z.lazy(() => PracticeExamPartialWithRelationsSchema).array(),\n  equations: z.lazy(() => EquationPartialWithRelationsSchema).array(),\n  toDo: z.lazy(() => ToDoPartialWithRelationsSchema).array(),\n  Kanban: z.lazy(() => KanbanPartialWithRelationsSchema).nullable(),\n  todoList: z.lazy(() => ToDoListPartialWithRelationsSchema).array(),\n}).partial())\n\nexport default TagSchema;\n","import { z } from 'zod';\nimport type { TopicWithRelations } from './TopicSchema'\nimport type { TopicPartialWithRelations } from './TopicSchema'\nimport type { SubjectWithRelations } from './SubjectSchema'\nimport type { SubjectPartialWithRelations } from './SubjectSchema'\nimport type { TagWithRelations } from './TagSchema'\nimport type { TagPartialWithRelations } from './TagSchema'\nimport type { BibEntryWithRelations } from './BibEntrySchema'\nimport type { BibEntryPartialWithRelations } from './BibEntrySchema'\nimport type { SequentialNoteListWithRelations } from './SequentialNoteListSchema'\nimport type { SequentialNoteListPartialWithRelations } from './SequentialNoteListSchema'\nimport type { ReadingListWithRelations } from './ReadingListSchema'\nimport type { ReadingListPartialWithRelations } from './ReadingListSchema'\nimport type { EquationWithRelations } from './EquationSchema'\nimport type { EquationPartialWithRelations } from './EquationSchema'\nimport type { DefinitionWithRelations } from './DefinitionSchema'\nimport type { DefinitionPartialWithRelations } from './DefinitionSchema'\nimport type { ToDoWithRelations } from './ToDoSchema'\nimport type { ToDoPartialWithRelations } from './ToDoSchema'\nimport { TopicWithRelationsSchema } from './TopicSchema'\nimport { TopicPartialWithRelationsSchema } from './TopicSchema'\nimport { SubjectWithRelationsSchema } from './SubjectSchema'\nimport { SubjectPartialWithRelationsSchema } from './SubjectSchema'\nimport { TagWithRelationsSchema } from './TagSchema'\nimport { TagPartialWithRelationsSchema } from './TagSchema'\nimport { BibEntryWithRelationsSchema } from './BibEntrySchema'\nimport { BibEntryPartialWithRelationsSchema } from './BibEntrySchema'\nimport { SequentialNoteListWithRelationsSchema } from './SequentialNoteListSchema'\nimport { SequentialNoteListPartialWithRelationsSchema } from './SequentialNoteListSchema'\nimport { ReadingListWithRelationsSchema } from './ReadingListSchema'\nimport { ReadingListPartialWithRelationsSchema } from './ReadingListSchema'\nimport { EquationWithRelationsSchema } from './EquationSchema'\nimport { EquationPartialWithRelationsSchema } from './EquationSchema'\nimport { DefinitionWithRelationsSchema } from './DefinitionSchema'\nimport { DefinitionPartialWithRelationsSchema } from './DefinitionSchema'\nimport { ToDoWithRelationsSchema } from './ToDoSchema'\nimport { ToDoPartialWithRelationsSchema } from './ToDoSchema'\n\n/////////////////////////////////////////\n// MDX NOTE SCHEMA\n/////////////////////////////////////////\n\nexport const MdxNoteSchema = z.object({\n  id: z.number().int(),\n  isProtected: z.boolean().nullable(),\n  dietSummaryKey: z.string().nullable(),\n  title: z.string(),\n  latexTitle: z.string().nullable(),\n  rootRelativePath: z.string(),\n  noteType: z.string(),\n  content: z.string(),\n  formatted: z.string().nullable(),\n  summary: z.string().nullable(),\n  citationsListOrder: z.string().array(),\n  importantValues: z.number().array(),\n  imageSrc: z.string().nullable(),\n  href: z.string(),\n  sequentialKey: z.string().nullable(),\n  sequentialIndex: z.number().nullable(),\n  floatImages: z.boolean(),\n  remoteUrl: z.string().nullable(),\n  trackRemote: z.boolean(),\n  outgoingQuickLinks: z.string().array(),\n  quickLink: z.string().nullable(),\n  bookmarked: z.boolean(),\n  firstSync: z.coerce.date(),\n  lastSync: z.coerce.date(),\n  lastAccess: z.coerce.date(),\n})\n\nexport type MdxNote = z.infer<typeof MdxNoteSchema>\n\n/////////////////////////////////////////\n// MDX NOTE PARTIAL SCHEMA\n/////////////////////////////////////////\n\nexport const MdxNotePartialSchema = MdxNoteSchema.partial()\n\nexport type MdxNotePartial = z.infer<typeof MdxNotePartialSchema>\n\n/////////////////////////////////////////\n// MDX NOTE RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type MdxNoteRelations = {\n  topics: TopicWithRelations[];\n  subjects: SubjectWithRelations[];\n  tags: TagWithRelations[];\n  citations: BibEntryWithRelations[];\n  sequentialList?: SequentialNoteListWithRelations | null;\n  ReadingList: ReadingListWithRelations[];\n  equations: EquationWithRelations[];\n  definitions: DefinitionWithRelations[];\n  toDo: ToDoWithRelations[];\n};\n\nexport type MdxNoteWithRelations = z.infer<typeof MdxNoteSchema> & MdxNoteRelations\n\nexport const MdxNoteWithRelationsSchema: z.ZodType<MdxNoteWithRelations> = MdxNoteSchema.merge(z.object({\n  topics: z.lazy(() => TopicWithRelationsSchema).array(),\n  subjects: z.lazy(() => SubjectWithRelationsSchema).array(),\n  tags: z.lazy(() => TagWithRelationsSchema).array(),\n  citations: z.lazy(() => BibEntryWithRelationsSchema).array(),\n  sequentialList: z.lazy(() => SequentialNoteListWithRelationsSchema).nullable(),\n  ReadingList: z.lazy(() => ReadingListWithRelationsSchema).array(),\n  equations: z.lazy(() => EquationWithRelationsSchema).array(),\n  definitions: z.lazy(() => DefinitionWithRelationsSchema).array(),\n  toDo: z.lazy(() => ToDoWithRelationsSchema).array(),\n}))\n\n/////////////////////////////////////////\n// MDX NOTE PARTIAL RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type MdxNotePartialRelations = {\n  topics?: TopicPartialWithRelations[];\n  subjects?: SubjectPartialWithRelations[];\n  tags?: TagPartialWithRelations[];\n  citations?: BibEntryPartialWithRelations[];\n  sequentialList?: SequentialNoteListPartialWithRelations | null;\n  ReadingList?: ReadingListPartialWithRelations[];\n  equations?: EquationPartialWithRelations[];\n  definitions?: DefinitionPartialWithRelations[];\n  toDo?: ToDoPartialWithRelations[];\n};\n\nexport type MdxNotePartialWithRelations = z.infer<typeof MdxNotePartialSchema> & MdxNotePartialRelations\n\nexport const MdxNotePartialWithRelationsSchema: z.ZodType<MdxNotePartialWithRelations> = MdxNotePartialSchema.merge(z.object({\n  topics: z.lazy(() => TopicPartialWithRelationsSchema).array(),\n  subjects: z.lazy(() => SubjectPartialWithRelationsSchema).array(),\n  tags: z.lazy(() => TagPartialWithRelationsSchema).array(),\n  citations: z.lazy(() => BibEntryPartialWithRelationsSchema).array(),\n  sequentialList: z.lazy(() => SequentialNoteListPartialWithRelationsSchema).nullable(),\n  ReadingList: z.lazy(() => ReadingListPartialWithRelationsSchema).array(),\n  equations: z.lazy(() => EquationPartialWithRelationsSchema).array(),\n  definitions: z.lazy(() => DefinitionPartialWithRelationsSchema).array(),\n  toDo: z.lazy(() => ToDoPartialWithRelationsSchema).array(),\n})).partial()\n\nexport type MdxNoteWithPartialRelations = z.infer<typeof MdxNoteSchema> & MdxNotePartialRelations\n\nexport const MdxNoteWithPartialRelationsSchema: z.ZodType<MdxNoteWithPartialRelations> = MdxNoteSchema.merge(z.object({\n  topics: z.lazy(() => TopicPartialWithRelationsSchema).array(),\n  subjects: z.lazy(() => SubjectPartialWithRelationsSchema).array(),\n  tags: z.lazy(() => TagPartialWithRelationsSchema).array(),\n  citations: z.lazy(() => BibEntryPartialWithRelationsSchema).array(),\n  sequentialList: z.lazy(() => SequentialNoteListPartialWithRelationsSchema).nullable(),\n  ReadingList: z.lazy(() => ReadingListPartialWithRelationsSchema).array(),\n  equations: z.lazy(() => EquationPartialWithRelationsSchema).array(),\n  definitions: z.lazy(() => DefinitionPartialWithRelationsSchema).array(),\n  toDo: z.lazy(() => ToDoPartialWithRelationsSchema).array(),\n}).partial())\n\nexport default MdxNoteSchema;\n","import { z } from 'zod';\nimport type { MdxNoteWithRelations } from './MdxNoteSchema'\nimport type { MdxNotePartialWithRelations } from './MdxNoteSchema'\nimport type { IpynbWithRelations } from './IpynbSchema'\nimport type { IpynbPartialWithRelations } from './IpynbSchema'\nimport type { QAPairWithRelations } from './QAPairSchema'\nimport type { QAPairPartialWithRelations } from './QAPairSchema'\nimport type { PracticeExamWithRelations } from './PracticeExamSchema'\nimport type { PracticeExamPartialWithRelations } from './PracticeExamSchema'\nimport type { ToDoWithRelations } from './ToDoSchema'\nimport type { ToDoPartialWithRelations } from './ToDoSchema'\nimport type { KanbanWithRelations } from './KanbanSchema'\nimport type { KanbanPartialWithRelations } from './KanbanSchema'\nimport type { ToDoListWithRelations } from './ToDoListSchema'\nimport type { ToDoListPartialWithRelations } from './ToDoListSchema'\nimport type { BibEntryWithRelations } from './BibEntrySchema'\nimport type { BibEntryPartialWithRelations } from './BibEntrySchema'\nimport type { EquationWithRelations } from './EquationSchema'\nimport type { EquationPartialWithRelations } from './EquationSchema'\nimport { MdxNoteWithRelationsSchema } from './MdxNoteSchema'\nimport { MdxNotePartialWithRelationsSchema } from './MdxNoteSchema'\nimport { IpynbWithRelationsSchema } from './IpynbSchema'\nimport { IpynbPartialWithRelationsSchema } from './IpynbSchema'\nimport { QAPairWithRelationsSchema } from './QAPairSchema'\nimport { QAPairPartialWithRelationsSchema } from './QAPairSchema'\nimport { PracticeExamWithRelationsSchema } from './PracticeExamSchema'\nimport { PracticeExamPartialWithRelationsSchema } from './PracticeExamSchema'\nimport { ToDoWithRelationsSchema } from './ToDoSchema'\nimport { ToDoPartialWithRelationsSchema } from './ToDoSchema'\nimport { KanbanWithRelationsSchema } from './KanbanSchema'\nimport { KanbanPartialWithRelationsSchema } from './KanbanSchema'\nimport { ToDoListWithRelationsSchema } from './ToDoListSchema'\nimport { ToDoListPartialWithRelationsSchema } from './ToDoListSchema'\nimport { BibEntryWithRelationsSchema } from './BibEntrySchema'\nimport { BibEntryPartialWithRelationsSchema } from './BibEntrySchema'\nimport { EquationWithRelationsSchema } from './EquationSchema'\nimport { EquationPartialWithRelationsSchema } from './EquationSchema'\n\n/////////////////////////////////////////\n// TOPIC SCHEMA\n/////////////////////////////////////////\n\nexport const TopicSchema = z.object({\n  value: z.string(),\n  kanbanId: z.number().int().nullable(),\n  createdAt: z.coerce.date(),\n  lastAccess: z.coerce.date(),\n})\n\nexport type Topic = z.infer<typeof TopicSchema>\n\n/////////////////////////////////////////\n// TOPIC PARTIAL SCHEMA\n/////////////////////////////////////////\n\nexport const TopicPartialSchema = TopicSchema.partial()\n\nexport type TopicPartial = z.infer<typeof TopicPartialSchema>\n\n/////////////////////////////////////////\n// TOPIC RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type TopicRelations = {\n  MdxNotes: MdxNoteWithRelations[];\n  ipynbNotes: IpynbWithRelations[];\n  QAPair: QAPairWithRelations[];\n  practiceExam: PracticeExamWithRelations[];\n  toDo: ToDoWithRelations[];\n  Kanban?: KanbanWithRelations | null;\n  todoList: ToDoListWithRelations[];\n  bibEntries: BibEntryWithRelations[];\n  equations: EquationWithRelations[];\n};\n\nexport type TopicWithRelations = z.infer<typeof TopicSchema> & TopicRelations\n\nexport const TopicWithRelationsSchema: z.ZodType<TopicWithRelations> = TopicSchema.merge(z.object({\n  MdxNotes: z.lazy(() => MdxNoteWithRelationsSchema).array(),\n  ipynbNotes: z.lazy(() => IpynbWithRelationsSchema).array(),\n  QAPair: z.lazy(() => QAPairWithRelationsSchema).array(),\n  practiceExam: z.lazy(() => PracticeExamWithRelationsSchema).array(),\n  toDo: z.lazy(() => ToDoWithRelationsSchema).array(),\n  Kanban: z.lazy(() => KanbanWithRelationsSchema).nullable(),\n  todoList: z.lazy(() => ToDoListWithRelationsSchema).array(),\n  bibEntries: z.lazy(() => BibEntryWithRelationsSchema).array(),\n  equations: z.lazy(() => EquationWithRelationsSchema).array(),\n}))\n\n/////////////////////////////////////////\n// TOPIC PARTIAL RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type TopicPartialRelations = {\n  MdxNotes?: MdxNotePartialWithRelations[];\n  ipynbNotes?: IpynbPartialWithRelations[];\n  QAPair?: QAPairPartialWithRelations[];\n  practiceExam?: PracticeExamPartialWithRelations[];\n  toDo?: ToDoPartialWithRelations[];\n  Kanban?: KanbanPartialWithRelations | null;\n  todoList?: ToDoListPartialWithRelations[];\n  bibEntries?: BibEntryPartialWithRelations[];\n  equations?: EquationPartialWithRelations[];\n};\n\nexport type TopicPartialWithRelations = z.infer<typeof TopicPartialSchema> & TopicPartialRelations\n\nexport const TopicPartialWithRelationsSchema: z.ZodType<TopicPartialWithRelations> = TopicPartialSchema.merge(z.object({\n  MdxNotes: z.lazy(() => MdxNotePartialWithRelationsSchema).array(),\n  ipynbNotes: z.lazy(() => IpynbPartialWithRelationsSchema).array(),\n  QAPair: z.lazy(() => QAPairPartialWithRelationsSchema).array(),\n  practiceExam: z.lazy(() => PracticeExamPartialWithRelationsSchema).array(),\n  toDo: z.lazy(() => ToDoPartialWithRelationsSchema).array(),\n  Kanban: z.lazy(() => KanbanPartialWithRelationsSchema).nullable(),\n  todoList: z.lazy(() => ToDoListPartialWithRelationsSchema).array(),\n  bibEntries: z.lazy(() => BibEntryPartialWithRelationsSchema).array(),\n  equations: z.lazy(() => EquationPartialWithRelationsSchema).array(),\n})).partial()\n\nexport type TopicWithPartialRelations = z.infer<typeof TopicSchema> & TopicPartialRelations\n\nexport const TopicWithPartialRelationsSchema: z.ZodType<TopicWithPartialRelations> = TopicSchema.merge(z.object({\n  MdxNotes: z.lazy(() => MdxNotePartialWithRelationsSchema).array(),\n  ipynbNotes: z.lazy(() => IpynbPartialWithRelationsSchema).array(),\n  QAPair: z.lazy(() => QAPairPartialWithRelationsSchema).array(),\n  practiceExam: z.lazy(() => PracticeExamPartialWithRelationsSchema).array(),\n  toDo: z.lazy(() => ToDoPartialWithRelationsSchema).array(),\n  Kanban: z.lazy(() => KanbanPartialWithRelationsSchema).nullable(),\n  todoList: z.lazy(() => ToDoListPartialWithRelationsSchema).array(),\n  bibEntries: z.lazy(() => BibEntryPartialWithRelationsSchema).array(),\n  equations: z.lazy(() => EquationPartialWithRelationsSchema).array(),\n}).partial())\n\nexport default TopicSchema;\n","import { z } from 'zod';\nimport type { TagWithRelations } from './TagSchema'\nimport type { TagPartialWithRelations } from './TagSchema'\nimport type { TopicWithRelations } from './TopicSchema'\nimport type { TopicPartialWithRelations } from './TopicSchema'\nimport type { SubjectWithRelations } from './SubjectSchema'\nimport type { SubjectPartialWithRelations } from './SubjectSchema'\nimport type { BibEntryWithRelations } from './BibEntrySchema'\nimport type { BibEntryPartialWithRelations } from './BibEntrySchema'\nimport type { SequentialNoteListWithRelations } from './SequentialNoteListSchema'\nimport type { SequentialNoteListPartialWithRelations } from './SequentialNoteListSchema'\nimport type { ReadingListWithRelations } from './ReadingListSchema'\nimport type { ReadingListPartialWithRelations } from './ReadingListSchema'\nimport { TagWithRelationsSchema } from './TagSchema'\nimport { TagPartialWithRelationsSchema } from './TagSchema'\nimport { TopicWithRelationsSchema } from './TopicSchema'\nimport { TopicPartialWithRelationsSchema } from './TopicSchema'\nimport { SubjectWithRelationsSchema } from './SubjectSchema'\nimport { SubjectPartialWithRelationsSchema } from './SubjectSchema'\nimport { BibEntryWithRelationsSchema } from './BibEntrySchema'\nimport { BibEntryPartialWithRelationsSchema } from './BibEntrySchema'\nimport { SequentialNoteListWithRelationsSchema } from './SequentialNoteListSchema'\nimport { SequentialNoteListPartialWithRelationsSchema } from './SequentialNoteListSchema'\nimport { ReadingListWithRelationsSchema } from './ReadingListSchema'\nimport { ReadingListPartialWithRelationsSchema } from './ReadingListSchema'\n\n/////////////////////////////////////////\n// IPYNB SCHEMA\n/////////////////////////////////////////\n\nexport const IpynbSchema = z.object({\n  id: z.number().int(),\n  rootRelativePath: z.string(),\n  isProtected: z.boolean().nullable(),\n  title: z.string(),\n  latexTitle: z.string().nullable(),\n  citationsListOrder: z.string().array(),\n  importantValues: z.number().array(),\n  href: z.string(),\n  outgoingQuickLinks: z.string().array(),\n  raw: z.instanceof(Buffer),\n  sequentialKey: z.string().nullable(),\n  sequentialIndex: z.number().int().nullable(),\n  bookmarked: z.boolean(),\n  firstSync: z.coerce.date(),\n  lastSync: z.coerce.date(),\n  lastAccess: z.coerce.date(),\n})\n\nexport type Ipynb = z.infer<typeof IpynbSchema>\n\n/////////////////////////////////////////\n// IPYNB PARTIAL SCHEMA\n/////////////////////////////////////////\n\nexport const IpynbPartialSchema = IpynbSchema.partial()\n\nexport type IpynbPartial = z.infer<typeof IpynbPartialSchema>\n\n/////////////////////////////////////////\n// IPYNB RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type IpynbRelations = {\n  tags: TagWithRelations[];\n  topics: TopicWithRelations[];\n  subjects: SubjectWithRelations[];\n  citations: BibEntryWithRelations[];\n  sequentialList?: SequentialNoteListWithRelations | null;\n  readingList: ReadingListWithRelations[];\n};\n\nexport type IpynbWithRelations = z.infer<typeof IpynbSchema> & IpynbRelations\n\nexport const IpynbWithRelationsSchema: z.ZodType<IpynbWithRelations> = IpynbSchema.merge(z.object({\n  tags: z.lazy(() => TagWithRelationsSchema).array(),\n  topics: z.lazy(() => TopicWithRelationsSchema).array(),\n  subjects: z.lazy(() => SubjectWithRelationsSchema).array(),\n  citations: z.lazy(() => BibEntryWithRelationsSchema).array(),\n  sequentialList: z.lazy(() => SequentialNoteListWithRelationsSchema).nullable(),\n  readingList: z.lazy(() => ReadingListWithRelationsSchema).array(),\n}))\n\n/////////////////////////////////////////\n// IPYNB PARTIAL RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type IpynbPartialRelations = {\n  tags?: TagPartialWithRelations[];\n  topics?: TopicPartialWithRelations[];\n  subjects?: SubjectPartialWithRelations[];\n  citations?: BibEntryPartialWithRelations[];\n  sequentialList?: SequentialNoteListPartialWithRelations | null;\n  readingList?: ReadingListPartialWithRelations[];\n};\n\nexport type IpynbPartialWithRelations = z.infer<typeof IpynbPartialSchema> & IpynbPartialRelations\n\nexport const IpynbPartialWithRelationsSchema: z.ZodType<IpynbPartialWithRelations> = IpynbPartialSchema.merge(z.object({\n  tags: z.lazy(() => TagPartialWithRelationsSchema).array(),\n  topics: z.lazy(() => TopicPartialWithRelationsSchema).array(),\n  subjects: z.lazy(() => SubjectPartialWithRelationsSchema).array(),\n  citations: z.lazy(() => BibEntryPartialWithRelationsSchema).array(),\n  sequentialList: z.lazy(() => SequentialNoteListPartialWithRelationsSchema).nullable(),\n  readingList: z.lazy(() => ReadingListPartialWithRelationsSchema).array(),\n})).partial()\n\nexport type IpynbWithPartialRelations = z.infer<typeof IpynbSchema> & IpynbPartialRelations\n\nexport const IpynbWithPartialRelationsSchema: z.ZodType<IpynbWithPartialRelations> = IpynbSchema.merge(z.object({\n  tags: z.lazy(() => TagPartialWithRelationsSchema).array(),\n  topics: z.lazy(() => TopicPartialWithRelationsSchema).array(),\n  subjects: z.lazy(() => SubjectPartialWithRelationsSchema).array(),\n  citations: z.lazy(() => BibEntryPartialWithRelationsSchema).array(),\n  sequentialList: z.lazy(() => SequentialNoteListPartialWithRelationsSchema).nullable(),\n  readingList: z.lazy(() => ReadingListPartialWithRelationsSchema).array(),\n}).partial())\n\nexport default IpynbSchema;\n","import { z } from 'zod';\nimport type { MdxNoteWithRelations } from './MdxNoteSchema'\nimport type { MdxNotePartialWithRelations } from './MdxNoteSchema'\nimport type { IpynbWithRelations } from './IpynbSchema'\nimport type { IpynbPartialWithRelations } from './IpynbSchema'\nimport type { QAPairWithRelations } from './QAPairSchema'\nimport type { QAPairPartialWithRelations } from './QAPairSchema'\nimport type { PracticeExamWithRelations } from './PracticeExamSchema'\nimport type { PracticeExamPartialWithRelations } from './PracticeExamSchema'\nimport type { KanbanWithRelations } from './KanbanSchema'\nimport type { KanbanPartialWithRelations } from './KanbanSchema'\nimport type { ToDoListWithRelations } from './ToDoListSchema'\nimport type { ToDoListPartialWithRelations } from './ToDoListSchema'\nimport type { ToDoWithRelations } from './ToDoSchema'\nimport type { ToDoPartialWithRelations } from './ToDoSchema'\nimport type { BibEntryWithRelations } from './BibEntrySchema'\nimport type { BibEntryPartialWithRelations } from './BibEntrySchema'\nimport type { EquationWithRelations } from './EquationSchema'\nimport type { EquationPartialWithRelations } from './EquationSchema'\nimport { MdxNoteWithRelationsSchema } from './MdxNoteSchema'\nimport { MdxNotePartialWithRelationsSchema } from './MdxNoteSchema'\nimport { IpynbWithRelationsSchema } from './IpynbSchema'\nimport { IpynbPartialWithRelationsSchema } from './IpynbSchema'\nimport { QAPairWithRelationsSchema } from './QAPairSchema'\nimport { QAPairPartialWithRelationsSchema } from './QAPairSchema'\nimport { PracticeExamWithRelationsSchema } from './PracticeExamSchema'\nimport { PracticeExamPartialWithRelationsSchema } from './PracticeExamSchema'\nimport { KanbanWithRelationsSchema } from './KanbanSchema'\nimport { KanbanPartialWithRelationsSchema } from './KanbanSchema'\nimport { ToDoListWithRelationsSchema } from './ToDoListSchema'\nimport { ToDoListPartialWithRelationsSchema } from './ToDoListSchema'\nimport { ToDoWithRelationsSchema } from './ToDoSchema'\nimport { ToDoPartialWithRelationsSchema } from './ToDoSchema'\nimport { BibEntryWithRelationsSchema } from './BibEntrySchema'\nimport { BibEntryPartialWithRelationsSchema } from './BibEntrySchema'\nimport { EquationWithRelationsSchema } from './EquationSchema'\nimport { EquationPartialWithRelationsSchema } from './EquationSchema'\n\n/////////////////////////////////////////\n// SUBJECT SCHEMA\n/////////////////////////////////////////\n\nexport const SubjectSchema = z.object({\n  value: z.string(),\n  kanbanId: z.number().int().nullable(),\n  createdAt: z.coerce.date(),\n  lastAccess: z.coerce.date(),\n})\n\nexport type Subject = z.infer<typeof SubjectSchema>\n\n/////////////////////////////////////////\n// SUBJECT PARTIAL SCHEMA\n/////////////////////////////////////////\n\nexport const SubjectPartialSchema = SubjectSchema.partial()\n\nexport type SubjectPartial = z.infer<typeof SubjectPartialSchema>\n\n/////////////////////////////////////////\n// SUBJECT RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type SubjectRelations = {\n  MdxNotes: MdxNoteWithRelations[];\n  IpynbNotes: IpynbWithRelations[];\n  QaPair: QAPairWithRelations[];\n  practiceExam: PracticeExamWithRelations[];\n  Kanban?: KanbanWithRelations | null;\n  todoList: ToDoListWithRelations[];\n  toDo: ToDoWithRelations[];\n  bibEntries: BibEntryWithRelations[];\n  equations: EquationWithRelations[];\n};\n\nexport type SubjectWithRelations = z.infer<typeof SubjectSchema> & SubjectRelations\n\nexport const SubjectWithRelationsSchema: z.ZodType<SubjectWithRelations> = SubjectSchema.merge(z.object({\n  MdxNotes: z.lazy(() => MdxNoteWithRelationsSchema).array(),\n  IpynbNotes: z.lazy(() => IpynbWithRelationsSchema).array(),\n  QaPair: z.lazy(() => QAPairWithRelationsSchema).array(),\n  practiceExam: z.lazy(() => PracticeExamWithRelationsSchema).array(),\n  Kanban: z.lazy(() => KanbanWithRelationsSchema).nullable(),\n  todoList: z.lazy(() => ToDoListWithRelationsSchema).array(),\n  toDo: z.lazy(() => ToDoWithRelationsSchema).array(),\n  bibEntries: z.lazy(() => BibEntryWithRelationsSchema).array(),\n  equations: z.lazy(() => EquationWithRelationsSchema).array(),\n}))\n\n/////////////////////////////////////////\n// SUBJECT PARTIAL RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type SubjectPartialRelations = {\n  MdxNotes?: MdxNotePartialWithRelations[];\n  IpynbNotes?: IpynbPartialWithRelations[];\n  QaPair?: QAPairPartialWithRelations[];\n  practiceExam?: PracticeExamPartialWithRelations[];\n  Kanban?: KanbanPartialWithRelations | null;\n  todoList?: ToDoListPartialWithRelations[];\n  toDo?: ToDoPartialWithRelations[];\n  bibEntries?: BibEntryPartialWithRelations[];\n  equations?: EquationPartialWithRelations[];\n};\n\nexport type SubjectPartialWithRelations = z.infer<typeof SubjectPartialSchema> & SubjectPartialRelations\n\nexport const SubjectPartialWithRelationsSchema: z.ZodType<SubjectPartialWithRelations> = SubjectPartialSchema.merge(z.object({\n  MdxNotes: z.lazy(() => MdxNotePartialWithRelationsSchema).array(),\n  IpynbNotes: z.lazy(() => IpynbPartialWithRelationsSchema).array(),\n  QaPair: z.lazy(() => QAPairPartialWithRelationsSchema).array(),\n  practiceExam: z.lazy(() => PracticeExamPartialWithRelationsSchema).array(),\n  Kanban: z.lazy(() => KanbanPartialWithRelationsSchema).nullable(),\n  todoList: z.lazy(() => ToDoListPartialWithRelationsSchema).array(),\n  toDo: z.lazy(() => ToDoPartialWithRelationsSchema).array(),\n  bibEntries: z.lazy(() => BibEntryPartialWithRelationsSchema).array(),\n  equations: z.lazy(() => EquationPartialWithRelationsSchema).array(),\n})).partial()\n\nexport type SubjectWithPartialRelations = z.infer<typeof SubjectSchema> & SubjectPartialRelations\n\nexport const SubjectWithPartialRelationsSchema: z.ZodType<SubjectWithPartialRelations> = SubjectSchema.merge(z.object({\n  MdxNotes: z.lazy(() => MdxNotePartialWithRelationsSchema).array(),\n  IpynbNotes: z.lazy(() => IpynbPartialWithRelationsSchema).array(),\n  QaPair: z.lazy(() => QAPairPartialWithRelationsSchema).array(),\n  practiceExam: z.lazy(() => PracticeExamPartialWithRelationsSchema).array(),\n  Kanban: z.lazy(() => KanbanPartialWithRelationsSchema).nullable(),\n  todoList: z.lazy(() => ToDoListPartialWithRelationsSchema).array(),\n  toDo: z.lazy(() => ToDoPartialWithRelationsSchema).array(),\n  bibEntries: z.lazy(() => BibEntryPartialWithRelationsSchema).array(),\n  equations: z.lazy(() => EquationPartialWithRelationsSchema).array(),\n}).partial())\n\nexport default SubjectSchema;\n","import { z } from 'zod';\nimport type { TagWithRelations } from './TagSchema'\nimport type { TagPartialWithRelations } from './TagSchema'\nimport type { TopicWithRelations } from './TopicSchema'\nimport type { TopicPartialWithRelations } from './TopicSchema'\nimport type { SubjectWithRelations } from './SubjectSchema'\nimport type { SubjectPartialWithRelations } from './SubjectSchema'\nimport type { PracticeExamWithRelations } from './PracticeExamSchema'\nimport type { PracticeExamPartialWithRelations } from './PracticeExamSchema'\nimport { TagWithRelationsSchema } from './TagSchema'\nimport { TagPartialWithRelationsSchema } from './TagSchema'\nimport { TopicWithRelationsSchema } from './TopicSchema'\nimport { TopicPartialWithRelationsSchema } from './TopicSchema'\nimport { SubjectWithRelationsSchema } from './SubjectSchema'\nimport { SubjectPartialWithRelationsSchema } from './SubjectSchema'\nimport { PracticeExamWithRelationsSchema } from './PracticeExamSchema'\nimport { PracticeExamPartialWithRelationsSchema } from './PracticeExamSchema'\n\n/////////////////////////////////////////\n// QA PAIR SCHEMA\n/////////////////////////////////////////\n\nexport const QAPairSchema = z.object({\n  id: z.string(),\n  question: z.string(),\n  answer: z.string(),\n  description: z.string().nullable(),\n  secondaryLabel: z.string().nullable(),\n  correctCount: z.number().int(),\n  inCorrectCount: z.number().int(),\n})\n\nexport type QAPair = z.infer<typeof QAPairSchema>\n\n/////////////////////////////////////////\n// QA PAIR PARTIAL SCHEMA\n/////////////////////////////////////////\n\nexport const QAPairPartialSchema = QAPairSchema.partial()\n\nexport type QAPairPartial = z.infer<typeof QAPairPartialSchema>\n\n/////////////////////////////////////////\n// QA PAIR RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type QAPairRelations = {\n  tags: TagWithRelations[];\n  topics: TopicWithRelations[];\n  subjects: SubjectWithRelations[];\n  practiceExam: PracticeExamWithRelations[];\n};\n\nexport type QAPairWithRelations = z.infer<typeof QAPairSchema> & QAPairRelations\n\nexport const QAPairWithRelationsSchema: z.ZodType<QAPairWithRelations> = QAPairSchema.merge(z.object({\n  tags: z.lazy(() => TagWithRelationsSchema).array(),\n  topics: z.lazy(() => TopicWithRelationsSchema).array(),\n  subjects: z.lazy(() => SubjectWithRelationsSchema).array(),\n  practiceExam: z.lazy(() => PracticeExamWithRelationsSchema).array(),\n}))\n\n/////////////////////////////////////////\n// QA PAIR PARTIAL RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type QAPairPartialRelations = {\n  tags?: TagPartialWithRelations[];\n  topics?: TopicPartialWithRelations[];\n  subjects?: SubjectPartialWithRelations[];\n  practiceExam?: PracticeExamPartialWithRelations[];\n};\n\nexport type QAPairPartialWithRelations = z.infer<typeof QAPairPartialSchema> & QAPairPartialRelations\n\nexport const QAPairPartialWithRelationsSchema: z.ZodType<QAPairPartialWithRelations> = QAPairPartialSchema.merge(z.object({\n  tags: z.lazy(() => TagPartialWithRelationsSchema).array(),\n  topics: z.lazy(() => TopicPartialWithRelationsSchema).array(),\n  subjects: z.lazy(() => SubjectPartialWithRelationsSchema).array(),\n  practiceExam: z.lazy(() => PracticeExamPartialWithRelationsSchema).array(),\n})).partial()\n\nexport type QAPairWithPartialRelations = z.infer<typeof QAPairSchema> & QAPairPartialRelations\n\nexport const QAPairWithPartialRelationsSchema: z.ZodType<QAPairWithPartialRelations> = QAPairSchema.merge(z.object({\n  tags: z.lazy(() => TagPartialWithRelationsSchema).array(),\n  topics: z.lazy(() => TopicPartialWithRelationsSchema).array(),\n  subjects: z.lazy(() => SubjectPartialWithRelationsSchema).array(),\n  practiceExam: z.lazy(() => PracticeExamPartialWithRelationsSchema).array(),\n}).partial())\n\nexport default QAPairSchema;\n","import { z } from 'zod';\nimport type { TopicWithRelations } from './TopicSchema'\nimport type { TopicPartialWithRelations } from './TopicSchema'\nimport type { TagWithRelations } from './TagSchema'\nimport type { TagPartialWithRelations } from './TagSchema'\nimport type { SubjectWithRelations } from './SubjectSchema'\nimport type { SubjectPartialWithRelations } from './SubjectSchema'\nimport type { QAPairWithRelations } from './QAPairSchema'\nimport type { QAPairPartialWithRelations } from './QAPairSchema'\nimport { TopicWithRelationsSchema } from './TopicSchema'\nimport { TopicPartialWithRelationsSchema } from './TopicSchema'\nimport { TagWithRelationsSchema } from './TagSchema'\nimport { TagPartialWithRelationsSchema } from './TagSchema'\nimport { SubjectWithRelationsSchema } from './SubjectSchema'\nimport { SubjectPartialWithRelationsSchema } from './SubjectSchema'\nimport { QAPairWithRelationsSchema } from './QAPairSchema'\nimport { QAPairPartialWithRelationsSchema } from './QAPairSchema'\n\n/////////////////////////////////////////\n// PRACTICE EXAM SCHEMA\n/////////////////////////////////////////\n\nexport const PracticeExamSchema = z.object({\n  id: z.number().int(),\n  correctCount: z.number().int(),\n  inCorrectCount: z.number().int(),\n  timeLimitInSeconds: z.number().int(),\n  timeCompletedInSeconds: z.number().int(),\n  date: z.coerce.date(),\n})\n\nexport type PracticeExam = z.infer<typeof PracticeExamSchema>\n\n/////////////////////////////////////////\n// PRACTICE EXAM PARTIAL SCHEMA\n/////////////////////////////////////////\n\nexport const PracticeExamPartialSchema = PracticeExamSchema.partial()\n\nexport type PracticeExamPartial = z.infer<typeof PracticeExamPartialSchema>\n\n/////////////////////////////////////////\n// PRACTICE EXAM RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type PracticeExamRelations = {\n  topics: TopicWithRelations[];\n  tags: TagWithRelations[];\n  subjects: SubjectWithRelations[];\n  questions: QAPairWithRelations[];\n};\n\nexport type PracticeExamWithRelations = z.infer<typeof PracticeExamSchema> & PracticeExamRelations\n\nexport const PracticeExamWithRelationsSchema: z.ZodType<PracticeExamWithRelations> = PracticeExamSchema.merge(z.object({\n  topics: z.lazy(() => TopicWithRelationsSchema).array(),\n  tags: z.lazy(() => TagWithRelationsSchema).array(),\n  subjects: z.lazy(() => SubjectWithRelationsSchema).array(),\n  questions: z.lazy(() => QAPairWithRelationsSchema).array(),\n}))\n\n/////////////////////////////////////////\n// PRACTICE EXAM PARTIAL RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type PracticeExamPartialRelations = {\n  topics?: TopicPartialWithRelations[];\n  tags?: TagPartialWithRelations[];\n  subjects?: SubjectPartialWithRelations[];\n  questions?: QAPairPartialWithRelations[];\n};\n\nexport type PracticeExamPartialWithRelations = z.infer<typeof PracticeExamPartialSchema> & PracticeExamPartialRelations\n\nexport const PracticeExamPartialWithRelationsSchema: z.ZodType<PracticeExamPartialWithRelations> = PracticeExamPartialSchema.merge(z.object({\n  topics: z.lazy(() => TopicPartialWithRelationsSchema).array(),\n  tags: z.lazy(() => TagPartialWithRelationsSchema).array(),\n  subjects: z.lazy(() => SubjectPartialWithRelationsSchema).array(),\n  questions: z.lazy(() => QAPairPartialWithRelationsSchema).array(),\n})).partial()\n\nexport type PracticeExamWithPartialRelations = z.infer<typeof PracticeExamSchema> & PracticeExamPartialRelations\n\nexport const PracticeExamWithPartialRelationsSchema: z.ZodType<PracticeExamWithPartialRelations> = PracticeExamSchema.merge(z.object({\n  topics: z.lazy(() => TopicPartialWithRelationsSchema).array(),\n  tags: z.lazy(() => TagPartialWithRelationsSchema).array(),\n  subjects: z.lazy(() => SubjectPartialWithRelationsSchema).array(),\n  questions: z.lazy(() => QAPairPartialWithRelationsSchema).array(),\n}).partial())\n\nexport default PracticeExamSchema;\n","import { z } from 'zod';\nimport type { KanBanListWithRelations } from './KanBanListSchema'\nimport type { KanBanListPartialWithRelations } from './KanBanListSchema'\nimport type { TagWithRelations } from './TagSchema'\nimport type { TagPartialWithRelations } from './TagSchema'\nimport type { SubjectWithRelations } from './SubjectSchema'\nimport type { SubjectPartialWithRelations } from './SubjectSchema'\nimport type { TopicWithRelations } from './TopicSchema'\nimport type { TopicPartialWithRelations } from './TopicSchema'\nimport { KanBanListWithRelationsSchema } from './KanBanListSchema'\nimport { KanBanListPartialWithRelationsSchema } from './KanBanListSchema'\nimport { TagWithRelationsSchema } from './TagSchema'\nimport { TagPartialWithRelationsSchema } from './TagSchema'\nimport { SubjectWithRelationsSchema } from './SubjectSchema'\nimport { SubjectPartialWithRelationsSchema } from './SubjectSchema'\nimport { TopicWithRelationsSchema } from './TopicSchema'\nimport { TopicPartialWithRelationsSchema } from './TopicSchema'\n\n/////////////////////////////////////////\n// KANBAN SCHEMA\n/////////////////////////////////////////\n\nexport const KanbanSchema = z.object({\n  id: z.number().int(),\n  title: z.string(),\n  createdAt: z.coerce.date(),\n  lastUpdate: z.coerce.date(),\n})\n\nexport type Kanban = z.infer<typeof KanbanSchema>\n\n/////////////////////////////////////////\n// KANBAN PARTIAL SCHEMA\n/////////////////////////////////////////\n\nexport const KanbanPartialSchema = KanbanSchema.partial()\n\nexport type KanbanPartial = z.infer<typeof KanbanPartialSchema>\n\n/////////////////////////////////////////\n// KANBAN RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type KanbanRelations = {\n  lists: KanBanListWithRelations[];\n  tags: TagWithRelations[];\n  subjects: SubjectWithRelations[];\n  topics: TopicWithRelations[];\n};\n\nexport type KanbanWithRelations = z.infer<typeof KanbanSchema> & KanbanRelations\n\nexport const KanbanWithRelationsSchema: z.ZodType<KanbanWithRelations> = KanbanSchema.merge(z.object({\n  lists: z.lazy(() => KanBanListWithRelationsSchema).array(),\n  tags: z.lazy(() => TagWithRelationsSchema).array(),\n  subjects: z.lazy(() => SubjectWithRelationsSchema).array(),\n  topics: z.lazy(() => TopicWithRelationsSchema).array(),\n}))\n\n/////////////////////////////////////////\n// KANBAN PARTIAL RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type KanbanPartialRelations = {\n  lists?: KanBanListPartialWithRelations[];\n  tags?: TagPartialWithRelations[];\n  subjects?: SubjectPartialWithRelations[];\n  topics?: TopicPartialWithRelations[];\n};\n\nexport type KanbanPartialWithRelations = z.infer<typeof KanbanPartialSchema> & KanbanPartialRelations\n\nexport const KanbanPartialWithRelationsSchema: z.ZodType<KanbanPartialWithRelations> = KanbanPartialSchema.merge(z.object({\n  lists: z.lazy(() => KanBanListPartialWithRelationsSchema).array(),\n  tags: z.lazy(() => TagPartialWithRelationsSchema).array(),\n  subjects: z.lazy(() => SubjectPartialWithRelationsSchema).array(),\n  topics: z.lazy(() => TopicPartialWithRelationsSchema).array(),\n})).partial()\n\nexport type KanbanWithPartialRelations = z.infer<typeof KanbanSchema> & KanbanPartialRelations\n\nexport const KanbanWithPartialRelationsSchema: z.ZodType<KanbanWithPartialRelations> = KanbanSchema.merge(z.object({\n  lists: z.lazy(() => KanBanListPartialWithRelationsSchema).array(),\n  tags: z.lazy(() => TagPartialWithRelationsSchema).array(),\n  subjects: z.lazy(() => SubjectPartialWithRelationsSchema).array(),\n  topics: z.lazy(() => TopicPartialWithRelationsSchema).array(),\n}).partial())\n\nexport default KanbanSchema;\n","import { z } from 'zod';\nimport type { KanBanCardWithRelations } from './KanBanCardSchema'\nimport type { KanBanCardPartialWithRelations } from './KanBanCardSchema'\nimport type { KanbanWithRelations } from './KanbanSchema'\nimport type { KanbanPartialWithRelations } from './KanbanSchema'\nimport { KanBanCardWithRelationsSchema } from './KanBanCardSchema'\nimport { KanBanCardPartialWithRelationsSchema } from './KanBanCardSchema'\nimport { KanbanWithRelationsSchema } from './KanbanSchema'\nimport { KanbanPartialWithRelationsSchema } from './KanbanSchema'\n\n/////////////////////////////////////////\n// KAN BAN LIST SCHEMA\n/////////////////////////////////////////\n\nexport const KanBanListSchema = z.object({\n  id: z.number().int(),\n  indexWithinBoard: z.number().int(),\n  title: z.string().nullable(),\n  boardId: z.number().int().nullable(),\n})\n\nexport type KanBanList = z.infer<typeof KanBanListSchema>\n\n/////////////////////////////////////////\n// KAN BAN LIST PARTIAL SCHEMA\n/////////////////////////////////////////\n\nexport const KanBanListPartialSchema = KanBanListSchema.partial()\n\nexport type KanBanListPartial = z.infer<typeof KanBanListPartialSchema>\n\n/////////////////////////////////////////\n// KAN BAN LIST RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type KanBanListRelations = {\n  cards: KanBanCardWithRelations[];\n  Kanban?: KanbanWithRelations | null;\n};\n\nexport type KanBanListWithRelations = z.infer<typeof KanBanListSchema> & KanBanListRelations\n\nexport const KanBanListWithRelationsSchema: z.ZodType<KanBanListWithRelations> = KanBanListSchema.merge(z.object({\n  cards: z.lazy(() => KanBanCardWithRelationsSchema).array(),\n  Kanban: z.lazy(() => KanbanWithRelationsSchema).nullable(),\n}))\n\n/////////////////////////////////////////\n// KAN BAN LIST PARTIAL RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type KanBanListPartialRelations = {\n  cards?: KanBanCardPartialWithRelations[];\n  Kanban?: KanbanPartialWithRelations | null;\n};\n\nexport type KanBanListPartialWithRelations = z.infer<typeof KanBanListPartialSchema> & KanBanListPartialRelations\n\nexport const KanBanListPartialWithRelationsSchema: z.ZodType<KanBanListPartialWithRelations> = KanBanListPartialSchema.merge(z.object({\n  cards: z.lazy(() => KanBanCardPartialWithRelationsSchema).array(),\n  Kanban: z.lazy(() => KanbanPartialWithRelationsSchema).nullable(),\n})).partial()\n\nexport type KanBanListWithPartialRelations = z.infer<typeof KanBanListSchema> & KanBanListPartialRelations\n\nexport const KanBanListWithPartialRelationsSchema: z.ZodType<KanBanListWithPartialRelations> = KanBanListSchema.merge(z.object({\n  cards: z.lazy(() => KanBanCardPartialWithRelationsSchema).array(),\n  Kanban: z.lazy(() => KanbanPartialWithRelationsSchema).nullable(),\n}).partial())\n\nexport default KanBanListSchema;\n","import { z } from 'zod';\nimport type { KanBanListWithRelations } from './KanBanListSchema'\nimport type { KanBanListPartialWithRelations } from './KanBanListSchema'\nimport { KanBanListWithRelationsSchema } from './KanBanListSchema'\nimport { KanBanListPartialWithRelationsSchema } from './KanBanListSchema'\n\n/////////////////////////////////////////\n// KAN BAN CARD SCHEMA\n/////////////////////////////////////////\n\nexport const KanBanCardSchema = z.object({\n  id: z.number().int(),\n  listId: z.number().int().nullable(),\n  indexWithinList: z.number().int(),\n  label: z.string().nullable(),\n  details: z.string().nullable(),\n})\n\nexport type KanBanCard = z.infer<typeof KanBanCardSchema>\n\n/////////////////////////////////////////\n// KAN BAN CARD PARTIAL SCHEMA\n/////////////////////////////////////////\n\nexport const KanBanCardPartialSchema = KanBanCardSchema.partial()\n\nexport type KanBanCardPartial = z.infer<typeof KanBanCardPartialSchema>\n\n/////////////////////////////////////////\n// KAN BAN CARD RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type KanBanCardRelations = {\n  KanBanList?: KanBanListWithRelations | null;\n};\n\nexport type KanBanCardWithRelations = z.infer<typeof KanBanCardSchema> & KanBanCardRelations\n\nexport const KanBanCardWithRelationsSchema: z.ZodType<KanBanCardWithRelations> = KanBanCardSchema.merge(z.object({\n  KanBanList: z.lazy(() => KanBanListWithRelationsSchema).nullable(),\n}))\n\n/////////////////////////////////////////\n// KAN BAN CARD PARTIAL RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type KanBanCardPartialRelations = {\n  KanBanList?: KanBanListPartialWithRelations | null;\n};\n\nexport type KanBanCardPartialWithRelations = z.infer<typeof KanBanCardPartialSchema> & KanBanCardPartialRelations\n\nexport const KanBanCardPartialWithRelationsSchema: z.ZodType<KanBanCardPartialWithRelations> = KanBanCardPartialSchema.merge(z.object({\n  KanBanList: z.lazy(() => KanBanListPartialWithRelationsSchema).nullable(),\n})).partial()\n\nexport type KanBanCardWithPartialRelations = z.infer<typeof KanBanCardSchema> & KanBanCardPartialRelations\n\nexport const KanBanCardWithPartialRelationsSchema: z.ZodType<KanBanCardWithPartialRelations> = KanBanCardSchema.merge(z.object({\n  KanBanList: z.lazy(() => KanBanListPartialWithRelationsSchema).nullable(),\n}).partial())\n\nexport default KanBanCardSchema;\n","import { z } from 'zod';\nimport type { ToDoWithRelations } from './ToDoSchema'\nimport type { ToDoPartialWithRelations } from './ToDoSchema'\nimport type { TagWithRelations } from './TagSchema'\nimport type { TagPartialWithRelations } from './TagSchema'\nimport type { TopicWithRelations } from './TopicSchema'\nimport type { TopicPartialWithRelations } from './TopicSchema'\nimport type { SubjectWithRelations } from './SubjectSchema'\nimport type { SubjectPartialWithRelations } from './SubjectSchema'\nimport { ToDoWithRelationsSchema } from './ToDoSchema'\nimport { ToDoPartialWithRelationsSchema } from './ToDoSchema'\nimport { TagWithRelationsSchema } from './TagSchema'\nimport { TagPartialWithRelationsSchema } from './TagSchema'\nimport { TopicWithRelationsSchema } from './TopicSchema'\nimport { TopicPartialWithRelationsSchema } from './TopicSchema'\nimport { SubjectWithRelationsSchema } from './SubjectSchema'\nimport { SubjectPartialWithRelationsSchema } from './SubjectSchema'\n\n/////////////////////////////////////////\n// TO DO LIST SCHEMA\n/////////////////////////////////////////\n\nexport const ToDoListSchema = z.object({\n  id: z.number().int(),\n  label: z.string(),\n  createdAt: z.coerce.date(),\n  lastUpdate: z.coerce.date(),\n  lastAccess: z.coerce.date(),\n})\n\nexport type ToDoList = z.infer<typeof ToDoListSchema>\n\n/////////////////////////////////////////\n// TO DO LIST PARTIAL SCHEMA\n/////////////////////////////////////////\n\nexport const ToDoListPartialSchema = ToDoListSchema.partial()\n\nexport type ToDoListPartial = z.infer<typeof ToDoListPartialSchema>\n\n/////////////////////////////////////////\n// TO DO LIST RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type ToDoListRelations = {\n  tasks: ToDoWithRelations[];\n  tags: TagWithRelations[];\n  topics: TopicWithRelations[];\n  subjects: SubjectWithRelations[];\n};\n\nexport type ToDoListWithRelations = z.infer<typeof ToDoListSchema> & ToDoListRelations\n\nexport const ToDoListWithRelationsSchema: z.ZodType<ToDoListWithRelations> = ToDoListSchema.merge(z.object({\n  tasks: z.lazy(() => ToDoWithRelationsSchema).array(),\n  tags: z.lazy(() => TagWithRelationsSchema).array(),\n  topics: z.lazy(() => TopicWithRelationsSchema).array(),\n  subjects: z.lazy(() => SubjectWithRelationsSchema).array(),\n}))\n\n/////////////////////////////////////////\n// TO DO LIST PARTIAL RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type ToDoListPartialRelations = {\n  tasks?: ToDoPartialWithRelations[];\n  tags?: TagPartialWithRelations[];\n  topics?: TopicPartialWithRelations[];\n  subjects?: SubjectPartialWithRelations[];\n};\n\nexport type ToDoListPartialWithRelations = z.infer<typeof ToDoListPartialSchema> & ToDoListPartialRelations\n\nexport const ToDoListPartialWithRelationsSchema: z.ZodType<ToDoListPartialWithRelations> = ToDoListPartialSchema.merge(z.object({\n  tasks: z.lazy(() => ToDoPartialWithRelationsSchema).array(),\n  tags: z.lazy(() => TagPartialWithRelationsSchema).array(),\n  topics: z.lazy(() => TopicPartialWithRelationsSchema).array(),\n  subjects: z.lazy(() => SubjectPartialWithRelationsSchema).array(),\n})).partial()\n\nexport type ToDoListWithPartialRelations = z.infer<typeof ToDoListSchema> & ToDoListPartialRelations\n\nexport const ToDoListWithPartialRelationsSchema: z.ZodType<ToDoListWithPartialRelations> = ToDoListSchema.merge(z.object({\n  tasks: z.lazy(() => ToDoPartialWithRelationsSchema).array(),\n  tags: z.lazy(() => TagPartialWithRelationsSchema).array(),\n  topics: z.lazy(() => TopicPartialWithRelationsSchema).array(),\n  subjects: z.lazy(() => SubjectPartialWithRelationsSchema).array(),\n}).partial())\n\nexport default ToDoListSchema;\n","import { z } from 'zod';\nimport { TaskCategorySchema } from '../inputTypeSchemas/TaskCategorySchema'\nimport type { MdxNoteWithRelations } from './MdxNoteSchema'\nimport type { MdxNotePartialWithRelations } from './MdxNoteSchema'\nimport type { TagWithRelations } from './TagSchema'\nimport type { TagPartialWithRelations } from './TagSchema'\nimport type { TopicWithRelations } from './TopicSchema'\nimport type { TopicPartialWithRelations } from './TopicSchema'\nimport type { SubjectWithRelations } from './SubjectSchema'\nimport type { SubjectPartialWithRelations } from './SubjectSchema'\nimport type { ToDoListWithRelations } from './ToDoListSchema'\nimport type { ToDoListPartialWithRelations } from './ToDoListSchema'\nimport { MdxNoteWithRelationsSchema } from './MdxNoteSchema'\nimport { MdxNotePartialWithRelationsSchema } from './MdxNoteSchema'\nimport { TagWithRelationsSchema } from './TagSchema'\nimport { TagPartialWithRelationsSchema } from './TagSchema'\nimport { TopicWithRelationsSchema } from './TopicSchema'\nimport { TopicPartialWithRelationsSchema } from './TopicSchema'\nimport { SubjectWithRelationsSchema } from './SubjectSchema'\nimport { SubjectPartialWithRelationsSchema } from './SubjectSchema'\nimport { ToDoListWithRelationsSchema } from './ToDoListSchema'\nimport { ToDoListPartialWithRelationsSchema } from './ToDoListSchema'\n\n/////////////////////////////////////////\n// TO DO SCHEMA\n/////////////////////////////////////////\n\nexport const ToDoSchema = z.object({\n  category: TaskCategorySchema.nullable(),\n  id: z.number().int(),\n  createdAt: z.coerce.date(),\n  task: z.string(),\n  dueAt: z.coerce.date().nullable(),\n  details: z.string().nullable(),\n  parentId: z.number().int().nullable(),\n  bookmarked: z.boolean(),\n  status: z.string(),\n  priority: z.number().int(),\n  toDoListId: z.number().int().nullable(),\n  completedOn: z.coerce.date().nullable(),\n})\n\nexport type ToDo = z.infer<typeof ToDoSchema>\n\n/////////////////////////////////////////\n// TO DO PARTIAL SCHEMA\n/////////////////////////////////////////\n\nexport const ToDoPartialSchema = ToDoSchema.partial()\n\nexport type ToDoPartial = z.infer<typeof ToDoPartialSchema>\n\n/////////////////////////////////////////\n// TO DO RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type ToDoRelations = {\n  associatedNotes: MdxNoteWithRelations[];\n  tags: TagWithRelations[];\n  topics: TopicWithRelations[];\n  subjects: SubjectWithRelations[];\n  parent?: ToDoWithRelations | null;\n  child: ToDoWithRelations[];\n  ToDoList?: ToDoListWithRelations | null;\n};\n\nexport type ToDoWithRelations = z.infer<typeof ToDoSchema> & ToDoRelations\n\nexport const ToDoWithRelationsSchema: z.ZodType<ToDoWithRelations> = ToDoSchema.merge(z.object({\n  associatedNotes: z.lazy(() => MdxNoteWithRelationsSchema).array(),\n  tags: z.lazy(() => TagWithRelationsSchema).array(),\n  topics: z.lazy(() => TopicWithRelationsSchema).array(),\n  subjects: z.lazy(() => SubjectWithRelationsSchema).array(),\n  parent: z.lazy(() => ToDoWithRelationsSchema).nullable(),\n  child: z.lazy(() => ToDoWithRelationsSchema).array(),\n  ToDoList: z.lazy(() => ToDoListWithRelationsSchema).nullable(),\n}))\n\n/////////////////////////////////////////\n// TO DO PARTIAL RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type ToDoPartialRelations = {\n  associatedNotes?: MdxNotePartialWithRelations[];\n  tags?: TagPartialWithRelations[];\n  topics?: TopicPartialWithRelations[];\n  subjects?: SubjectPartialWithRelations[];\n  parent?: ToDoPartialWithRelations | null;\n  child?: ToDoPartialWithRelations[];\n  ToDoList?: ToDoListPartialWithRelations | null;\n};\n\nexport type ToDoPartialWithRelations = z.infer<typeof ToDoPartialSchema> & ToDoPartialRelations\n\nexport const ToDoPartialWithRelationsSchema: z.ZodType<ToDoPartialWithRelations> = ToDoPartialSchema.merge(z.object({\n  associatedNotes: z.lazy(() => MdxNotePartialWithRelationsSchema).array(),\n  tags: z.lazy(() => TagPartialWithRelationsSchema).array(),\n  topics: z.lazy(() => TopicPartialWithRelationsSchema).array(),\n  subjects: z.lazy(() => SubjectPartialWithRelationsSchema).array(),\n  parent: z.lazy(() => ToDoPartialWithRelationsSchema).nullable(),\n  child: z.lazy(() => ToDoPartialWithRelationsSchema).array(),\n  ToDoList: z.lazy(() => ToDoListPartialWithRelationsSchema).nullable(),\n})).partial()\n\nexport type ToDoWithPartialRelations = z.infer<typeof ToDoSchema> & ToDoPartialRelations\n\nexport const ToDoWithPartialRelationsSchema: z.ZodType<ToDoWithPartialRelations> = ToDoSchema.merge(z.object({\n  associatedNotes: z.lazy(() => MdxNotePartialWithRelationsSchema).array(),\n  tags: z.lazy(() => TagPartialWithRelationsSchema).array(),\n  topics: z.lazy(() => TopicPartialWithRelationsSchema).array(),\n  subjects: z.lazy(() => SubjectPartialWithRelationsSchema).array(),\n  parent: z.lazy(() => ToDoPartialWithRelationsSchema).nullable(),\n  child: z.lazy(() => ToDoPartialWithRelationsSchema).array(),\n  ToDoList: z.lazy(() => ToDoListPartialWithRelationsSchema).nullable(),\n}).partial())\n\nexport default ToDoSchema;\n","import { z } from 'zod';\nimport { JsonValueSchema } from '../inputTypeSchemas/JsonValueSchema'\nimport type { RelatedValuesWithRelations } from './RelatedValuesSchema'\nimport type { RelatedValuesPartialWithRelations } from './RelatedValuesSchema'\nimport type { TagWithRelations } from './TagSchema'\nimport type { TagPartialWithRelations } from './TagSchema'\nimport type { TopicWithRelations } from './TopicSchema'\nimport type { TopicPartialWithRelations } from './TopicSchema'\nimport type { SubjectWithRelations } from './SubjectSchema'\nimport type { SubjectPartialWithRelations } from './SubjectSchema'\nimport type { MdxNoteWithRelations } from './MdxNoteSchema'\nimport type { MdxNotePartialWithRelations } from './MdxNoteSchema'\nimport { RelatedValuesWithRelationsSchema } from './RelatedValuesSchema'\nimport { RelatedValuesPartialWithRelationsSchema } from './RelatedValuesSchema'\nimport { TagWithRelationsSchema } from './TagSchema'\nimport { TagPartialWithRelationsSchema } from './TagSchema'\nimport { TopicWithRelationsSchema } from './TopicSchema'\nimport { TopicPartialWithRelationsSchema } from './TopicSchema'\nimport { SubjectWithRelationsSchema } from './SubjectSchema'\nimport { SubjectPartialWithRelationsSchema } from './SubjectSchema'\nimport { MdxNoteWithRelationsSchema } from './MdxNoteSchema'\nimport { MdxNotePartialWithRelationsSchema } from './MdxNoteSchema'\n\n/////////////////////////////////////////\n// EQUATION SCHEMA\n/////////////////////////////////////////\n\nexport const EquationSchema = z.object({\n  id: z.number().int(),\n  equationId: z.string().nullable(),\n  title: z.string(),\n  desc: z.string().nullable(),\n  content: z.string(),\n  asPython: z.string().nullable(),\n  variableLegend: JsonValueSchema,\n  variables: z.string().array(),\n  keywords: z.string().array(),\n  createdAt: z.coerce.date(),\n  lastAccess: z.coerce.date(),\n})\n\nexport type Equation = z.infer<typeof EquationSchema>\n\n/////////////////////////////////////////\n// EQUATION PARTIAL SCHEMA\n/////////////////////////////////////////\n\nexport const EquationPartialSchema = EquationSchema.partial()\n\nexport type EquationPartial = z.infer<typeof EquationPartialSchema>\n\n/////////////////////////////////////////\n// EQUATION RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type EquationRelations = {\n  relatedValues: RelatedValuesWithRelations[];\n  tags: TagWithRelations[];\n  topics: TopicWithRelations[];\n  subjects: SubjectWithRelations[];\n  mdxNotes: MdxNoteWithRelations[];\n};\n\nexport type EquationWithRelations = z.infer<typeof EquationSchema> & EquationRelations\n\nexport const EquationWithRelationsSchema: z.ZodType<EquationWithRelations> = EquationSchema.merge(z.object({\n  relatedValues: z.lazy(() => RelatedValuesWithRelationsSchema).array(),\n  tags: z.lazy(() => TagWithRelationsSchema).array(),\n  topics: z.lazy(() => TopicWithRelationsSchema).array(),\n  subjects: z.lazy(() => SubjectWithRelationsSchema).array(),\n  mdxNotes: z.lazy(() => MdxNoteWithRelationsSchema).array(),\n}))\n\n/////////////////////////////////////////\n// EQUATION PARTIAL RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type EquationPartialRelations = {\n  relatedValues?: RelatedValuesPartialWithRelations[];\n  tags?: TagPartialWithRelations[];\n  topics?: TopicPartialWithRelations[];\n  subjects?: SubjectPartialWithRelations[];\n  mdxNotes?: MdxNotePartialWithRelations[];\n};\n\nexport type EquationPartialWithRelations = z.infer<typeof EquationPartialSchema> & EquationPartialRelations\n\nexport const EquationPartialWithRelationsSchema: z.ZodType<EquationPartialWithRelations> = EquationPartialSchema.merge(z.object({\n  relatedValues: z.lazy(() => RelatedValuesPartialWithRelationsSchema).array(),\n  tags: z.lazy(() => TagPartialWithRelationsSchema).array(),\n  topics: z.lazy(() => TopicPartialWithRelationsSchema).array(),\n  subjects: z.lazy(() => SubjectPartialWithRelationsSchema).array(),\n  mdxNotes: z.lazy(() => MdxNotePartialWithRelationsSchema).array(),\n})).partial()\n\nexport type EquationWithPartialRelations = z.infer<typeof EquationSchema> & EquationPartialRelations\n\nexport const EquationWithPartialRelationsSchema: z.ZodType<EquationWithPartialRelations> = EquationSchema.merge(z.object({\n  relatedValues: z.lazy(() => RelatedValuesPartialWithRelationsSchema).array(),\n  tags: z.lazy(() => TagPartialWithRelationsSchema).array(),\n  topics: z.lazy(() => TopicPartialWithRelationsSchema).array(),\n  subjects: z.lazy(() => SubjectPartialWithRelationsSchema).array(),\n  mdxNotes: z.lazy(() => MdxNotePartialWithRelationsSchema).array(),\n}).partial())\n\nexport default EquationSchema;\n","import { z } from 'zod';\nimport { JsonValueSchema } from '../inputTypeSchemas/JsonValueSchema'\nimport type { EquationWithRelations } from './EquationSchema'\nimport type { EquationPartialWithRelations } from './EquationSchema'\nimport { EquationWithRelationsSchema } from './EquationSchema'\nimport { EquationPartialWithRelationsSchema } from './EquationSchema'\n\n/////////////////////////////////////////\n// RELATED VALUES SCHEMA\n/////////////////////////////////////////\n\nexport const RelatedValuesSchema = z.object({\n  id: z.number().int(),\n  input: JsonValueSchema,\n  output: z.number(),\n  equationId: z.number().int().array(),\n})\n\nexport type RelatedValues = z.infer<typeof RelatedValuesSchema>\n\n/////////////////////////////////////////\n// RELATED VALUES PARTIAL SCHEMA\n/////////////////////////////////////////\n\nexport const RelatedValuesPartialSchema = RelatedValuesSchema.partial()\n\nexport type RelatedValuesPartial = z.infer<typeof RelatedValuesPartialSchema>\n\n/////////////////////////////////////////\n// RELATED VALUES RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type RelatedValuesRelations = {\n  equations: EquationWithRelations[];\n};\n\nexport type RelatedValuesWithRelations = z.infer<typeof RelatedValuesSchema> & RelatedValuesRelations\n\nexport const RelatedValuesWithRelationsSchema: z.ZodType<RelatedValuesWithRelations> = RelatedValuesSchema.merge(z.object({\n  equations: z.lazy(() => EquationWithRelationsSchema).array(),\n}))\n\n/////////////////////////////////////////\n// RELATED VALUES PARTIAL RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type RelatedValuesPartialRelations = {\n  equations?: EquationPartialWithRelations[];\n};\n\nexport type RelatedValuesPartialWithRelations = z.infer<typeof RelatedValuesPartialSchema> & RelatedValuesPartialRelations\n\nexport const RelatedValuesPartialWithRelationsSchema: z.ZodType<RelatedValuesPartialWithRelations> = RelatedValuesPartialSchema.merge(z.object({\n  equations: z.lazy(() => EquationPartialWithRelationsSchema).array(),\n})).partial()\n\nexport type RelatedValuesWithPartialRelations = z.infer<typeof RelatedValuesSchema> & RelatedValuesPartialRelations\n\nexport const RelatedValuesWithPartialRelationsSchema: z.ZodType<RelatedValuesWithPartialRelations> = RelatedValuesSchema.merge(z.object({\n  equations: z.lazy(() => EquationPartialWithRelationsSchema).array(),\n}).partial())\n\nexport default RelatedValuesSchema;\n","import { z } from 'zod';\nimport type { MdxNoteWithRelations } from './MdxNoteSchema'\nimport type { MdxNotePartialWithRelations } from './MdxNoteSchema'\nimport type { IpynbWithRelations } from './IpynbSchema'\nimport type { IpynbPartialWithRelations } from './IpynbSchema'\nimport { MdxNoteWithRelationsSchema } from './MdxNoteSchema'\nimport { MdxNotePartialWithRelationsSchema } from './MdxNoteSchema'\nimport { IpynbWithRelationsSchema } from './IpynbSchema'\nimport { IpynbPartialWithRelationsSchema } from './IpynbSchema'\n\n/////////////////////////////////////////\n// SEQUENTIAL NOTE LIST SCHEMA\n/////////////////////////////////////////\n\nexport const SequentialNoteListSchema = z.object({\n  sequentialKey: z.string(),\n})\n\nexport type SequentialNoteList = z.infer<typeof SequentialNoteListSchema>\n\n/////////////////////////////////////////\n// SEQUENTIAL NOTE LIST PARTIAL SCHEMA\n/////////////////////////////////////////\n\nexport const SequentialNoteListPartialSchema = SequentialNoteListSchema.partial()\n\nexport type SequentialNoteListPartial = z.infer<typeof SequentialNoteListPartialSchema>\n\n/////////////////////////////////////////\n// SEQUENTIAL NOTE LIST RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type SequentialNoteListRelations = {\n  MdxNote: MdxNoteWithRelations[];\n  Ipynb: IpynbWithRelations[];\n};\n\nexport type SequentialNoteListWithRelations = z.infer<typeof SequentialNoteListSchema> & SequentialNoteListRelations\n\nexport const SequentialNoteListWithRelationsSchema: z.ZodType<SequentialNoteListWithRelations> = SequentialNoteListSchema.merge(z.object({\n  MdxNote: z.lazy(() => MdxNoteWithRelationsSchema).array(),\n  Ipynb: z.lazy(() => IpynbWithRelationsSchema).array(),\n}))\n\n/////////////////////////////////////////\n// SEQUENTIAL NOTE LIST PARTIAL RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type SequentialNoteListPartialRelations = {\n  MdxNote?: MdxNotePartialWithRelations[];\n  Ipynb?: IpynbPartialWithRelations[];\n};\n\nexport type SequentialNoteListPartialWithRelations = z.infer<typeof SequentialNoteListPartialSchema> & SequentialNoteListPartialRelations\n\nexport const SequentialNoteListPartialWithRelationsSchema: z.ZodType<SequentialNoteListPartialWithRelations> = SequentialNoteListPartialSchema.merge(z.object({\n  MdxNote: z.lazy(() => MdxNotePartialWithRelationsSchema).array(),\n  Ipynb: z.lazy(() => IpynbPartialWithRelationsSchema).array(),\n})).partial()\n\nexport type SequentialNoteListWithPartialRelations = z.infer<typeof SequentialNoteListSchema> & SequentialNoteListPartialRelations\n\nexport const SequentialNoteListWithPartialRelationsSchema: z.ZodType<SequentialNoteListWithPartialRelations> = SequentialNoteListSchema.merge(z.object({\n  MdxNote: z.lazy(() => MdxNotePartialWithRelationsSchema).array(),\n  Ipynb: z.lazy(() => IpynbPartialWithRelationsSchema).array(),\n}).partial())\n\nexport default SequentialNoteListSchema;\n","import { z } from 'zod';\nimport type { BibEntryWithRelations } from './BibEntrySchema'\nimport type { BibEntryPartialWithRelations } from './BibEntrySchema'\nimport type { MdxNoteWithRelations } from './MdxNoteSchema'\nimport type { MdxNotePartialWithRelations } from './MdxNoteSchema'\nimport type { IpynbWithRelations } from './IpynbSchema'\nimport type { IpynbPartialWithRelations } from './IpynbSchema'\nimport { BibEntryWithRelationsSchema } from './BibEntrySchema'\nimport { BibEntryPartialWithRelationsSchema } from './BibEntrySchema'\nimport { MdxNoteWithRelationsSchema } from './MdxNoteSchema'\nimport { MdxNotePartialWithRelationsSchema } from './MdxNoteSchema'\nimport { IpynbWithRelationsSchema } from './IpynbSchema'\nimport { IpynbPartialWithRelationsSchema } from './IpynbSchema'\n\n/////////////////////////////////////////\n// READING LIST SCHEMA\n/////////////////////////////////////////\n\nexport const ReadingListSchema = z.object({\n  name: z.string(),\n  description: z.string().nullable(),\n  createdAt: z.coerce.date(),\n  lastUpdate: z.coerce.date(),\n})\n\nexport type ReadingList = z.infer<typeof ReadingListSchema>\n\n/////////////////////////////////////////\n// READING LIST PARTIAL SCHEMA\n/////////////////////////////////////////\n\nexport const ReadingListPartialSchema = ReadingListSchema.partial()\n\nexport type ReadingListPartial = z.infer<typeof ReadingListPartialSchema>\n\n/////////////////////////////////////////\n// READING LIST RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type ReadingListRelations = {\n  bibEntries: BibEntryWithRelations[];\n  mdxNotes: MdxNoteWithRelations[];\n  ipynbNotes: IpynbWithRelations[];\n};\n\nexport type ReadingListWithRelations = z.infer<typeof ReadingListSchema> & ReadingListRelations\n\nexport const ReadingListWithRelationsSchema: z.ZodType<ReadingListWithRelations> = ReadingListSchema.merge(z.object({\n  bibEntries: z.lazy(() => BibEntryWithRelationsSchema).array(),\n  mdxNotes: z.lazy(() => MdxNoteWithRelationsSchema).array(),\n  ipynbNotes: z.lazy(() => IpynbWithRelationsSchema).array(),\n}))\n\n/////////////////////////////////////////\n// READING LIST PARTIAL RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type ReadingListPartialRelations = {\n  bibEntries?: BibEntryPartialWithRelations[];\n  mdxNotes?: MdxNotePartialWithRelations[];\n  ipynbNotes?: IpynbPartialWithRelations[];\n};\n\nexport type ReadingListPartialWithRelations = z.infer<typeof ReadingListPartialSchema> & ReadingListPartialRelations\n\nexport const ReadingListPartialWithRelationsSchema: z.ZodType<ReadingListPartialWithRelations> = ReadingListPartialSchema.merge(z.object({\n  bibEntries: z.lazy(() => BibEntryPartialWithRelationsSchema).array(),\n  mdxNotes: z.lazy(() => MdxNotePartialWithRelationsSchema).array(),\n  ipynbNotes: z.lazy(() => IpynbPartialWithRelationsSchema).array(),\n})).partial()\n\nexport type ReadingListWithPartialRelations = z.infer<typeof ReadingListSchema> & ReadingListPartialRelations\n\nexport const ReadingListWithPartialRelationsSchema: z.ZodType<ReadingListWithPartialRelations> = ReadingListSchema.merge(z.object({\n  bibEntries: z.lazy(() => BibEntryPartialWithRelationsSchema).array(),\n  mdxNotes: z.lazy(() => MdxNotePartialWithRelationsSchema).array(),\n  ipynbNotes: z.lazy(() => IpynbPartialWithRelationsSchema).array(),\n}).partial())\n\nexport default ReadingListSchema;\n","import { z } from 'zod';\nimport type { MdxNoteWithRelations } from './MdxNoteSchema'\nimport type { MdxNotePartialWithRelations } from './MdxNoteSchema'\nimport { MdxNoteWithRelationsSchema } from './MdxNoteSchema'\nimport { MdxNotePartialWithRelationsSchema } from './MdxNoteSchema'\n\n/////////////////////////////////////////\n// DEFINITION SCHEMA\n/////////////////////////////////////////\n\nexport const DefinitionSchema = z.object({\n  id: z.string(),\n  label: z.string().nullable(),\n  content: z.string().nullable(),\n  alphabeticalLabel: z.string().nullable(),\n  mdxNoteId: z.number().int().nullable(),\n  createdAt: z.coerce.date(),\n  lastAccess: z.coerce.date(),\n})\n\nexport type Definition = z.infer<typeof DefinitionSchema>\n\n/////////////////////////////////////////\n// DEFINITION PARTIAL SCHEMA\n/////////////////////////////////////////\n\nexport const DefinitionPartialSchema = DefinitionSchema.partial()\n\nexport type DefinitionPartial = z.infer<typeof DefinitionPartialSchema>\n\n/////////////////////////////////////////\n// DEFINITION RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type DefinitionRelations = {\n  mdxNote?: MdxNoteWithRelations | null;\n};\n\nexport type DefinitionWithRelations = z.infer<typeof DefinitionSchema> & DefinitionRelations\n\nexport const DefinitionWithRelationsSchema: z.ZodType<DefinitionWithRelations> = DefinitionSchema.merge(z.object({\n  mdxNote: z.lazy(() => MdxNoteWithRelationsSchema).nullable(),\n}))\n\n/////////////////////////////////////////\n// DEFINITION PARTIAL RELATION SCHEMA\n/////////////////////////////////////////\n\nexport type DefinitionPartialRelations = {\n  mdxNote?: MdxNotePartialWithRelations | null;\n};\n\nexport type DefinitionPartialWithRelations = z.infer<typeof DefinitionPartialSchema> & DefinitionPartialRelations\n\nexport const DefinitionPartialWithRelationsSchema: z.ZodType<DefinitionPartialWithRelations> = DefinitionPartialSchema.merge(z.object({\n  mdxNote: z.lazy(() => MdxNotePartialWithRelationsSchema).nullable(),\n})).partial()\n\nexport type DefinitionWithPartialRelations = z.infer<typeof DefinitionSchema> & DefinitionPartialRelations\n\nexport const DefinitionWithPartialRelationsSchema: z.ZodType<DefinitionWithPartialRelations> = DefinitionSchema.merge(z.object({\n  mdxNote: z.lazy(() => MdxNotePartialWithRelationsSchema).nullable(),\n}).partial())\n\nexport default DefinitionSchema;\n"]}