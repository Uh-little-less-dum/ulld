{"version":3,"sources":["../src/database/outputTypeSchemas/QuoteCreateArgsSchema.ts"],"names":[],"mappings":";;;;;;;;AAAA,SAAS,SAAS;AAOX,IAAM,oBAAmD,EAAE,OAAO;AAAA,EACvE,MAAM,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC3B,QAAQ,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC7B,QAAQ,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC7B,QAAQ,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC7B,WAAW,EAAE,QAAQ,EAAE,SAAS;AAClC,CAAC,EAAE,OAAO;AAEH,IAAM,wBAA2D,EAAE,OAAO;AAAA,EAC/E,QAAQ,kBAAkB,SAAS;AAAA,EACnC,MAAM,EAAE,MAAM,CAAE,wBAAuB,+BAAgC,CAAC;AAC1E,CAAC,EAAE,OAAO;AAEV,IAAO,gCAAQ","sourcesContent":["import { z } from 'zod';\nimport type { Prisma } from '@prisma/client';\nimport { QuoteCreateInputSchema } from '../inputTypeSchemas/QuoteCreateInputSchema'\nimport { QuoteUncheckedCreateInputSchema } from '../inputTypeSchemas/QuoteUncheckedCreateInputSchema'\n// Select schema needs to be in file to prevent circular imports\n//------------------------------------------------------\n\nexport const QuoteSelectSchema: z.ZodType<Prisma.QuoteSelect> = z.object({\n  body: z.boolean().optional(),\n  author: z.boolean().optional(),\n  source: z.boolean().optional(),\n  pinned: z.boolean().optional(),\n  createdAt: z.boolean().optional(),\n}).strict()\n\nexport const QuoteCreateArgsSchema: z.ZodType<Prisma.QuoteCreateArgs> = z.object({\n  select: QuoteSelectSchema.optional(),\n  data: z.union([ QuoteCreateInputSchema,QuoteUncheckedCreateInputSchema ]),\n}).strict() ;\n\nexport default QuoteCreateArgsSchema;\n"]}