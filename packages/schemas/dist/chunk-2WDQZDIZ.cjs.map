{"version":3,"sources":["../src/database/outputTypeSchemas/RelatedValuesFindFirstOrThrowArgsSchema.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,SAAS;AAYX,IAAM,4BAAmE,EAAE,OAAO;AAAA,EACvF,IAAI,EAAE,QAAQ,EAAE,SAAS;AAAA,EACzB,OAAO,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC5B,QAAQ,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC7B,YAAY,EAAE,QAAQ,EAAE,SAAS;AAAA,EACjC,WAAW,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,0BAA0B,CAAC,CAAC,EAAE,SAAS;AAAA,EACpF,QAAQ,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,sCAAsC,CAAC,CAAC,EAAE,SAAS;AAC/F,CAAC,EAAE,OAAO;AAEH,IAAM,0CAA+F,EAAE,OAAO;AAAA,EACnH,QAAQ,0BAA0B,SAAS;AAAA,EAC3C,SAAS,2BAA2B,SAAS;AAAA,EAC7C,OAAO,8BAA8B,SAAS;AAAA,EAC9C,SAAS,EAAE,MAAM,CAAE,4CAA4C,MAAM,GAAE,2CAA4C,CAAC,EAAE,SAAS;AAAA,EAC/H,QAAQ,oCAAoC,SAAS;AAAA,EACrD,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,EAC1B,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,EAC1B,UAAU,EAAE,MAAM,CAAE,oCAAmC,mCAAmC,MAAM,CAAE,CAAC,EAAE,SAAS;AAChH,CAAC,EAAE,OAAO;AAEV,IAAO,kDAAQ","sourcesContent":["import { z } from 'zod';\nimport type { Prisma } from '@prisma/client';\nimport { RelatedValuesIncludeSchema } from '../inputTypeSchemas/RelatedValuesIncludeSchema'\nimport { RelatedValuesWhereInputSchema } from '../inputTypeSchemas/RelatedValuesWhereInputSchema'\nimport { RelatedValuesOrderByWithRelationInputSchema } from '../inputTypeSchemas/RelatedValuesOrderByWithRelationInputSchema'\nimport { RelatedValuesWhereUniqueInputSchema } from '../inputTypeSchemas/RelatedValuesWhereUniqueInputSchema'\nimport { RelatedValuesScalarFieldEnumSchema } from '../inputTypeSchemas/RelatedValuesScalarFieldEnumSchema'\nimport { EquationFindManyArgsSchema } from \"../outputTypeSchemas/EquationFindManyArgsSchema\"\nimport { RelatedValuesCountOutputTypeArgsSchema } from \"../outputTypeSchemas/RelatedValuesCountOutputTypeArgsSchema\"\n// Select schema needs to be in file to prevent circular imports\n//------------------------------------------------------\n\nexport const RelatedValuesSelectSchema: z.ZodType<Prisma.RelatedValuesSelect> = z.object({\n  id: z.boolean().optional(),\n  input: z.boolean().optional(),\n  output: z.boolean().optional(),\n  equationId: z.boolean().optional(),\n  equations: z.union([z.boolean(),z.lazy(() => EquationFindManyArgsSchema)]).optional(),\n  _count: z.union([z.boolean(),z.lazy(() => RelatedValuesCountOutputTypeArgsSchema)]).optional(),\n}).strict()\n\nexport const RelatedValuesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RelatedValuesFindFirstOrThrowArgs> = z.object({\n  select: RelatedValuesSelectSchema.optional(),\n  include: RelatedValuesIncludeSchema.optional(),\n  where: RelatedValuesWhereInputSchema.optional(),\n  orderBy: z.union([ RelatedValuesOrderByWithRelationInputSchema.array(),RelatedValuesOrderByWithRelationInputSchema ]).optional(),\n  cursor: RelatedValuesWhereUniqueInputSchema.optional(),\n  take: z.number().optional(),\n  skip: z.number().optional(),\n  distinct: z.union([ RelatedValuesScalarFieldEnumSchema,RelatedValuesScalarFieldEnumSchema.array() ]).optional(),\n}).strict() ;\n\nexport default RelatedValuesFindFirstOrThrowArgsSchema;\n"]}