{"version":3,"sources":["../src/database/outputTypeSchemas/BusinessContactFindUniqueArgsSchema.ts"],"names":[],"mappings":";;;;;AAAA,SAAS,SAAS;AAKX,IAAM,8BAAuE,EAAE,OAAO;AAAA,EAC3F,IAAI,EAAE,QAAQ,EAAE,SAAS;AAAA,EACzB,aAAa,EAAE,QAAQ,EAAE,SAAS;AAAA,EAClC,aAAa,EAAE,QAAQ,EAAE,SAAS;AAAA,EAClC,mBAAmB,EAAE,QAAQ,EAAE,SAAS;AAAA,EACxC,OAAO,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC5B,OAAO,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC5B,SAAS,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC9B,SAAS,EAAE,QAAQ,EAAE,SAAS;AAChC,CAAC,EAAE,OAAO;AACH,IAAM,sCAAuF,EAAE,OAAO;AAAA,EAC3G,QAAQ,4BAA4B,SAAS;AAAA,EAC7C,OAAO;AACT,CAAC,EAAE,OAAO;AACV,IAAO,8CAAQ","sourcesContent":["import { z } from 'zod';\nimport type { Prisma } from '@ulld/database/db';\nimport { BusinessContactWhereUniqueInputSchema } from '../inputTypeSchemas/BusinessContactWhereUniqueInputSchema.js'\n// Select schema needs to be in file to prevent circular imports\n//------------------------------------------------------\nexport const BusinessContactSelectSchema: z.ZodType<Prisma.BusinessContactSelect> = z.object({\n  id: z.boolean().optional(),\n  companyName: z.boolean().optional(),\n  contactName: z.boolean().optional(),\n  contactPreference: z.boolean().optional(),\n  email: z.boolean().optional(),\n  phone: z.boolean().optional(),\n  message: z.boolean().optional(),\n  purpose: z.boolean().optional(),\n}).strict()\nexport const BusinessContactFindUniqueArgsSchema: z.ZodType<Prisma.BusinessContactFindUniqueArgs> = z.object({\n  select: BusinessContactSelectSchema.optional(),\n  where: BusinessContactWhereUniqueInputSchema,\n}).strict() ;\nexport default BusinessContactFindUniqueArgsSchema;"]}