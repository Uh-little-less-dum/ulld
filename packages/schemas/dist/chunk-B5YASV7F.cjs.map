{"version":3,"sources":["../src/database/outputTypeSchemas/ServingFindFirstArgsSchema.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAAS,SAAS;AAUX,IAAM,sBAAuD,EAAE,OAAO;AAAA,EAC3E,IAAI,EAAE,QAAQ,EAAE,SAAS;AAAA,EACzB,eAAe,EAAE,QAAQ,EAAE,SAAS;AAAA,EACpC,UAAU,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC/B,aAAa,EAAE,QAAQ,EAAE,SAAS;AAAA,EAClC,MAAM,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,qBAAqB,CAAC,CAAC,EAAE,SAAS;AAC5E,CAAC,EAAE,OAAO;AACH,IAAM,6BAAqE,EAAE,OAAO;AAAA,EACzF,QAAQ,oBAAoB,SAAS;AAAA,EACrC,SAAS,qBAAqB,SAAS;AAAA,EACvC,OAAO,wBAAwB,SAAS;AAAA,EACxC,SAAS,EAAE,MAAM,CAAE,sCAAsC,MAAM,GAAE,qCAAsC,CAAC,EAAE,SAAS;AAAA,EACnH,QAAQ,8BAA8B,SAAS;AAAA,EAC/C,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,EAC1B,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,EAC1B,UAAU,EAAE,MAAM,CAAE,8BAA6B,6BAA6B,MAAM,CAAE,CAAC,EAAE,SAAS;AACpG,CAAC,EAAE,OAAO;AACV,IAAO,qCAAQ","sourcesContent":["import { z } from 'zod';\nimport type { Prisma } from '@ulld/database/db';\nimport { ServingIncludeSchema } from '../inputTypeSchemas/ServingIncludeSchema.js'\nimport { ServingWhereInputSchema } from '../inputTypeSchemas/ServingWhereInputSchema.js'\nimport { ServingOrderByWithRelationInputSchema } from '../inputTypeSchemas/ServingOrderByWithRelationInputSchema.js'\nimport { ServingWhereUniqueInputSchema } from '../inputTypeSchemas/ServingWhereUniqueInputSchema.js'\nimport { ServingScalarFieldEnumSchema } from '../inputTypeSchemas/ServingScalarFieldEnumSchema.js'\nimport { DietaryItemArgsSchema } from \"../outputTypeSchemas/DietaryItemArgsSchema\"\n// Select schema needs to be in file to prevent circular imports\n//------------------------------------------------------\nexport const ServingSelectSchema: z.ZodType<Prisma.ServingSelect> = z.object({\n  id: z.boolean().optional(),\n  dietaryItemId: z.boolean().optional(),\n  quant_oz: z.boolean().optional(),\n  quant_guess: z.boolean().optional(),\n  item: z.union([z.boolean(),z.lazy(() => DietaryItemArgsSchema)]).optional(),\n}).strict()\nexport const ServingFindFirstArgsSchema: z.ZodType<Prisma.ServingFindFirstArgs> = z.object({\n  select: ServingSelectSchema.optional(),\n  include: ServingIncludeSchema.optional(),\n  where: ServingWhereInputSchema.optional(),\n  orderBy: z.union([ ServingOrderByWithRelationInputSchema.array(),ServingOrderByWithRelationInputSchema ]).optional(),\n  cursor: ServingWhereUniqueInputSchema.optional(),\n  take: z.number().optional(),\n  skip: z.number().optional(),\n  distinct: z.union([ ServingScalarFieldEnumSchema,ServingScalarFieldEnumSchema.array() ]).optional(),\n}).strict() ;\nexport default ServingFindFirstArgsSchema;"]}