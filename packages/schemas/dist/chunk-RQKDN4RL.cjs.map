{"version":3,"sources":["../src/database/outputTypeSchemas/DietFindFirstArgsSchema.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,SAAS;AAaX,IAAM,mBAAiD,EAAE,OAAO;AAAA,EACrE,MAAM,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC3B,SAAS,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC9B,mBAAmB,EAAE,QAAQ,EAAE,SAAS;AAAA,EACxC,IAAI,EAAE,QAAQ,EAAE,SAAS;AAAA,EACzB,OAAO,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC5B,aAAa,EAAE,QAAQ,EAAE,SAAS;AAAA,EAClC,YAAY,EAAE,QAAQ,EAAE,SAAS;AAAA,EACjC,SAAS,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC9B,gBAAgB,EAAE,QAAQ,EAAE,SAAS;AAAA,EACrC,gBAAgB,EAAE,QAAQ,EAAE,SAAS;AAAA,EACrC,MAAM,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC3B,KAAK,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC1B,KAAK,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC1B,OAAO,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC5B,SAAS,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC9B,YAAY,EAAE,QAAQ,EAAE,SAAS;AAAA,EACjC,OAAO,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,6BAA6B,CAAC,CAAC,EAAE,SAAS;AAAA,EACnF,iBAAiB,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,4BAA4B,CAAC,CAAC,EAAE,SAAS;AAAA,EAC5F,cAAc,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,8BAA8B,CAAC,CAAC,EAAE,SAAS;AAAA,EAC3F,QAAQ,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,6BAA6B,CAAC,CAAC,EAAE,SAAS;AACtF,CAAC,EAAE,OAAO;AACH,IAAM,0BAA+D,EAAE,OAAO;AAAA,EACnF,QAAQ,iBAAiB,SAAS;AAAA,EAClC,SAAS,kBAAkB,SAAS;AAAA,EACpC,OAAO,qBAAqB,SAAS;AAAA,EACrC,SAAS,EAAE,MAAM,CAAE,mCAAmC,MAAM,GAAE,kCAAmC,CAAC,EAAE,SAAS;AAAA,EAC7G,QAAQ,2BAA2B,SAAS;AAAA,EAC5C,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,EAC1B,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,EAC1B,UAAU,EAAE,MAAM,CAAE,2BAA0B,0BAA0B,MAAM,CAAE,CAAC,EAAE,SAAS;AAC9F,CAAC,EAAE,OAAO;AACV,IAAO,kCAAQ","sourcesContent":["import { z } from 'zod';\nimport type { Prisma } from '@ulld/database/db';\nimport { DietIncludeSchema } from '../inputTypeSchemas/DietIncludeSchema.js'\nimport { DietWhereInputSchema } from '../inputTypeSchemas/DietWhereInputSchema.js'\nimport { DietOrderByWithRelationInputSchema } from '../inputTypeSchemas/DietOrderByWithRelationInputSchema.js'\nimport { DietWhereUniqueInputSchema } from '../inputTypeSchemas/DietWhereUniqueInputSchema.js'\nimport { DietScalarFieldEnumSchema } from '../inputTypeSchemas/DietScalarFieldEnumSchema.js'\nimport { DietaryItemFindManyArgsSchema } from \"../outputTypeSchemas/DietaryItemFindManyArgsSchema\"\nimport { TimePeriodFindManyArgsSchema } from \"../outputTypeSchemas/TimePeriodFindManyArgsSchema\"\nimport { HealthReportFindManyArgsSchema } from \"../outputTypeSchemas/HealthReportFindManyArgsSchema\"\nimport { DietCountOutputTypeArgsSchema } from \"../outputTypeSchemas/DietCountOutputTypeArgsSchema\"\n// Select schema needs to be in file to prevent circular imports\n//------------------------------------------------------\nexport const DietSelectSchema: z.ZodType<Prisma.DietSelect> = z.object({\n  name: z.boolean().optional(),\n  summary: z.boolean().optional(),\n  activelyFollowing: z.boolean().optional(),\n  gf: z.boolean().optional(),\n  vegan: z.boolean().optional(),\n  pescatarian: z.boolean().optional(),\n  vegetarian: z.boolean().optional(),\n  fasting: z.boolean().optional(),\n  cardioTraining: z.boolean().optional(),\n  weightTraining: z.boolean().optional(),\n  carb: z.boolean().optional(),\n  pro: z.boolean().optional(),\n  fat: z.boolean().optional(),\n  goals: z.boolean().optional(),\n  created: z.boolean().optional(),\n  lastUpdate: z.boolean().optional(),\n  items: z.union([z.boolean(),z.lazy(() => DietaryItemFindManyArgsSchema)]).optional(),\n  periodsFollowed: z.union([z.boolean(),z.lazy(() => TimePeriodFindManyArgsSchema)]).optional(),\n  HealthReport: z.union([z.boolean(),z.lazy(() => HealthReportFindManyArgsSchema)]).optional(),\n  _count: z.union([z.boolean(),z.lazy(() => DietCountOutputTypeArgsSchema)]).optional(),\n}).strict()\nexport const DietFindFirstArgsSchema: z.ZodType<Prisma.DietFindFirstArgs> = z.object({\n  select: DietSelectSchema.optional(),\n  include: DietIncludeSchema.optional(),\n  where: DietWhereInputSchema.optional(),\n  orderBy: z.union([ DietOrderByWithRelationInputSchema.array(),DietOrderByWithRelationInputSchema ]).optional(),\n  cursor: DietWhereUniqueInputSchema.optional(),\n  take: z.number().optional(),\n  skip: z.number().optional(),\n  distinct: z.union([ DietScalarFieldEnumSchema,DietScalarFieldEnumSchema.array() ]).optional(),\n}).strict() ;\nexport default DietFindFirstArgsSchema;"]}