{"version":3,"sources":["../src/database/outputTypeSchemas/ToDoGroupByArgsSchema.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,SAAS,SAAS;AAMX,IAAM,wBAA2D,EAAE,OAAO;AAAA,EAC/E,OAAO,qBAAqB,SAAS;AAAA,EACrC,SAAS,EAAE,MAAM,CAAE,sCAAsC,MAAM,GAAE,qCAAsC,CAAC,EAAE,SAAS;AAAA,EACnH,IAAI,0BAA0B,MAAM;AAAA,EACpC,QAAQ,yCAAyC,SAAS;AAAA,EAC1D,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,EAC1B,MAAM,EAAE,OAAO,EAAE,SAAS;AAC5B,CAAC,EAAE,OAAO;AACV,IAAO,gCAAQ","sourcesContent":["import { z } from 'zod';\nimport type { Prisma } from '@ulld/database/db';\nimport { ToDoWhereInputSchema } from '../inputTypeSchemas/ToDoWhereInputSchema.js'\nimport { ToDoOrderByWithAggregationInputSchema } from '../inputTypeSchemas/ToDoOrderByWithAggregationInputSchema.js'\nimport { ToDoScalarFieldEnumSchema } from '../inputTypeSchemas/ToDoScalarFieldEnumSchema.js'\nimport { ToDoScalarWhereWithAggregatesInputSchema } from '../inputTypeSchemas/ToDoScalarWhereWithAggregatesInputSchema.js'\nexport const ToDoGroupByArgsSchema: z.ZodType<Prisma.ToDoGroupByArgs> = z.object({\n  where: ToDoWhereInputSchema.optional(),\n  orderBy: z.union([ ToDoOrderByWithAggregationInputSchema.array(),ToDoOrderByWithAggregationInputSchema ]).optional(),\n  by: ToDoScalarFieldEnumSchema.array(),\n  having: ToDoScalarWhereWithAggregatesInputSchema.optional(),\n  take: z.number().optional(),\n  skip: z.number().optional(),\n}).strict() ;\nexport default ToDoGroupByArgsSchema;"]}