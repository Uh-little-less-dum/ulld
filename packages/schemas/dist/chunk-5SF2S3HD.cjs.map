{"version":3,"sources":["../src/database/outputTypeSchemas/IpynbFindUniqueArgsSchema.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,SAAS,SAAS;AAcX,IAAM,oBAAmD,EAAE,OAAO;AAAA,EACvE,IAAI,EAAE,QAAQ,EAAE,SAAS;AAAA,EACzB,kBAAkB,EAAE,QAAQ,EAAE,SAAS;AAAA,EACvC,aAAa,EAAE,QAAQ,EAAE,SAAS;AAAA,EAClC,OAAO,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC5B,YAAY,EAAE,QAAQ,EAAE,SAAS;AAAA,EACjC,oBAAoB,EAAE,QAAQ,EAAE,SAAS;AAAA,EACzC,iBAAiB,EAAE,QAAQ,EAAE,SAAS;AAAA,EACtC,MAAM,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC3B,oBAAoB,EAAE,QAAQ,EAAE,SAAS;AAAA,EACzC,KAAK,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC1B,eAAe,EAAE,QAAQ,EAAE,SAAS;AAAA,EACpC,iBAAiB,EAAE,QAAQ,EAAE,SAAS;AAAA,EACtC,YAAY,EAAE,QAAQ,EAAE,SAAS;AAAA,EACjC,WAAW,EAAE,QAAQ,EAAE,SAAS;AAAA,EAChC,UAAU,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC/B,YAAY,EAAE,QAAQ,EAAE,SAAS;AAAA,EACjC,MAAM,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,qBAAqB,CAAC,CAAC,EAAE,SAAS;AAAA,EAC1E,QAAQ,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,uBAAuB,CAAC,CAAC,EAAE,SAAS;AAAA,EAC9E,UAAU,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,yBAAyB,CAAC,CAAC,EAAE,SAAS;AAAA,EAClF,WAAW,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,0BAA0B,CAAC,CAAC,EAAE,SAAS;AAAA,EACpF,gBAAgB,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,4BAA4B,CAAC,CAAC,EAAE,SAAS;AAAA,EAC3F,aAAa,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,6BAA6B,CAAC,CAAC,EAAE,SAAS;AAAA,EACzF,QAAQ,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,8BAA8B,CAAC,CAAC,EAAE,SAAS;AACvF,CAAC,EAAE,OAAO;AAEH,IAAM,4BAAmE,EAAE,OAAO;AAAA,EACvF,QAAQ,kBAAkB,SAAS;AAAA,EACnC,SAAS,mBAAmB,SAAS;AAAA,EACrC,OAAO;AACT,CAAC,EAAE,OAAO;AAEV,IAAO,oCAAQ","sourcesContent":["import { z } from 'zod';\nimport type { Prisma } from '@prisma/client';\nimport { IpynbIncludeSchema } from '../inputTypeSchemas/IpynbIncludeSchema'\nimport { IpynbWhereUniqueInputSchema } from '../inputTypeSchemas/IpynbWhereUniqueInputSchema'\nimport { TagFindManyArgsSchema } from \"../outputTypeSchemas/TagFindManyArgsSchema\"\nimport { TopicFindManyArgsSchema } from \"../outputTypeSchemas/TopicFindManyArgsSchema\"\nimport { SubjectFindManyArgsSchema } from \"../outputTypeSchemas/SubjectFindManyArgsSchema\"\nimport { BibEntryFindManyArgsSchema } from \"../outputTypeSchemas/BibEntryFindManyArgsSchema\"\nimport { SequentialNoteListArgsSchema } from \"../outputTypeSchemas/SequentialNoteListArgsSchema\"\nimport { ReadingListFindManyArgsSchema } from \"../outputTypeSchemas/ReadingListFindManyArgsSchema\"\nimport { IpynbCountOutputTypeArgsSchema } from \"../outputTypeSchemas/IpynbCountOutputTypeArgsSchema\"\n// Select schema needs to be in file to prevent circular imports\n//------------------------------------------------------\n\nexport const IpynbSelectSchema: z.ZodType<Prisma.IpynbSelect> = z.object({\n  id: z.boolean().optional(),\n  rootRelativePath: z.boolean().optional(),\n  isProtected: z.boolean().optional(),\n  title: z.boolean().optional(),\n  latexTitle: z.boolean().optional(),\n  citationsListOrder: z.boolean().optional(),\n  importantValues: z.boolean().optional(),\n  href: z.boolean().optional(),\n  outgoingQuickLinks: z.boolean().optional(),\n  raw: z.boolean().optional(),\n  sequentialKey: z.boolean().optional(),\n  sequentialIndex: z.boolean().optional(),\n  bookmarked: z.boolean().optional(),\n  firstSync: z.boolean().optional(),\n  lastSync: z.boolean().optional(),\n  lastAccess: z.boolean().optional(),\n  tags: z.union([z.boolean(),z.lazy(() => TagFindManyArgsSchema)]).optional(),\n  topics: z.union([z.boolean(),z.lazy(() => TopicFindManyArgsSchema)]).optional(),\n  subjects: z.union([z.boolean(),z.lazy(() => SubjectFindManyArgsSchema)]).optional(),\n  citations: z.union([z.boolean(),z.lazy(() => BibEntryFindManyArgsSchema)]).optional(),\n  sequentialList: z.union([z.boolean(),z.lazy(() => SequentialNoteListArgsSchema)]).optional(),\n  readingList: z.union([z.boolean(),z.lazy(() => ReadingListFindManyArgsSchema)]).optional(),\n  _count: z.union([z.boolean(),z.lazy(() => IpynbCountOutputTypeArgsSchema)]).optional(),\n}).strict()\n\nexport const IpynbFindUniqueArgsSchema: z.ZodType<Prisma.IpynbFindUniqueArgs> = z.object({\n  select: IpynbSelectSchema.optional(),\n  include: IpynbIncludeSchema.optional(),\n  where: IpynbWhereUniqueInputSchema,\n}).strict() ;\n\nexport default IpynbFindUniqueArgsSchema;\n"]}