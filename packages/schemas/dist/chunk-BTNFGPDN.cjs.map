{"version":3,"sources":["../src/database/outputTypeSchemas/NoteTypeUpsertArgsSchema.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,SAAS,SAAS;AAUX,IAAM,uBAAyD,EAAE,OAAO;AAAA,EAC7E,MAAM,EAAE,QAAQ,EAAE,SAAS;AAC7B,CAAC,EAAE,OAAO;AAEH,IAAM,2BAAiE,EAAE,OAAO;AAAA,EACrF,QAAQ,qBAAqB,SAAS;AAAA,EACtC,OAAO;AAAA,EACP,QAAQ,EAAE,MAAM,CAAE,2BAA0B,kCAAmC,CAAC;AAAA,EAChF,QAAQ,EAAE,MAAM,CAAE,2BAA0B,kCAAmC,CAAC;AAClF,CAAC,EAAE,OAAO;AAEV,IAAO,mCAAQ","sourcesContent":["import { z } from 'zod';\nimport type { Prisma } from '@prisma/client';\nimport { NoteTypeWhereUniqueInputSchema } from '../inputTypeSchemas/NoteTypeWhereUniqueInputSchema'\nimport { NoteTypeCreateInputSchema } from '../inputTypeSchemas/NoteTypeCreateInputSchema'\nimport { NoteTypeUncheckedCreateInputSchema } from '../inputTypeSchemas/NoteTypeUncheckedCreateInputSchema'\nimport { NoteTypeUpdateInputSchema } from '../inputTypeSchemas/NoteTypeUpdateInputSchema'\nimport { NoteTypeUncheckedUpdateInputSchema } from '../inputTypeSchemas/NoteTypeUncheckedUpdateInputSchema'\n// Select schema needs to be in file to prevent circular imports\n//------------------------------------------------------\n\nexport const NoteTypeSelectSchema: z.ZodType<Prisma.NoteTypeSelect> = z.object({\n  name: z.boolean().optional(),\n}).strict()\n\nexport const NoteTypeUpsertArgsSchema: z.ZodType<Prisma.NoteTypeUpsertArgs> = z.object({\n  select: NoteTypeSelectSchema.optional(),\n  where: NoteTypeWhereUniqueInputSchema,\n  create: z.union([ NoteTypeCreateInputSchema,NoteTypeUncheckedCreateInputSchema ]),\n  update: z.union([ NoteTypeUpdateInputSchema,NoteTypeUncheckedUpdateInputSchema ]),\n}).strict() ;\n\nexport default NoteTypeUpsertArgsSchema;\n"]}