{"version":3,"sources":["../src/database/outputTypeSchemas/PracticeExamCreateArgsSchema.ts"],"sourcesContent":["import { z } from 'zod';\nimport type { Prisma } from '@ulld/database/db';\nimport { PracticeExamIncludeSchema } from '../inputTypeSchemas/PracticeExamIncludeSchema.js'\nimport { PracticeExamCreateInputSchema } from '../inputTypeSchemas/PracticeExamCreateInputSchema.js'\nimport { PracticeExamUncheckedCreateInputSchema } from '../inputTypeSchemas/PracticeExamUncheckedCreateInputSchema.js'\nimport { TopicFindManyArgsSchema } from \"../outputTypeSchemas/TopicFindManyArgsSchema\"\nimport { TagFindManyArgsSchema } from \"../outputTypeSchemas/TagFindManyArgsSchema\"\nimport { SubjectFindManyArgsSchema } from \"../outputTypeSchemas/SubjectFindManyArgsSchema\"\nimport { QAPairFindManyArgsSchema } from \"../outputTypeSchemas/QAPairFindManyArgsSchema\"\nimport { PracticeExamCountOutputTypeArgsSchema } from \"../outputTypeSchemas/PracticeExamCountOutputTypeArgsSchema\"\n// Select schema needs to be in file to prevent circular imports\n//------------------------------------------------------\nexport const PracticeExamSelectSchema: z.ZodType<Prisma.PracticeExamSelect> = z.object({\n  id: z.boolean().optional(),\n  correctCount: z.boolean().optional(),\n  inCorrectCount: z.boolean().optional(),\n  timeLimitInSeconds: z.boolean().optional(),\n  timeCompletedInSeconds: z.boolean().optional(),\n  date: z.boolean().optional(),\n  topics: z.union([z.boolean(),z.lazy(() => TopicFindManyArgsSchema)]).optional(),\n  tags: z.union([z.boolean(),z.lazy(() => TagFindManyArgsSchema)]).optional(),\n  subjects: z.union([z.boolean(),z.lazy(() => SubjectFindManyArgsSchema)]).optional(),\n  questions: z.union([z.boolean(),z.lazy(() => QAPairFindManyArgsSchema)]).optional(),\n  _count: z.union([z.boolean(),z.lazy(() => PracticeExamCountOutputTypeArgsSchema)]).optional(),\n}).strict()\nexport const PracticeExamCreateArgsSchema: z.ZodType<Prisma.PracticeExamCreateArgs> = z.object({\n  select: PracticeExamSelectSchema.optional(),\n  include: PracticeExamIncludeSchema.optional(),\n  data: z.union([ PracticeExamCreateInputSchema,PracticeExamUncheckedCreateInputSchema ]),\n}).strict() ;\nexport default PracticeExamCreateArgsSchema;"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAAS,SAAS;AAYX,IAAM,2BAAiE,EAAE,OAAO;AAAA,EACrF,IAAI,EAAE,QAAQ,EAAE,SAAS;AAAA,EACzB,cAAc,EAAE,QAAQ,EAAE,SAAS;AAAA,EACnC,gBAAgB,EAAE,QAAQ,EAAE,SAAS;AAAA,EACrC,oBAAoB,EAAE,QAAQ,EAAE,SAAS;AAAA,EACzC,wBAAwB,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC7C,MAAM,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC3B,QAAQ,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,uBAAuB,CAAC,CAAC,EAAE,SAAS;AAAA,EAC9E,MAAM,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,qBAAqB,CAAC,CAAC,EAAE,SAAS;AAAA,EAC1E,UAAU,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,yBAAyB,CAAC,CAAC,EAAE,SAAS;AAAA,EAClF,WAAW,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,wBAAwB,CAAC,CAAC,EAAE,SAAS;AAAA,EAClF,QAAQ,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,qCAAqC,CAAC,CAAC,EAAE,SAAS;AAC9F,CAAC,EAAE,OAAO;AACH,IAAM,+BAAyE,EAAE,OAAO;AAAA,EAC7F,QAAQ,yBAAyB,SAAS;AAAA,EAC1C,SAAS,0BAA0B,SAAS;AAAA,EAC5C,MAAM,EAAE,MAAM,CAAE,+BAA8B,sCAAuC,CAAC;AACxF,CAAC,EAAE,OAAO;AACV,IAAO,uCAAQ;","names":[]}