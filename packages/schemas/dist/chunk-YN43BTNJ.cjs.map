{"version":3,"sources":["../src/database/inputTypeSchemas/ServingOrderByWithAggregationInputSchema.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA,SAAS,SAAS;AASX,IAAM,2CAAiG,EAAE,OAAO;AAAA,EACrH,IAAI,EAAE,KAAK,MAAM,eAAe,EAAE,SAAS;AAAA,EAC3C,eAAe,EAAE,KAAK,MAAM,eAAe,EAAE,SAAS;AAAA,EACtD,UAAU,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,eAAe,GAAE,EAAE,KAAK,MAAM,oBAAoB,CAAE,CAAC,EAAE,SAAS;AAAA,EACjG,aAAa,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,eAAe,GAAE,EAAE,KAAK,MAAM,oBAAoB,CAAE,CAAC,EAAE,SAAS;AAAA,EACpG,QAAQ,EAAE,KAAK,MAAM,uCAAuC,EAAE,SAAS;AAAA,EACvE,MAAM,EAAE,KAAK,MAAM,qCAAqC,EAAE,SAAS;AAAA,EACnE,MAAM,EAAE,KAAK,MAAM,qCAAqC,EAAE,SAAS;AAAA,EACnE,MAAM,EAAE,KAAK,MAAM,qCAAqC,EAAE,SAAS;AAAA,EACnE,MAAM,EAAE,KAAK,MAAM,qCAAqC,EAAE,SAAS;AACrE,CAAC,EAAE,OAAO;AAEV,IAAO,mDAAQ","sourcesContent":["import type { Prisma } from '@prisma/client';\n\nimport { z } from 'zod';\nimport { SortOrderSchema } from './SortOrderSchema';\nimport { SortOrderInputSchema } from './SortOrderInputSchema';\nimport { ServingCountOrderByAggregateInputSchema } from './ServingCountOrderByAggregateInputSchema';\nimport { ServingAvgOrderByAggregateInputSchema } from './ServingAvgOrderByAggregateInputSchema';\nimport { ServingMaxOrderByAggregateInputSchema } from './ServingMaxOrderByAggregateInputSchema';\nimport { ServingMinOrderByAggregateInputSchema } from './ServingMinOrderByAggregateInputSchema';\nimport { ServingSumOrderByAggregateInputSchema } from './ServingSumOrderByAggregateInputSchema';\n\nexport const ServingOrderByWithAggregationInputSchema: z.ZodType<Prisma.ServingOrderByWithAggregationInput> = z.object({\n  id: z.lazy(() => SortOrderSchema).optional(),\n  dietaryItemId: z.lazy(() => SortOrderSchema).optional(),\n  quant_oz: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),\n  quant_guess: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),\n  _count: z.lazy(() => ServingCountOrderByAggregateInputSchema).optional(),\n  _avg: z.lazy(() => ServingAvgOrderByAggregateInputSchema).optional(),\n  _max: z.lazy(() => ServingMaxOrderByAggregateInputSchema).optional(),\n  _min: z.lazy(() => ServingMinOrderByAggregateInputSchema).optional(),\n  _sum: z.lazy(() => ServingSumOrderByAggregateInputSchema).optional()\n}).strict();\n\nexport default ServingOrderByWithAggregationInputSchema;\n"]}