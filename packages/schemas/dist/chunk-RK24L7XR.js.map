{"version":3,"sources":["../src/database/outputTypeSchemas/QAPairFindFirstOrThrowArgsSchema.ts"],"sourcesContent":["import { z } from 'zod';\nimport type { Prisma } from '@ulld/database/db';\nimport { QAPairIncludeSchema } from '../inputTypeSchemas/QAPairIncludeSchema.js'\nimport { QAPairWhereInputSchema } from '../inputTypeSchemas/QAPairWhereInputSchema.js'\nimport { QAPairOrderByWithRelationInputSchema } from '../inputTypeSchemas/QAPairOrderByWithRelationInputSchema.js'\nimport { QAPairWhereUniqueInputSchema } from '../inputTypeSchemas/QAPairWhereUniqueInputSchema.js'\nimport { QAPairScalarFieldEnumSchema } from '../inputTypeSchemas/QAPairScalarFieldEnumSchema.js'\nimport { TagFindManyArgsSchema } from \"../outputTypeSchemas/TagFindManyArgsSchema\"\nimport { TopicFindManyArgsSchema } from \"../outputTypeSchemas/TopicFindManyArgsSchema\"\nimport { SubjectFindManyArgsSchema } from \"../outputTypeSchemas/SubjectFindManyArgsSchema\"\nimport { PracticeExamFindManyArgsSchema } from \"../outputTypeSchemas/PracticeExamFindManyArgsSchema\"\nimport { QAPairCountOutputTypeArgsSchema } from \"../outputTypeSchemas/QAPairCountOutputTypeArgsSchema\"\n// Select schema needs to be in file to prevent circular imports\n//------------------------------------------------------\nexport const QAPairSelectSchema: z.ZodType<Prisma.QAPairSelect> = z.object({\n  id: z.boolean().optional(),\n  question: z.boolean().optional(),\n  answer: z.boolean().optional(),\n  description: z.boolean().optional(),\n  secondaryLabel: z.boolean().optional(),\n  correctCount: z.boolean().optional(),\n  inCorrectCount: z.boolean().optional(),\n  tags: z.union([z.boolean(),z.lazy(() => TagFindManyArgsSchema)]).optional(),\n  topics: z.union([z.boolean(),z.lazy(() => TopicFindManyArgsSchema)]).optional(),\n  subjects: z.union([z.boolean(),z.lazy(() => SubjectFindManyArgsSchema)]).optional(),\n  practiceExam: z.union([z.boolean(),z.lazy(() => PracticeExamFindManyArgsSchema)]).optional(),\n  _count: z.union([z.boolean(),z.lazy(() => QAPairCountOutputTypeArgsSchema)]).optional(),\n}).strict()\nexport const QAPairFindFirstOrThrowArgsSchema: z.ZodType<Prisma.QAPairFindFirstOrThrowArgs> = z.object({\n  select: QAPairSelectSchema.optional(),\n  include: QAPairIncludeSchema.optional(),\n  where: QAPairWhereInputSchema.optional(),\n  orderBy: z.union([ QAPairOrderByWithRelationInputSchema.array(),QAPairOrderByWithRelationInputSchema ]).optional(),\n  cursor: QAPairWhereUniqueInputSchema.optional(),\n  take: z.number().optional(),\n  skip: z.number().optional(),\n  distinct: z.union([ QAPairScalarFieldEnumSchema,QAPairScalarFieldEnumSchema.array() ]).optional(),\n}).strict() ;\nexport default QAPairFindFirstOrThrowArgsSchema;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,SAAS;AAcX,IAAM,qBAAqD,EAAE,OAAO;AAAA,EACzE,IAAI,EAAE,QAAQ,EAAE,SAAS;AAAA,EACzB,UAAU,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC/B,QAAQ,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC7B,aAAa,EAAE,QAAQ,EAAE,SAAS;AAAA,EAClC,gBAAgB,EAAE,QAAQ,EAAE,SAAS;AAAA,EACrC,cAAc,EAAE,QAAQ,EAAE,SAAS;AAAA,EACnC,gBAAgB,EAAE,QAAQ,EAAE,SAAS;AAAA,EACrC,MAAM,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,qBAAqB,CAAC,CAAC,EAAE,SAAS;AAAA,EAC1E,QAAQ,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,uBAAuB,CAAC,CAAC,EAAE,SAAS;AAAA,EAC9E,UAAU,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,yBAAyB,CAAC,CAAC,EAAE,SAAS;AAAA,EAClF,cAAc,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,8BAA8B,CAAC,CAAC,EAAE,SAAS;AAAA,EAC3F,QAAQ,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,+BAA+B,CAAC,CAAC,EAAE,SAAS;AACxF,CAAC,EAAE,OAAO;AACH,IAAM,mCAAiF,EAAE,OAAO;AAAA,EACrG,QAAQ,mBAAmB,SAAS;AAAA,EACpC,SAAS,oBAAoB,SAAS;AAAA,EACtC,OAAO,uBAAuB,SAAS;AAAA,EACvC,SAAS,EAAE,MAAM,CAAE,qCAAqC,MAAM,GAAE,oCAAqC,CAAC,EAAE,SAAS;AAAA,EACjH,QAAQ,6BAA6B,SAAS;AAAA,EAC9C,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,EAC1B,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,EAC1B,UAAU,EAAE,MAAM,CAAE,6BAA4B,4BAA4B,MAAM,CAAE,CAAC,EAAE,SAAS;AAClG,CAAC,EAAE,OAAO;AACV,IAAO,2CAAQ;","names":[]}