{"version":3,"sources":["../src/database/inputTypeSchemas/PracticeExamScalarWhereInputSchema.ts"],"names":[],"mappings":";;;;;;;;AAEA,SAAS,SAAS;AAIX,IAAM,qCAAqF,EAAE,OAAO;AAAA,EACzG,KAAK,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,kCAAkC,GAAE,EAAE,KAAK,MAAM,kCAAkC,EAAE,MAAM,CAAE,CAAC,EAAE,SAAS;AAAA,EACrI,IAAI,EAAE,KAAK,MAAM,kCAAkC,EAAE,MAAM,EAAE,SAAS;AAAA,EACtE,KAAK,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,kCAAkC,GAAE,EAAE,KAAK,MAAM,kCAAkC,EAAE,MAAM,CAAE,CAAC,EAAE,SAAS;AAAA,EACrI,IAAI,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,eAAe,GAAE,EAAE,OAAO,CAAE,CAAC,EAAE,SAAS;AAAA,EACnE,cAAc,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,eAAe,GAAE,EAAE,OAAO,CAAE,CAAC,EAAE,SAAS;AAAA,EAC7E,gBAAgB,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,eAAe,GAAE,EAAE,OAAO,CAAE,CAAC,EAAE,SAAS;AAAA,EAC/E,oBAAoB,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,eAAe,GAAE,EAAE,OAAO,CAAE,CAAC,EAAE,SAAS;AAAA,EACnF,wBAAwB,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,eAAe,GAAE,EAAE,OAAO,CAAE,CAAC,EAAE,SAAS;AAAA,EACvF,MAAM,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,oBAAoB,GAAE,EAAE,OAAO,KAAK,CAAE,CAAC,EAAE,SAAS;AACjF,CAAC,EAAE,OAAO;AAEV,IAAO,6CAAQ","sourcesContent":["import type { Prisma } from '@prisma/client';\n\nimport { z } from 'zod';\nimport { IntFilterSchema } from './IntFilterSchema';\nimport { DateTimeFilterSchema } from './DateTimeFilterSchema';\n\nexport const PracticeExamScalarWhereInputSchema: z.ZodType<Prisma.PracticeExamScalarWhereInput> = z.object({\n  AND: z.union([ z.lazy(() => PracticeExamScalarWhereInputSchema),z.lazy(() => PracticeExamScalarWhereInputSchema).array() ]).optional(),\n  OR: z.lazy(() => PracticeExamScalarWhereInputSchema).array().optional(),\n  NOT: z.union([ z.lazy(() => PracticeExamScalarWhereInputSchema),z.lazy(() => PracticeExamScalarWhereInputSchema).array() ]).optional(),\n  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),\n  correctCount: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),\n  inCorrectCount: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),\n  timeLimitInSeconds: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),\n  timeCompletedInSeconds: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),\n  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),\n}).strict();\n\nexport default PracticeExamScalarWhereInputSchema;\n"]}