{"version":3,"sources":["../src/database/inputTypeSchemas/InputJsonValueSchema.ts"],"names":[],"mappings":";AAAA,SAAS,SAAS;AAEX,IAAM,uBAAyD,EAAE;AAAA,EAAK,MAC3E,EAAE,MAAM;AAAA,IACN,EAAE,OAAO;AAAA,IACT,EAAE,OAAO;AAAA,IACT,EAAE,QAAQ;AAAA,IACV,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC;AAAA,IACrD,EAAE,OAAO,EAAE,KAAK,MAAM,EAAE,MAAM,CAAC,sBAAsB,EAAE,QAAQ,IAAI,CAAC,CAAC,CAAC,CAAC;AAAA,IACvE,EAAE,MAAM,EAAE,KAAK,MAAM,EAAE,MAAM,CAAC,sBAAsB,EAAE,QAAQ,IAAI,CAAC,CAAC,CAAC,CAAC;AAAA,EACxE,CAAC;AACH;AAEA,IAAO,+BAAQ","sourcesContent":["import { z } from 'zod';\nimport { Prisma } from '@ulld/database/db';\nexport const InputJsonValueSchema: z.ZodType<Prisma.InputJsonValue> = z.lazy(() =>\n  z.union([\n    z.string(),\n    z.number(),\n    z.boolean(),\n    z.object({ toJSON: z.function(z.tuple([]), z.any()) }),\n    z.record(z.lazy(() => z.union([InputJsonValueSchema, z.literal(null)]))),\n    z.array(z.lazy(() => z.union([InputJsonValueSchema, z.literal(null)]))),\n  ])\n);\nexport type InputJsonValueType = z.infer<typeof InputJsonValueSchema>;\nexport default InputJsonValueSchema;"]}