{"version":3,"sources":["../src/api/prismaMdxRelations/bib/bibEntry/classProps.ts"],"sourcesContent":["import {z} from 'zod'\nimport { bibCoreSchema } from '../bibCore/classProps.js';\nimport { readingListZodObject } from '../../readingList/classProps.js';\nimport { subjectZodObject, tagZodObject, topicZodObject } from '../../taggables/classProps.js';\nimport { dateTimeStringTransform } from '../../../../transforms/index.js';\n\n\nexport const citationGroupSchema = z.object({\n    name: z.string(),\n    description: z.string().nullish(),\n    entries: z.any().array(),\n});\n\n// WARN: Had to remove all automatic transformations into classes in the api package to avoid circular imports. Need to handle this outside of this zod object now.\n//\nconst bibEntryPropsSchemaInner = z\n    .object({\n        Bib: bibCoreSchema.optional()\n    // .transform((a) => new BibCore(a))\n    ,\n        BibId: z.number().int().default(1),\n        readingList: readingListZodObject\n            .array()\n            .default([])\n            // .transform((a) => {\n            //     return a.map((b) => new ReadingList(b));\n            // })\n    ,\n        topics: topicZodObject\n            .array()\n            .default([])\n            // .transform((a) => a.map((b) => new Topic(b)))\n    ,\n        subjects: subjectZodObject\n            .array()\n            .default([])\n            // .transform((a) => a.map((b) => new Subject(b)))\n    ,\n        tags: tagZodObject\n            .array()\n            .default([])\n            // .transform((a) => a.map((b) => new Tag(b)))\n    ,\n        id: z.string().toLowerCase(),\n        type: z.string().nullish(),\n        htmlCitation: z.string().nullish(),\n        PdfPath: z.string().nullish(),\n        address: z.string().nullish(),\n        annote: z.string().nullish(),\n        author: z.string().nullish(),\n        booktitle: z.string().nullish(),\n        chapter: z.string().nullish(),\n        crossref: z.string().nullish(),\n        doi: z.string().nullish(),\n        edition: z.string().nullish(),\n        editor: z.string().nullish(),\n        email: z.string().nullish(),\n        howpublished: z.string().nullish(),\n        institution: z.string().nullish(),\n        journal: z.string().nullish(),\n        month: z.string().nullish(),\n        note: z.string().nullish(),\n        number: z.string().nullish(),\n        organization: z.string().nullish(),\n        pages: z.string().nullish(),\n        publisher: z.string().nullish(),\n        school: z.string().nullish(),\n        series: z.string().nullish(),\n        title: z.string().nullish(),\n        volume: z.string().nullish(),\n        year: z.string().nullish(),\n        numpages: z.string().nullish(),\n        url: z.string().nullish(),\n        issue: z.string().nullish(),\n        issn: z.string().nullish(),\n        abstract: z.string().nullish(),\n        urldate: z.string().nullish(),\n        keywords: z.string().nullish(),\n        copyright: z.string().nullish(),\n        tempPageIndex: z.number().int().nullish(),\n        read: z.boolean().default(false),\n        OwnWork: z.boolean().default(false),\n        ColleaguesWork: z.boolean().default(false),\n        MdxNotes: z.any().array().nullish(),\n        createdAt: z\n            .union([z.string().datetime(), z.date(), z.string()])\n            .nullish()\n            .transform(dateTimeStringTransform),\n        lastAccess: z\n            .union([z.string().datetime(), z.date(), z.string()])\n            .nullish()\n            .transform(dateTimeStringTransform),\n        citationGroups: citationGroupSchema\n            .array()\n            .default([])\n            // .transform((a) => a.map((b) => new CitationGroup(b)))\n    ,\n        added: z\n            .union([z.string().datetime(), z.date(), z.string()])\n            .nullish()\n            .transform(dateTimeStringTransform),\n    })\n\nexport const bibEntryTransform = (\n    x: z.infer<typeof bibEntryPropsSchemaInner>,\n): Omit<z.infer<typeof bibEntryPropsSchemaInner>, \"BibId\"> & {\n    BibId: number\n} => {\n    return {\n        ...x,\n        BibId: (x.BibId === 1 && x.Bib) ? x.Bib.id : x.BibId,\n    };\n};\n\nexport const bibEntryPropsSchema =\n    bibEntryPropsSchemaInner.catchall(z.string()).transform(bibEntryTransform);\n"],"mappings":"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","names":[]}