{"version":3,"sources":["../src/database/outputTypeSchemas/DietaryItemFindUniqueOrThrowArgsSchema.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,SAAS,SAAS;AAUX,IAAM,0BAA+D,EAAE,OAAO;AAAA,EACnF,IAAI,EAAE,QAAQ,EAAE,SAAS;AAAA,EACzB,MAAM,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC3B,SAAS,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC9B,IAAI,EAAE,QAAQ,EAAE,SAAS;AAAA,EACzB,WAAW,EAAE,QAAQ,EAAE,SAAS;AAAA,EAChC,YAAY,EAAE,QAAQ,EAAE,SAAS;AAAA,EACjC,iBAAiB,EAAE,QAAQ,EAAE,SAAS;AAAA,EACtC,SAAS,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC9B,SAAS,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC9B,aAAa,EAAE,QAAQ,EAAE,SAAS;AAAA,EAClC,MAAM,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,sBAAsB,CAAC,CAAC,EAAE,SAAS;AAAA,EAC3E,SAAS,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,yBAAyB,CAAC,CAAC,EAAE,SAAS;AAAA,EACjF,QAAQ,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,oCAAoC,CAAC,CAAC,EAAE,SAAS;AAC7F,CAAC,EAAE,OAAO;AAEH,IAAM,yCAA6F,EAAE,OAAO;AAAA,EACjH,QAAQ,wBAAwB,SAAS;AAAA,EACzC,SAAS,yBAAyB,SAAS;AAAA,EAC3C,OAAO;AACT,CAAC,EAAE,OAAO;AAEV,IAAO,iDAAQ","sourcesContent":["import { z } from 'zod';\nimport type { Prisma } from '@prisma/client';\nimport { DietaryItemIncludeSchema } from '../inputTypeSchemas/DietaryItemIncludeSchema'\nimport { DietaryItemWhereUniqueInputSchema } from '../inputTypeSchemas/DietaryItemWhereUniqueInputSchema'\nimport { DietFindManyArgsSchema } from \"../outputTypeSchemas/DietFindManyArgsSchema\"\nimport { ServingFindManyArgsSchema } from \"../outputTypeSchemas/ServingFindManyArgsSchema\"\nimport { DietaryItemCountOutputTypeArgsSchema } from \"../outputTypeSchemas/DietaryItemCountOutputTypeArgsSchema\"\n// Select schema needs to be in file to prevent circular imports\n//------------------------------------------------------\n\nexport const DietaryItemSelectSchema: z.ZodType<Prisma.DietaryItemSelect> = z.object({\n  id: z.boolean().optional(),\n  name: z.boolean().optional(),\n  barcode: z.boolean().optional(),\n  gi: z.boolean().optional(),\n  calsPerOz: z.boolean().optional(),\n  glutenFree: z.boolean().optional(),\n  minimalFructose: z.boolean().optional(),\n  natural: z.boolean().optional(),\n  organic: z.boolean().optional(),\n  impactScore: z.boolean().optional(),\n  Diet: z.union([z.boolean(),z.lazy(() => DietFindManyArgsSchema)]).optional(),\n  Serving: z.union([z.boolean(),z.lazy(() => ServingFindManyArgsSchema)]).optional(),\n  _count: z.union([z.boolean(),z.lazy(() => DietaryItemCountOutputTypeArgsSchema)]).optional(),\n}).strict()\n\nexport const DietaryItemFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.DietaryItemFindUniqueOrThrowArgs> = z.object({\n  select: DietaryItemSelectSchema.optional(),\n  include: DietaryItemIncludeSchema.optional(),\n  where: DietaryItemWhereUniqueInputSchema,\n}).strict() ;\n\nexport default DietaryItemFindUniqueOrThrowArgsSchema;\n"]}