{"version":3,"sources":["../src/database/inputTypeSchemas/DietaryItemScalarWhereWithAggregatesInputSchema.ts"],"sourcesContent":["import type { Prisma } from '@ulld/database/db';\nimport { z } from 'zod';\nimport { IntWithAggregatesFilterSchema } from './IntWithAggregatesFilterSchema.js';\nimport { StringWithAggregatesFilterSchema } from './StringWithAggregatesFilterSchema.js';\nimport { StringNullableWithAggregatesFilterSchema } from './StringNullableWithAggregatesFilterSchema.js';\nimport { IntNullableWithAggregatesFilterSchema } from './IntNullableWithAggregatesFilterSchema.js';\nimport { FloatNullableWithAggregatesFilterSchema } from './FloatNullableWithAggregatesFilterSchema.js';\nimport { BoolWithAggregatesFilterSchema } from './BoolWithAggregatesFilterSchema.js';\nimport { FloatWithAggregatesFilterSchema } from './FloatWithAggregatesFilterSchema.js';\nexport const DietaryItemScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.DietaryItemScalarWhereWithAggregatesInput> = z.object({\n  AND: z.union([ z.lazy(() => DietaryItemScalarWhereWithAggregatesInputSchema),z.lazy(() => DietaryItemScalarWhereWithAggregatesInputSchema).array() ]).optional(),\n  OR: z.lazy(() => DietaryItemScalarWhereWithAggregatesInputSchema).array().optional(),\n  NOT: z.union([ z.lazy(() => DietaryItemScalarWhereWithAggregatesInputSchema),z.lazy(() => DietaryItemScalarWhereWithAggregatesInputSchema).array() ]).optional(),\n  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),\n  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),\n  barcode: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),\n  gi: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),\n  calsPerOz: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),\n  glutenFree: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),\n  minimalFructose: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),\n  natural: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),\n  organic: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),\n  impactScore: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),\n}).strict();\nexport default DietaryItemScalarWhereWithAggregatesInputSchema;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AACA,SAAS,SAAS;AAQX,IAAM,kDAA+G,EAAE,OAAO;AAAA,EACnI,KAAK,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,+CAA+C,GAAE,EAAE,KAAK,MAAM,+CAA+C,EAAE,MAAM,CAAE,CAAC,EAAE,SAAS;AAAA,EAC/J,IAAI,EAAE,KAAK,MAAM,+CAA+C,EAAE,MAAM,EAAE,SAAS;AAAA,EACnF,KAAK,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,+CAA+C,GAAE,EAAE,KAAK,MAAM,+CAA+C,EAAE,MAAM,CAAE,CAAC,EAAE,SAAS;AAAA,EAC/J,IAAI,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,6BAA6B,GAAE,EAAE,OAAO,CAAE,CAAC,EAAE,SAAS;AAAA,EACjF,MAAM,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,gCAAgC,GAAE,EAAE,OAAO,CAAE,CAAC,EAAE,SAAS;AAAA,EACtF,SAAS,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,wCAAwC,GAAE,EAAE,OAAO,CAAE,CAAC,EAAE,SAAS,EAAE,SAAS;AAAA,EAC5G,IAAI,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,qCAAqC,GAAE,EAAE,OAAO,CAAE,CAAC,EAAE,SAAS,EAAE,SAAS;AAAA,EACpG,WAAW,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,uCAAuC,GAAE,EAAE,OAAO,CAAE,CAAC,EAAE,SAAS,EAAE,SAAS;AAAA,EAC7G,YAAY,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,8BAA8B,GAAE,EAAE,QAAQ,CAAE,CAAC,EAAE,SAAS;AAAA,EAC3F,iBAAiB,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,8BAA8B,GAAE,EAAE,QAAQ,CAAE,CAAC,EAAE,SAAS;AAAA,EAChG,SAAS,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,8BAA8B,GAAE,EAAE,QAAQ,CAAE,CAAC,EAAE,SAAS;AAAA,EACxF,SAAS,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,8BAA8B,GAAE,EAAE,QAAQ,CAAE,CAAC,EAAE,SAAS;AAAA,EACxF,aAAa,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,+BAA+B,GAAE,EAAE,OAAO,CAAE,CAAC,EAAE,SAAS;AAC9F,CAAC,EAAE,OAAO;AACV,IAAO,0DAAQ;","names":[]}