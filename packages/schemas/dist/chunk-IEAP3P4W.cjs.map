{"version":3,"sources":["../src/database/outputTypeSchemas/CitationsGroupFindFirstOrThrowArgsSchema.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,SAAS;AAWX,IAAM,6BAAqE,EAAE,OAAO;AAAA,EACzF,MAAM,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC3B,aAAa,EAAE,QAAQ,EAAE,SAAS;AAAA,EAClC,SAAS,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,0BAA0B,CAAC,CAAC,EAAE,SAAS;AAAA,EAClF,QAAQ,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,uCAAuC,CAAC,CAAC,EAAE,SAAS;AAChG,CAAC,EAAE,OAAO;AACH,IAAM,2CAAiG,EAAE,OAAO;AAAA,EACrH,QAAQ,2BAA2B,SAAS;AAAA,EAC5C,SAAS,4BAA4B,SAAS;AAAA,EAC9C,OAAO,+BAA+B,SAAS;AAAA,EAC/C,SAAS,EAAE,MAAM,CAAE,6CAA6C,MAAM,GAAE,4CAA6C,CAAC,EAAE,SAAS;AAAA,EACjI,QAAQ,qCAAqC,SAAS;AAAA,EACtD,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,EAC1B,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,EAC1B,UAAU,EAAE,MAAM,CAAE,qCAAoC,oCAAoC,MAAM,CAAE,CAAC,EAAE,SAAS;AAClH,CAAC,EAAE,OAAO;AACV,IAAO,mDAAQ","sourcesContent":["import { z } from 'zod';\nimport type { Prisma } from '@ulld/database/db';\nimport { CitationsGroupIncludeSchema } from '../inputTypeSchemas/CitationsGroupIncludeSchema.js'\nimport { CitationsGroupWhereInputSchema } from '../inputTypeSchemas/CitationsGroupWhereInputSchema.js'\nimport { CitationsGroupOrderByWithRelationInputSchema } from '../inputTypeSchemas/CitationsGroupOrderByWithRelationInputSchema.js'\nimport { CitationsGroupWhereUniqueInputSchema } from '../inputTypeSchemas/CitationsGroupWhereUniqueInputSchema.js'\nimport { CitationsGroupScalarFieldEnumSchema } from '../inputTypeSchemas/CitationsGroupScalarFieldEnumSchema.js'\nimport { BibEntryFindManyArgsSchema } from \"../outputTypeSchemas/BibEntryFindManyArgsSchema\"\nimport { CitationsGroupCountOutputTypeArgsSchema } from \"../outputTypeSchemas/CitationsGroupCountOutputTypeArgsSchema\"\n// Select schema needs to be in file to prevent circular imports\n//------------------------------------------------------\nexport const CitationsGroupSelectSchema: z.ZodType<Prisma.CitationsGroupSelect> = z.object({\n  name: z.boolean().optional(),\n  description: z.boolean().optional(),\n  entries: z.union([z.boolean(),z.lazy(() => BibEntryFindManyArgsSchema)]).optional(),\n  _count: z.union([z.boolean(),z.lazy(() => CitationsGroupCountOutputTypeArgsSchema)]).optional(),\n}).strict()\nexport const CitationsGroupFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CitationsGroupFindFirstOrThrowArgs> = z.object({\n  select: CitationsGroupSelectSchema.optional(),\n  include: CitationsGroupIncludeSchema.optional(),\n  where: CitationsGroupWhereInputSchema.optional(),\n  orderBy: z.union([ CitationsGroupOrderByWithRelationInputSchema.array(),CitationsGroupOrderByWithRelationInputSchema ]).optional(),\n  cursor: CitationsGroupWhereUniqueInputSchema.optional(),\n  take: z.number().optional(),\n  skip: z.number().optional(),\n  distinct: z.union([ CitationsGroupScalarFieldEnumSchema,CitationsGroupScalarFieldEnumSchema.array() ]).optional(),\n}).strict() ;\nexport default CitationsGroupFindFirstOrThrowArgsSchema;"]}