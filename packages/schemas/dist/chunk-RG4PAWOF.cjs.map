{"version":3,"sources":["../src/database/outputTypeSchemas/DefinitionFindFirstOrThrowArgsSchema.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAAS,SAAS;AAWX,IAAM,yBAA6D,EAAE,OAAO;AAAA,EACjF,IAAI,EAAE,QAAQ,EAAE,SAAS;AAAA,EACzB,OAAO,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC5B,SAAS,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC9B,mBAAmB,EAAE,QAAQ,EAAE,SAAS;AAAA,EACxC,WAAW,EAAE,QAAQ,EAAE,SAAS;AAAA,EAChC,WAAW,EAAE,QAAQ,EAAE,SAAS;AAAA,EAChC,YAAY,EAAE,QAAQ,EAAE,SAAS;AAAA,EACjC,SAAS,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,iBAAiB,CAAC,CAAC,EAAE,SAAS;AAC3E,CAAC,EAAE,OAAO;AAEH,IAAM,uCAAyF,EAAE,OAAO;AAAA,EAC7G,QAAQ,uBAAuB,SAAS;AAAA,EACxC,SAAS,wBAAwB,SAAS;AAAA,EAC1C,OAAO,2BAA2B,SAAS;AAAA,EAC3C,SAAS,EAAE,MAAM,CAAE,yCAAyC,MAAM,GAAE,wCAAyC,CAAC,EAAE,SAAS;AAAA,EACzH,QAAQ,iCAAiC,SAAS;AAAA,EAClD,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,EAC1B,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,EAC1B,UAAU,EAAE,MAAM,CAAE,iCAAgC,gCAAgC,MAAM,CAAE,CAAC,EAAE,SAAS;AAC1G,CAAC,EAAE,OAAO;AAEV,IAAO,+CAAQ","sourcesContent":["import { z } from 'zod';\nimport type { Prisma } from '@prisma/client';\nimport { DefinitionIncludeSchema } from '../inputTypeSchemas/DefinitionIncludeSchema'\nimport { DefinitionWhereInputSchema } from '../inputTypeSchemas/DefinitionWhereInputSchema'\nimport { DefinitionOrderByWithRelationInputSchema } from '../inputTypeSchemas/DefinitionOrderByWithRelationInputSchema'\nimport { DefinitionWhereUniqueInputSchema } from '../inputTypeSchemas/DefinitionWhereUniqueInputSchema'\nimport { DefinitionScalarFieldEnumSchema } from '../inputTypeSchemas/DefinitionScalarFieldEnumSchema'\nimport { MdxNoteArgsSchema } from \"../outputTypeSchemas/MdxNoteArgsSchema\"\n// Select schema needs to be in file to prevent circular imports\n//------------------------------------------------------\n\nexport const DefinitionSelectSchema: z.ZodType<Prisma.DefinitionSelect> = z.object({\n  id: z.boolean().optional(),\n  label: z.boolean().optional(),\n  content: z.boolean().optional(),\n  alphabeticalLabel: z.boolean().optional(),\n  mdxNoteId: z.boolean().optional(),\n  createdAt: z.boolean().optional(),\n  lastAccess: z.boolean().optional(),\n  mdxNote: z.union([z.boolean(),z.lazy(() => MdxNoteArgsSchema)]).optional(),\n}).strict()\n\nexport const DefinitionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.DefinitionFindFirstOrThrowArgs> = z.object({\n  select: DefinitionSelectSchema.optional(),\n  include: DefinitionIncludeSchema.optional(),\n  where: DefinitionWhereInputSchema.optional(),\n  orderBy: z.union([ DefinitionOrderByWithRelationInputSchema.array(),DefinitionOrderByWithRelationInputSchema ]).optional(),\n  cursor: DefinitionWhereUniqueInputSchema.optional(),\n  take: z.number().optional(),\n  skip: z.number().optional(),\n  distinct: z.union([ DefinitionScalarFieldEnumSchema,DefinitionScalarFieldEnumSchema.array() ]).optional(),\n}).strict() ;\n\nexport default DefinitionFindFirstOrThrowArgsSchema;\n"]}