{"version":3,"sources":["../src/database/outputTypeSchemas/AutoSettingFindUniqueArgsSchema.ts"],"names":[],"mappings":";;;;;AAAA,SAAS,SAAS;AAMX,IAAM,0BAA+D,EAAE,OAAO;AAAA,EACnF,IAAI,EAAE,QAAQ,EAAE,SAAS;AAAA,EACzB,MAAM,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC3B,MAAM,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC3B,OAAO,EAAE,QAAQ,EAAE,SAAS;AAC9B,CAAC,EAAE,OAAO;AAEH,IAAM,kCAA+E,EAAE,OAAO;AAAA,EACnG,QAAQ,wBAAwB,SAAS;AAAA,EACzC,OAAO;AACT,CAAC,EAAE,OAAO;AAEV,IAAO,0CAAQ","sourcesContent":["import { z } from 'zod';\nimport type { Prisma } from '@prisma/client';\nimport { AutoSettingWhereUniqueInputSchema } from '../inputTypeSchemas/AutoSettingWhereUniqueInputSchema'\n// Select schema needs to be in file to prevent circular imports\n//------------------------------------------------------\n\nexport const AutoSettingSelectSchema: z.ZodType<Prisma.AutoSettingSelect> = z.object({\n  id: z.boolean().optional(),\n  type: z.boolean().optional(),\n  glob: z.boolean().optional(),\n  value: z.boolean().optional(),\n}).strict()\n\nexport const AutoSettingFindUniqueArgsSchema: z.ZodType<Prisma.AutoSettingFindUniqueArgs> = z.object({\n  select: AutoSettingSelectSchema.optional(),\n  where: AutoSettingWhereUniqueInputSchema,\n}).strict() ;\n\nexport default AutoSettingFindUniqueArgsSchema;\n"]}