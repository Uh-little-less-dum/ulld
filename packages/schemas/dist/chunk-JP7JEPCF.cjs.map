{"version":3,"sources":["../src/database/outputTypeSchemas/ToDoFindFirstArgsSchema.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,SAAS;AAiBX,IAAM,mBAAiD,EAAE,OAAO;AAAA,EACrE,IAAI,EAAE,QAAQ,EAAE,SAAS;AAAA,EACzB,WAAW,EAAE,QAAQ,EAAE,SAAS;AAAA,EAChC,MAAM,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC3B,OAAO,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC5B,SAAS,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC9B,UAAU,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC/B,UAAU,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC/B,YAAY,EAAE,QAAQ,EAAE,SAAS;AAAA,EACjC,QAAQ,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC7B,UAAU,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC/B,YAAY,EAAE,QAAQ,EAAE,SAAS;AAAA,EACjC,aAAa,EAAE,QAAQ,EAAE,SAAS;AAAA,EAClC,iBAAiB,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,yBAAyB,CAAC,CAAC,EAAE,SAAS;AAAA,EACzF,MAAM,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,qBAAqB,CAAC,CAAC,EAAE,SAAS;AAAA,EAC1E,QAAQ,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,uBAAuB,CAAC,CAAC,EAAE,SAAS;AAAA,EAC9E,UAAU,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,yBAAyB,CAAC,CAAC,EAAE,SAAS;AAAA,EAClF,QAAQ,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,cAAc,CAAC,CAAC,EAAE,SAAS;AAAA,EACrE,OAAO,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,sBAAsB,CAAC,CAAC,EAAE,SAAS;AAAA,EAC5E,UAAU,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,kBAAkB,CAAC,CAAC,EAAE,SAAS;AAAA,EAC3E,QAAQ,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,6BAA6B,CAAC,CAAC,EAAE,SAAS;AACtF,CAAC,EAAE,OAAO;AACH,IAAM,0BAA+D,EAAE,OAAO;AAAA,EACnF,QAAQ,iBAAiB,SAAS;AAAA,EAClC,SAAS,kBAAkB,SAAS;AAAA,EACpC,OAAO,qBAAqB,SAAS;AAAA,EACrC,SAAS,EAAE,MAAM,CAAE,mCAAmC,MAAM,GAAE,kCAAmC,CAAC,EAAE,SAAS;AAAA,EAC7G,QAAQ,2BAA2B,SAAS;AAAA,EAC5C,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,EAC1B,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,EAC1B,UAAU,EAAE,MAAM,CAAE,2BAA0B,0BAA0B,MAAM,CAAE,CAAC,EAAE,SAAS;AAC9F,CAAC,EAAE,OAAO;AACV,IAAO,kCAAQ","sourcesContent":["import { z } from 'zod';\nimport type { Prisma } from '@ulld/database/db';\nimport { ToDoIncludeSchema } from '../inputTypeSchemas/ToDoIncludeSchema.js'\nimport { ToDoWhereInputSchema } from '../inputTypeSchemas/ToDoWhereInputSchema.js'\nimport { ToDoOrderByWithRelationInputSchema } from '../inputTypeSchemas/ToDoOrderByWithRelationInputSchema.js'\nimport { ToDoWhereUniqueInputSchema } from '../inputTypeSchemas/ToDoWhereUniqueInputSchema.js'\nimport { ToDoScalarFieldEnumSchema } from '../inputTypeSchemas/ToDoScalarFieldEnumSchema.js'\nimport { MdxNoteFindManyArgsSchema } from \"../outputTypeSchemas/MdxNoteFindManyArgsSchema\"\nimport { TagFindManyArgsSchema } from \"../outputTypeSchemas/TagFindManyArgsSchema\"\nimport { TopicFindManyArgsSchema } from \"../outputTypeSchemas/TopicFindManyArgsSchema\"\nimport { SubjectFindManyArgsSchema } from \"../outputTypeSchemas/SubjectFindManyArgsSchema\"\nimport { ToDoArgsSchema } from \"../outputTypeSchemas/ToDoArgsSchema\"\nimport { ToDoFindManyArgsSchema } from \"../outputTypeSchemas/ToDoFindManyArgsSchema\"\nimport { ToDoListArgsSchema } from \"../outputTypeSchemas/ToDoListArgsSchema\"\nimport { ToDoCountOutputTypeArgsSchema } from \"../outputTypeSchemas/ToDoCountOutputTypeArgsSchema\"\n// Select schema needs to be in file to prevent circular imports\n//------------------------------------------------------\nexport const ToDoSelectSchema: z.ZodType<Prisma.ToDoSelect> = z.object({\n  id: z.boolean().optional(),\n  createdAt: z.boolean().optional(),\n  task: z.boolean().optional(),\n  dueAt: z.boolean().optional(),\n  details: z.boolean().optional(),\n  parentId: z.boolean().optional(),\n  category: z.boolean().optional(),\n  bookmarked: z.boolean().optional(),\n  status: z.boolean().optional(),\n  priority: z.boolean().optional(),\n  toDoListId: z.boolean().optional(),\n  completedOn: z.boolean().optional(),\n  associatedNotes: z.union([z.boolean(),z.lazy(() => MdxNoteFindManyArgsSchema)]).optional(),\n  tags: z.union([z.boolean(),z.lazy(() => TagFindManyArgsSchema)]).optional(),\n  topics: z.union([z.boolean(),z.lazy(() => TopicFindManyArgsSchema)]).optional(),\n  subjects: z.union([z.boolean(),z.lazy(() => SubjectFindManyArgsSchema)]).optional(),\n  parent: z.union([z.boolean(),z.lazy(() => ToDoArgsSchema)]).optional(),\n  child: z.union([z.boolean(),z.lazy(() => ToDoFindManyArgsSchema)]).optional(),\n  ToDoList: z.union([z.boolean(),z.lazy(() => ToDoListArgsSchema)]).optional(),\n  _count: z.union([z.boolean(),z.lazy(() => ToDoCountOutputTypeArgsSchema)]).optional(),\n}).strict()\nexport const ToDoFindFirstArgsSchema: z.ZodType<Prisma.ToDoFindFirstArgs> = z.object({\n  select: ToDoSelectSchema.optional(),\n  include: ToDoIncludeSchema.optional(),\n  where: ToDoWhereInputSchema.optional(),\n  orderBy: z.union([ ToDoOrderByWithRelationInputSchema.array(),ToDoOrderByWithRelationInputSchema ]).optional(),\n  cursor: ToDoWhereUniqueInputSchema.optional(),\n  take: z.number().optional(),\n  skip: z.number().optional(),\n  distinct: z.union([ ToDoScalarFieldEnumSchema,ToDoScalarFieldEnumSchema.array() ]).optional(),\n}).strict() ;\nexport default ToDoFindFirstArgsSchema;"]}