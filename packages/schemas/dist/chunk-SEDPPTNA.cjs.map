{"version":3,"sources":["../src/database/outputTypeSchemas/DJTCreateArgsSchema.ts"],"names":[],"mappings":";;;;;;;;AAAA,SAAS,SAAS;AAMX,IAAM,kBAA+C,EAAE,OAAO;AAAA,EACnE,IAAI,EAAE,QAAQ,EAAE,SAAS;AAAA,EACzB,MAAM,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC3B,MAAM,EAAE,QAAQ,EAAE,SAAS;AAC7B,CAAC,EAAE,OAAO;AACH,IAAM,sBAAuD,EAAE,OAAO;AAAA,EAC3E,QAAQ,gBAAgB,SAAS;AAAA,EACjC,MAAM,EAAE,MAAM,CAAE,sBAAqB,6BAA8B,CAAC;AACtE,CAAC,EAAE,OAAO;AACV,IAAO,8BAAQ","sourcesContent":["import { z } from 'zod';\nimport type { Prisma } from '@ulld/database/db';\nimport { DJTCreateInputSchema } from '../inputTypeSchemas/DJTCreateInputSchema.js'\nimport { DJTUncheckedCreateInputSchema } from '../inputTypeSchemas/DJTUncheckedCreateInputSchema.js'\n// Select schema needs to be in file to prevent circular imports\n//------------------------------------------------------\nexport const DJTSelectSchema: z.ZodType<Prisma.DJTSelect> = z.object({\n  id: z.boolean().optional(),\n  type: z.boolean().optional(),\n  data: z.boolean().optional(),\n}).strict()\nexport const DJTCreateArgsSchema: z.ZodType<Prisma.DJTCreateArgs> = z.object({\n  select: DJTSelectSchema.optional(),\n  data: z.union([ DJTCreateInputSchema,DJTUncheckedCreateInputSchema ]),\n}).strict() ;\nexport default DJTCreateArgsSchema;"]}