{"version":3,"sources":["../src/mdx/parsing/params/main.ts"],"sourcesContent":["import { mdxNotePropsSchema } from \"@ulld/api/generalPrismaSchemas\";\n// import type { UnifiedMdxParser } from \"@ulld/api/types\";\nimport type { AppConfigSchemaDeepPartial } from \"@ulld/configschema/types\";\nimport { minimalParsableAppConfig } from \"@ulld/configschema/zod-refinedAppConfigs\";\nimport {\n    documentTypeConfigSchema,\n    documentTypeConfigSchemaInner,\n} from \"@ulld/configschema/zod/documentConfigSchema\";\nimport { type AppConfigSchemaOutput } from \"@ulld/configschema/zod/main\";\nimport type { WithRequired } from \"@ulld/utilities/types\";\nimport { z, type ZodTypeAny } from \"zod\";\nimport {\n    extendedFrontMatterSchema,\n    frontMatterSchema,\n} from \"../../frontMatter/main.js\";\n\nexport const mdxNoteFromStringPropsSchema = mdxNotePropsSchema\n    .innerType()\n    .pick({\n        raw: true,\n        rootRelativePath: true,\n        bookmarked: true,\n    })\n    .merge(\n        z.object({\n            docTypeData: documentTypeConfigSchema,\n        }),\n    );\n\nexport const mdxNoteIntriguingValSummaryPropsSchema = mdxNotePropsSchema\n    .innerType()\n    .omit({\n        latexTitle: true,\n        raw: true,\n        floatImages: true,\n        formatted: true,\n        citations: true,\n        quickLinkId: true,\n        citationsListOrder: true,\n        outgoingQuickLinks: true,\n        equationIds: true,\n        isProtected: true,\n        sequentialKey: true,\n        sequentialIndex: true,\n        remoteUrl: true,\n        noLog: true,\n        saveFormatted: true,\n        trackRemote: true,\n        topics: true,\n        tags: true,\n        subjects: true,\n    });\n\nconst noteDetailsReturn = z.object({\n    id: z.number().int(),\n    quickLink: z.string().nullish(),\n    bookmarked: z.boolean(),\n    sequentialKey: z.string().nullish(),\n    sequentialIndex: z.number().nullish(),\n    firstSync: z.date().or(z.string()),\n    lastSync: z.date().or(z.string()),\n});\n\nexport const unifiedMdxParserParamSchema = z.object({\n    content: z.string(),\n    docTypeData: z\n        .union([\n            documentTypeConfigSchemaInner.required({\n                docType: true,\n                id: true,\n                url: true,\n            }),\n            z.object({}),\n        ])\n        .default({}),\n    data: frontMatterSchema.deepPartial(),\n    appConfig: minimalParsableAppConfig,\n    serverClient: z.any(),\n    db: noteDetailsReturn.optional(),\n});\n\nexport const unifiedMdxParserSchema = z\n    .function()\n    .args(unifiedMdxParserParamSchema)\n    .returns(z.promise(extendedFrontMatterSchema));\n\nexport const fromMdxStringOptSchema = z\n    .object({\n        noteTypeId: z.string().optional(),\n    })\n    .default({});\n\nexport const parseParamsSchema = z.object({\n    appConfig: minimalParsableAppConfig,\n    docTypeData: z.union([documentTypeConfigSchema, z.object({})]).default({}),\n    parser: unifiedMdxParserSchema,\n});\n\nexport const internalMdxStringParseParamSchema = z.object({\n    _opts: fromMdxStringOptSchema,\n    props: mdxNoteFromStringPropsSchema,\n    parseParams: parseParamsSchema,\n});\n\nexport const internalMdxStringParseParamSchemaOptionalAppConfig =\n    internalMdxStringParseParamSchema\n        .omit({\n            parseParams: true,\n        })\n        .extend({\n            parseParams: parseParamsSchema.partial({\n                appConfig: true,\n            }),\n        });\n\nexport type UnifiedMdxParser = z.input<typeof unifiedMdxParserSchema>;\n\nexport type InternalMdxStringParseParams = z.output<\n    typeof internalMdxStringParseParamSchema\n>;\n\nexport type InternalMdxStringParseParamsInput = z.input<\n    typeof internalMdxStringParseParamSchema\n>;\n\n// TODO: Refine this partial app config to actually require the fields that are you know... required.\ntype WithModifiedAppConfig<\n    T extends ZodTypeAny,\n    J extends AppConfigSchemaDeepPartial = AppConfigSchemaDeepPartial,\n    RequiredFields extends keyof AppConfigSchemaOutput = \"fsRoot\",\n> = Omit<z.input<T>, \"appConfig\"> & {\n    appConfig: WithRequired<J, RequiredFields>;\n};\n\ntype WithModifiedAppConfigOutput<\n    T extends ZodTypeAny,\n    J extends AppConfigSchemaDeepPartial = AppConfigSchemaDeepPartial,\n> = Omit<z.output<T>, \"appConfig\"> & {\n    appConfig: J;\n};\n\nexport type UnifiedMdxParserParamsInput = WithModifiedAppConfig<\n    typeof unifiedMdxParserParamSchema\n>;\n\nexport type ParseParamsSchemaInput = z.input<typeof parseParamsSchema>;\n// export type ParseParamsSchemaInput = Omit<\n//     WithModifiedAppConfig<\n//         typeof parseParamsSchema,\n//         AppConfigSchemaDeepPartial,\n//         \"fsRoot\" | \"noteTypes\"\n//     >,\n//     \"parser\"\n// > & {\n//     parser: UnifiedMdxParser;\n// };\n\n// TODO: Remove all these unnecessary modifications to the appconfig\nexport type ParseParamsSchemaOutput = Omit<\n    WithModifiedAppConfigOutput<typeof parseParamsSchema>,\n    \"parser\"\n> & {\n    parser: UnifiedMdxParser;\n};\n\nexport type ParseParamsSchemaType = z.input<typeof parseParamsSchema>;\n\n// TODO: Moving this to configschema package.\nexport type MinimalParsableAppConfig = z.input<typeof minimalParsableAppConfig>;\nexport type MinimalParsableAppConfigOutput = z.output<\n    typeof minimalParsableAppConfig\n>;\n"],"mappings":";;;;;;AAAA,SAAS,0BAA0B;AAGnC,SAAS,gCAAgC;AACzC;AAAA,EACI;AAAA,EACA;AAAA,OACG;AAGP,SAAS,SAA0B;AAM5B,IAAM,+BAA+B,mBACvC,UAAU,EACV,KAAK;AAAA,EACF,KAAK;AAAA,EACL,kBAAkB;AAAA,EAClB,YAAY;AAChB,CAAC,EACA;AAAA,EACG,EAAE,OAAO;AAAA,IACL,aAAa;AAAA,EACjB,CAAC;AACL;AAEG,IAAM,yCAAyC,mBACjD,UAAU,EACV,KAAK;AAAA,EACF,YAAY;AAAA,EACZ,KAAK;AAAA,EACL,aAAa;AAAA,EACb,WAAW;AAAA,EACX,WAAW;AAAA,EACX,aAAa;AAAA,EACb,oBAAoB;AAAA,EACpB,oBAAoB;AAAA,EACpB,aAAa;AAAA,EACb,aAAa;AAAA,EACb,eAAe;AAAA,EACf,iBAAiB;AAAA,EACjB,WAAW;AAAA,EACX,OAAO;AAAA,EACP,eAAe;AAAA,EACf,aAAa;AAAA,EACb,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,UAAU;AACd,CAAC;AAEL,IAAM,oBAAoB,EAAE,OAAO;AAAA,EAC/B,IAAI,EAAE,OAAO,EAAE,IAAI;AAAA,EACnB,WAAW,EAAE,OAAO,EAAE,QAAQ;AAAA,EAC9B,YAAY,EAAE,QAAQ;AAAA,EACtB,eAAe,EAAE,OAAO,EAAE,QAAQ;AAAA,EAClC,iBAAiB,EAAE,OAAO,EAAE,QAAQ;AAAA,EACpC,WAAW,EAAE,KAAK,EAAE,GAAG,EAAE,OAAO,CAAC;AAAA,EACjC,UAAU,EAAE,KAAK,EAAE,GAAG,EAAE,OAAO,CAAC;AACpC,CAAC;AAEM,IAAM,8BAA8B,EAAE,OAAO;AAAA,EAChD,SAAS,EAAE,OAAO;AAAA,EAClB,aAAa,EACR,MAAM;AAAA,IACH,8BAA8B,SAAS;AAAA,MACnC,SAAS;AAAA,MACT,IAAI;AAAA,MACJ,KAAK;AAAA,IACT,CAAC;AAAA,IACD,EAAE,OAAO,CAAC,CAAC;AAAA,EACf,CAAC,EACA,QAAQ,CAAC,CAAC;AAAA,EACf,MAAM,kBAAkB,YAAY;AAAA,EACpC,WAAW;AAAA,EACX,cAAc,EAAE,IAAI;AAAA,EACpB,IAAI,kBAAkB,SAAS;AACnC,CAAC;AAEM,IAAM,yBAAyB,EACjC,SAAS,EACT,KAAK,2BAA2B,EAChC,QAAQ,EAAE,QAAQ,yBAAyB,CAAC;AAE1C,IAAM,yBAAyB,EACjC,OAAO;AAAA,EACJ,YAAY,EAAE,OAAO,EAAE,SAAS;AACpC,CAAC,EACA,QAAQ,CAAC,CAAC;AAER,IAAM,oBAAoB,EAAE,OAAO;AAAA,EACtC,WAAW;AAAA,EACX,aAAa,EAAE,MAAM,CAAC,0BAA0B,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;AAAA,EACzE,QAAQ;AACZ,CAAC;AAEM,IAAM,oCAAoC,EAAE,OAAO;AAAA,EACtD,OAAO;AAAA,EACP,OAAO;AAAA,EACP,aAAa;AACjB,CAAC;AAEM,IAAM,qDACT,kCACK,KAAK;AAAA,EACF,aAAa;AACjB,CAAC,EACA,OAAO;AAAA,EACJ,aAAa,kBAAkB,QAAQ;AAAA,IACnC,WAAW;AAAA,EACf,CAAC;AACL,CAAC;","names":[]}