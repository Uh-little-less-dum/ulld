{"version":3,"sources":["../src/database/inputTypeSchemas/DietOrderByWithAggregationInputSchema.ts"],"sourcesContent":["import type { Prisma } from '@ulld/database/db';\nimport { z } from 'zod';\nimport { SortOrderSchema } from './SortOrderSchema.js';\nimport { SortOrderInputSchema } from './SortOrderInputSchema.js';\nimport { DietCountOrderByAggregateInputSchema } from './DietCountOrderByAggregateInputSchema.js';\nimport { DietAvgOrderByAggregateInputSchema } from './DietAvgOrderByAggregateInputSchema.js';\nimport { DietMaxOrderByAggregateInputSchema } from './DietMaxOrderByAggregateInputSchema.js';\nimport { DietMinOrderByAggregateInputSchema } from './DietMinOrderByAggregateInputSchema.js';\nimport { DietSumOrderByAggregateInputSchema } from './DietSumOrderByAggregateInputSchema.js';\nexport const DietOrderByWithAggregationInputSchema: z.ZodType<Prisma.DietOrderByWithAggregationInput> = z.object({\n  name: z.lazy(() => SortOrderSchema).optional(),\n  summary: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),\n  activelyFollowing: z.lazy(() => SortOrderSchema).optional(),\n  gf: z.lazy(() => SortOrderSchema).optional(),\n  vegan: z.lazy(() => SortOrderSchema).optional(),\n  pescatarian: z.lazy(() => SortOrderSchema).optional(),\n  vegetarian: z.lazy(() => SortOrderSchema).optional(),\n  fasting: z.lazy(() => SortOrderSchema).optional(),\n  cardioTraining: z.lazy(() => SortOrderSchema).optional(),\n  weightTraining: z.lazy(() => SortOrderSchema).optional(),\n  carb: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),\n  pro: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),\n  fat: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),\n  goals: z.lazy(() => SortOrderSchema).optional(),\n  created: z.lazy(() => SortOrderSchema).optional(),\n  lastUpdate: z.lazy(() => SortOrderSchema).optional(),\n  _count: z.lazy(() => DietCountOrderByAggregateInputSchema).optional(),\n  _avg: z.lazy(() => DietAvgOrderByAggregateInputSchema).optional(),\n  _max: z.lazy(() => DietMaxOrderByAggregateInputSchema).optional(),\n  _min: z.lazy(() => DietMinOrderByAggregateInputSchema).optional(),\n  _sum: z.lazy(() => DietSumOrderByAggregateInputSchema).optional()\n}).strict();\nexport default DietOrderByWithAggregationInputSchema;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AACA,SAAS,SAAS;AAQX,IAAM,wCAA2F,EAAE,OAAO;AAAA,EAC/G,MAAM,EAAE,KAAK,MAAM,eAAe,EAAE,SAAS;AAAA,EAC7C,SAAS,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,eAAe,GAAE,EAAE,KAAK,MAAM,oBAAoB,CAAE,CAAC,EAAE,SAAS;AAAA,EAChG,mBAAmB,EAAE,KAAK,MAAM,eAAe,EAAE,SAAS;AAAA,EAC1D,IAAI,EAAE,KAAK,MAAM,eAAe,EAAE,SAAS;AAAA,EAC3C,OAAO,EAAE,KAAK,MAAM,eAAe,EAAE,SAAS;AAAA,EAC9C,aAAa,EAAE,KAAK,MAAM,eAAe,EAAE,SAAS;AAAA,EACpD,YAAY,EAAE,KAAK,MAAM,eAAe,EAAE,SAAS;AAAA,EACnD,SAAS,EAAE,KAAK,MAAM,eAAe,EAAE,SAAS;AAAA,EAChD,gBAAgB,EAAE,KAAK,MAAM,eAAe,EAAE,SAAS;AAAA,EACvD,gBAAgB,EAAE,KAAK,MAAM,eAAe,EAAE,SAAS;AAAA,EACvD,MAAM,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,eAAe,GAAE,EAAE,KAAK,MAAM,oBAAoB,CAAE,CAAC,EAAE,SAAS;AAAA,EAC7F,KAAK,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,eAAe,GAAE,EAAE,KAAK,MAAM,oBAAoB,CAAE,CAAC,EAAE,SAAS;AAAA,EAC5F,KAAK,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,eAAe,GAAE,EAAE,KAAK,MAAM,oBAAoB,CAAE,CAAC,EAAE,SAAS;AAAA,EAC5F,OAAO,EAAE,KAAK,MAAM,eAAe,EAAE,SAAS;AAAA,EAC9C,SAAS,EAAE,KAAK,MAAM,eAAe,EAAE,SAAS;AAAA,EAChD,YAAY,EAAE,KAAK,MAAM,eAAe,EAAE,SAAS;AAAA,EACnD,QAAQ,EAAE,KAAK,MAAM,oCAAoC,EAAE,SAAS;AAAA,EACpE,MAAM,EAAE,KAAK,MAAM,kCAAkC,EAAE,SAAS;AAAA,EAChE,MAAM,EAAE,KAAK,MAAM,kCAAkC,EAAE,SAAS;AAAA,EAChE,MAAM,EAAE,KAAK,MAAM,kCAAkC,EAAE,SAAS;AAAA,EAChE,MAAM,EAAE,KAAK,MAAM,kCAAkC,EAAE,SAAS;AAClE,CAAC,EAAE,OAAO;AACV,IAAO,gDAAQ;","names":[]}