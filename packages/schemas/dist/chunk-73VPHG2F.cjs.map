{"version":3,"sources":["../src/database/inputTypeSchemas/FloatFilterSchema.ts"],"names":[],"mappings":";;;;;AACA,SAAS,SAAS;AAEX,IAAM,oBAAmD,EAAE,OAAO;AAAA,EACvE,QAAQ,EAAE,OAAO,EAAE,SAAS;AAAA,EAC5B,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,SAAS;AAAA,EAChC,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,SAAS;AAAA,EACnC,IAAI,EAAE,OAAO,EAAE,SAAS;AAAA,EACxB,KAAK,EAAE,OAAO,EAAE,SAAS;AAAA,EACzB,IAAI,EAAE,OAAO,EAAE,SAAS;AAAA,EACxB,KAAK,EAAE,OAAO,EAAE,SAAS;AAAA,EACzB,KAAK,EAAE,MAAM,CAAE,EAAE,OAAO,GAAE,EAAE,KAAK,MAAM,uBAAuB,CAAE,CAAC,EAAE,SAAS;AAC9E,CAAC,EAAE,OAAO;AACV,IAAO,4BAAQ","sourcesContent":["import type { Prisma } from '@ulld/database/db';\nimport { z } from 'zod';\nimport { NestedFloatFilterSchema } from './NestedFloatFilterSchema.js';\nexport const FloatFilterSchema: z.ZodType<Prisma.FloatFilter> = z.object({\n  equals: z.number().optional(),\n  in: z.number().array().optional(),\n  notIn: z.number().array().optional(),\n  lt: z.number().optional(),\n  lte: z.number().optional(),\n  gt: z.number().optional(),\n  gte: z.number().optional(),\n  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),\n}).strict();\nexport default FloatFilterSchema;"]}