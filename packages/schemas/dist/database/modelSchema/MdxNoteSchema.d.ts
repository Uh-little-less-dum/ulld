import { z } from 'zod';
import type { TopicWithRelations } from './TopicSchema.js';
import type { TopicPartialWithRelations } from './TopicSchema.js';
import type { SubjectWithRelations } from './SubjectSchema.js';
import type { SubjectPartialWithRelations } from './SubjectSchema.js';
import type { TagWithRelations } from './TagSchema.js';
import type { TagPartialWithRelations } from './TagSchema.js';
import type { BibEntryWithRelations } from './BibEntrySchema.js';
import type { BibEntryPartialWithRelations } from './BibEntrySchema.js';
import type { SequentialNoteListWithRelations } from './SequentialNoteListSchema.js';
import type { SequentialNoteListPartialWithRelations } from './SequentialNoteListSchema.js';
import type { ReadingListWithRelations } from './ReadingListSchema.js';
import type { ReadingListPartialWithRelations } from './ReadingListSchema.js';
import type { EquationWithRelations } from './EquationSchema.js';
import type { EquationPartialWithRelations } from './EquationSchema.js';
import type { DefinitionWithRelations } from './DefinitionSchema.js';
import type { DefinitionPartialWithRelations } from './DefinitionSchema.js';
import type { ToDoWithRelations } from './ToDoSchema.js';
import type { ToDoPartialWithRelations } from './ToDoSchema.js';
export declare const MdxNoteSchema: z.ZodObject<{
    id: z.ZodNumber;
    isProtected: z.ZodNullable<z.ZodBoolean>;
    dietSummaryKey: z.ZodNullable<z.ZodString>;
    title: z.ZodString;
    latexTitle: z.ZodNullable<z.ZodString>;
    rootRelativePath: z.ZodString;
    noteType: z.ZodString;
    content: z.ZodString;
    formatted: z.ZodNullable<z.ZodString>;
    summary: z.ZodNullable<z.ZodString>;
    citationsListOrder: z.ZodArray<z.ZodString, "many">;
    importantValues: z.ZodArray<z.ZodNumber, "many">;
    imageSrc: z.ZodNullable<z.ZodString>;
    href: z.ZodString;
    sequentialKey: z.ZodNullable<z.ZodString>;
    sequentialIndex: z.ZodNullable<z.ZodNumber>;
    floatImages: z.ZodBoolean;
    remoteUrl: z.ZodNullable<z.ZodString>;
    trackRemote: z.ZodBoolean;
    outgoingQuickLinks: z.ZodArray<z.ZodString, "many">;
    quickLink: z.ZodNullable<z.ZodString>;
    bookmarked: z.ZodBoolean;
    firstSync: z.ZodDate;
    lastSync: z.ZodDate;
    lastAccess: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    firstSync: Date;
    lastAccess: Date;
    id: number;
    title: string;
    noteType: string;
    bookmarked: boolean;
    sequentialKey: string | null;
    content: string;
    latexTitle: string | null;
    floatImages: boolean;
    formatted: string | null;
    importantValues: number[];
    href: string;
    citationsListOrder: string[];
    outgoingQuickLinks: string[];
    rootRelativePath: string;
    isProtected: boolean | null;
    sequentialIndex: number | null;
    remoteUrl: string | null;
    trackRemote: boolean;
    summary: string | null;
    lastSync: Date;
    dietSummaryKey: string | null;
    imageSrc: string | null;
    quickLink: string | null;
}, {
    firstSync: Date;
    lastAccess: Date;
    id: number;
    title: string;
    noteType: string;
    bookmarked: boolean;
    sequentialKey: string | null;
    content: string;
    latexTitle: string | null;
    floatImages: boolean;
    formatted: string | null;
    importantValues: number[];
    href: string;
    citationsListOrder: string[];
    outgoingQuickLinks: string[];
    rootRelativePath: string;
    isProtected: boolean | null;
    sequentialIndex: number | null;
    remoteUrl: string | null;
    trackRemote: boolean;
    summary: string | null;
    lastSync: Date;
    dietSummaryKey: string | null;
    imageSrc: string | null;
    quickLink: string | null;
}>;
export type MdxNote = z.infer<typeof MdxNoteSchema>;
export declare const MdxNotePartialSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodNumber>;
    isProtected: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    dietSummaryKey: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    title: z.ZodOptional<z.ZodString>;
    latexTitle: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    rootRelativePath: z.ZodOptional<z.ZodString>;
    noteType: z.ZodOptional<z.ZodString>;
    content: z.ZodOptional<z.ZodString>;
    formatted: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    summary: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    citationsListOrder: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    importantValues: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
    imageSrc: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    href: z.ZodOptional<z.ZodString>;
    sequentialKey: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    sequentialIndex: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    floatImages: z.ZodOptional<z.ZodBoolean>;
    remoteUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    trackRemote: z.ZodOptional<z.ZodBoolean>;
    outgoingQuickLinks: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    quickLink: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    bookmarked: z.ZodOptional<z.ZodBoolean>;
    firstSync: z.ZodOptional<z.ZodDate>;
    lastSync: z.ZodOptional<z.ZodDate>;
    lastAccess: z.ZodOptional<z.ZodDate>;
}, "strip", z.ZodTypeAny, {
    firstSync?: Date | undefined;
    lastAccess?: Date | undefined;
    id?: number | undefined;
    title?: string | undefined;
    noteType?: string | undefined;
    bookmarked?: boolean | undefined;
    sequentialKey?: string | null | undefined;
    content?: string | undefined;
    latexTitle?: string | null | undefined;
    floatImages?: boolean | undefined;
    formatted?: string | null | undefined;
    importantValues?: number[] | undefined;
    href?: string | undefined;
    citationsListOrder?: string[] | undefined;
    outgoingQuickLinks?: string[] | undefined;
    rootRelativePath?: string | undefined;
    isProtected?: boolean | null | undefined;
    sequentialIndex?: number | null | undefined;
    remoteUrl?: string | null | undefined;
    trackRemote?: boolean | undefined;
    summary?: string | null | undefined;
    lastSync?: Date | undefined;
    dietSummaryKey?: string | null | undefined;
    imageSrc?: string | null | undefined;
    quickLink?: string | null | undefined;
}, {
    firstSync?: Date | undefined;
    lastAccess?: Date | undefined;
    id?: number | undefined;
    title?: string | undefined;
    noteType?: string | undefined;
    bookmarked?: boolean | undefined;
    sequentialKey?: string | null | undefined;
    content?: string | undefined;
    latexTitle?: string | null | undefined;
    floatImages?: boolean | undefined;
    formatted?: string | null | undefined;
    importantValues?: number[] | undefined;
    href?: string | undefined;
    citationsListOrder?: string[] | undefined;
    outgoingQuickLinks?: string[] | undefined;
    rootRelativePath?: string | undefined;
    isProtected?: boolean | null | undefined;
    sequentialIndex?: number | null | undefined;
    remoteUrl?: string | null | undefined;
    trackRemote?: boolean | undefined;
    summary?: string | null | undefined;
    lastSync?: Date | undefined;
    dietSummaryKey?: string | null | undefined;
    imageSrc?: string | null | undefined;
    quickLink?: string | null | undefined;
}>;
export type MdxNotePartial = z.infer<typeof MdxNotePartialSchema>;
export type MdxNoteRelations = {
    topics: TopicWithRelations[];
    subjects: SubjectWithRelations[];
    tags: TagWithRelations[];
    citations: BibEntryWithRelations[];
    sequentialList?: SequentialNoteListWithRelations | null;
    ReadingList: ReadingListWithRelations[];
    equations: EquationWithRelations[];
    definitions: DefinitionWithRelations[];
    toDo: ToDoWithRelations[];
};
export type MdxNoteWithRelations = z.infer<typeof MdxNoteSchema> & MdxNoteRelations;
export declare const MdxNoteWithRelationsSchema: z.ZodType<MdxNoteWithRelations>;
export type MdxNotePartialRelations = {
    topics?: TopicPartialWithRelations[];
    subjects?: SubjectPartialWithRelations[];
    tags?: TagPartialWithRelations[];
    citations?: BibEntryPartialWithRelations[];
    sequentialList?: SequentialNoteListPartialWithRelations | null;
    ReadingList?: ReadingListPartialWithRelations[];
    equations?: EquationPartialWithRelations[];
    definitions?: DefinitionPartialWithRelations[];
    toDo?: ToDoPartialWithRelations[];
};
export type MdxNotePartialWithRelations = z.infer<typeof MdxNotePartialSchema> & MdxNotePartialRelations;
export declare const MdxNotePartialWithRelationsSchema: z.ZodType<MdxNotePartialWithRelations>;
export type MdxNoteWithPartialRelations = z.infer<typeof MdxNoteSchema> & MdxNotePartialRelations;
export declare const MdxNoteWithPartialRelationsSchema: z.ZodType<MdxNoteWithPartialRelations>;
export default MdxNoteSchema;
//# sourceMappingURL=MdxNoteSchema.d.ts.map