import { z } from 'zod';
import type { DietaryItemWithRelations } from './DietaryItemSchema.js';
import type { DietaryItemPartialWithRelations } from './DietaryItemSchema.js';
import type { TimePeriodWithRelations } from './TimePeriodSchema.js';
import type { TimePeriodPartialWithRelations } from './TimePeriodSchema.js';
import type { HealthReportWithRelations } from './HealthReportSchema.js';
import type { HealthReportPartialWithRelations } from './HealthReportSchema.js';
export declare const DietSchema: z.ZodObject<{
    gf: z.ZodEnum<["on", "off", "partial"]>;
    fasting: z.ZodEnum<["on", "off", "partial"]>;
    cardioTraining: z.ZodEnum<["on", "off", "partial"]>;
    weightTraining: z.ZodEnum<["on", "off", "partial"]>;
    goals: z.ZodArray<z.ZodEnum<["weightLoss", "muscleGain", "autoImmune", "allergy", "gsd", "skin", "sexDrive", "anxiety", "memory", "energy", "adhd", "sleep", "depression", "mentalHealth"]>, "many">;
    name: z.ZodString;
    summary: z.ZodNullable<z.ZodString>;
    activelyFollowing: z.ZodBoolean;
    vegan: z.ZodBoolean;
    pescatarian: z.ZodBoolean;
    vegetarian: z.ZodBoolean;
    carb: z.ZodNullable<z.ZodNumber>;
    pro: z.ZodNullable<z.ZodNumber>;
    fat: z.ZodNullable<z.ZodNumber>;
    created: z.ZodDate;
    lastUpdate: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    vegan: boolean;
    name: string;
    lastUpdate: Date;
    summary: string | null;
    gf: "on" | "off" | "partial";
    fasting: "on" | "off" | "partial";
    cardioTraining: "on" | "off" | "partial";
    weightTraining: "on" | "off" | "partial";
    goals: ("weightLoss" | "muscleGain" | "autoImmune" | "allergy" | "gsd" | "skin" | "sexDrive" | "anxiety" | "memory" | "energy" | "adhd" | "sleep" | "depression" | "mentalHealth")[];
    activelyFollowing: boolean;
    pescatarian: boolean;
    vegetarian: boolean;
    carb: number | null;
    pro: number | null;
    fat: number | null;
    created: Date;
}, {
    vegan: boolean;
    name: string;
    lastUpdate: Date;
    summary: string | null;
    gf: "on" | "off" | "partial";
    fasting: "on" | "off" | "partial";
    cardioTraining: "on" | "off" | "partial";
    weightTraining: "on" | "off" | "partial";
    goals: ("weightLoss" | "muscleGain" | "autoImmune" | "allergy" | "gsd" | "skin" | "sexDrive" | "anxiety" | "memory" | "energy" | "adhd" | "sleep" | "depression" | "mentalHealth")[];
    activelyFollowing: boolean;
    pescatarian: boolean;
    vegetarian: boolean;
    carb: number | null;
    pro: number | null;
    fat: number | null;
    created: Date;
}>;
export type Diet = z.infer<typeof DietSchema>;
export declare const DietPartialSchema: z.ZodObject<{
    gf: z.ZodOptional<z.ZodEnum<["on", "off", "partial"]>>;
    fasting: z.ZodOptional<z.ZodEnum<["on", "off", "partial"]>>;
    cardioTraining: z.ZodOptional<z.ZodEnum<["on", "off", "partial"]>>;
    weightTraining: z.ZodOptional<z.ZodEnum<["on", "off", "partial"]>>;
    goals: z.ZodOptional<z.ZodArray<z.ZodEnum<["weightLoss", "muscleGain", "autoImmune", "allergy", "gsd", "skin", "sexDrive", "anxiety", "memory", "energy", "adhd", "sleep", "depression", "mentalHealth"]>, "many">>;
    name: z.ZodOptional<z.ZodString>;
    summary: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    activelyFollowing: z.ZodOptional<z.ZodBoolean>;
    vegan: z.ZodOptional<z.ZodBoolean>;
    pescatarian: z.ZodOptional<z.ZodBoolean>;
    vegetarian: z.ZodOptional<z.ZodBoolean>;
    carb: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    pro: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    fat: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    created: z.ZodOptional<z.ZodDate>;
    lastUpdate: z.ZodOptional<z.ZodDate>;
}, "strip", z.ZodTypeAny, {
    vegan?: boolean | undefined;
    name?: string | undefined;
    lastUpdate?: Date | undefined;
    summary?: string | null | undefined;
    gf?: "on" | "off" | "partial" | undefined;
    fasting?: "on" | "off" | "partial" | undefined;
    cardioTraining?: "on" | "off" | "partial" | undefined;
    weightTraining?: "on" | "off" | "partial" | undefined;
    goals?: ("weightLoss" | "muscleGain" | "autoImmune" | "allergy" | "gsd" | "skin" | "sexDrive" | "anxiety" | "memory" | "energy" | "adhd" | "sleep" | "depression" | "mentalHealth")[] | undefined;
    activelyFollowing?: boolean | undefined;
    pescatarian?: boolean | undefined;
    vegetarian?: boolean | undefined;
    carb?: number | null | undefined;
    pro?: number | null | undefined;
    fat?: number | null | undefined;
    created?: Date | undefined;
}, {
    vegan?: boolean | undefined;
    name?: string | undefined;
    lastUpdate?: Date | undefined;
    summary?: string | null | undefined;
    gf?: "on" | "off" | "partial" | undefined;
    fasting?: "on" | "off" | "partial" | undefined;
    cardioTraining?: "on" | "off" | "partial" | undefined;
    weightTraining?: "on" | "off" | "partial" | undefined;
    goals?: ("weightLoss" | "muscleGain" | "autoImmune" | "allergy" | "gsd" | "skin" | "sexDrive" | "anxiety" | "memory" | "energy" | "adhd" | "sleep" | "depression" | "mentalHealth")[] | undefined;
    activelyFollowing?: boolean | undefined;
    pescatarian?: boolean | undefined;
    vegetarian?: boolean | undefined;
    carb?: number | null | undefined;
    pro?: number | null | undefined;
    fat?: number | null | undefined;
    created?: Date | undefined;
}>;
export type DietPartial = z.infer<typeof DietPartialSchema>;
export type DietRelations = {
    items: DietaryItemWithRelations[];
    periodsFollowed: TimePeriodWithRelations[];
    HealthReport: HealthReportWithRelations[];
};
export type DietWithRelations = z.infer<typeof DietSchema> & DietRelations;
export declare const DietWithRelationsSchema: z.ZodType<DietWithRelations>;
export type DietPartialRelations = {
    items?: DietaryItemPartialWithRelations[];
    periodsFollowed?: TimePeriodPartialWithRelations[];
    HealthReport?: HealthReportPartialWithRelations[];
};
export type DietPartialWithRelations = z.infer<typeof DietPartialSchema> & DietPartialRelations;
export declare const DietPartialWithRelationsSchema: z.ZodType<DietPartialWithRelations>;
export type DietWithPartialRelations = z.infer<typeof DietSchema> & DietPartialRelations;
export declare const DietWithPartialRelationsSchema: z.ZodType<DietWithPartialRelations>;
export default DietSchema;
//# sourceMappingURL=DietSchema.d.ts.map