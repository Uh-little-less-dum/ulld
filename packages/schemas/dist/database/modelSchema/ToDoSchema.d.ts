import { z } from 'zod';
import type { MdxNoteWithRelations } from './MdxNoteSchema.js';
import type { MdxNotePartialWithRelations } from './MdxNoteSchema.js';
import type { TagWithRelations } from './TagSchema.js';
import type { TagPartialWithRelations } from './TagSchema.js';
import type { TopicWithRelations } from './TopicSchema.js';
import type { TopicPartialWithRelations } from './TopicSchema.js';
import type { SubjectWithRelations } from './SubjectSchema.js';
import type { SubjectPartialWithRelations } from './SubjectSchema.js';
import type { ToDoListWithRelations } from './ToDoListSchema.js';
import type { ToDoListPartialWithRelations } from './ToDoListSchema.js';
export declare const ToDoSchema: z.ZodObject<{
    category: z.ZodNullable<z.ZodEnum<["bug", "feature", "documentation", "online", "priority", "urgent", "work", "gym", "freetime", "study", "research", "paper"]>>;
    id: z.ZodNumber;
    createdAt: z.ZodDate;
    task: z.ZodString;
    dueAt: z.ZodNullable<z.ZodDate>;
    details: z.ZodNullable<z.ZodString>;
    parentId: z.ZodNullable<z.ZodNumber>;
    bookmarked: z.ZodBoolean;
    status: z.ZodString;
    priority: z.ZodNumber;
    toDoListId: z.ZodNullable<z.ZodNumber>;
    completedOn: z.ZodNullable<z.ZodDate>;
}, "strip", z.ZodTypeAny, {
    status: string;
    id: number;
    createdAt: Date;
    task: string;
    dueAt: Date | null;
    details: string | null;
    parentId: number | null;
    category: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper" | null;
    priority: number;
    bookmarked: boolean;
    toDoListId: number | null;
    completedOn: Date | null;
}, {
    status: string;
    id: number;
    createdAt: Date;
    task: string;
    dueAt: Date | null;
    details: string | null;
    parentId: number | null;
    category: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper" | null;
    priority: number;
    bookmarked: boolean;
    toDoListId: number | null;
    completedOn: Date | null;
}>;
export type ToDo = z.infer<typeof ToDoSchema>;
export declare const ToDoPartialSchema: z.ZodObject<{
    category: z.ZodOptional<z.ZodNullable<z.ZodEnum<["bug", "feature", "documentation", "online", "priority", "urgent", "work", "gym", "freetime", "study", "research", "paper"]>>>;
    id: z.ZodOptional<z.ZodNumber>;
    createdAt: z.ZodOptional<z.ZodDate>;
    task: z.ZodOptional<z.ZodString>;
    dueAt: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
    details: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    parentId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    bookmarked: z.ZodOptional<z.ZodBoolean>;
    status: z.ZodOptional<z.ZodString>;
    priority: z.ZodOptional<z.ZodNumber>;
    toDoListId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    completedOn: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
}, "strip", z.ZodTypeAny, {
    status?: string | undefined;
    id?: number | undefined;
    createdAt?: Date | undefined;
    task?: string | undefined;
    dueAt?: Date | null | undefined;
    details?: string | null | undefined;
    parentId?: number | null | undefined;
    category?: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper" | null | undefined;
    priority?: number | undefined;
    bookmarked?: boolean | undefined;
    toDoListId?: number | null | undefined;
    completedOn?: Date | null | undefined;
}, {
    status?: string | undefined;
    id?: number | undefined;
    createdAt?: Date | undefined;
    task?: string | undefined;
    dueAt?: Date | null | undefined;
    details?: string | null | undefined;
    parentId?: number | null | undefined;
    category?: "bug" | "feature" | "documentation" | "online" | "priority" | "urgent" | "work" | "gym" | "freetime" | "study" | "research" | "paper" | null | undefined;
    priority?: number | undefined;
    bookmarked?: boolean | undefined;
    toDoListId?: number | null | undefined;
    completedOn?: Date | null | undefined;
}>;
export type ToDoPartial = z.infer<typeof ToDoPartialSchema>;
export type ToDoRelations = {
    associatedNotes: MdxNoteWithRelations[];
    tags: TagWithRelations[];
    topics: TopicWithRelations[];
    subjects: SubjectWithRelations[];
    parent?: ToDoWithRelations | null;
    child: ToDoWithRelations[];
    ToDoList?: ToDoListWithRelations | null;
};
export type ToDoWithRelations = z.infer<typeof ToDoSchema> & ToDoRelations;
export declare const ToDoWithRelationsSchema: z.ZodType<ToDoWithRelations>;
export type ToDoPartialRelations = {
    associatedNotes?: MdxNotePartialWithRelations[];
    tags?: TagPartialWithRelations[];
    topics?: TopicPartialWithRelations[];
    subjects?: SubjectPartialWithRelations[];
    parent?: ToDoPartialWithRelations | null;
    child?: ToDoPartialWithRelations[];
    ToDoList?: ToDoListPartialWithRelations | null;
};
export type ToDoPartialWithRelations = z.infer<typeof ToDoPartialSchema> & ToDoPartialRelations;
export declare const ToDoPartialWithRelationsSchema: z.ZodType<ToDoPartialWithRelations>;
export type ToDoWithPartialRelations = z.infer<typeof ToDoSchema> & ToDoPartialRelations;
export declare const ToDoWithPartialRelationsSchema: z.ZodType<ToDoWithPartialRelations>;
export default ToDoSchema;
//# sourceMappingURL=ToDoSchema.d.ts.map