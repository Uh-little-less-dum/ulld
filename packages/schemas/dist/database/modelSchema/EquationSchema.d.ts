import { z } from 'zod';
import type { RelatedValuesWithRelations } from './RelatedValuesSchema.js';
import type { RelatedValuesPartialWithRelations } from './RelatedValuesSchema.js';
import type { TagWithRelations } from './TagSchema.js';
import type { TagPartialWithRelations } from './TagSchema.js';
import type { TopicWithRelations } from './TopicSchema.js';
import type { TopicPartialWithRelations } from './TopicSchema.js';
import type { SubjectWithRelations } from './SubjectSchema.js';
import type { SubjectPartialWithRelations } from './SubjectSchema.js';
import type { MdxNoteWithRelations } from './MdxNoteSchema.js';
import type { MdxNotePartialWithRelations } from './MdxNoteSchema.js';
export declare const EquationSchema: z.ZodObject<{
    id: z.ZodNumber;
    equationId: z.ZodNullable<z.ZodString>;
    title: z.ZodString;
    desc: z.ZodNullable<z.ZodString>;
    content: z.ZodString;
    asPython: z.ZodNullable<z.ZodString>;
    variableLegend: z.ZodType<import(".prisma/client").Prisma.JsonValue, z.ZodTypeDef, import(".prisma/client").Prisma.JsonValue>;
    variables: z.ZodArray<z.ZodString, "many">;
    keywords: z.ZodArray<z.ZodString, "many">;
    createdAt: z.ZodDate;
    lastAccess: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    lastAccess: Date;
    id: number;
    createdAt: Date;
    title: string;
    keywords: string[];
    content: string;
    equationId: string | null;
    desc: string | null;
    asPython: string | null;
    variableLegend: import(".prisma/client").Prisma.JsonValue;
    variables: string[];
}, {
    lastAccess: Date;
    id: number;
    createdAt: Date;
    title: string;
    keywords: string[];
    content: string;
    equationId: string | null;
    desc: string | null;
    asPython: string | null;
    variableLegend: import(".prisma/client").Prisma.JsonValue;
    variables: string[];
}>;
export type Equation = z.infer<typeof EquationSchema>;
export declare const EquationPartialSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodNumber>;
    equationId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    title: z.ZodOptional<z.ZodString>;
    desc: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    content: z.ZodOptional<z.ZodString>;
    asPython: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    variableLegend: z.ZodOptional<z.ZodType<import(".prisma/client").Prisma.JsonValue, z.ZodTypeDef, import(".prisma/client").Prisma.JsonValue>>;
    variables: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    keywords: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    createdAt: z.ZodOptional<z.ZodDate>;
    lastAccess: z.ZodOptional<z.ZodDate>;
}, "strip", z.ZodTypeAny, {
    lastAccess?: Date | undefined;
    id?: number | undefined;
    createdAt?: Date | undefined;
    title?: string | undefined;
    keywords?: string[] | undefined;
    content?: string | undefined;
    equationId?: string | null | undefined;
    desc?: string | null | undefined;
    asPython?: string | null | undefined;
    variableLegend?: import(".prisma/client").Prisma.JsonValue | undefined;
    variables?: string[] | undefined;
}, {
    lastAccess?: Date | undefined;
    id?: number | undefined;
    createdAt?: Date | undefined;
    title?: string | undefined;
    keywords?: string[] | undefined;
    content?: string | undefined;
    equationId?: string | null | undefined;
    desc?: string | null | undefined;
    asPython?: string | null | undefined;
    variableLegend?: import(".prisma/client").Prisma.JsonValue | undefined;
    variables?: string[] | undefined;
}>;
export type EquationPartial = z.infer<typeof EquationPartialSchema>;
export type EquationRelations = {
    relatedValues: RelatedValuesWithRelations[];
    tags: TagWithRelations[];
    topics: TopicWithRelations[];
    subjects: SubjectWithRelations[];
    mdxNotes: MdxNoteWithRelations[];
};
export type EquationWithRelations = z.infer<typeof EquationSchema> & EquationRelations;
export declare const EquationWithRelationsSchema: z.ZodType<EquationWithRelations>;
export type EquationPartialRelations = {
    relatedValues?: RelatedValuesPartialWithRelations[];
    tags?: TagPartialWithRelations[];
    topics?: TopicPartialWithRelations[];
    subjects?: SubjectPartialWithRelations[];
    mdxNotes?: MdxNotePartialWithRelations[];
};
export type EquationPartialWithRelations = z.infer<typeof EquationPartialSchema> & EquationPartialRelations;
export declare const EquationPartialWithRelationsSchema: z.ZodType<EquationPartialWithRelations>;
export type EquationWithPartialRelations = z.infer<typeof EquationSchema> & EquationPartialRelations;
export declare const EquationWithPartialRelationsSchema: z.ZodType<EquationWithPartialRelations>;
export default EquationSchema;
//# sourceMappingURL=EquationSchema.d.ts.map