{"version":3,"sources":["../src/database/outputTypeSchemas/BibUpsertArgsSchema.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,SAAS;AAYX,IAAM,kBAA+C,EAAE,OAAO;AAAA,EACnE,IAAI,EAAE,QAAQ,EAAE,SAAS;AAAA,EACzB,UAAU,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC/B,WAAW,EAAE,QAAQ,EAAE,SAAS;AAAA,EAChC,UAAU,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC/B,SAAS,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,0BAA0B,CAAC,CAAC,EAAE,SAAS;AAAA,EAClF,QAAQ,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,4BAA4B,CAAC,CAAC,EAAE,SAAS;AACrF,CAAC,EAAE,OAAO;AACH,IAAM,sBAAuD,EAAE,OAAO;AAAA,EAC3E,QAAQ,gBAAgB,SAAS;AAAA,EACjC,SAAS,iBAAiB,SAAS;AAAA,EACnC,OAAO;AAAA,EACP,QAAQ,EAAE,MAAM,CAAE,sBAAqB,6BAA8B,CAAC;AAAA,EACtE,QAAQ,EAAE,MAAM,CAAE,sBAAqB,6BAA8B,CAAC;AACxE,CAAC,EAAE,OAAO;AACV,IAAO,8BAAQ","sourcesContent":["import { z } from 'zod';\nimport type { Prisma } from '@ulld/database/db';\nimport { BibIncludeSchema } from '../inputTypeSchemas/BibIncludeSchema.js'\nimport { BibWhereUniqueInputSchema } from '../inputTypeSchemas/BibWhereUniqueInputSchema.js'\nimport { BibCreateInputSchema } from '../inputTypeSchemas/BibCreateInputSchema.js'\nimport { BibUncheckedCreateInputSchema } from '../inputTypeSchemas/BibUncheckedCreateInputSchema.js'\nimport { BibUpdateInputSchema } from '../inputTypeSchemas/BibUpdateInputSchema.js'\nimport { BibUncheckedUpdateInputSchema } from '../inputTypeSchemas/BibUncheckedUpdateInputSchema.js'\nimport { BibEntryFindManyArgsSchema } from \"../outputTypeSchemas/BibEntryFindManyArgsSchema\"\nimport { BibCountOutputTypeArgsSchema } from \"../outputTypeSchemas/BibCountOutputTypeArgsSchema\"\n// Select schema needs to be in file to prevent circular imports\n//------------------------------------------------------\nexport const BibSelectSchema: z.ZodType<Prisma.BibSelect> = z.object({\n  id: z.boolean().optional(),\n  filename: z.boolean().optional(),\n  firstSync: z.boolean().optional(),\n  lastSync: z.boolean().optional(),\n  entries: z.union([z.boolean(),z.lazy(() => BibEntryFindManyArgsSchema)]).optional(),\n  _count: z.union([z.boolean(),z.lazy(() => BibCountOutputTypeArgsSchema)]).optional(),\n}).strict()\nexport const BibUpsertArgsSchema: z.ZodType<Prisma.BibUpsertArgs> = z.object({\n  select: BibSelectSchema.optional(),\n  include: BibIncludeSchema.optional(),\n  where: BibWhereUniqueInputSchema,\n  create: z.union([ BibCreateInputSchema,BibUncheckedCreateInputSchema ]),\n  update: z.union([ BibUpdateInputSchema,BibUncheckedUpdateInputSchema ]),\n}).strict() ;\nexport default BibUpsertArgsSchema;"]}