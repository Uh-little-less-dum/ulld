{"version":3,"sources":["../src/database/inputTypeSchemas/NestedDateTimeFilterSchema.ts"],"names":[],"mappings":";AAEA,SAAS,SAAS;AAEX,IAAM,6BAAqE,EAAE,OAAO;AAAA,EACzF,QAAQ,EAAE,OAAO,KAAK,EAAE,SAAS;AAAA,EACjC,IAAI,EAAE,OAAO,KAAK,EAAE,MAAM,EAAE,SAAS;AAAA,EACrC,OAAO,EAAE,OAAO,KAAK,EAAE,MAAM,EAAE,SAAS;AAAA,EACxC,IAAI,EAAE,OAAO,KAAK,EAAE,SAAS;AAAA,EAC7B,KAAK,EAAE,OAAO,KAAK,EAAE,SAAS;AAAA,EAC9B,IAAI,EAAE,OAAO,KAAK,EAAE,SAAS;AAAA,EAC7B,KAAK,EAAE,OAAO,KAAK,EAAE,SAAS;AAAA,EAC9B,KAAK,EAAE,MAAM,CAAE,EAAE,OAAO,KAAK,GAAE,EAAE,KAAK,MAAM,0BAA0B,CAAE,CAAC,EAAE,SAAS;AACtF,CAAC,EAAE,OAAO;AAEV,IAAO,qCAAQ","sourcesContent":["import type { Prisma } from '@prisma/client';\n\nimport { z } from 'zod';\n\nexport const NestedDateTimeFilterSchema: z.ZodType<Prisma.NestedDateTimeFilter> = z.object({\n  equals: z.coerce.date().optional(),\n  in: z.coerce.date().array().optional(),\n  notIn: z.coerce.date().array().optional(),\n  lt: z.coerce.date().optional(),\n  lte: z.coerce.date().optional(),\n  gt: z.coerce.date().optional(),\n  gte: z.coerce.date().optional(),\n  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),\n}).strict();\n\nexport default NestedDateTimeFilterSchema;\n"]}