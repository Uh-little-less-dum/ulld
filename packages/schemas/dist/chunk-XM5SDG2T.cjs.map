{"version":3,"sources":["../src/database/outputTypeSchemas/HealthReportFindFirstArgsSchema.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAAS,SAAS;AAUX,IAAM,2BAAiE,EAAE,OAAO;AAAA,EACrF,IAAI,EAAE,QAAQ,EAAE,SAAS;AAAA,EACzB,OAAO,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC5B,SAAS,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC9B,SAAS,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC9B,MAAM,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC3B,OAAO,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC5B,gBAAgB,EAAE,QAAQ,EAAE,SAAS;AAAA,EACrC,UAAU,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC/B,QAAQ,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC7B,iBAAiB,EAAE,QAAQ,EAAE,SAAS;AAAA,EACtC,SAAS,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC9B,QAAQ,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC7B,aAAa,EAAE,QAAQ,EAAE,SAAS;AAAA,EAClC,SAAS,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC9B,cAAc,EAAE,QAAQ,EAAE,SAAS;AAAA,EACnC,WAAW,EAAE,QAAQ,EAAE,SAAS;AAAA,EAChC,MAAM,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC3B,UAAU,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC/B,oBAAoB,EAAE,QAAQ,EAAE,SAAS;AAAA,EACzC,gBAAgB,EAAE,QAAQ,EAAE,SAAS;AAAA,EACrC,cAAc,EAAE,QAAQ,EAAE,SAAS;AAAA,EACnC,aAAa,EAAE,QAAQ,EAAE,SAAS;AAAA,EAClC,2BAA2B,EAAE,QAAQ,EAAE,SAAS;AAAA,EAChD,eAAe,EAAE,QAAQ,EAAE,SAAS;AAAA,EACpC,cAAc,EAAE,QAAQ,EAAE,SAAS;AAAA,EACnC,WAAW,EAAE,QAAQ,EAAE,SAAS;AAAA,EAChC,WAAW,EAAE,QAAQ,EAAE,SAAS;AAAA,EAChC,YAAY,EAAE,QAAQ,EAAE,SAAS;AAAA,EACjC,aAAa,EAAE,QAAQ,EAAE,SAAS;AAAA,EAClC,iCAAiC,EAAE,QAAQ,EAAE,SAAS;AAAA,EACtD,sBAAsB,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC3C,QAAQ,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC7B,SAAS,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC9B,aAAa,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,cAAc,CAAC,CAAC,EAAE,SAAS;AAC5E,CAAC,EAAE,OAAO;AACH,IAAM,kCAA+E,EAAE,OAAO;AAAA,EACnG,QAAQ,yBAAyB,SAAS;AAAA,EAC1C,SAAS,0BAA0B,SAAS;AAAA,EAC5C,OAAO,6BAA6B,SAAS;AAAA,EAC7C,SAAS,EAAE,MAAM,CAAE,2CAA2C,MAAM,GAAE,0CAA2C,CAAC,EAAE,SAAS;AAAA,EAC7H,QAAQ,mCAAmC,SAAS;AAAA,EACpD,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,EAC1B,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,EAC1B,UAAU,EAAE,MAAM,CAAE,mCAAkC,kCAAkC,MAAM,CAAE,CAAC,EAAE,SAAS;AAC9G,CAAC,EAAE,OAAO;AACV,IAAO,0CAAQ","sourcesContent":["import { z } from 'zod';\nimport type { Prisma } from '@ulld/database/db';\nimport { HealthReportIncludeSchema } from '../inputTypeSchemas/HealthReportIncludeSchema.js'\nimport { HealthReportWhereInputSchema } from '../inputTypeSchemas/HealthReportWhereInputSchema.js'\nimport { HealthReportOrderByWithRelationInputSchema } from '../inputTypeSchemas/HealthReportOrderByWithRelationInputSchema.js'\nimport { HealthReportWhereUniqueInputSchema } from '../inputTypeSchemas/HealthReportWhereUniqueInputSchema.js'\nimport { HealthReportScalarFieldEnumSchema } from '../inputTypeSchemas/HealthReportScalarFieldEnumSchema.js'\nimport { DietArgsSchema } from \"../outputTypeSchemas/DietArgsSchema\"\n// Select schema needs to be in file to prevent circular imports\n//------------------------------------------------------\nexport const HealthReportSelectSchema: z.ZodType<Prisma.HealthReportSelect> = z.object({\n  id: z.boolean().optional(),\n  title: z.boolean().optional(),\n  summary: z.boolean().optional(),\n  overall: z.boolean().optional(),\n  skin: z.boolean().optional(),\n  bloat: z.boolean().optional(),\n  weight_feeling: z.boolean().optional(),\n  fullness: z.boolean().optional(),\n  weight: z.boolean().optional(),\n  cardiacCapacity: z.boolean().optional(),\n  jawLine: z.boolean().optional(),\n  joints: z.boolean().optional(),\n  flexibility: z.boolean().optional(),\n  anxiety: z.boolean().optional(),\n  anxiety_desc: z.boolean().optional(),\n  mood_desc: z.boolean().optional(),\n  mood: z.boolean().optional(),\n  sexDrive: z.boolean().optional(),\n  intruisiveThoughts: z.boolean().optional(),\n  caffeineIntake: z.boolean().optional(),\n  glutenIntake: z.boolean().optional(),\n  sugarIntake: z.boolean().optional(),\n  artificialSweetenerIntake: z.boolean().optional(),\n  artificalDyes: z.boolean().optional(),\n  sleepQuality: z.boolean().optional(),\n  hydration: z.boolean().optional(),\n  twitching: z.boolean().optional(),\n  sleepHours: z.boolean().optional(),\n  calorie_est: z.boolean().optional(),\n  times_meals_more_than_gap_apart: z.boolean().optional(),\n  estHoursInExcessFast: z.boolean().optional(),\n  dietId: z.boolean().optional(),\n  created: z.boolean().optional(),\n  currentDiet: z.union([z.boolean(),z.lazy(() => DietArgsSchema)]).optional(),\n}).strict()\nexport const HealthReportFindFirstArgsSchema: z.ZodType<Prisma.HealthReportFindFirstArgs> = z.object({\n  select: HealthReportSelectSchema.optional(),\n  include: HealthReportIncludeSchema.optional(),\n  where: HealthReportWhereInputSchema.optional(),\n  orderBy: z.union([ HealthReportOrderByWithRelationInputSchema.array(),HealthReportOrderByWithRelationInputSchema ]).optional(),\n  cursor: HealthReportWhereUniqueInputSchema.optional(),\n  take: z.number().optional(),\n  skip: z.number().optional(),\n  distinct: z.union([ HealthReportScalarFieldEnumSchema,HealthReportScalarFieldEnumSchema.array() ]).optional(),\n}).strict() ;\nexport default HealthReportFindFirstArgsSchema;"]}