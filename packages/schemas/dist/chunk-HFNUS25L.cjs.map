{"version":3,"sources":["../src/database/outputTypeSchemas/ServingGroupByArgsSchema.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,SAAS,SAAS;AAOX,IAAM,2BAAiE,EAAE,OAAO;AAAA,EACrF,OAAO,wBAAwB,SAAS;AAAA,EACxC,SAAS,EAAE,MAAM,CAAE,yCAAyC,MAAM,GAAE,wCAAyC,CAAC,EAAE,SAAS;AAAA,EACzH,IAAI,6BAA6B,MAAM;AAAA,EACvC,QAAQ,4CAA4C,SAAS;AAAA,EAC7D,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,EAC1B,MAAM,EAAE,OAAO,EAAE,SAAS;AAC5B,CAAC,EAAE,OAAO;AAEV,IAAO,mCAAQ","sourcesContent":["import { z } from 'zod';\nimport type { Prisma } from '@prisma/client';\nimport { ServingWhereInputSchema } from '../inputTypeSchemas/ServingWhereInputSchema'\nimport { ServingOrderByWithAggregationInputSchema } from '../inputTypeSchemas/ServingOrderByWithAggregationInputSchema'\nimport { ServingScalarFieldEnumSchema } from '../inputTypeSchemas/ServingScalarFieldEnumSchema'\nimport { ServingScalarWhereWithAggregatesInputSchema } from '../inputTypeSchemas/ServingScalarWhereWithAggregatesInputSchema'\n\nexport const ServingGroupByArgsSchema: z.ZodType<Prisma.ServingGroupByArgs> = z.object({\n  where: ServingWhereInputSchema.optional(),\n  orderBy: z.union([ ServingOrderByWithAggregationInputSchema.array(),ServingOrderByWithAggregationInputSchema ]).optional(),\n  by: ServingScalarFieldEnumSchema.array(),\n  having: ServingScalarWhereWithAggregatesInputSchema.optional(),\n  take: z.number().optional(),\n  skip: z.number().optional(),\n}).strict() ;\n\nexport default ServingGroupByArgsSchema;\n"]}