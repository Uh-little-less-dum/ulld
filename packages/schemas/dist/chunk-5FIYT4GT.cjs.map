{"version":3,"sources":["../src/database/outputTypeSchemas/PracticeExamFindFirstArgsSchema.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,SAAS;AAeX,IAAM,2BAAiE,EAAE,OAAO;AAAA,EACrF,IAAI,EAAE,QAAQ,EAAE,SAAS;AAAA,EACzB,cAAc,EAAE,QAAQ,EAAE,SAAS;AAAA,EACnC,gBAAgB,EAAE,QAAQ,EAAE,SAAS;AAAA,EACrC,oBAAoB,EAAE,QAAQ,EAAE,SAAS;AAAA,EACzC,wBAAwB,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC7C,MAAM,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC3B,QAAQ,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,uBAAuB,CAAC,CAAC,EAAE,SAAS;AAAA,EAC9E,MAAM,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,qBAAqB,CAAC,CAAC,EAAE,SAAS;AAAA,EAC1E,UAAU,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,yBAAyB,CAAC,CAAC,EAAE,SAAS;AAAA,EAClF,WAAW,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,wBAAwB,CAAC,CAAC,EAAE,SAAS;AAAA,EAClF,QAAQ,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,qCAAqC,CAAC,CAAC,EAAE,SAAS;AAC9F,CAAC,EAAE,OAAO;AAEH,IAAM,kCAA+E,EAAE,OAAO;AAAA,EACnG,QAAQ,yBAAyB,SAAS;AAAA,EAC1C,SAAS,0BAA0B,SAAS;AAAA,EAC5C,OAAO,6BAA6B,SAAS;AAAA,EAC7C,SAAS,EAAE,MAAM,CAAE,2CAA2C,MAAM,GAAE,0CAA2C,CAAC,EAAE,SAAS;AAAA,EAC7H,QAAQ,mCAAmC,SAAS;AAAA,EACpD,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,EAC1B,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,EAC1B,UAAU,EAAE,MAAM,CAAE,mCAAkC,kCAAkC,MAAM,CAAE,CAAC,EAAE,SAAS;AAC9G,CAAC,EAAE,OAAO;AAEV,IAAO,0CAAQ","sourcesContent":["import { z } from 'zod';\nimport type { Prisma } from '@prisma/client';\nimport { PracticeExamIncludeSchema } from '../inputTypeSchemas/PracticeExamIncludeSchema'\nimport { PracticeExamWhereInputSchema } from '../inputTypeSchemas/PracticeExamWhereInputSchema'\nimport { PracticeExamOrderByWithRelationInputSchema } from '../inputTypeSchemas/PracticeExamOrderByWithRelationInputSchema'\nimport { PracticeExamWhereUniqueInputSchema } from '../inputTypeSchemas/PracticeExamWhereUniqueInputSchema'\nimport { PracticeExamScalarFieldEnumSchema } from '../inputTypeSchemas/PracticeExamScalarFieldEnumSchema'\nimport { TopicFindManyArgsSchema } from \"../outputTypeSchemas/TopicFindManyArgsSchema\"\nimport { TagFindManyArgsSchema } from \"../outputTypeSchemas/TagFindManyArgsSchema\"\nimport { SubjectFindManyArgsSchema } from \"../outputTypeSchemas/SubjectFindManyArgsSchema\"\nimport { QAPairFindManyArgsSchema } from \"../outputTypeSchemas/QAPairFindManyArgsSchema\"\nimport { PracticeExamCountOutputTypeArgsSchema } from \"../outputTypeSchemas/PracticeExamCountOutputTypeArgsSchema\"\n// Select schema needs to be in file to prevent circular imports\n//------------------------------------------------------\n\nexport const PracticeExamSelectSchema: z.ZodType<Prisma.PracticeExamSelect> = z.object({\n  id: z.boolean().optional(),\n  correctCount: z.boolean().optional(),\n  inCorrectCount: z.boolean().optional(),\n  timeLimitInSeconds: z.boolean().optional(),\n  timeCompletedInSeconds: z.boolean().optional(),\n  date: z.boolean().optional(),\n  topics: z.union([z.boolean(),z.lazy(() => TopicFindManyArgsSchema)]).optional(),\n  tags: z.union([z.boolean(),z.lazy(() => TagFindManyArgsSchema)]).optional(),\n  subjects: z.union([z.boolean(),z.lazy(() => SubjectFindManyArgsSchema)]).optional(),\n  questions: z.union([z.boolean(),z.lazy(() => QAPairFindManyArgsSchema)]).optional(),\n  _count: z.union([z.boolean(),z.lazy(() => PracticeExamCountOutputTypeArgsSchema)]).optional(),\n}).strict()\n\nexport const PracticeExamFindFirstArgsSchema: z.ZodType<Prisma.PracticeExamFindFirstArgs> = z.object({\n  select: PracticeExamSelectSchema.optional(),\n  include: PracticeExamIncludeSchema.optional(),\n  where: PracticeExamWhereInputSchema.optional(),\n  orderBy: z.union([ PracticeExamOrderByWithRelationInputSchema.array(),PracticeExamOrderByWithRelationInputSchema ]).optional(),\n  cursor: PracticeExamWhereUniqueInputSchema.optional(),\n  take: z.number().optional(),\n  skip: z.number().optional(),\n  distinct: z.union([ PracticeExamScalarFieldEnumSchema,PracticeExamScalarFieldEnumSchema.array() ]).optional(),\n}).strict() ;\n\nexport default PracticeExamFindFirstArgsSchema;\n"]}