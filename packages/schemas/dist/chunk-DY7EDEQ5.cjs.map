{"version":3,"sources":["../src/database/outputTypeSchemas/WaitlistRequestFindUniqueOrThrowArgsSchema.ts"],"names":[],"mappings":";;;;;AAAA,SAAS,SAAS;AAMX,IAAM,8BAAuE,EAAE,OAAO;AAAA,EAC3F,IAAI,EAAE,QAAQ,EAAE,SAAS;AAAA,EACzB,OAAO,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC5B,YAAY,EAAE,QAAQ,EAAE,SAAS;AAAA,EACjC,YAAY,EAAE,QAAQ,EAAE,SAAS;AACnC,CAAC,EAAE,OAAO;AAEH,IAAM,6CAAqG,EAAE,OAAO;AAAA,EACzH,QAAQ,4BAA4B,SAAS;AAAA,EAC7C,OAAO;AACT,CAAC,EAAE,OAAO;AAEV,IAAO,qDAAQ","sourcesContent":["import { z } from 'zod';\nimport type { Prisma } from '@prisma/client';\nimport { WaitlistRequestWhereUniqueInputSchema } from '../inputTypeSchemas/WaitlistRequestWhereUniqueInputSchema'\n// Select schema needs to be in file to prevent circular imports\n//------------------------------------------------------\n\nexport const WaitlistRequestSelectSchema: z.ZodType<Prisma.WaitlistRequestSelect> = z.object({\n  id: z.boolean().optional(),\n  email: z.boolean().optional(),\n  receivedOn: z.boolean().optional(),\n  emailsSent: z.boolean().optional(),\n}).strict()\n\nexport const WaitlistRequestFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.WaitlistRequestFindUniqueOrThrowArgs> = z.object({\n  select: WaitlistRequestSelectSchema.optional(),\n  where: WaitlistRequestWhereUniqueInputSchema,\n}).strict() ;\n\nexport default WaitlistRequestFindUniqueOrThrowArgsSchema;\n"]}