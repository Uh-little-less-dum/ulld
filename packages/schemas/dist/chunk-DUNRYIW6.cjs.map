{"version":3,"sources":["../src/database/outputTypeSchemas/RelatedValuesUpsertArgsSchema.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,SAAS;AAaX,IAAM,4BAAmE,EAAE,OAAO;AAAA,EACvF,IAAI,EAAE,QAAQ,EAAE,SAAS;AAAA,EACzB,OAAO,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC5B,QAAQ,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC7B,YAAY,EAAE,QAAQ,EAAE,SAAS;AAAA,EACjC,WAAW,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,0BAA0B,CAAC,CAAC,EAAE,SAAS;AAAA,EACpF,QAAQ,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,sCAAsC,CAAC,CAAC,EAAE,SAAS;AAC/F,CAAC,EAAE,OAAO;AAEH,IAAM,gCAA2E,EAAE,OAAO;AAAA,EAC/F,QAAQ,0BAA0B,SAAS;AAAA,EAC3C,SAAS,2BAA2B,SAAS;AAAA,EAC7C,OAAO;AAAA,EACP,QAAQ,EAAE,MAAM,CAAE,gCAA+B,uCAAwC,CAAC;AAAA,EAC1F,QAAQ,EAAE,MAAM,CAAE,gCAA+B,uCAAwC,CAAC;AAC5F,CAAC,EAAE,OAAO;AAEV,IAAO,wCAAQ","sourcesContent":["import { z } from 'zod';\nimport type { Prisma } from '@prisma/client';\nimport { RelatedValuesIncludeSchema } from '../inputTypeSchemas/RelatedValuesIncludeSchema'\nimport { RelatedValuesWhereUniqueInputSchema } from '../inputTypeSchemas/RelatedValuesWhereUniqueInputSchema'\nimport { RelatedValuesCreateInputSchema } from '../inputTypeSchemas/RelatedValuesCreateInputSchema'\nimport { RelatedValuesUncheckedCreateInputSchema } from '../inputTypeSchemas/RelatedValuesUncheckedCreateInputSchema'\nimport { RelatedValuesUpdateInputSchema } from '../inputTypeSchemas/RelatedValuesUpdateInputSchema'\nimport { RelatedValuesUncheckedUpdateInputSchema } from '../inputTypeSchemas/RelatedValuesUncheckedUpdateInputSchema'\nimport { EquationFindManyArgsSchema } from \"../outputTypeSchemas/EquationFindManyArgsSchema\"\nimport { RelatedValuesCountOutputTypeArgsSchema } from \"../outputTypeSchemas/RelatedValuesCountOutputTypeArgsSchema\"\n// Select schema needs to be in file to prevent circular imports\n//------------------------------------------------------\n\nexport const RelatedValuesSelectSchema: z.ZodType<Prisma.RelatedValuesSelect> = z.object({\n  id: z.boolean().optional(),\n  input: z.boolean().optional(),\n  output: z.boolean().optional(),\n  equationId: z.boolean().optional(),\n  equations: z.union([z.boolean(),z.lazy(() => EquationFindManyArgsSchema)]).optional(),\n  _count: z.union([z.boolean(),z.lazy(() => RelatedValuesCountOutputTypeArgsSchema)]).optional(),\n}).strict()\n\nexport const RelatedValuesUpsertArgsSchema: z.ZodType<Prisma.RelatedValuesUpsertArgs> = z.object({\n  select: RelatedValuesSelectSchema.optional(),\n  include: RelatedValuesIncludeSchema.optional(),\n  where: RelatedValuesWhereUniqueInputSchema,\n  create: z.union([ RelatedValuesCreateInputSchema,RelatedValuesUncheckedCreateInputSchema ]),\n  update: z.union([ RelatedValuesUpdateInputSchema,RelatedValuesUncheckedUpdateInputSchema ]),\n}).strict() ;\n\nexport default RelatedValuesUpsertArgsSchema;\n"]}