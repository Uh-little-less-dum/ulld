{"version":3,"sources":["../src/database/inputTypeSchemas/PracticeExamScalarWhereWithAggregatesInputSchema.ts"],"names":[],"mappings":";;;;;;;;AAEA,SAAS,SAAS;AAIX,IAAM,mDAAiH,EAAE,OAAO;AAAA,EACrI,KAAK,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,gDAAgD,GAAE,EAAE,KAAK,MAAM,gDAAgD,EAAE,MAAM,CAAE,CAAC,EAAE,SAAS;AAAA,EACjK,IAAI,EAAE,KAAK,MAAM,gDAAgD,EAAE,MAAM,EAAE,SAAS;AAAA,EACpF,KAAK,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,gDAAgD,GAAE,EAAE,KAAK,MAAM,gDAAgD,EAAE,MAAM,CAAE,CAAC,EAAE,SAAS;AAAA,EACjK,IAAI,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,6BAA6B,GAAE,EAAE,OAAO,CAAE,CAAC,EAAE,SAAS;AAAA,EACjF,cAAc,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,6BAA6B,GAAE,EAAE,OAAO,CAAE,CAAC,EAAE,SAAS;AAAA,EAC3F,gBAAgB,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,6BAA6B,GAAE,EAAE,OAAO,CAAE,CAAC,EAAE,SAAS;AAAA,EAC7F,oBAAoB,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,6BAA6B,GAAE,EAAE,OAAO,CAAE,CAAC,EAAE,SAAS;AAAA,EACjG,wBAAwB,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,6BAA6B,GAAE,EAAE,OAAO,CAAE,CAAC,EAAE,SAAS;AAAA,EACrG,MAAM,EAAE,MAAM,CAAE,EAAE,KAAK,MAAM,kCAAkC,GAAE,EAAE,OAAO,KAAK,CAAE,CAAC,EAAE,SAAS;AAC/F,CAAC,EAAE,OAAO;AAEV,IAAO,2DAAQ","sourcesContent":["import type { Prisma } from '@prisma/client';\n\nimport { z } from 'zod';\nimport { IntWithAggregatesFilterSchema } from './IntWithAggregatesFilterSchema';\nimport { DateTimeWithAggregatesFilterSchema } from './DateTimeWithAggregatesFilterSchema';\n\nexport const PracticeExamScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PracticeExamScalarWhereWithAggregatesInput> = z.object({\n  AND: z.union([ z.lazy(() => PracticeExamScalarWhereWithAggregatesInputSchema),z.lazy(() => PracticeExamScalarWhereWithAggregatesInputSchema).array() ]).optional(),\n  OR: z.lazy(() => PracticeExamScalarWhereWithAggregatesInputSchema).array().optional(),\n  NOT: z.union([ z.lazy(() => PracticeExamScalarWhereWithAggregatesInputSchema),z.lazy(() => PracticeExamScalarWhereWithAggregatesInputSchema).array() ]).optional(),\n  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),\n  correctCount: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),\n  inCorrectCount: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),\n  timeLimitInSeconds: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),\n  timeCompletedInSeconds: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),\n  date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),\n}).strict();\n\nexport default PracticeExamScalarWhereWithAggregatesInputSchema;\n"]}