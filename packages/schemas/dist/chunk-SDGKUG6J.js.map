{"version":3,"sources":["../src/database/outputTypeSchemas/DietCreateArgsSchema.ts"],"sourcesContent":["import { z } from 'zod';\nimport type { Prisma } from '@prisma/client';\nimport { DietIncludeSchema } from '../inputTypeSchemas/DietIncludeSchema'\nimport { DietCreateInputSchema } from '../inputTypeSchemas/DietCreateInputSchema'\nimport { DietUncheckedCreateInputSchema } from '../inputTypeSchemas/DietUncheckedCreateInputSchema'\nimport { DietaryItemFindManyArgsSchema } from \"../outputTypeSchemas/DietaryItemFindManyArgsSchema\"\nimport { TimePeriodFindManyArgsSchema } from \"../outputTypeSchemas/TimePeriodFindManyArgsSchema\"\nimport { HealthReportFindManyArgsSchema } from \"../outputTypeSchemas/HealthReportFindManyArgsSchema\"\nimport { DietCountOutputTypeArgsSchema } from \"../outputTypeSchemas/DietCountOutputTypeArgsSchema\"\n// Select schema needs to be in file to prevent circular imports\n//------------------------------------------------------\n\nexport const DietSelectSchema: z.ZodType<Prisma.DietSelect> = z.object({\n  name: z.boolean().optional(),\n  summary: z.boolean().optional(),\n  activelyFollowing: z.boolean().optional(),\n  gf: z.boolean().optional(),\n  vegan: z.boolean().optional(),\n  pescatarian: z.boolean().optional(),\n  vegetarian: z.boolean().optional(),\n  fasting: z.boolean().optional(),\n  cardioTraining: z.boolean().optional(),\n  weightTraining: z.boolean().optional(),\n  carb: z.boolean().optional(),\n  pro: z.boolean().optional(),\n  fat: z.boolean().optional(),\n  goals: z.boolean().optional(),\n  created: z.boolean().optional(),\n  lastUpdate: z.boolean().optional(),\n  items: z.union([z.boolean(),z.lazy(() => DietaryItemFindManyArgsSchema)]).optional(),\n  periodsFollowed: z.union([z.boolean(),z.lazy(() => TimePeriodFindManyArgsSchema)]).optional(),\n  HealthReport: z.union([z.boolean(),z.lazy(() => HealthReportFindManyArgsSchema)]).optional(),\n  _count: z.union([z.boolean(),z.lazy(() => DietCountOutputTypeArgsSchema)]).optional(),\n}).strict()\n\nexport const DietCreateArgsSchema: z.ZodType<Prisma.DietCreateArgs> = z.object({\n  select: DietSelectSchema.optional(),\n  include: DietIncludeSchema.optional(),\n  data: z.union([ DietCreateInputSchema,DietUncheckedCreateInputSchema ]),\n}).strict() ;\n\nexport default DietCreateArgsSchema;\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA,SAAS,SAAS;AAYX,IAAM,mBAAiD,EAAE,OAAO;AAAA,EACrE,MAAM,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC3B,SAAS,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC9B,mBAAmB,EAAE,QAAQ,EAAE,SAAS;AAAA,EACxC,IAAI,EAAE,QAAQ,EAAE,SAAS;AAAA,EACzB,OAAO,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC5B,aAAa,EAAE,QAAQ,EAAE,SAAS;AAAA,EAClC,YAAY,EAAE,QAAQ,EAAE,SAAS;AAAA,EACjC,SAAS,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC9B,gBAAgB,EAAE,QAAQ,EAAE,SAAS;AAAA,EACrC,gBAAgB,EAAE,QAAQ,EAAE,SAAS;AAAA,EACrC,MAAM,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC3B,KAAK,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC1B,KAAK,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC1B,OAAO,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC5B,SAAS,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC9B,YAAY,EAAE,QAAQ,EAAE,SAAS;AAAA,EACjC,OAAO,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,6BAA6B,CAAC,CAAC,EAAE,SAAS;AAAA,EACnF,iBAAiB,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,4BAA4B,CAAC,CAAC,EAAE,SAAS;AAAA,EAC5F,cAAc,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,8BAA8B,CAAC,CAAC,EAAE,SAAS;AAAA,EAC3F,QAAQ,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAE,EAAE,KAAK,MAAM,6BAA6B,CAAC,CAAC,EAAE,SAAS;AACtF,CAAC,EAAE,OAAO;AAEH,IAAM,uBAAyD,EAAE,OAAO;AAAA,EAC7E,QAAQ,iBAAiB,SAAS;AAAA,EAClC,SAAS,kBAAkB,SAAS;AAAA,EACpC,MAAM,EAAE,MAAM,CAAE,uBAAsB,8BAA+B,CAAC;AACxE,CAAC,EAAE,OAAO;AAEV,IAAO,+BAAQ;","names":[]}