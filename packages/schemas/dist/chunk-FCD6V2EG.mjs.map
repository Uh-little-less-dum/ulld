{"version":3,"sources":["../src/mdx/frontMatter/main.ts"],"sourcesContent":["import { z } from \"zod\";\nimport { zodOptNum, zodOptStr } from \"../../utilitySchemas/main.js\";\nimport { zodFrontMatterTableStylesObject } from \"./tableStyles.js\";\n\n\n// TODO: Move json specific stuff to schemas package.\nconst jsonSerializableQuantity = z.union([\n    z.boolean(),\n    z.string(),\n    z.number(),\n    z.null()\n])\n\nconst superJsonSerializableQuantity = jsonSerializableQuantity.or(z.union([\n    z.undefined(),\n    z.date(),\n    z.instanceof(RegExp),\n    z.instanceof(Error),\n    z.instanceof(URL),\n]))\n\n\nexport const jsonSerializableValue  = z.union([\n    jsonSerializableQuantity,\n    z.record(z.string(), jsonSerializableQuantity),\n    z.record(z.string(), z.record(z.string(), jsonSerializableQuantity)),\n    z.record(z.string(), jsonSerializableQuantity).array(),\n    jsonSerializableQuantity.array(),\n    jsonSerializableQuantity.array().array(),\n])\n\nexport const frontMatterSchema = z.object({\n    title: z.string().nullish(),\n    created: zodOptStr,\n    updated: zodOptStr,\n    summary: zodOptStr,\n    subjects: z\n        .union([z.string(), z.string().array()])\n        .transform((a) =>\n            Array.isArray(a) ? a.map((l) => String(l)) : [String(a)],\n        )\n        .default([]),\n    topics: z\n        .union([z.string(), z.string().array()])\n        .transform((a) =>\n            Array.isArray(a) ? a.map((l) => String(l)) : [String(a)],\n        )\n        .default([]),\n    tags: z\n        .union([z.string(), z.string().array()])\n        .transform((a) =>\n            Array.isArray(a) ? a.map((l) => String(l)) : [String(a)],\n        )\n        .default([]),\n    importantValues: z.number().array().default([]),\n    id: zodOptStr,\n    sequential: zodOptNum,\n    sequentialKey: zodOptStr,\n    tableStyles: zodFrontMatterTableStylesObject.optional(),\n});\n\n\nexport const extendedFrontMatterSchema = frontMatterSchema.and(z.record(z.string(), jsonSerializableValue))\n\n\nexport type ZodFrontMatterInput = z.input<typeof frontMatterSchema>;\nexport type ZodFrontMatterOutput = z.output<typeof frontMatterSchema>;\nexport type FrontMatterType<T extends object = object> = z.input<typeof frontMatterSchema> & T\n"],"mappings":";;;;;;;;;AAAA,SAAS,SAAS;AAMlB,IAAM,2BAA2B,EAAE,MAAM;AAAA,EACrC,EAAE,QAAQ;AAAA,EACV,EAAE,OAAO;AAAA,EACT,EAAE,OAAO;AAAA,EACT,EAAE,KAAK;AACX,CAAC;AAED,IAAM,gCAAgC,yBAAyB,GAAG,EAAE,MAAM;AAAA,EACtE,EAAE,UAAU;AAAA,EACZ,EAAE,KAAK;AAAA,EACP,EAAE,WAAW,MAAM;AAAA,EACnB,EAAE,WAAW,KAAK;AAAA,EAClB,EAAE,WAAW,GAAG;AACpB,CAAC,CAAC;AAGK,IAAM,wBAAyB,EAAE,MAAM;AAAA,EAC1C;AAAA,EACA,EAAE,OAAO,EAAE,OAAO,GAAG,wBAAwB;AAAA,EAC7C,EAAE,OAAO,EAAE,OAAO,GAAG,EAAE,OAAO,EAAE,OAAO,GAAG,wBAAwB,CAAC;AAAA,EACnE,EAAE,OAAO,EAAE,OAAO,GAAG,wBAAwB,EAAE,MAAM;AAAA,EACrD,yBAAyB,MAAM;AAAA,EAC/B,yBAAyB,MAAM,EAAE,MAAM;AAC3C,CAAC;AAEM,IAAM,oBAAoB,EAAE,OAAO;AAAA,EACtC,OAAO,EAAE,OAAO,EAAE,QAAQ;AAAA,EAC1B,SAAS;AAAA,EACT,SAAS;AAAA,EACT,SAAS;AAAA,EACT,UAAU,EACL,MAAM,CAAC,EAAE,OAAO,GAAG,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,EACtC;AAAA,IAAU,CAAC,MACR,MAAM,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAAA,EAC3D,EACC,QAAQ,CAAC,CAAC;AAAA,EACf,QAAQ,EACH,MAAM,CAAC,EAAE,OAAO,GAAG,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,EACtC;AAAA,IAAU,CAAC,MACR,MAAM,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAAA,EAC3D,EACC,QAAQ,CAAC,CAAC;AAAA,EACf,MAAM,EACD,MAAM,CAAC,EAAE,OAAO,GAAG,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,EACtC;AAAA,IAAU,CAAC,MACR,MAAM,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAAA,EAC3D,EACC,QAAQ,CAAC,CAAC;AAAA,EACf,iBAAiB,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;AAAA,EAC9C,IAAI;AAAA,EACJ,YAAY;AAAA,EACZ,eAAe;AAAA,EACf,aAAa,gCAAgC,SAAS;AAC1D,CAAC;AAGM,IAAM,4BAA4B,kBAAkB,IAAI,EAAE,OAAO,EAAE,OAAO,GAAG,qBAAqB,CAAC;","names":[]}