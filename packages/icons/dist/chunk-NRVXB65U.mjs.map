{"version":3,"sources":["../src/DynamicIcon.tsx"],"names":["dynamic","React","useEffect","useMemo","dynamicIconImports","logoIconNames","AllDynamicIconNames","iconNameMap","completeValidIconNameList","DynamicIcon","props","name","iconType","_name","Icon","globImport_logoIcons","LucideIcon"],"mappings":"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","sourcesContent":["\"use client\";\nimport dynamic, { DynamicOptions } from \"next/dynamic\";\nimport React, { useEffect, useMemo } from \"react\";\nimport type { LucideProps } from \"lucide-react\";\nimport dynamicIconImports from \"lucide-react/dynamicIconImports\";\nimport type { ValidIconNameDynamicallyGenerated } from \"@ulld/utilities/validIconNameList\";\n\nexport type IconNameList =\n    | \"bibliography\"\n    | \"bookmarks\"\n    | \"bug\"\n    | \"code\"\n    | \"data\"\n    | \"download\"\n    | \"fitness\"\n    | \"focus\"\n    | \"idea\"\n    | \"important\"\n    | \"journal\"\n    | \"latex\"\n    | \"math\"\n    | \"paperPdf\"\n    | \"physics\"\n    | \"physicsData\"\n    | \"quicknote\"\n    | \"readingList\"\n    | \"recipe\"\n    | \"researchPapers\"\n    | \"schedule\"\n    | \"settings\"\n    | \"shoppingList\"\n    | \"snippet\"\n    | \"tags\"\n    | \"tech\"\n    | \"todolist\"\n    | \"images\"\n    | \"avatar\"\n    | \"darktoggle\";\n\nconst logoIconNames = [\n    \"css\",\n    \"github\",\n    \"jupyter\",\n    \"kotlin\",\n    \"markdown\",\n    \"node\",\n    \"npm\",\n    \"python\",\n    \"react\",\n    \"swift\",\n    \"vercel\",\n    \"youtube\",\n    \"ulld\",\n] as const satisfies ValidIconNameDynamicallyGenerated[number][];\n\nexport type LogoIconNames = (typeof logoIconNames)[number];\n\n/// NOTE: AdmonitionType, LocoIconNames & IconNameList\nexport enum AllDynamicIconNames {\n    bibliography = \"bibliography\",\n    bookmarks = \"bookmarks\",\n    bug = \"bug\",\n    code = \"code\",\n    data = \"data\",\n    download = \"download\",\n    fitness = \"fitness\",\n    focus = \"focus\",\n    idea = \"idea\",\n    important = \"important\",\n    journal = \"journal\",\n    latex = \"latex\",\n    math = \"math\",\n    paperPdf = \"paperPdf\",\n    physics = \"physics\",\n    physicsData = \"physicsData\",\n    quicknote = \"quicknote\",\n    readingList = \"readingList\",\n    recipe = \"recipe\",\n    researchPapers = \"researchPapers\",\n    schedule = \"schedule\",\n    settings = \"settings\",\n    shoppingList = \"shoppingList\",\n    snippet = \"snippet\",\n    tags = \"tags\",\n    tech = \"tech\",\n    todolist = \"todolist\",\n    images = \"images\",\n    avatar = \"avatar\",\n    darktoggle = \"darktoggle\",\n    info = \"info\",\n    note = \"note\",\n    tip = \"tip\",\n    faq = \"faq\",\n    abstract = \"abstract\",\n    todo = \"todo\",\n    success = \"success\",\n    warn = \"warn\",\n    fail = \"fail\",\n    example = \"example\",\n    quote = \"quote\",\n    cite = \"cite\",\n    plain = \"plain\",\n    css = \"css\",\n    github = \"github\",\n    jupyter = \"jupyter\",\n    kotlin = \"kotlin\",\n    markdown = \"markdown\",\n    node = \"node\",\n    npm = \"npm\",\n    python = \"python\",\n    react = \"react\",\n    swift = \"swift\",\n    vercel = \"vercel\",\n    youtube = \"youtube\",\n    ulld = \"ulld\",\n}\n\nconst iconNameMap: {\n    [k in ValidIconNameDynamicallyGenerated]?:\n    | keyof typeof dynamicIconImports\n    | false;\n} = {\n    plain: false,\n    bibliography: \"library\",\n    bookmarks: \"bookmark\",\n    bug: \"bug\",\n    code: \"code\",\n    data: \"database\",\n    download: \"folder-down\",\n    fitness: \"dumbbell\",\n    focus: \"glasses\",\n    idea: \"lightbulb\",\n    important: \"circle-alert\",\n    journal: \"pencil-line\",\n    latex: \"square-function\",\n    math: \"sigma\",\n    paperPdf: \"file-text\",\n    physics: \"atom\",\n    physicsData: \"chart-bar-big\",\n    quicknote: \"sticky-note\",\n    readingList: \"book-open-check\",\n    recipe: \"utensils\",\n    researchPapers: \"microscope\",\n    schedule: \"calendar-check\",\n    settings: \"settings\",\n    shoppingList: \"shopping-basket\",\n    snippet: \"terminal\",\n    tags: \"hash\",\n    tech: \"cpu\",\n    todolist: \"list-todo\",\n    darktoggle: \"moon-star\",\n    images: \"image\",\n    avatar: \"circle-user-round\",\n    info: \"info\",\n    note: \"pen\",\n    tip: \"hand\",\n    faq: \"circle-help\",\n    abstract: \"scroll-text\",\n    todo: \"list-todo\",\n    success: \"thumbs-up\",\n    warn: \"triangle-alert\",\n    fail: \"thumbs-down\",\n    example: \"microscope\",\n    quote: \"quote\",\n    cite: \"book-marked\",\n    equation: \"variable\",\n    definition: \"book\",\n    practice: \"chart-line\",\n};\n\nexport type ValidIconName = ValidIconNameDynamicallyGenerated;\n\nexport const completeValidIconNameList = [\n    ...Object.keys(iconNameMap),\n    ...Object.keys(AllDynamicIconNames),\n    ...Object.keys(dynamicIconImports),\n] as const;\n\nexport interface IconProps extends LucideProps {\n    name: ValidIconName;\n    onLoad?: () => void;\n}\n\nexport const DynamicIcon = (props: IconProps) => {\n    const name = String(props.name);\n    let iconType: \"logo\" | \"lucide\" | null = null;\n    if (logoIconNames.includes(name as (typeof logoIconNames)[number])) {\n        iconType = \"logo\";\n    }\n    let _name =\n        name in iconNameMap ? iconNameMap[name as keyof typeof iconNameMap] : name;\n    if (!iconType && _name && Object.keys(dynamicIconImports).includes(_name)) {\n        iconType = \"lucide\";\n    }\n    useEffect(() => {\n        if (props.onLoad) {\n            props.onLoad();\n        }\n    }, []);\n    return useMemo(() => {\n        if (!iconType) return null;\n        if (iconType === \"logo\") {\n            // Have to use the file extension .tsx even after build, as those paths are generated as part of the dynamic import when the build is generated.\n            let _name = name.endsWith(\".tsx\") ? name : `${name}.tsx`;\n            let Icon = dynamic(() => import(`./logoIcons/${_name}`));\n            return <Icon {...props} />;\n        } else {\n            const LucideIcon = dynamic(\n                dynamicIconImports[_name as keyof typeof dynamicIconImports],\n            );\n            return <LucideIcon {...props} />;\n        }\n    }, [name]);\n};\n"]}