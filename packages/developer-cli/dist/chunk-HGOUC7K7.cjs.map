{"version":3,"sources":["../src/components/text/markdown.tsx"],"names":["React","fs","path","marked","chalk","markedTerminal","Box","Text","defaultTerminalMdOptions","ulldBlue","InkMarkdown","content","options","highlightOptions","parsedContent","getPath","filePath","Markdown","props","mdProps","markdown_default"],"mappings":"yCAAA,OAAOA,MAAW,QAElB,OAAOC,MAAQ,KACf,OAAOC,MAAU,OACjB,OAAS,UAAAC,MAAc,SACvB,OAAOC,MAAW,QAClB,OACI,kBAAAC,MAEG,kBAEP,OAAS,OAAAC,EAAK,QAAAC,MAAY,MAmB1B,IAAMC,EAAoD,CACtD,aAAcJ,EAAM,IAAIK,CAAQ,EAChC,MAAO,EACX,EAEMC,EAAc,CAAC,CACjB,QAAAC,EACA,QAAAC,EAAUJ,EACV,iBAAAK,EAAmB,CAEnB,CACJ,IAAwB,CAEpBV,EAAO,WAAW,CAId,IAAK,EACT,CAAC,EACDA,EAAO,IAAIE,EAAeO,EAASC,CAAgB,CAAC,EACpD,IAAMC,EAAgBX,EAAO,MAAMQ,CAAO,EAE1C,OACIX,EAAA,cAACM,EAAA,CAAI,SAAU,GACXN,EAAA,cAACO,EAAA,KAAMO,CAAc,CACzB,CAER,EAEMC,EAAWC,IACb,QAAQ,IAAI,YAAY,OAAO,EACxBd,EAAK,KACR,YAAY,QAAQ,SAAS,MAAM,EAC7BA,EAAK,KAAK,YAAY,QAAS,UAAU,EACzCA,EAAK,QAAQ,YAAY,QAAS,gBAAgB,EACxDc,CACJ,GAGEC,EAAYC,GAAyB,CACvC,QAAQ,IAAI,wBAAyB,YAAY,OAAO,EAMxD,IAAIC,EAA4B,CAC5B,QALA,YAAaD,EACPA,EAAM,QACNjB,EAAG,aAAac,EAAQG,EAAM,QAAQ,EAAG,CAAE,SAAU,OAAQ,CAAC,CAIxE,EACA,OAAOlB,EAAA,cAACU,EAAA,CAAa,GAAGS,EAAS,CACrC,EAEAF,EAAS,YAAc,WAEvB,IAAOG,EAAQH","sourcesContent":["import React from 'react';\nimport type { Props } from 'ink-markdown';\nimport fs from 'fs';\nimport path from 'path';\nimport { marked } from 'marked';\nimport chalk from 'chalk';\nimport TerminalRenderer, {\n    markedTerminal,\n    TerminalRendererOptions,\n} from 'marked-terminal';\nimport { ulldBlue } from '../../staticData/main.js';\nimport { Box, Text } from 'ink';\n\ntype MarkdownProps = Omit<Props, 'children'> &\n    (\n        | {\n            /** filePath relative to the developer-cli package root directory. */\n            filePath: string;\n        }\n        | {\n            content: string;\n        }\n    );\n\ninterface InkMarkdownProps {\n    content: string;\n    options?: TerminalRendererOptions;\n    highlightOptions?: any;\n}\n\nconst defaultTerminalMdOptions: TerminalRendererOptions = {\n    firstHeading: chalk.hex(ulldBlue),\n    emoji: true,\n};\n\nconst InkMarkdown = ({\n    content,\n    options = defaultTerminalMdOptions,\n    highlightOptions = {\n        /* theme: \"tomorrow-night\" */\n    },\n}: InkMarkdownProps) => {\n    /* TODO: This works well for now, but look into using glow or another cli markdown renderer that supports themeing, as the theming in marked-terminal isn't functioning properly. */\n    marked.setOptions({\n        /* renderer: new TerminalRenderer({ */\n        /*     blockquote: chalk.hex(ulldBlue) */\n        /* }), */\n        gfm: true,\n    });\n    marked.use(markedTerminal(options, highlightOptions));\n    const parsedContent = marked.parse(content);\n\n    return (\n        <Box paddingX={4}>\n            <Text>{parsedContent}</Text>\n        </Box>\n    );\n};\n\nconst getPath = (filePath: string): string => {\n    console.log(import.meta.dirname);\n    return path.join(\n        import.meta.dirname.endsWith('dist')\n            ? path.join(import.meta.dirname, 'markdown')\n            : path.resolve(import.meta.dirname, '../../markdown'),\n        filePath,\n    );\n};\n\nconst Markdown = (props: MarkdownProps) => {\n    console.log('import.meta.dirname: ', import.meta.dirname);\n    let content =\n        'content' in props\n            ? props.content\n            : fs.readFileSync(getPath(props.filePath), { encoding: 'utf-8' });\n\n    let mdProps: InkMarkdownProps = {\n        content,\n    };\n    return <InkMarkdown {...mdProps} />;\n};\n\nMarkdown.displayName = 'Markdown';\n\nexport default Markdown;\n"]}