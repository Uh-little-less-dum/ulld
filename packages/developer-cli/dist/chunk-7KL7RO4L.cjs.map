{"version":3,"sources":["../src/components/select/internalPackageSelect.tsx"],"names":["React","useMemo","useState","MultiSelect","getInternalAppNames","getInternalPackageNames","getAllInternalNames","internalNameMap","InternalPackageSelect","type","selectedItems","setSelectedItems","props","_listedItems","_selectedItems","_items","item","_props","data","items","internalPackageSelect_default"],"mappings":"AAAA,OAAOA,GAAS,WAAAC,EAAS,YAAAC,MAAgC,QACzD,OAAOC,MAMA,mBAGP,OACI,uBAAAC,EACA,2BAAAC,EACA,uBAAAC,MACG,sCAOP,IAAMC,EAIF,CACA,QAASF,EACT,IAAKD,EACL,KAAME,CACV,EAEME,EAAwB,CAAC,CAC3B,KAAAC,EAAO,MACX,IAA6C,CACzC,GAAM,CAACC,EAAeC,CAAgB,EAAIT,EACtC,IAAI,IAAI,CAAC,CAAC,CACd,EACMU,EAAQX,EAAQ,IAGjB,CACD,IAAMY,EAA6B,CAAC,EAC9BC,EAAiC,CAAC,EACpCC,EAASR,EAAgBE,CAAI,EAAE,EACnC,QAAWO,KAAQD,EACXL,EAAc,IAAIM,CAAI,EACtBF,EAAe,KAAK,CAChB,MAAOE,EACP,MAAOA,CAEX,CAAC,EAEDH,EAAa,KAAK,CACd,MAAOG,EACP,MAAOA,CACX,CAAC,EAGT,MAAO,CACH,YAAaH,EACb,cAAeC,CACnB,CACJ,EAAG,CAACL,CAAI,CAAC,EAEHQ,EAA2B,CAC7B,SAAUL,EAAM,cAChB,MAAOA,EAAM,WACjB,EAEA,OACIZ,EAAA,cAACG,EAAA,CAQG,SAAUS,EAAM,cAChB,MAAOA,EAAM,YACb,SAAUM,GAAQ,QAAQ,IAAIA,CAAI,EAClC,SAAUC,GAAS,QAAQ,IAAIA,CAAK,EACxC,CAER,EAEAX,EAAsB,YAAc,wBAEpC,IAAOY,EAAQZ","sourcesContent":["import React, { useMemo, useState, type ReactNode } from 'react';\nimport MultiSelect, {\n    MultiSelectProps,\n    Item,\n    ItemProps,\n    ListedItem,\n    SelectedItem,\n} from 'ink-multi-select';\nimport { ResponsiveSelect, ResponsiveSelectProps } from 'ink-responsive-select';\nimport { InternalAppName } from '@ulld/types';\nimport {\n    getInternalAppNames,\n    getInternalPackageNames,\n    getAllInternalNames,\n} from '@ulld/utilities/internalDataHelpers';\nimport { X509Certificate } from 'crypto';\n\ninterface InternalPackageSelectProps {\n    type?: 'package' | 'app' | 'both';\n}\n\nconst internalNameMap: {\n    [K in NonNullable<\n        InternalPackageSelectProps['type']\n    >]: () => InternalAppName[];\n} = {\n    package: getInternalPackageNames,\n    app: getInternalAppNames,\n    both: getAllInternalNames,\n};\n\nconst InternalPackageSelect = ({\n    type = 'both',\n}: InternalPackageSelectProps): ReactNode => {\n    const [selectedItems, setSelectedItems] = useState<Set<InternalAppName>>(\n        new Set([]),\n    );\n    const props = useMemo((): {\n        listedItems: ListedItem[];\n        selectedItems: SelectedItem[];\n    } => {\n        const _listedItems: ListedItem[] = [];\n        const _selectedItems: SelectedItem[] = [];\n        let _items = internalNameMap[type]();\n        for (const item of _items) {\n            if (selectedItems.has(item)) {\n                _selectedItems.push({\n                    label: item,\n                    value: item,\n                    /* isHighlighted: true */\n                });\n            } else {\n                _listedItems.push({\n                    label: item,\n                    value: item,\n                });\n            }\n        }\n        return {\n            listedItems: _listedItems,\n            selectedItems: _selectedItems,\n        };\n    }, [type]);\n\n    const _props: MultiSelectProps = {\n        selected: props.selectedItems,\n        items: props.listedItems,\n    };\n\n    return (\n        <MultiSelect\n            /* options={getAllInternalNames().map(x => { */\n            /*     return { */\n            /*         label: x, */\n            /*         value: x, */\n            /*         checked: false, */\n            /*     }; */\n            /* })} */\n            selected={props.selectedItems}\n            items={props.listedItems}\n            onSelect={data => console.log(data)}\n            onSubmit={items => console.log(items)}\n        />\n    );\n};\n\nInternalPackageSelect.displayName = 'InternalPackageSelect';\n\nexport default InternalPackageSelect;\n"]}