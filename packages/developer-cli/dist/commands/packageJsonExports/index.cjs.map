{"version":3,"sources":["../../../src/commands/packageJsonExports/index.tsx"],"names":["argument","React","z","path","fs","Box","Text","Alert","logSymbols","args","PackageJsonExportsCommand","_path","getPathFromArgument","packageJsonPath","fileContent","isModified","x","val","exportItem","convertExportItem","packageJsonExports_default"],"mappings":"0FAAA,OAAS,YAAAA,MAAwB,SACjC,OAAOC,MAAW,QAClB,OAAS,KAAAC,MAAS,MAGlB,OAAOC,MAAU,OACjB,OAAOC,MAAQ,KACf,OAAS,OAAAC,EAAK,QAAAC,MAAY,MAC1B,OAAS,SAAAC,MAAoB,YAC7B,OAAOC,MAAgB,cAEhB,IAAMC,EAAOP,EAAE,MAAM,CACxBA,EACK,OAAO,EACP,QAAQ,GAAG,EACX,SACGF,EAAS,CACL,KAAM,OACN,YAAa,mDACb,wBAAyB,KAC7B,CAAC,CACL,CACR,CAAC,EAiBKU,EAA4B,CAAC,CAAE,KAAAD,CAAK,IAAsC,CAC5E,IAAME,EAAQC,EAAoBH,EAAK,CAAC,CAAC,EACnCI,EAAkBF,EAAM,SAAS,cAAc,EAC/CA,EACAR,EAAK,KAAKQ,EAAO,cAAc,EACrC,GAAI,CAACP,EAAG,WAAWS,CAAe,EAC9B,OAAOZ,EAAA,cAACM,EAAA,CAAM,QAAQ,SAAQ,6BAA2B,EAG7D,IAAIO,EAAc,KAAK,MACnBV,EAAG,aAAaS,EAAiB,CAAE,SAAU,OAAQ,CAAC,CAC1D,EAEIE,EAAa,GAEjB,GAAID,EAAY,QACZ,QAAWE,KAAKF,EAAY,QAAS,CACjC,IAAIG,EAAMH,EAAY,QAAQE,CAAC,EAC/B,GAAI,OAAOC,GAAQ,SAAU,CACzB,IAAIC,EAAaC,EACb,CACI,IAAKH,EACL,MAAOC,EACP,KACI,OAAOA,GAAQ,SAAW,iBAAmB,iBACrD,EACA,kBACA,CACI,QAASd,EAAK,QAAQU,CAAe,EACrC,GAAI,iBACR,CACJ,EACIK,EAAW,QACXJ,EAAY,QAAQE,CAAC,EAAIE,EAAW,MACpCH,EAAa,GAErB,CACJ,CAGJ,OAAIA,GACAX,EAAG,cAAcS,EAAiB,KAAK,UAAUC,EAAa,KAAM,CAAC,EAAG,CACpE,SAAU,OACd,CAAC,EAIDb,EAAA,cAACI,EAAA,CACG,cAAc,MACd,eAAe,aACf,WAAW,SACX,IAAK,GAELJ,EAAA,cAACK,EAAA,KAAME,EAAW,OAAQ,EAC1BP,EAAA,cAACK,EAAA,KAAM,sDAAsDO,CAAe,EAAG,CACnF,CAER,EAEAH,EAA0B,YAAc,4BAExC,IAAOU,EAAQV","sourcesContent":["import { argument, option } from 'pastel';\nimport React from 'react';\nimport { z } from 'zod';\nimport { getPathFromArgument } from '../../utils/getPathFromArgument.js';\nimport { convertExportItem } from '../../utils/convertPackageJsonExports.js';\nimport path from 'path';\nimport fs from 'fs';\nimport { Box, Text } from 'ink';\nimport { Alert, Badge } from '@inkjs/ui';\nimport logSymbols from 'log-symbols';\n\nexport const args = z.tuple([\n    z\n        .string()\n        .default('.')\n        .describe(\n            argument({\n                name: 'path',\n                description: 'Directory at which tunnel file should be created',\n                defaultValueDescription: 'cwd',\n            }),\n        ),\n]);\n\ninterface PackageJsonExportsCommandProps {\n    /* options: z.infer<typeof options> */\n    args: z.infer<typeof args>;\n}\n\ninterface ExportObject {\n    types?: string;\n    import: string;\n    require: string;\n}\n\ntype PackageJsonObject = {\n    exports?: Record<string, string | ExportObject>;\n};\n\nconst PackageJsonExportsCommand = ({ args }: PackageJsonExportsCommandProps) => {\n    const _path = getPathFromArgument(args[0]);\n    const packageJsonPath = _path.endsWith('package.json')\n        ? _path\n        : path.join(_path, 'package.json');\n    if (!fs.existsSync(packageJsonPath)) {\n        return <Alert variant=\"error\">No package.json path found.</Alert>;\n    }\n\n    let fileContent = JSON.parse(\n        fs.readFileSync(packageJsonPath, { encoding: 'utf-8' }),\n    ) as PackageJsonObject;\n\n    let isModified = false;\n\n    if (fileContent.exports) {\n        for (const x in fileContent.exports) {\n            let val = fileContent.exports[x]!;\n            if (typeof val === 'string') {\n                let exportItem = convertExportItem(\n                    {\n                        key: x,\n                        value: val,\n                        type:\n                            typeof val === 'string' ? 'src dir string' : 'dist dir object',\n                    },\n                    'dist dir object',\n                    {\n                        dirname: path.dirname(packageJsonPath),\n                        to: 'dist dir object',\n                    },\n                );\n                if (exportItem.value) {\n                    fileContent.exports[x] = exportItem.value;\n                    isModified = true;\n                }\n            }\n        }\n    }\n\n    if (isModified) {\n        fs.writeFileSync(packageJsonPath, JSON.stringify(fileContent, null, 2), {\n            encoding: 'utf-8',\n        });\n    }\n\n    return (\n        <Box\n            flexDirection=\"row\"\n            justifyContent=\"flex-start\"\n            alignItems=\"center\"\n            gap={2}\n        >\n            <Text>{logSymbols.success}</Text>\n            <Text>{`Successfully set export fields for package.json at ${packageJsonPath}`}</Text>\n        </Box>\n    );\n};\n\nPackageJsonExportsCommand.displayName = 'PackageJsonExportsCommand';\n\nexport default PackageJsonExportsCommand;\n"]}