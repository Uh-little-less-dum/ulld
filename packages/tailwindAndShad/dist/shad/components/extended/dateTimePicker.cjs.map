{"version":3,"sources":["../../../../src/shad/components/extended/dateTimePicker.tsx"],"names":["cn","add","format","enUS","CalendarIcon","ChevronLeft","ChevronRight","Clock","React","useImperativeHandle","useRef","DayPicker","isValidHour","value","isValid12Hour","isValidMinuteOrSecond","getValidNumber","max","min","loop","numericValue","getValidHour","getValid12Hour","getValidMinuteOrSecond","getValidArrowNumber","step","getValidArrowHour","getValidArrow12Hour","getValidArrowMinuteOrSecond","setMinutes","date","minutes","setSeconds","seconds","setHours","hours","set12Hours","period","convertedHours","convert12HourTo24Hour","setDateByType","type","getDateByType","display12HourValue","getArrowByType","hour","genMonths","locale","_","i","genYears","yearRange","today","Calendar","className","classNames","showOutsideDays","props","MONTHS","options","localize","formatLong","YEARS","buttonVariants","calendarMonth","Select","newDate","SelectTrigger","SelectValue","SelectContent","month","SelectItem","year","TimePeriodSelect","setPeriod","onDateChange","onLeftFocus","onRightFocus","ref","handleKeyDown","e","handleValueChange","tempDate","TimePickerInput","id","name","onChange","onKeyDown","picker","flag","setFlag","prevIntKey","setPrevIntKey","timer","calculatedValue","calculateNewValue","key","newValue","prev","Input","TimePicker","hourCycle","granularity","minuteRef","hourRef","secondRef","periodRef","DateTimePicker","disabled","displayFormat","placeholder","setMonth","buttonRef","handleSelect","newDay","diffInDays","newDateFull","initHourFormat","loc","Popover","PopoverTrigger","Button","PopoverContent","d"],"mappings":"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","sourcesContent":["import { Button, buttonVariants } from '../ui/button';\nimport type { CalendarProps } from '../ui/calendar';\nimport { Input } from '../ui/input';\nimport { Popover, PopoverContent, PopoverTrigger } from '../ui/popover';\nimport { cn } from '@ulld/utilities/cn';\nimport { add, format } from 'date-fns';\nimport { type Locale, enUS } from 'date-fns/locale';\nimport { Calendar as CalendarIcon, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Clock } from 'lucide-react';\nimport * as React from 'react';\nimport { useImperativeHandle, useRef } from 'react';\n\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '../ui/select';\nimport { DayPicker } from 'react-day-picker';\n\n// ---------- utils start ----------\n/**\n * regular expression to check for valid hour format (01-23)\n */\nfunction isValidHour(value: string) {\n  return /^(0[0-9]|1[0-9]|2[0-3])$/.test(value);\n}\n\n/**\n * regular expression to check for valid 12 hour format (01-12)\n */\nfunction isValid12Hour(value: string) {\n  return /^(0[1-9]|1[0-2])$/.test(value);\n}\n\n/**\n * regular expression to check for valid minute format (00-59)\n */\nfunction isValidMinuteOrSecond(value: string) {\n  return /^[0-5][0-9]$/.test(value);\n}\n\ntype GetValidNumberConfig = { max: number; min?: number; loop?: boolean };\n\nfunction getValidNumber(value: string, { max, min = 0, loop = false }: GetValidNumberConfig) {\n  let numericValue = parseInt(value, 10);\n\n  if (!Number.isNaN(numericValue)) {\n    if (!loop) {\n      if (numericValue > max) numericValue = max;\n      if (numericValue < min) numericValue = min;\n    } else {\n      if (numericValue > max) numericValue = min;\n      if (numericValue < min) numericValue = max;\n    }\n    return numericValue.toString().padStart(2, '0');\n  }\n\n  return '00';\n}\n\nfunction getValidHour(value: string) {\n  if (isValidHour(value)) return value;\n  return getValidNumber(value, { max: 23 });\n}\n\nfunction getValid12Hour(value: string) {\n  if (isValid12Hour(value)) return value;\n  return getValidNumber(value, { min: 1, max: 12 });\n}\n\nfunction getValidMinuteOrSecond(value: string) {\n  if (isValidMinuteOrSecond(value)) return value;\n  return getValidNumber(value, { max: 59 });\n}\n\ntype GetValidArrowNumberConfig = {\n  min: number;\n  max: number;\n  step: number;\n};\n\nfunction getValidArrowNumber(value: string, { min, max, step }: GetValidArrowNumberConfig) {\n  let numericValue = parseInt(value, 10);\n  if (!Number.isNaN(numericValue)) {\n    numericValue += step;\n    return getValidNumber(String(numericValue), { min, max, loop: true });\n  }\n  return '00';\n}\n\nfunction getValidArrowHour(value: string, step: number) {\n  return getValidArrowNumber(value, { min: 0, max: 23, step });\n}\n\nfunction getValidArrow12Hour(value: string, step: number) {\n  return getValidArrowNumber(value, { min: 1, max: 12, step });\n}\n\nfunction getValidArrowMinuteOrSecond(value: string, step: number) {\n  return getValidArrowNumber(value, { min: 0, max: 59, step });\n}\n\nfunction setMinutes(date: Date, value: string) {\n  const minutes = getValidMinuteOrSecond(value);\n  date.setMinutes(parseInt(minutes, 10));\n  return date;\n}\n\nfunction setSeconds(date: Date, value: string) {\n  const seconds = getValidMinuteOrSecond(value);\n  date.setSeconds(parseInt(seconds, 10));\n  return date;\n}\n\nfunction setHours(date: Date, value: string) {\n  const hours = getValidHour(value);\n  date.setHours(parseInt(hours, 10));\n  return date;\n}\n\nfunction set12Hours(date: Date, value: string, period: Period) {\n  const hours = parseInt(getValid12Hour(value), 10);\n  const convertedHours = convert12HourTo24Hour(hours, period);\n  date.setHours(convertedHours);\n  return date;\n}\n\ntype TimePickerType = 'minutes' | 'seconds' | 'hours' | '12hours';\ntype Period = 'AM' | 'PM';\n\nfunction setDateByType(date: Date, value: string, type: TimePickerType, period?: Period) {\n  switch (type) {\n    case 'minutes':\n      return setMinutes(date, value);\n    case 'seconds':\n      return setSeconds(date, value);\n    case 'hours':\n      return setHours(date, value);\n    case '12hours': {\n      if (!period) return date;\n      return set12Hours(date, value, period);\n    }\n    default:\n      return date;\n  }\n}\n\nfunction getDateByType(date: Date | null, type: TimePickerType) {\n  if (!date) return '00';\n  switch (type) {\n    case 'minutes':\n      return getValidMinuteOrSecond(String(date.getMinutes()));\n    case 'seconds':\n      return getValidMinuteOrSecond(String(date.getSeconds()));\n    case 'hours':\n      return getValidHour(String(date.getHours()));\n    case '12hours':\n      return getValid12Hour(String(display12HourValue(date.getHours())));\n    default:\n      return '00';\n  }\n}\n\nfunction getArrowByType(value: string, step: number, type: TimePickerType) {\n  switch (type) {\n    case 'minutes':\n      return getValidArrowMinuteOrSecond(value, step);\n    case 'seconds':\n      return getValidArrowMinuteOrSecond(value, step);\n    case 'hours':\n      return getValidArrowHour(value, step);\n    case '12hours':\n      return getValidArrow12Hour(value, step);\n    default:\n      return '00';\n  }\n}\n\n/**\n * handles value change of 12-hour input\n * 12:00 PM is 12:00\n * 12:00 AM is 00:00\n */\nfunction convert12HourTo24Hour(hour: number, period: Period) {\n  if (period === 'PM') {\n    if (hour <= 11) {\n      return hour + 12;\n    } \n    return hour;\n  } \n  \n  if (period === 'AM') {\n    if (hour === 12) return 0;\n    return hour;\n  }\n  return hour;\n}\n\n/**\n * time is stored in the 24-hour form,\n * but needs to be displayed to the user\n * in its 12-hour representation\n */\nfunction display12HourValue(hours: number) {\n  if (hours === 0 || hours === 12) return '12';\n  if (hours >= 22) return `${hours - 12}`;\n  if (hours % 12 > 9) return `${hours}`;\n  return `0${hours % 12}`;\n}\n\nfunction genMonths(locale: Pick<Locale, 'options' | 'localize' | 'formatLong'>) {\n  return Array.from({ length: 12 }, (_, i) => ({\n    value: i,\n    label: format(new Date(2021, i), 'MMMM', { locale }),\n  }));\n}\n\nfunction genYears(yearRange = 50) {\n  const today = new Date();\n  return Array.from({ length: yearRange * 2 + 1 }, (_, i) => ({\n    value: today.getFullYear() - yearRange + i,\n    label: (today.getFullYear() - yearRange + i).toString(),\n  }));\n}\n\n// ---------- utils end ----------\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  yearRange = 50,\n  ...props\n}: CalendarProps & { yearRange?: number }) {\n  const MONTHS = React.useMemo(() => {\n    let locale: Pick<Locale, 'options' | 'localize' | 'formatLong'> = enUS;\n    const { options, localize, formatLong } = props.locale || {};\n    if (options && localize && formatLong) {\n      locale = {\n        options,\n        localize,\n        formatLong,\n      };\n    }\n    return genMonths(locale);\n  }, []);\n\n  const YEARS = React.useMemo(() => genYears(yearRange), []);\n\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn('p-3', className)}\n      classNames={{\n        months: 'flex flex-col sm:flex-row space-y-4  sm:space-y-0 justify-center',\n        month: 'flex flex-col items-center space-y-4',\n        month_caption: 'flex justify-center pt-1 relative items-center',\n        caption_label: 'text-sm font-medium',\n        nav: 'space-x-1 flex items-center ',\n        button_previous: cn(\n          buttonVariants({ variant: 'outline' }),\n          'h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100 absolute left-5 top-5',\n        ),\n        button_next: cn(\n          buttonVariants({ variant: 'outline' }),\n          'h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100 absolute right-5 top-5',\n        ),\n        month_grid: 'w-full border-collapse space-y-1',\n        weekdays: cn('flex', props.showWeekNumber && 'justify-end'),\n        weekday: 'text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]',\n        week: 'flex w-full mt-2',\n        day: 'h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20 rounded-1',\n        day_button: cn(\n          buttonVariants({ variant: 'ghost' }),\n          'h-9 w-9 p-0 font-normal aria-selected:opacity-100 rounded-l-md rounded-r-md',\n        ),\n        range_end: 'day-range-end',\n        selected:\n          'bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground rounded-l-md rounded-r-md',\n        today: 'bg-accent text-accent-foreground',\n        outside:\n          'day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30',\n        disabled: 'text-muted-foreground opacity-50',\n        range_middle: 'aria-selected:bg-accent aria-selected:text-accent-foreground',\n        hidden: 'invisible',\n        ...classNames,\n      }}\n      components={{\n        Chevron: ({ ...props }) =>\n          props.orientation === 'left' ? (\n            <ChevronLeft className=\"h-4 w-4\" />\n          ) : (\n            <ChevronRight className=\"h-4 w-4\" />\n          ),\n        MonthCaption: ({ calendarMonth }) => {\n          return (\n            <div className=\"inline-flex gap-2\">\n              <Select\n                defaultValue={calendarMonth.date.getMonth().toString()}\n                onValueChange={(value) => {\n                  const newDate = new Date(calendarMonth.date);\n                  newDate.setMonth(Number.parseInt(value, 10));\n                  props.onMonthChange?.(newDate);\n                }}\n              >\n                <SelectTrigger className=\"w-fit gap-1 border-none p-0 focus:bg-accent focus:text-accent-foreground\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {MONTHS.map((month) => (\n                    <SelectItem key={month.value} value={month.value.toString()}>\n                      {month.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <Select\n                defaultValue={calendarMonth.date.getFullYear().toString()}\n                onValueChange={(value) => {\n                  const newDate = new Date(calendarMonth.date);\n                  newDate.setFullYear(Number.parseInt(value, 10));\n                  props.onMonthChange?.(newDate);\n                }}\n              >\n                <SelectTrigger className=\"w-fit gap-1 border-none p-0 focus:bg-accent focus:text-accent-foreground\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {YEARS.map((year) => (\n                    <SelectItem key={year.value} value={year.value.toString()}>\n                      {year.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          );\n        },\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = 'Calendar';\n\ninterface PeriodSelectorProps {\n  period: Period;\n  setPeriod?: (m: Period) => void;\n  date?: Date | null;\n  onDateChange?: (date: Date | undefined) => void;\n  onRightFocus?: () => void;\n  onLeftFocus?: () => void;\n}\n\nconst TimePeriodSelect = React.forwardRef<HTMLButtonElement, PeriodSelectorProps>(\n  ({ period, setPeriod, date, onDateChange, onLeftFocus, onRightFocus }, ref) => {\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLButtonElement>) => {\n      if (e.key === 'ArrowRight') onRightFocus?.();\n      if (e.key === 'ArrowLeft') onLeftFocus?.();\n    };\n\n    const handleValueChange = (value: Period) => {\n      setPeriod?.(value);\n\n      /**\n       * trigger an update whenever the user switches between AM and PM;\n       * otherwise user must manually change the hour each time\n       */\n      if (date) {\n        const tempDate = new Date(date);\n        const hours = display12HourValue(date.getHours());\n        onDateChange?.(\n          setDateByType(tempDate, hours.toString(), '12hours', period === 'AM' ? 'PM' : 'AM'),\n        );\n      }\n    };\n\n    return (\n      <div className=\"flex h-10 items-center\">\n        <Select defaultValue={period} onValueChange={(value: Period) => handleValueChange(value)}>\n          <SelectTrigger\n            ref={ref}\n            className=\"w-[65px] focus:bg-accent focus:text-accent-foreground\"\n            onKeyDown={handleKeyDown}\n          >\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"AM\">AM</SelectItem>\n            <SelectItem value=\"PM\">PM</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n    );\n  },\n);\n\nTimePeriodSelect.displayName = 'TimePeriodSelect';\n\ninterface TimePickerInputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  picker: TimePickerType;\n  date?: Date | null;\n  onDateChange?: (date: Date | undefined) => void;\n  period?: Period;\n  onRightFocus?: () => void;\n  onLeftFocus?: () => void;\n}\n\nconst TimePickerInput = React.forwardRef<HTMLInputElement, TimePickerInputProps>(\n  (\n    {\n      className,\n      type = 'tel',\n      value,\n      id,\n      name,\n      date = new Date(new Date().setHours(0, 0, 0, 0)),\n      onDateChange,\n      onChange,\n      onKeyDown,\n      picker,\n      period,\n      onLeftFocus,\n      onRightFocus,\n      ...props\n    },\n    ref,\n  ) => {\n    const [flag, setFlag] = React.useState<boolean>(false);\n    const [prevIntKey, setPrevIntKey] = React.useState<string>('0');\n\n    /**\n     * allow the user to enter the second digit within 2 seconds\n     * otherwise start again with entering first digit\n     */\n    React.useEffect(() => {\n      if (flag) {\n        const timer = setTimeout(() => {\n          setFlag(false);\n        }, 2000);\n\n        return () => clearTimeout(timer);\n      }\n    }, [flag]);\n\n    const calculatedValue = React.useMemo(() => {\n      return getDateByType(date, picker);\n    }, [date, picker]);\n\n    const calculateNewValue = (key: string) => {\n      /*\n       * If picker is '12hours' and the first digit is 0, then the second digit is automatically set to 1.\n       * The second entered digit will break the condition and the value will be set to 10-12.\n       */\n      if (picker === '12hours') {\n        if (flag && calculatedValue.slice(1, 2) === '1' && prevIntKey === '0') return `0${key}`;\n      }\n\n      return !flag ? `0${key}` : calculatedValue.slice(1, 2) + key;\n    };\n\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n      if (e.key === 'Tab') return;\n      e.preventDefault();\n      if (e.key === 'ArrowRight') onRightFocus?.();\n      if (e.key === 'ArrowLeft') onLeftFocus?.();\n      if (['ArrowUp', 'ArrowDown'].includes(e.key)) {\n        const step = e.key === 'ArrowUp' ? 1 : -1;\n        const newValue = getArrowByType(calculatedValue, step, picker);\n        if (flag) setFlag(false);\n        const tempDate = date ? new Date(date) : new Date();\n        onDateChange?.(setDateByType(tempDate, newValue, picker, period));\n      }\n      if (e.key >= '0' && e.key <= '9') {\n        if (picker === '12hours') setPrevIntKey(e.key);\n\n        const newValue = calculateNewValue(e.key);\n        if (flag) onRightFocus?.();\n        setFlag((prev) => !prev);\n        const tempDate = date ? new Date(date) : new Date();\n        onDateChange?.(setDateByType(tempDate, newValue, picker, period));\n      }\n    };\n\n    return (\n      <Input\n        ref={ref}\n        id={id || picker}\n        name={name || picker}\n        className={cn(\n          'w-[48px] text-center font-mono text-base tabular-nums caret-transparent focus:bg-accent focus:text-accent-foreground [&::-webkit-inner-spin-button]:appearance-none',\n          className,\n        )}\n        value={value || calculatedValue}\n        onChange={(e) => {\n          e.preventDefault();\n          onChange?.(e);\n        }}\n        type={type}\n        inputMode=\"decimal\"\n        onKeyDown={(e) => {\n          onKeyDown?.(e);\n          handleKeyDown(e);\n        }}\n        {...props}\n      />\n    );\n  },\n);\n\nTimePickerInput.displayName = 'TimePickerInput';\n\ninterface TimePickerProps {\n  date?: Date | null;\n  onChange?: (date: Date | undefined) => void;\n  hourCycle?: 12 | 24;\n  /**\n   * Determines the smallest unit that is displayed in the datetime picker.\n   * Default is 'second'.\n   * */\n  granularity?: Granularity;\n}\n\ninterface TimePickerRef {\n  minuteRef: HTMLInputElement | null;\n  hourRef: HTMLInputElement | null;\n  secondRef: HTMLInputElement | null;\n}\n\nconst TimePicker = React.forwardRef<TimePickerRef, TimePickerProps>(\n  ({ date, onChange, hourCycle = 24, granularity = 'second' }, ref) => {\n    const minuteRef = React.useRef<HTMLInputElement>(null);\n    const hourRef = React.useRef<HTMLInputElement>(null);\n    const secondRef = React.useRef<HTMLInputElement>(null);\n    const periodRef = React.useRef<HTMLButtonElement>(null);\n    const [period, setPeriod] = React.useState<Period>(date && date.getHours() >= 12 ? 'PM' : 'AM');\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        minuteRef: minuteRef.current,\n        hourRef: hourRef.current,\n        secondRef: secondRef.current,\n        periodRef: periodRef.current,\n      }),\n      [minuteRef, hourRef, secondRef],\n    );\n\n    return (\n      <div className=\"flex items-center justify-center gap-2\">\n        <label htmlFor=\"datetime-picker-hour-input\" className=\"cursor-pointer\">\n          <Clock className=\"mr-2 h-4 w-4\" />\n        </label>\n        <TimePickerInput\n          picker={hourCycle === 24 ? 'hours' : '12hours'}\n          date={date}\n          id=\"datetime-picker-hour-input\"\n          onDateChange={onChange}\n          ref={hourRef}\n          period={period}\n          onRightFocus={() => minuteRef.current?.focus()}\n        />\n        {(granularity === 'minute' || granularity === 'second') && (\n          <>\n            :\n            <TimePickerInput\n              picker=\"minutes\"\n              date={date}\n              onDateChange={onChange}\n              ref={minuteRef}\n              onLeftFocus={() => hourRef.current?.focus()}\n              onRightFocus={() => secondRef.current?.focus()}\n            />\n          </>\n        )}\n        {granularity === 'second' && (\n          <>\n            :\n            <TimePickerInput\n              picker=\"seconds\"\n              date={date}\n              onDateChange={onChange}\n              ref={secondRef}\n              onLeftFocus={() => minuteRef.current?.focus()}\n              onRightFocus={() => periodRef.current?.focus()}\n            />\n          </>\n        )}\n        {hourCycle === 12 && (\n          <div className=\"grid gap-1 text-center\">\n            <TimePeriodSelect\n              period={period}\n              setPeriod={setPeriod}\n              date={date}\n              onDateChange={(date) => {\n                onChange?.(date);\n                if (date && date?.getHours() >= 12) {\n                  setPeriod('PM');\n                } else {\n                  setPeriod('AM');\n                }\n              }}\n              ref={periodRef}\n              onLeftFocus={() => secondRef.current?.focus()}\n            />\n          </div>\n        )}\n      </div>\n    );\n  },\n);\nTimePicker.displayName = 'TimePicker';\n\ntype Granularity = 'day' | 'hour' | 'minute' | 'second';\n\ntype DateTimePickerProps = {\n  value?: Date;\n  onChange?: (date: Date | undefined) => void;\n  disabled?: boolean;\n  /** showing `AM/PM` or not. */\n  hourCycle?: 12 | 24;\n  placeholder?: string;\n  /**\n   * The year range will be: `This year + yearRange` and `this year - yearRange`.\n   * Default is 50.\n   * For example:\n   * This year is 2024, The year dropdown will be 1974 to 2024 which is generated by `2024 - 50 = 1974` and `2024 + 50 = 2074`.\n   * */\n  yearRange?: number;\n  /**\n   * The format is derived from the `date-fns` documentation.\n   * @reference https://date-fns.org/v3.6.0/docs/format\n   **/\n  displayFormat?: { hour24?: string; hour12?: string };\n  /**\n   * The granularity prop allows you to control the smallest unit that is displayed by DateTimePicker.\n   * By default, the value is `second` which shows all time inputs.\n   **/\n  granularity?: Granularity;\n} & Pick<CalendarProps, 'locale' | 'weekStartsOn' | 'showWeekNumber' | 'showOutsideDays'>;\n\ntype DateTimePickerRef = {\n  value?: Date;\n} & Omit<HTMLButtonElement, 'value'>;\n\nconst DateTimePicker = React.forwardRef<Partial<DateTimePickerRef>, DateTimePickerProps>(\n  (\n    {\n      locale = enUS,\n      value,\n      onChange,\n      hourCycle = 24,\n      yearRange = 50,\n      disabled = false,\n      displayFormat,\n      granularity = 'second',\n      placeholder = 'Pick a date',\n      ...props\n    },\n    ref,\n  ) => {\n    const [month, setMonth] = React.useState<Date>(value ?? new Date());\n    const buttonRef = useRef<HTMLButtonElement>(null);\n    /**\n     * carry over the current time when a user clicks a new day\n     * instead of resetting to 00:00\n     */\n    const handleSelect = (newDay: Date | undefined) => {\n      if (!newDay) return;\n      if (!value) {\n        onChange?.(newDay);\n        setMonth(newDay);\n        return;\n      }\n      const diff = newDay.getTime() - value.getTime();\n      const diffInDays = diff / (1000 * 60 * 60 * 24);\n      const newDateFull = add(value, { days: Math.ceil(diffInDays) });\n      onChange?.(newDateFull);\n      setMonth(newDateFull);\n    };\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        ...buttonRef.current,\n        value,\n      }),\n      [value],\n    );\n\n    const initHourFormat = {\n\t\t\thour24:\n\t\t\t\tdisplayFormat?.hour24 ??\n\t\t\t\t`PPP HH:mm${!granularity || granularity === \"second\" ? \":ss\" : \"\"}`,\n\t\t\thour12:\n\t\t\t\tdisplayFormat?.hour12 ??\n\t\t\t\t`PP hh:mm${!granularity || granularity === \"second\" ? \":ss\" : \"\"} b`,\n\t\t};\n\n    let loc = enUS;\n    const { options, localize, formatLong } = locale;\n    if (options && localize && formatLong) {\n      loc = {\n        ...enUS,\n        options,\n        localize,\n        formatLong,\n      };\n    }\n\n    return (\n      <Popover>\n        <PopoverTrigger asChild disabled={disabled}>\n          <Button\n            variant=\"outline\"\n            className={cn(\n              'w-[280px] justify-start text-left font-normal',\n              !value && 'text-muted-foreground',\n            )}\n            ref={buttonRef}\n          >\n            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n            {value ? (\n              format(value, hourCycle === 24 ? initHourFormat.hour24 : initHourFormat.hour12, {\n                locale: loc,\n              })\n            ) : (\n              <span>{placeholder}</span>\n            )}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-auto p-0\">\n          <Calendar\n            mode=\"single\"\n            selected={value}\n            month={month}\n            onSelect={(d) => handleSelect(d)}\n            onMonthChange={handleSelect}\n            yearRange={yearRange}\n            locale={locale}\n            {...props}\n          />\n          {granularity !== 'day' && (\n            <div className=\"border-t border-border p-3\">\n              <TimePicker\n                onChange={onChange}\n                date={value}\n                hourCycle={hourCycle}\n                granularity={granularity}\n              />\n            </div>\n          )}\n        </PopoverContent>\n      </Popover>\n    );\n  },\n);\n\nDateTimePicker.displayName = 'DateTimePicker';\n\nexport { DateTimePicker, TimePickerInput, TimePicker };\nexport type { TimePickerType, DateTimePickerProps, DateTimePickerRef };\n"]}