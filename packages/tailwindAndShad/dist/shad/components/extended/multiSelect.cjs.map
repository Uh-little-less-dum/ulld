{"version":3,"sources":["../../../../src/shad/components/extended/multiSelect.tsx"],"names":["CommandPrimitive","useCommandState","X","React","forwardRef","useEffect","cn","useDebounce","value","delay","debouncedValue","setDebouncedValue","timer","transToGroupOption","options","groupBy","groupOption","option","key","removePickedOption","picked","cloneOption","val","p","isOptionsExist","targetOption","CommandEmpty","className","props","forwardedRef","state","MultipleSelector","onChange","placeholder","arrayDefaultOptions","arrayOptions","onSearch","onSearchSync","loadingIndicator","emptyIndicator","maxSelected","onMaxSelected","hidePlaceholderWhenSelected","disabled","badgeClassName","selectFirstItem","creatable","triggerSearchOnFocus","commandProps","inputProps","hideClearAllButton","ref","inputRef","open","setOpen","onScrollbar","setOnScrollbar","isLoading","setIsLoading","dropdownRef","selected","setSelected","setOptions","inputValue","setInputValue","debouncedSearchTerm","handleClickOutside","event","handleUnselect","newOptions","handleKeyDown","input","newOption","doSearchSync","res","doSearch","CreatableItem","s","Item","CommandItem","e","EmptyItem","selectables","commandFilter","search","Command","Badge","CommandList","dropdowns","CommandGroup","multiSelect_default"],"mappings":"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","sourcesContent":["'use client';\nimport { Command as CommandPrimitive, useCommandState } from 'cmdk';\nimport { X } from 'lucide-react';\nimport * as React from 'react';\nimport { forwardRef, useEffect } from 'react';\n\nimport { Badge } from '../ui/badge';\nimport { Command, CommandGroup, CommandItem, CommandList } from '../ui/command';\nimport { cn } from '@ulld/utilities/cn';\n\nexport interface Option {\n  value: string;\n  label: string;\n  disable?: boolean;\n  /** fixed option that can't be removed. */\n  fixed?: boolean;\n  /** Group the options by providing key. */\n  [key: string]: string | boolean | undefined;\n}\ninterface GroupOption {\n  [key: string]: Option[];\n}\n\ninterface MultipleSelectorProps {\n  value?: Option[];\n  defaultOptions?: Option[];\n  /** manually controlled options */\n  options?: Option[];\n  placeholder?: string;\n  /** Loading component. */\n  loadingIndicator?: React.ReactNode;\n  /** Empty component. */\n  emptyIndicator?: React.ReactNode;\n  /** Debounce time for async search. Only work with `onSearch`. */\n  delay?: number;\n  /**\n   * Only work with `onSearch` prop. Trigger search when `onFocus`.\n   * For example, when user click on the input, it will trigger the search to get initial options.\n   **/\n  triggerSearchOnFocus?: boolean;\n  /** async search */\n  onSearch?: (value: string) => Promise<Option[]>;\n  /**\n   * sync search. This search will not showing loadingIndicator.\n   * The rest props are the same as async search.\n   * i.e.: creatable, groupBy, delay.\n   **/\n  onSearchSync?: (value: string) => Option[];\n  onChange?: (options: Option[]) => void;\n  /** Limit the maximum number of selected options. */\n  maxSelected?: number;\n  /** When the number of selected options exceeds the limit, the onMaxSelected will be called. */\n  onMaxSelected?: (maxLimit: number) => void;\n  /** Hide the placeholder when there are options selected. */\n  hidePlaceholderWhenSelected?: boolean;\n  disabled?: boolean;\n  /** Group the options base on provided key. */\n  groupBy?: string;\n  className?: string;\n  badgeClassName?: string;\n  /**\n   * First item selected is a default behavior by cmdk. That is why the default is true.\n   * This is a workaround solution by add a dummy item.\n   *\n   * @reference: https://github.com/pacocoursey/cmdk/issues/171\n   */\n  selectFirstItem?: boolean;\n  /** Allow user to create option when there is no option matched. */\n  creatable?: boolean;\n  /** Props of `Command` */\n  commandProps?: React.ComponentPropsWithoutRef<typeof Command>;\n  /** Props of `CommandInput` */\n  inputProps?: Omit<\n    React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>,\n    'value' | 'placeholder' | 'disabled'\n  >;\n  /** hide the clear all button. */\n  hideClearAllButton?: boolean;\n}\n\nexport interface MultipleSelectorRef {\n  selectedValue: Option[];\n  input: HTMLInputElement;\n}\n\nexport function useDebounce<T>(value: T, delay?: number): T {\n  const [debouncedValue, setDebouncedValue] = React.useState<T>(value);\n\n  useEffect(() => {\n    const timer = setTimeout(() => setDebouncedValue(value), delay || 500);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n\nfunction transToGroupOption(options: Option[], groupBy?: string) {\n  if (options.length === 0) {\n    return {};\n  }\n  if (!groupBy) {\n    return {\n      '': options,\n    };\n  }\n\n  const groupOption: GroupOption = {};\n  options.forEach((option) => {\n    const key = (option[groupBy] as string) || '';\n    if (!groupOption[key]) {\n      groupOption[key] = [];\n    }\n    groupOption[key].push(option);\n  });\n  return groupOption;\n}\n\nfunction removePickedOption(groupOption: GroupOption, picked: Option[]) {\n  const cloneOption = JSON.parse(JSON.stringify(groupOption)) as GroupOption;\n\n  for (const [key, value] of Object.entries(cloneOption)) {\n    cloneOption[key] = value.filter((val) => !picked.find((p) => p.value === val.value));\n  }\n  return cloneOption;\n}\n\nfunction isOptionsExist(groupOption: GroupOption, targetOption: Option[]) {\n  for (const [, value] of Object.entries(groupOption)) {\n    if (value.some((option) => targetOption.find((p) => p.value === option.value))) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The `CommandEmpty` of shadcn/ui will cause the cmdk empty not rendering correctly.\n * So we create one and copy the `Empty` implementation from `cmdk`.\n *\n * @reference: https://github.com/hsuanyi-chou/shadcn-ui-expansions/issues/34#issuecomment-1949561607\n **/\nconst CommandEmpty = forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof CommandPrimitive.Empty>\n>(({ className, ...props }, forwardedRef) => {\n  const render = useCommandState((state) => state.filtered.count === 0);\n\n  if (!render) return null;\n\n  return (\n    <div\n      ref={forwardedRef}\n      className={cn('py-6 text-center text-sm', className)}\n      cmdk-empty=\"\"\n      role=\"presentation\"\n      {...props}\n    />\n  );\n});\n\nCommandEmpty.displayName = 'CommandEmpty';\n\nconst MultipleSelector = React.forwardRef<MultipleSelectorRef, MultipleSelectorProps>(\n  (\n    {\n      value,\n      onChange,\n      placeholder,\n      defaultOptions: arrayDefaultOptions = [],\n      options: arrayOptions,\n      delay,\n      onSearch,\n      onSearchSync,\n      loadingIndicator,\n      emptyIndicator,\n      maxSelected = Number.MAX_SAFE_INTEGER,\n      onMaxSelected,\n      hidePlaceholderWhenSelected,\n      disabled,\n      groupBy,\n      className,\n      badgeClassName,\n      selectFirstItem = true,\n      creatable = false,\n      triggerSearchOnFocus = false,\n      commandProps,\n      inputProps,\n      hideClearAllButton = false,\n    }: MultipleSelectorProps,\n    ref: React.Ref<MultipleSelectorRef>,\n  ) => {\n    const inputRef = React.useRef<HTMLInputElement>(null);\n    const [open, setOpen] = React.useState(false);\n    const [onScrollbar, setOnScrollbar] = React.useState(false);\n    const [isLoading, setIsLoading] = React.useState(false);\n    const dropdownRef = React.useRef<HTMLDivElement>(null); // Added this\n\n    const [selected, setSelected] = React.useState<Option[]>(value || []);\n    const [options, setOptions] = React.useState<GroupOption>(\n      transToGroupOption(arrayDefaultOptions, groupBy),\n    );\n    const [inputValue, setInputValue] = React.useState('');\n    const debouncedSearchTerm = useDebounce(inputValue, delay || 500);\n\n    React.useImperativeHandle(\n      ref,\n      () => ({\n        selectedValue: [...selected],\n        input: inputRef.current as HTMLInputElement,\n        focus: () => inputRef.current?.focus(),\n      }),\n      [selected],\n    );\n\n    const handleClickOutside = (event: MouseEvent | TouchEvent) => {\n      if (\n        dropdownRef.current &&\n        !dropdownRef.current.contains(event.target as Node) &&\n        inputRef.current &&\n        !inputRef.current.contains(event.target as Node)\n      ) {\n        setOpen(false);\n      }\n    };\n\n    const handleUnselect = React.useCallback(\n      (option: Option) => {\n        const newOptions = selected.filter((s) => s.value !== option.value);\n        setSelected(newOptions);\n        onChange?.(newOptions);\n      },\n      [onChange, selected],\n    );\n\n    const handleKeyDown = React.useCallback(\n      (e: React.KeyboardEvent<HTMLDivElement>) => {\n        const input = inputRef.current;\n        if (input) {\n          if (e.key === 'Delete' || e.key === 'Backspace') {\n            if (input.value === '' && selected.length > 0) {\n              const lastSelectOption = selected[selected.length - 1];\n              // If last item is fixed, we should not remove it.\n              if (!lastSelectOption.fixed) {\n                handleUnselect(selected[selected.length - 1]);\n              }\n            }\n          }\n          // This is not a default behavior of the <input /> field\n          if (e.key === 'Escape') {\n            input.blur();\n          }\n        }\n      },\n      [handleUnselect, selected],\n    );\n\n    useEffect(() => {\n      if (open) {\n        document.addEventListener('mousedown', handleClickOutside);\n        document.addEventListener('touchend', handleClickOutside);\n      } else {\n        document.removeEventListener('mousedown', handleClickOutside);\n        document.removeEventListener('touchend', handleClickOutside);\n      }\n\n      return () => {\n        document.removeEventListener('mousedown', handleClickOutside);\n        document.removeEventListener('touchend', handleClickOutside);\n      };\n    }, [open]);\n\n    useEffect(() => {\n      if (value) {\n        setSelected(value);\n      }\n    }, [value]);\n\n    useEffect(() => {\n      /** If `onSearch` is provided, do not trigger options updated. */\n      if (!arrayOptions || onSearch) {\n        return;\n      }\n      const newOption = transToGroupOption(arrayOptions || [], groupBy);\n      if (JSON.stringify(newOption) !== JSON.stringify(options)) {\n        setOptions(newOption);\n      }\n    }, [arrayDefaultOptions, arrayOptions, groupBy, onSearch, options]);\n\n    useEffect(() => {\n      /** sync search */\n\n      const doSearchSync = () => {\n        const res = onSearchSync?.(debouncedSearchTerm);\n        setOptions(transToGroupOption(res || [], groupBy));\n      };\n\n      const exec = async () => {\n        if (!onSearchSync || !open) return;\n\n        if (triggerSearchOnFocus) {\n          doSearchSync();\n        }\n\n        if (debouncedSearchTerm) {\n          doSearchSync();\n        }\n      };\n\n      void exec();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [debouncedSearchTerm, groupBy, open, triggerSearchOnFocus]);\n\n    useEffect(() => {\n      /** async search */\n\n      const doSearch = async () => {\n        setIsLoading(true);\n        const res = await onSearch?.(debouncedSearchTerm);\n        setOptions(transToGroupOption(res || [], groupBy));\n        setIsLoading(false);\n      };\n\n      const exec = async () => {\n        if (!onSearch || !open) return;\n\n        if (triggerSearchOnFocus) {\n          await doSearch();\n        }\n\n        if (debouncedSearchTerm) {\n          await doSearch();\n        }\n      };\n\n      void exec();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [debouncedSearchTerm, groupBy, open, triggerSearchOnFocus]);\n\n    const CreatableItem = () => {\n      if (!creatable) return undefined;\n      if (\n        isOptionsExist(options, [{ value: inputValue, label: inputValue }]) ||\n        selected.find((s) => s.value === inputValue)\n      ) {\n        return undefined;\n      }\n\n      const Item = (\n        <CommandItem\n          value={inputValue}\n          className=\"cursor-pointer\"\n          onMouseDown={(e) => {\n            e.preventDefault();\n            e.stopPropagation();\n          }}\n          onSelect={(value: string) => {\n            if (selected.length >= maxSelected) {\n              onMaxSelected?.(selected.length);\n              return;\n            }\n            setInputValue('');\n            const newOptions = [...selected, { value, label: value }];\n            setSelected(newOptions);\n            onChange?.(newOptions);\n          }}\n        >\n          {`Create \"${inputValue}\"`}\n        </CommandItem>\n      );\n\n      // For normal creatable\n      if (!onSearch && inputValue.length > 0) {\n        return Item;\n      }\n\n      // For async search creatable. avoid showing creatable item before loading at first.\n      if (onSearch && debouncedSearchTerm.length > 0 && !isLoading) {\n        return Item;\n      }\n\n      return undefined;\n    };\n\n    const EmptyItem = React.useCallback(() => {\n      if (!emptyIndicator) return undefined;\n\n      // For async search that showing emptyIndicator\n      if (onSearch && !creatable && Object.keys(options).length === 0) {\n        return (\n          <CommandItem value=\"-\" disabled>\n            {emptyIndicator}\n          </CommandItem>\n        );\n      }\n\n      return <CommandEmpty>{emptyIndicator}</CommandEmpty>;\n    }, [creatable, emptyIndicator, onSearch, options]);\n\n    const selectables = React.useMemo<GroupOption>(\n      () => removePickedOption(options, selected),\n      [options, selected],\n    );\n\n    /** Avoid Creatable Selector freezing or lagging when paste a long string. */\n    const commandFilter = React.useCallback(() => {\n      if (commandProps?.filter) {\n        return commandProps.filter;\n      }\n\n      if (creatable) {\n        return (value: string, search: string) => {\n          return value.toLowerCase().includes(search.toLowerCase()) ? 1 : -1;\n        };\n      }\n      // Using default filter in `cmdk`. We don't have to provide it.\n      return undefined;\n    }, [creatable, commandProps?.filter]);\n\n    return (\n      <Command\n        ref={dropdownRef}\n        {...commandProps}\n        onKeyDown={(e) => {\n          handleKeyDown(e);\n          commandProps?.onKeyDown?.(e);\n        }}\n        className={cn('h-auto overflow-visible bg-transparent', commandProps?.className)}\n        shouldFilter={\n          commandProps?.shouldFilter !== undefined ? commandProps.shouldFilter : !onSearch\n        } // When onSearch is provided, we don't want to filter the options. You can still override it.\n        filter={commandFilter()}\n      >\n        <div\n          className={cn(\n            'min-h-10 rounded-md border border-input text-sm ring-offset-background focus-within:ring-2 focus-within:ring-ring focus-within:ring-offset-2',\n            {\n              'px-3 py-2': selected.length !== 0,\n              'cursor-text': !disabled && selected.length !== 0,\n            },\n            className,\n          )}\n          onClick={() => {\n            if (disabled) return;\n            inputRef.current?.focus();\n          }}\n        >\n          <div className=\"relative flex flex-wrap gap-1\">\n            {selected.map((option) => {\n              return (\n                <Badge\n                  key={option.value}\n                  className={cn(\n                    'data-[disabled]:bg-muted-foreground data-[disabled]:text-muted data-[disabled]:hover:bg-muted-foreground',\n                    'data-[fixed]:bg-muted-foreground data-[fixed]:text-muted data-[fixed]:hover:bg-muted-foreground',\n                    badgeClassName,\n                  )}\n                  data-fixed={option.fixed}\n                  data-disabled={disabled || undefined}\n                >\n                  {option.label}\n                  <button\n                    className={cn(\n                      'ml-1 rounded-full outline-none ring-offset-background focus:ring-2 focus:ring-ring focus:ring-offset-2',\n                      (disabled || option.fixed) && 'hidden',\n                    )}\n                    onKeyDown={(e) => {\n                      if (e.key === 'Enter') {\n                        handleUnselect(option);\n                      }\n                    }}\n                    onMouseDown={(e) => {\n                      e.preventDefault();\n                      e.stopPropagation();\n                    }}\n                    onClick={() => handleUnselect(option)}\n                  >\n                    <X className=\"h-3 w-3 text-muted-foreground hover:text-foreground\" />\n                  </button>\n                </Badge>\n              );\n            })}\n            {/* Avoid having the \"Search\" Icon */}\n            <CommandPrimitive.Input\n              {...inputProps}\n              ref={inputRef}\n              value={inputValue}\n              disabled={disabled}\n              onValueChange={(value) => {\n                setInputValue(value);\n                inputProps?.onValueChange?.(value);\n              }}\n              onBlur={(event) => {\n                if (!onScrollbar) {\n                  setOpen(false);\n                }\n                inputProps?.onBlur?.(event);\n              }}\n              onFocus={(event) => {\n                setOpen(true);\n                triggerSearchOnFocus && onSearch?.(debouncedSearchTerm);\n                inputProps?.onFocus?.(event);\n              }}\n              placeholder={hidePlaceholderWhenSelected && selected.length !== 0 ? '' : placeholder}\n              className={cn(\n                'flex-1 bg-transparent outline-none placeholder:text-muted-foreground',\n                {\n                  'w-full': hidePlaceholderWhenSelected,\n                  'px-3 py-2': selected.length === 0,\n                  'ml-1': selected.length !== 0,\n                },\n                inputProps?.className,\n              )}\n            />\n            <button\n              type=\"button\"\n              onClick={() => {\n                setSelected(selected.filter((s) => s.fixed));\n                onChange?.(selected.filter((s) => s.fixed));\n              }}\n              className={cn(\n                'absolute right-0 h-6 w-6 p-0',\n                (hideClearAllButton ||\n                  disabled ||\n                  selected.length < 1 ||\n                  selected.filter((s) => s.fixed).length === selected.length) &&\n                  'hidden',\n              )}\n            >\n              <X />\n            </button>\n          </div>\n        </div>\n        <div className=\"relative\">\n          {open && (\n            <CommandList\n              className=\"absolute top-1 z-10 w-full rounded-md border bg-popover text-popover-foreground shadow-md outline-none animate-in\"\n              onMouseLeave={() => {\n                setOnScrollbar(false);\n              }}\n              onMouseEnter={() => {\n                setOnScrollbar(true);\n              }}\n              onMouseUp={() => {\n                inputRef.current?.focus();\n              }}\n            >\n              {isLoading ? (\n                <>{loadingIndicator}</>\n              ) : (\n                <>\n                  {EmptyItem()}\n                  {CreatableItem()}\n                  {!selectFirstItem && <CommandItem value=\"-\" className=\"hidden\" />}\n                  {Object.entries(selectables).map(([key, dropdowns]) => (\n                    <CommandGroup key={key} heading={key} className=\"h-full overflow-auto\">\n                      <>\n                        {dropdowns.map((option) => {\n                          return (\n                            <CommandItem\n                              key={option.value}\n                              value={option.value}\n                              disabled={option.disable}\n                              onMouseDown={(e) => {\n                                e.preventDefault();\n                                e.stopPropagation();\n                              }}\n                              onSelect={() => {\n                                if (selected.length >= maxSelected) {\n                                  onMaxSelected?.(selected.length);\n                                  return;\n                                }\n                                setInputValue('');\n                                const newOptions = [...selected, option];\n                                setSelected(newOptions);\n                                onChange?.(newOptions);\n                              }}\n                              className={cn(\n                                'cursor-pointer',\n                                option.disable && 'cursor-default text-muted-foreground',\n                              )}\n                            >\n                              {option.label}\n                            </CommandItem>\n                          );\n                        })}\n                      </>\n                    </CommandGroup>\n                  ))}\n                </>\n              )}\n            </CommandList>\n          )}\n        </div>\n      </Command>\n    );\n  },\n);\n\nMultipleSelector.displayName = 'MultipleSelector';\nexport default MultipleSelector;\n"]}