{"version":3,"sources":["../src/__scripts__/scssThemeFile.ts"],"names":["fs","ThemeFile","file","_name","content","lines","split","inInterior","l"],"mappings":"AAAA,OAAOA,MAAQ,KAER,IAAMC,EAAN,KAAgB,CAInB,YAAmBC,EAAc,CAAd,UAAAA,EADnB,aAAmB,GAEf,KAAK,QAAUF,EAAG,aAAaE,EAAM,CAAE,SAAU,OAAQ,CAAC,EAC1D,IAAIC,EAAQD,EAAK,MAAM,GAAG,EAAE,GAAG,EAAE,GAAG,MAAM,GAAG,EAAE,CAAC,EAChD,GAAG,CAACC,EACA,MAAM,IAAI,MAAM,6BAA6B,EAE9CA,EAAM,SAAS,SAAS,IACvB,KAAK,QAAU,IAEnB,KAAK,KAAOA,CAChB,CACA,aAAc,CAEV,IAAIC,EADO,gCACS,KAAK,KAAK,mBAAmB,CAAC,EAClD,OAAOA,EAAUA,EAAQ,CAAC,EAAI,MAClC,CACA,cAAe,CAEX,IAAIA,EADO,gCACS,KAAK,KAAK,mBAAmB,CAAC,EAClD,OAAOA,EAAUA,EAAQ,CAAC,EAAI,MAClC,CACA,oBAAoB,CAChB,IAAIC,EAAkB,CAAC,EACnBC,EAAQ,KAAK,QAAQ,MAAM;AAAA,CAAI,EAC/BC,EAAa,GACjB,QAAWC,KAAKF,EACRC,GACAF,EAAM,KAAKG,CAAC,EAEbA,EAAE,KAAK,IAAM,kBACZD,EAAa,IAIrB,OAAOF,EAAM,MAAM,EAAGA,EAAM,IAAKG,GAAMA,EAAE,KAAK,CAAC,EAAE,YAAY,GAAG,CAAC,EAAE,KAAK;AAAA,CAAI,CAChF,CACA,mBAAoB,CAChB,MAAO,yBAAyB,KAAK,IAAI;AAAA,EAC/C,KAAK,aAAa,CAAC;AAAA;AAAA;AAAA,SAGZ,KAAK,YAAY,CAAC;AAAA;AAAA;AAAA,CAIvB,CACJ","sourcesContent":["import fs from \"fs\";\n\nexport class ThemeFile {\n    content: string;\n    name: string\n    isValid: boolean = true\n    constructor(public file: string) {\n        this.content = fs.readFileSync(file, { encoding: \"utf-8\" });\n        let _name = file.split(\"/\").at(-1)?.split(\".\")[0]\n        if(!_name) {\n            throw new Error(\"No name found in ThemeFile.\")\n        }\n        if(_name.includes(\"unified\")){\n            this.isValid = false\n        }\n        this.name = _name\n    }\n    darkContent() {\n       let regex = /.dark\\s?{(?<content>[^}]*)}/gm\n        let content = regex.exec(this.getInteriorContent())\n        return content ? content[1] : undefined\n    }\n    lightContent() {\n       let regex = /:root\\s?{(?<content>[^}]*)}/gm\n        let content = regex.exec(this.getInteriorContent())\n        return content ? content[1] : undefined\n    }\n    getInteriorContent(){\n        let lines: string[] = []\n        let split = this.content.split(\"\\n\")\n        let inInterior = false\n        for (const l of split){\n             if(inInterior){\n                lines.push(l)\n            }\n            if(l.trim() === \"@layer base {\"){\n                inInterior = true\n            }\n        }\n\n        return lines.slice(0, lines.map((l) => l.trim()).lastIndexOf(\"}\")).join(\"\\n\")\n    }\n    getUnifiedContent() {\n        return `html[data-ulld-theme=\"${this.name}\"] {\n${this.lightContent()}\n.dark:not(.light *),\n&.dark {\n       ${this.darkContent()}\n}\n}\n`\n    }\n}\n"]}