{"version":3,"sources":["../../../src/methods/modifyContent/mapLinesAndReplace.ts"],"names":[],"mappings":";;;AAAA,OAAO,QAAQ;AAOf,IAAM,MAAM,EAAC,UAAU,QAAkB;AAElC,IAAM,qBAAqB,CAAC,UAAmC;AACnE,QAAM,UAAU,GAAG,aAAa,MAAM,MAAM,GAAG;AAC/C,MAAI,QAAkB,CAAC;AAEtB,QAAM,gBAAgB,QAAQ,MAAM,IAAI;AAExC,aAAW,KAAK,eAAe;AAC3B,UAAM,MAAM,MAAM,GAAG,CAAC;AACtB,QAAG,KAAI;AACH,YAAM,KAAK,GAAG;AAAA,IAClB;AAAA,EACJ;AAEA,MAAG,MAAM,WAAW,KAAK,cAAc,SAAS,GAAE;AAC9C,YAAQ,MAAM,6GAA6G;AAC3H;AAAA,EACJ;AACA,KAAG,cAAc,MAAM,MAAM,MAAM,KAAK,IAAI,CAAC,GAAG;AACpD","sourcesContent":["import fs from 'fs'\n\nexport interface MapLinesAndReplaceProps {\n    path: string\n    cb: (line: string) => string | undefined\n}\n\nconst enc = {encoding: \"utf-8\" as \"utf-8\"}\n\nexport const mapLinesAndReplace = (props: MapLinesAndReplaceProps) => {\n   const content = fs.readFileSync(props.path, enc)\n   let lines: string[] = []\n\n    const existingLines = content.split(\"\\n\")\n\n    for (const l of existingLines) {\n        const res = props.cb(l)\n        if(res){\n            lines.push(res)\n        }\n    }\n\n    if(lines.length === 0 && existingLines.length > 0){\n        console.error(\"You might have forgotten to return the line in the mapLinesAndReplace method as the list of lines is empty.\")\n        return\n    }\n    fs.writeFileSync(props.path, lines.join('\\n')), enc\n}\n"]}