{"version":3,"sources":["../../../src/classes/path/main.ts"],"sourcesContent":["import path from \"path\";\nimport fs, {Stats} from \"fs\";\n\ninterface ExistsParams {\n    forceNewRead?: boolean;\n    touchIfNotExists?: boolean;\n}\n\nexport class Path {\n    #parsedData: ReturnType<typeof path.parse>;\n    #exists: boolean;\n    #stats: Stats\n    constructor(public filePath: string) { }\n\n    get parsed() {\n        if (this.#parsedData) {\n            return this.#parsedData;\n        } else {\n            let data = path.parse(this.filePath);\n            this.#parsedData = data;\n            return data;\n        }\n    }\n    /** .../someDir/somePath.html -> somePath */\n    fileName() {\n        return this.parsed.name;\n    }\n\n    /** .../someDir/somePath.html -> .html */\n    fileExtension() {\n        return this.parsed.ext;\n    }\n    /** .../someDir/somePath.html -> somePath.html */\n    fullName() {\n        return this.parsed.base;\n    }\n\n    /** .../someDir/somePath.html -> .../someDir */\n    dir() {\n        return this.pathType() === \"dir\" ? this.filePath : this.parsed.dir;\n    }\n    exists({ forceNewRead, touchIfNotExists }: ExistsParams = {}) {\n        let doesExist = Boolean(!forceNewRead && typeof this.#exists === \"boolean\") ? this.#exists : fs.existsSync(this.filePath)\n        if(!doesExist && touchIfNotExists){\n           return this.touch() \n        }\n        return doesExist\n    }\n    mkdir(){\n        let dirPath = this.dir()\n       if(fs.existsSync(dirPath)){\n            console.log(`Dir already exists at ${dirPath}.`)\n            return\n        } \n        fs.mkdirSync(dirPath, {\n            recursive: true\n        })\n    }\n    touch(): boolean {\n        this.mkdir()\n        fs.closeSync(fs.openSync(this.filePath, \"w\"))\n        return true\n    }\n    get stats(){\n        if(!this.exists()){\n            return false\n        }\n        if(this.#stats){\n            return this.#stats\n        }\n        let data = fs.statSync(this.filePath)\n        this.#stats = data\n        return data\n    }\n    pathType(): \"dir\" | \"file\" | false {\n        if (!this.stats) {\n            this.logNotExists();\n            return false;\n        }\n        return this.stats.isFile() ? \"file\" : this.stats.isDirectory() ? \"dir\" : false\n    }\n    logNotExists() {\n        console.trace(`This file path does not exist. Cannot continue.`);\n    }\n}\n"],"mappings":";;;;;;;AAAA,OAAO,UAAU;AACjB,OAAO,QAAiB;AADxB;AAQO,IAAM,OAAN,MAAW;AAAA,EAId,YAAmB,UAAkB;AAAlB;AAHnB;AACA;AACA;AAAA,EACuC;AAAA,EAEvC,IAAI,SAAS;AACT,QAAI,mBAAK,cAAa;AAClB,aAAO,mBAAK;AAAA,IAChB,OAAO;AACH,UAAI,OAAO,KAAK,MAAM,KAAK,QAAQ;AACnC,yBAAK,aAAc;AACnB,aAAO;AAAA,IACX;AAAA,EACJ;AAAA;AAAA,EAEA,WAAW;AACP,WAAO,KAAK,OAAO;AAAA,EACvB;AAAA;AAAA,EAGA,gBAAgB;AACZ,WAAO,KAAK,OAAO;AAAA,EACvB;AAAA;AAAA,EAEA,WAAW;AACP,WAAO,KAAK,OAAO;AAAA,EACvB;AAAA;AAAA,EAGA,MAAM;AACF,WAAO,KAAK,SAAS,MAAM,QAAQ,KAAK,WAAW,KAAK,OAAO;AAAA,EACnE;AAAA,EACA,OAAO,EAAE,cAAc,iBAAiB,IAAkB,CAAC,GAAG;AAC1D,QAAI,YAAY,QAAQ,CAAC,gBAAgB,OAAO,mBAAK,aAAY,SAAS,IAAI,mBAAK,WAAU,GAAG,WAAW,KAAK,QAAQ;AACxH,QAAG,CAAC,aAAa,kBAAiB;AAC/B,aAAO,KAAK,MAAM;AAAA,IACrB;AACA,WAAO;AAAA,EACX;AAAA,EACA,QAAO;AACH,QAAI,UAAU,KAAK,IAAI;AACxB,QAAG,GAAG,WAAW,OAAO,GAAE;AACrB,cAAQ,IAAI,yBAAyB,OAAO,GAAG;AAC/C;AAAA,IACJ;AACA,OAAG,UAAU,SAAS;AAAA,MAClB,WAAW;AAAA,IACf,CAAC;AAAA,EACL;AAAA,EACA,QAAiB;AACb,SAAK,MAAM;AACX,OAAG,UAAU,GAAG,SAAS,KAAK,UAAU,GAAG,CAAC;AAC5C,WAAO;AAAA,EACX;AAAA,EACA,IAAI,QAAO;AACP,QAAG,CAAC,KAAK,OAAO,GAAE;AACd,aAAO;AAAA,IACX;AACA,QAAG,mBAAK,SAAO;AACX,aAAO,mBAAK;AAAA,IAChB;AACA,QAAI,OAAO,GAAG,SAAS,KAAK,QAAQ;AACpC,uBAAK,QAAS;AACd,WAAO;AAAA,EACX;AAAA,EACA,WAAmC;AAC/B,QAAI,CAAC,KAAK,OAAO;AACb,WAAK,aAAa;AAClB,aAAO;AAAA,IACX;AACA,WAAO,KAAK,MAAM,OAAO,IAAI,SAAS,KAAK,MAAM,YAAY,IAAI,QAAQ;AAAA,EAC7E;AAAA,EACA,eAAe;AACX,YAAQ,MAAM,iDAAiD;AAAA,EACnE;AACJ;AA3EI;AACA;AACA;","names":[]}