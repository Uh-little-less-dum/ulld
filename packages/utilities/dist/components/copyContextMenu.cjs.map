{"version":3,"sources":["../../src/components/copyContextMenu.tsx","../../src/actions/copyStringToClipboard.ts","../../src/utils/getAllRegexMatches.ts","../../src/utils/stringUtils.ts","../../src/utils/cn.ts"],"names":[],"mappings":";;;AACA,SAAS,aAAa,oBAAoB,oBAAoB,uBAAuB;AACrF,OAAO,WAAW;;;ACCX,IAAM,wBAAwB,OACnC,GACA,cACG;AACH,MAAI;AACF,UAAM,UAAU,UAAU,UAAU,CAAC;AACrC,QAAI,WAAW;AACb,gBAAU;AAAA,QACR,aAAa;AAAA,MACf,CAAC;AAAA,IACH;AACA,WAAO;AAAA,EACT,SAAS,KAAK;AACZ,YAAQ,MAAM,oBAAoB,GAAG;AACrC,WAAO;AAAA,EACT;AACF;;;ACnBO,IAAM,qBAAqB,CAAC,SAAiB,UAAkB;AAClE,MAAI,UAA6B,CAAC;AAElC,MAAI,IAAI;AACR,MAAI;AACJ,KAAG;AACC,QAAI,MAAM,KAAK,CAAC;AAChB,QAAI,GAAG;AACH,cAAQ,KAAK,CAAC;AAAA,IAClB;AAAA,EACJ,SAAS;AACT,SAAO;AACX;;;ACXA,OAAO,cAAc;AA8Bd,IAAM,wBAAwB,CAAC,OAAe;AACjD,MAAI,IAAI,GAAG,KAAK;AAChB,MACI,EAAE,WAAW,IAAI,KACjB,EAAE,SAAS,IAAI,KACf,mBAAmB,GAAG,QAAQ,EAAE,WAAW,GAC7C;AACE,WAAO,EAAE,WAAW,MAAM,EAAE,EAAE,KAAK;AAAA,EACvC;AACA,MACI,EAAE,WAAW,GAAG,KAChB,EAAE,SAAS,GAAG,KACd,mBAAmB,GAAG,MAAM,EAAE,WAAW,GAC3C;AACE,WAAO,EAAE,WAAW,KAAK,EAAE,EAAE,KAAK;AAAA,EACtC;AACA,SAAO;AACX;;;AChDA,SAA0B,YAAY;AACtC,SAAS,eAAe;AAExB,SAAS,MAAM,QAAsB;AACjC,SAAO,QAAQ,KAAK,MAAM,CAAC;AAC/B;;;AJeO,IAAM,kBAAkB,CAAC,EAAE,UAAU,mBAAmB,SAAS,UAAU,gBAAgB,UAAU,CAAC,EAAE,MAA4B;AACvI,QAAM,iBAAiB;AACvB,SACI,oCAAC,mBACG,oCAAC,0BACI,QACL,GACA;AAAA,IAAC;AAAA;AAAA,MACG,WAAW,GAAG,QAAQ,QAAQ,WAAW;AAAA;AAAA,IAEzC;AAAA,MAAC;AAAA;AAAA,QACG,OAAK;AAAA,QACL,SAAS,YAAY,sBAAsB,oBAAoB,sBAAsB,OAAO,IAAI,OAAO;AAAA;AAAA,MAEtG,YAAY;AAAA,IACjB;AAAA,IACC,kBAAkB,oCAAC,oBAAe;AAAA,EACvC,CACJ;AAGR;AAGA,gBAAgB,cAAc","sourcesContent":["\"use client\"\nimport { ContextMenu, ContextMenuTrigger, ContextMenuContent, ContextMenuItem } from '@ulld/tailwind/context-menu'\nimport React from 'react'\nimport { copyStringToClipboard } from '../actions/copyStringToClipboard.js'\nimport { removeMathDollarSigns } from '../utils/stringUtils.js'\nimport { cn } from '../utils/cn.js'\n\n\n\ninterface CopyContextMenuProps {\n    children: React.ReactNode\n    content: string\n    btnLabel?: string\n    extraMenuItems?: React.FC<{}>\n    removeMathWrapper?: boolean\n    classes?: {\n        menuContent?: string\n    }\n}\n\nexport const CopyContextMenu = ({ children, removeMathWrapper, content, btnLabel, extraMenuItems, classes = {} }: CopyContextMenuProps) => {\n    const ExtraMenuItems = extraMenuItems\n    return (\n        <ContextMenu>\n            <ContextMenuTrigger>\n                {children}\n            </ContextMenuTrigger>\n            <ContextMenuContent\n                className={cn(\"w-64\", classes.menuContent)}\n            >\n                <ContextMenuItem\n                    inset\n                    onClick={async () => copyStringToClipboard(removeMathWrapper ? removeMathDollarSigns(content) : content)}\n                >\n                    {btnLabel || \"Copy latex\"}\n                </ContextMenuItem>\n                {ExtraMenuItems && <ExtraMenuItems />}\n            </ContextMenuContent>\n        </ContextMenu>\n\n    )\n}\n\n\nCopyContextMenu.displayName = \"CopyContextMenu\"\n","import { ToastConfigType } from \"../types/toastConfig.js\";\n\n\nexport const copyStringToClipboard = async (\n  s: string,\n  showToast?: (toastConfig: ToastConfigType) => void,\n) => {\n  try {\n    await navigator.clipboard.writeText(s);\n    if (showToast) {\n      showToast({\n        description: \"Copied successfully!\",\n      });\n    }\n    return true;\n  } catch (err) {\n    console.error(\"Failed to copy: \", err);\n    return false;\n  }\n};\n","export const getAllRegexMatches = (content: string, regex: RegExp) => {\n    let results: RegExpExecArray[] = [];\n\n    let c = content;\n    let m;\n    do {\n        m = regex.exec(c);\n        if (m) {\n            results.push(m);\n        }\n    } while (m);\n    return results\n};\n","import { getAllRegexMatches } from \"./getAllRegexMatches.js\";\nimport distance from \"jaro-winkler\"\n\nexport const capitalize = (val: string) =>\n    `${val[0].toUpperCase()}${val.slice(1)}`;\n\n\nexport const camelCase = (val: string) => {\n    return val\n        .replaceAll(/\\-|\\_/gm, \" \")\n        .split(\" \")\n        .map((l, i) => (i === 0 ? l.toLowerCase() : capitalize(l)))\n        .join(\"\");\n};\n\n\nexport const getFileExtension = (path: string) => {\n       return path.includes(\".\") ? path.slice(path.lastIndexOf(\".\")) : undefined\n    }\n\n// TODO: Improve this method. Create a server only variant and use the path node module.\nexport const pathHasExtension = (path: string) => {\n    let ext = getFileExtension(path)\n    return Boolean(ext && ext.length > 0 && ext.length <= 4)\n}\n\nexport const applyFileSuffix = (path: string, extension: `.${string}`) => {\n    return pathHasExtension(path) ? path : `${path}${extension}`;\n};\n\n\nexport const removeMathDollarSigns = (_s: string) => {\n    let s = _s.trim();\n    if (\n        s.startsWith(\"$$\") &&\n        s.endsWith(\"$$\") &&\n        getAllRegexMatches(s, /\\$\\$/gm).length === 2\n    ) {\n        return s.replaceAll(\"$$\", \"\").trim()\n    }\n    if(\n        s.startsWith(\"$\") &&\n        s.endsWith(\"$\") &&\n        getAllRegexMatches(s, /\\$/gm).length === 2\n    ) {\n        return s.replaceAll(\"$\", \"\").trim()\n    }\n    return s\n};\n\n\nexport const sortStringsBySimilarity = (searchString: string, opts: string[], caseSensitive: boolean = false) => {\n    return opts.map((x) => ({\n        /* @ts-ignore */\n        similarity: distance(searchString, x, {\n            caseSensitive\n        }),\n        value: x\n    })).sort((a, b) => a.similarity < b.similarity ? 1 : a.similarity > b.similarity ? -1 : 0)\n}\n\n\nexport const getMostSimilarString = (searchString: string, opts: string[], caseSensitive: boolean = false) => {\n       return sortStringsBySimilarity(searchString, opts, caseSensitive)[0].value\n}\n","import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nfunction cn(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs))\n}\n\nexport {cn}\n\nexport default cn\n"]}