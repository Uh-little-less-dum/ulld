{"version":3,"sources":["../src/developmentUtilities/developmentOutput/typescriptOutputs.ts"],"names":["DevelopmentTypescriptOutputs","DevelopmentOutputUtils","props","body","items","item","t","lines","_package","a"],"mappings":"yCAaO,IAAMA,EAAN,cACCC,CACyC,CAC7C,YAAYC,EAA2C,CACnD,MAAMA,CAAK,CACf,CAEA,YAAeA,EAA0C,CACrD,IAAIC,EAAO,KAAK,eAAe,eAAeD,EAAM,OAAO;AAAA,EAAQA,CAAK,EAClEE,EAAQ,KAAK,oBAAoBF,CAAK,EAC5C,QAAWG,KAAQD,EACfD,GAAQ,QAAQE,EAAK,GAAG,QAAQA,EAAK,KAAK;AAAA,EAE9C,OAAAF,GAAQ,IACDA,CACX,CAEA,iBAAoBD,EAAyC,CACzD,MAAO,GAAG,KAAK,yBAAyBA,CAAK,CAAC,GAAGA,EAAM,IAAI,IAAKI,GAAMJ,EAAM,SAASI,CAAC,CAAC,EAAE,KAAK;AAAA,OAAU,CAAC;AAAA,CAC7G,CAEA,wBAA2BJ,EAAgD,CACvE,IAAMK,EAAkB,CAAC,EACnBH,EAAQ,KAAK,oBAAoBF,CAAK,EAC5C,QAAWG,KAAQD,EACfG,EAAM,KAAK,QAAQF,EAAK,GAAG,MAAMA,EAAK,KAAK,EAAE,EAEjD,OAAO,KAAK,2BACRH,EACA,GAAG,KAAK,6BAA6BA,CAAK,CAAC;AAAA,EAAOK,EAAM,KAAK;AAAA,CAAK,CAAC;AAAA,EACvE,CACJ,CAEA,iBAAiBL,EAAgC,CAC7C,OAAOA,EAAM,OACjB,CAGA,iBAAiBA,EAAgC,CAC7C,OAAOA,EAAM,OACjB,CAEA,iBAAiBA,EAAgC,CAC7C,OAAOA,EAAM,OACjB,CAEA,cAAcA,EAAgC,CAC1C,MAAO,GAAGA,EAAM,OAAO;AAAA;AAAA,EAAO,KAAK,cAAc,EACrD,CAEA,sBAAsBA,EAA2C,CAC7D,MAAO,8CAA8CA,EAAM,UAAU,EACzE,CAEA,2BAA2BA,EAAgD,CACvE,IAAMM,EAAWN,EAAM,UAAY,aAAeA,EAAM,QAAU,OAAOA,EAAM,OAAO,WACtF,MAAO,qCAAqCA,EAAM,UAAU,OAAOM,CAAQ,GAC/E,CAEA,uBAA0BN,EAA+C,CACrE,MAAO,GAAG,KAAK,6BAA6BA,CAAK,CAAC;AAAA,EAAMA,EAAM,IAAI,IAAKO,GAAM,OAAOP,EAAM,SAASO,CAAC,CAAC,EAAE,EAAE,KAAK;AAAA,CAAK,CAAC;AAAA,GAAMP,EAAM,SAAW,YAAc,EAAE,GAAGA,EAAM,WAAa,OAAOA,EAAM,UAAU,GAAK,EAAE,GACnN,CACJ","sourcesContent":["import { DevelopmentOutputUtils } from \"./outputUtils\";\nimport type {\n    ArrayToEnumStringProps,\n    ArrayToTypescriptArrayProps,\n    ArrayToTypescriptObjectProps,\n    ArrayToTypeUnionProps,\n    DevelopmentOutputConstructorProps,\n    DevelopmentOutputFunctionPropMap,\n    RawContentProps,\n    SourceLocationCommentProps,\n    GeneratedFromScriptCommentProps\n} from \"./types\";\n\nexport class DevelopmentTypescriptOutputs\nextends DevelopmentOutputUtils\n    implements DevelopmentOutputFunctionPropMap  {\n    constructor(props?: DevelopmentOutputConstructorProps) {\n        super(props);\n    }\n\n    arrayToEnum<T>(props: ArrayToEnumStringProps<T>): string {\n        let body = this.getInitialBody(`export enum ${props.varName} {\\n`, props);\n        const items = this.removeDuplicateKeys(props)\n        for (const item of items) {\n            body += `    \"${item.key}\" = \"${item.value}\",\\n`;\n        }\n        body += \"}\";\n        return body;\n    }\n\n    arrayToTypeUnion<T>(props: ArrayToTypeUnionProps<T>): string {\n        return `${this.getTypeDeclarationString(props)}${props.arr.map((t) => props.getValue(t)).join(\"\\n    | \")};\\n`;\n    }\n\n    arrayToTypescriptRecord<T>(props: ArrayToTypescriptObjectProps<T>): string {\n        const lines: string[] = [];\n        const items = this.removeDuplicateKeys(props)\n        for (const item of items) {\n            lines.push(`    \"${item.key}\": ${item.value}`);\n        }\n        return this.conditionallyExportDefault(\n            props,\n            `${this.getVariableDeclarationString(props)} {\\n${lines.join(\",\\n\")}\\n}`,\n        );\n    }\n\n    rawInlineContent(props: RawContentProps): string {\n        return props.content\n    }\n\n\n    rawSuffixContent(props: RawContentProps): string {\n        return props.content\n    }\n\n    rawPrefixContent(props: RawContentProps): string {\n        return props.content\n    }\n\n    rawFileHeader(props: RawContentProps): string {\n        return `${props.content}\\n\\n${this.initialContent}`\n    }\n\n    sourceLocationComment(props: SourceLocationCommentProps): string {\n        return `// NOTE: Autogenerated from the content in ${props.sourceFile}`\n    }\n\n    generatedFromScriptComment(props: GeneratedFromScriptCommentProps): string {\n        const _package = props.package === \"buildUtils\" ? props.package : `the ${props.package} package`\n        return `// NOTE: Generated as part of the ${props.scriptName} in ${_package}.`\n    }\n\n    arrayToTypescriptArray<T>(props: ArrayToTypescriptArrayProps<T>): string {\n        return `${this.getVariableDeclarationString(props)}[\\n${props.arr.map((a) => `    ${props.getValue(a)}`).join(\",\\n\")}\\n]${props.readOnly ? \" as const\" : \"\"}${props.castToType ? ` as ${props.castToType}` : \"\"};`\n    }\n}\n"]}