{"version":3,"sources":["../../../src/developmentUtilities/developmentOutput/main.ts"],"names":["DevelopmentOutput","initialContent","props","body","_s","s","items","item","res"],"mappings":"iCAEO,IAAMA,EAAN,KAAoE,CACvE,YAAmBC,EAAiB,GAAI,CAArB,oBAAAA,CAEnB,CAEA,YAA8BC,EAA0C,CACpE,IAAIC,EAAO,eAAeD,EAAM,QAAQ;AAAA,EAExC,QAAWE,KAAMF,EAAM,IAAK,CACxB,IAAMG,EAAI,OAAOD,GAAO,SAAWA,EAAKF,EAAM,OAAOE,CAAE,EACvDD,GAAQ,QAAQE,CAAC,QAAQA,CAAC;AAAA,CAC9B,CACA,OAAAF,GAAQ,IACDA,CACX,CAEA,eAAeG,EAAqC,CAChD,QAAWC,KAAQD,EAAO,CACtB,IAAME,EAAM,KAAKD,EAAK,GAAG,EAAE,GAAGA,EAAK,KAAK,EACxC,KAAK,gBAAkB;AAAA;AAAA,EAAOC,CAAG,EACrC,CACA,OAAO,KAAK,cAChB,CACJ","sourcesContent":["import type { ArrayToEnumStringProps, DevelopmentOutputFunctionPropMap, GenFileContentItem } from \"./types\"\n\nexport class DevelopmentOutput implements DevelopmentOutputFunctionPropMap {\n    constructor(public initialContent = \"\") {\n\n    }\n\n    arrayToEnum<T extends object>(props: ArrayToEnumStringProps<T>): string {\n        let body = `export enum ${props.enumName} {\\n`\n\n        for (const _s of props.arr) {\n            const s = typeof _s === \"string\" ? _s : props.getKey(_s)\n            body += `    \"${s}\" = \"${s}\",\\n`\n        }\n        body += \"}\"\n        return body\n    }\n\n    genFileContent(items: GenFileContentItem[]): string {\n        for (const item of items) {\n            const res = this[item.fnc](...item.props)\n            this.initialContent += `\\n\\n${res}`\n        }\n        return this.initialContent\n    }\n}\n"]}