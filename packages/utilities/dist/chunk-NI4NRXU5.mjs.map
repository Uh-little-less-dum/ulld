{"version":3,"sources":["../src/internalDevTypes/helpers.ts"],"names":["getCurrentPackageVersions","data","k","buildStaticData_default","getPackageDataOnly","x","getAppDataOnly","getInternalPackageNames","getInternalAppNames"],"mappings":"yCAKO,IAAMA,EAA4B,IAAwC,CAC7E,IAAIC,EAAwC,CAAC,EAC7C,QAAWC,KAAMC,EAAwC,oBACtDF,EAAKC,EAAE,IAAI,EAAIA,EAAE,eAEpB,OAAOD,CACX,EAGaG,EAAqB,IACtBD,EAAwC,oBAAoB,OAAQE,GAAMA,EAAE,OAAS,SAAS,EAI7FC,EAAiB,IAClBH,EAAwC,oBAAoB,OAAQE,GAAMA,EAAE,OAAS,KAAK,EAGzFE,EAA0B,IAC5BH,EAAmB,EAAE,IAAKC,GAAMA,EAAE,IAAI,EAIpCG,EAAsB,IACxBF,EAAe,EAAE,IAAKD,GAAMA,EAAE,IAAI","sourcesContent":["import { InternalAppName } from \"@ulld/types\"\nimport internalBuildData from \"../utils/buildStaticData.json\"\nimport { InternalBuildData, InternalPackageItem } from \"./main\"\n\n\nexport const getCurrentPackageVersions = (): Record<InternalAppName, string>  => {\n    let data: Record<InternalAppName, string> = {} as Record<InternalAppName, string>\n    for (const k of (internalBuildData as InternalBuildData).internalPackageData) {\n       data[k.name] = k.currentVersion \n    }\n    return data\n}\n\n/** Returns only package data in the packages directory, not the apps directory. */\nexport const getPackageDataOnly = (): InternalPackageItem[] => {\n    return (internalBuildData as InternalBuildData).internalPackageData.filter((x) => x.type === \"package\")\n}\n\n/** Returns only the package data in the app directory, not the packages directory */\nexport const getAppDataOnly = (): InternalPackageItem[] => {\n    return (internalBuildData as InternalBuildData).internalPackageData.filter((x) => x.type === \"app\")\n}\n\nexport const getInternalPackageNames = (): InternalAppName[] => {\n    return getPackageDataOnly().map((x) => x.name)\n}\n\n\nexport const getInternalAppNames = (): InternalAppName[] => {\n    return getAppDataOnly().map((x) => x.name)\n}\n"]}