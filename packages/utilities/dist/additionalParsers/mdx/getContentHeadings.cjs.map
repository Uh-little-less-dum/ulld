{"version":3,"sources":["../../../src/additionalParsers/mdx/getContentHeadings.ts"],"names":[],"mappings":";AAEA,IAAM,iBAAiB,CAAC,MAAc;AAClC,MAAI,EAAE,SAAS,IAAI,KAAK,EAAE,SAAS,GAAG,GAAG;AACrC,WAAO,EAAE,MAAM,GAAG,EAAE,YAAY,GAAG,CAAC;AAAA,EACxC;AACA,SAAO;AACX;AAEA,IAAM,sBAAsB,CAAC,MAAsB;AAC/C,MAAI,EAAE,WAAW,GAAG,GAAG;AACnB,WAAO,oBAAoB,EAAE,MAAM,CAAC,CAAC;AAAA,EACzC;AACA,SAAO;AACX;AAEA,IAAM,sCAAsC,CAAC,MAAc;AACvD,MAAI,KAAK;AACT,SAAO,EAAE,QAAQ,IAAI,MAAM;AAC/B;AAEA,IAAM,qBAAqB,CAAC,MAAc;AACtC,SAAO,EAAE,WAAW,KAAK,EAAE;AAC/B;AAEA,IAAM,QAAmC;AAAA,EACrC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;AAEA,IAAM,wBAAwB,CAAC,QAAgB;AAC3C,SAAO,IAAI,QAAQ,GAAG;AAC1B;AAEO,IAAM,qBAAqB,CAAC,MAAc;AAC7C,MAAI,MAAM;AACV,aAAW,KAAK,OAAO;AACnB,UAAM,EAAE,GAAG;AAAA,EACf;AACA,SAAO;AACX;AAGO,IAAM,qBAAqB,CAAC,MAAkC;AACjE,MAAI,KAAK;AACT,MAAI,IAAI,GAAG,KAAK,CAAC;AACjB,SAAO,GAAG,QAAQ;AACtB;AAEO,IAAM,qBAAqB,CAAC,eAAyC;AACxE,MAAI,SAAS,WAAW,MAAM,IAAI,EAAE,OAAO,CAAC,MAAM,EAAE,KAAK,EAAE,WAAW,GAAG,CAAC;AAC1E,MAAI,QAA0B,OAAO,IAAI,CAAC,MAAM;AAC5C,QAAI,KAAK,mBAAmB,CAAC;AAC7B,WAAO;AAAA,MACH,OAAO,mBAAmB,CAAC;AAAA,MAC3B,OAAO,sBAAsB,CAAC;AAAA,MAC9B,KAAK,KAAK,IAAI,EAAE,KAAK;AAAA,IACzB;AAAA,EACJ,CAAC;AACD,SAAO;AACX","sourcesContent":["import { ContentHeading } from \"../../types/mdxStructure.js\";\n\nconst removeIdSyntax = (s: string) => {\n    if (s.includes(\"[#\") && s.endsWith(\"]\")) {\n        return s.slice(0, s.lastIndexOf(\"[\"));\n    }\n    return s;\n};\n\nconst removeLeadingPounds = (s: string): string => {\n    if (s.startsWith(\"#\")) {\n        return removeLeadingPounds(s.slice(1));\n    }\n    return s;\n};\n\nconst temporaryReplaceLogoAsTextWithEntry = (s: string) => {\n    let re = /\\<LogoAsText[^/]*\\/\\>/gm;\n    return s.replace(re, \"ULLD\");\n};\n\nconst replaceCodeStrings = (s: string) => {\n    return s.replaceAll(\"`\", \"\");\n};\n\nconst funcs: ((s: string) => string)[] = [\n    removeLeadingPounds,\n    removeIdSyntax,\n    temporaryReplaceLogoAsTextWithEntry,\n    replaceCodeStrings,\n];\n\nconst getMarkdownTitleDepth = (val: string) => {\n    return val.indexOf(\" \") as ContentHeading[\"depth\"];\n};\n\nexport const parseMarkdownTitle = (s: string) => {\n    let val = s;\n    for (const f of funcs) {\n        val = f(val);\n    }\n    return val;\n};\n\n// TODO: Make this more consistent once things are building properly by tapping into the way id's are created through the remark plugin directly.\nexport const getMarkdownTitleId = (s: string): string | undefined => {\n    let re = /.*\\[\\#(?<content>[^\\]]*)\\]/gm;\n    let m = re.exec(s);\n    return m?.groups?.content;\n};\n\nexport const getContentHeadings = (rawContent: string): ContentHeading[] => {\n    let titles = rawContent.split(\"\\n\").filter((f) => f.trim().startsWith(\"#\"));\n    let items: ContentHeading[] = titles.map((t) => {\n        let id = getMarkdownTitleId(t);\n        return {\n            title: parseMarkdownTitle(t),\n            depth: getMarkdownTitleDepth(t),\n            url: id ? `#${id}` : \"\",\n        };\n    });\n    return items;\n};\n"]}