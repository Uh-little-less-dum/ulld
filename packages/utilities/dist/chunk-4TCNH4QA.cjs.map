{"version":3,"sources":["../src/additionalParsers/mdx/getContentHeadings.ts"],"names":["removeIdSyntax","s","removeLeadingPounds","temporaryReplaceLogoAsTextWithEntry","re","replaceCodeStrings","funcs","getMarkdownTitleDepth","val","parseMarkdownTitle","f","getMarkdownTitleId","getContentHeadings","rawContent","t","id"],"mappings":"AAEA,IAAMA,EAAkBC,GAChBA,EAAE,SAAS,IAAI,GAAKA,EAAE,SAAS,GAAG,EAC3BA,EAAE,MAAM,EAAGA,EAAE,YAAY,GAAG,CAAC,EAEjCA,EAGLC,EAAuBD,GACrBA,EAAE,WAAW,GAAG,EACTC,EAAoBD,EAAE,MAAM,CAAC,CAAC,EAElCA,EAGLE,EAAuCF,GAAc,CACvD,IAAIG,EAAK,0BACT,OAAOH,EAAE,QAAQG,EAAI,MAAM,CAC/B,EAEMC,EAAsBJ,GACjBA,EAAE,WAAW,IAAK,EAAE,EAGzBK,EAAmC,CACrCJ,EACAF,EACAG,EACAE,CACJ,EAEME,EAAyBC,GACpBA,EAAI,QAAQ,GAAG,EAGbC,EAAsBR,GAAc,CAC7C,IAAIO,EAAMP,EACV,QAAWS,KAAKJ,EACZE,EAAME,EAAEF,CAAG,EAEf,OAAOA,CACX,EAGaG,EAAsBV,GACtB,+BACE,KAAKA,CAAC,GACP,QAAQ,QAGTW,EAAsBC,GAClBA,EAAW,MAAM;AAAA,CAAI,EAAE,OAAQH,GAAMA,EAAE,KAAK,EAAE,WAAW,GAAG,CAAC,EACrC,IAAKI,GAAM,CAC5C,IAAIC,EAAKJ,EAAmBG,CAAC,EAC7B,MAAO,CACH,MAAOL,EAAmBK,CAAC,EAC3B,MAAOP,EAAsBO,CAAC,EAC9B,IAAKC,EAAK,IAAIA,CAAE,GAAK,EACzB,CACJ,CAAC","sourcesContent":["import { ContentHeading } from \"../../types/mdxStructure.js\";\n\nconst removeIdSyntax = (s: string) => {\n    if (s.includes(\"[#\") && s.endsWith(\"]\")) {\n        return s.slice(0, s.lastIndexOf(\"[\"));\n    }\n    return s;\n};\n\nconst removeLeadingPounds = (s: string): string => {\n    if (s.startsWith(\"#\")) {\n        return removeLeadingPounds(s.slice(1));\n    }\n    return s;\n};\n\nconst temporaryReplaceLogoAsTextWithEntry = (s: string) => {\n    let re = /\\<LogoAsText[^/]*\\/\\>/gm;\n    return s.replace(re, \"ULLD\");\n};\n\nconst replaceCodeStrings = (s: string) => {\n    return s.replaceAll(\"`\", \"\");\n};\n\nconst funcs: ((s: string) => string)[] = [\n    removeLeadingPounds,\n    removeIdSyntax,\n    temporaryReplaceLogoAsTextWithEntry,\n    replaceCodeStrings,\n];\n\nconst getMarkdownTitleDepth = (val: string) => {\n    return val.indexOf(\" \") as ContentHeading[\"depth\"];\n};\n\nexport const parseMarkdownTitle = (s: string) => {\n    let val = s;\n    for (const f of funcs) {\n        val = f(val);\n    }\n    return val;\n};\n\n// TODO: Make this more consistent once things are building properly by tapping into the way id's are created through the remark plugin directly.\nexport const getMarkdownTitleId = (s: string): string | undefined => {\n    let re = /.*\\[\\#(?<content>[^\\]]*)\\]/gm;\n    let m = re.exec(s);\n    return m?.groups?.content;\n};\n\nexport const getContentHeadings = (rawContent: string): ContentHeading[] => {\n    let titles = rawContent.split(\"\\n\").filter((f) => f.trim().startsWith(\"#\"));\n    let items: ContentHeading[] = titles.map((t) => {\n        let id = getMarkdownTitleId(t);\n        return {\n            title: parseMarkdownTitle(t),\n            depth: getMarkdownTitleDepth(t),\n            url: id ? `#${id}` : \"\",\n        };\n    });\n    return items;\n};\n"]}