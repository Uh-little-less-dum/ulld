{"version":3,"sources":["../src/classes/DateTime/main.ts"],"names":["dayjs","advancedFormat","timezone","utc","relativeTime","duration","customParseFormat","timePeriodOptions","DateTime","_DateTime","t","config","intervalSeconds","type","callback","withTime","formatStr","asValue","fromTo","dur","days","months","s","asDays","dt","f1","f2","items","getDate","start","end","returnItems","startValue","endValue","k","val","d","formatString","seconds","hr","min","sec","opt","f","_now","n","ensureDate","_default"],"mappings":"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","sourcesContent":["import dayjs, { Dayjs } from \"dayjs\";\nimport advancedFormat from \"dayjs/plugin/advancedFormat\";\nimport timezone from \"dayjs/plugin/timezone\";\nimport utc from \"dayjs/plugin/utc\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\nimport duration from \"dayjs/plugin/duration\";\nimport customParseFormat from \"dayjs/plugin/customParseFormat\";\nimport { TimeDisplayType } from \"./dateTimeUtils\";\nimport { AppConfigSchemaOutput } from \"@ulld/types\";\ndayjs.extend(customParseFormat);\ndayjs.extend(duration);\ndayjs.extend(relativeTime);\ndayjs.extend(utc);\ndayjs.extend(timezone);\ndayjs.extend(advancedFormat);\n\nexport const timePeriodOptions = [\n    \"24 hours\",\n    \"1 week\",\n    \"30 Days\",\n    \"60 Days\",\n    \"90 Days\",\n    \"6 Months\",\n    \"Previous Year\",\n    \"Year to Date\",\n    \"All Time\",\n] as const;\n\nexport type TimePeriodOption = (typeof timePeriodOptions)[number];\n\nexport class DateTime {\n    t: Date;\n    dayjs: Dayjs;\n    withoutSuffix: boolean = false;\n    timezone: string;\n    flat: boolean = false;\n    constructor(\n        t: Date | string,\n        public config?: AppConfigSchemaOutput,\n    ) {\n        this.timezone = config?.dateHandling.defaultTimeZone || this.getTimezone();\n        if (this.timezone) {\n            dayjs.tz.setDefault(this.timezone);\n        }\n        this.dayjs = t instanceof Date ? dayjs(t) : dayjs(t).tz(this.timezone);\n        this.t = this.dayjs.toDate();\n    }\n\n    private getTimezone() {\n        return (\n            Intl.DateTimeFormat().resolvedOptions().timeZone || \"America/Chicago\"\n        );\n    }\n\n    djs(t: Date | string | Dayjs) {\n        return dayjs.tz(t, this.timezone);\n    }\n\n    updateOnInterval(\n        intervalSeconds: number,\n        type: TimeDisplayType,\n        callback: (s: string) => void,\n    ) {\n        let interval = setInterval(() => {\n            callback(this.relativeTime(type));\n        }, intervalSeconds * 1000);\n        return interval;\n    }\n\n    formatDate(withTime?: boolean) {\n        const formatStr = withTime ? \"MMM Do YYYY [at] h:mm a\" : \"MMM Do YYYY\";\n        return this.dayjs.local().format(formatStr);\n    }\n\n    now(asValue: boolean = false) {\n        return asValue ? new Date().valueOf() : new Date();\n    }\n\n    secondDifference(fromTo: Date = new Date()) {\n        return this.dayjs.local().diff(fromTo, \"seconds\");\n    }\n\n    diffAsDuration(t: Date = new Date()) {\n        return dayjs.duration(this.secondDifference(t), \"seconds\");\n    }\n\n    formatTimeDiff(duration?: duration.Duration, t: Date = new Date()) {\n        let dur = duration || this.diffAsDuration(t);\n        return {\n            years: dur.years(),\n            days: dur.days(),\n            asDays: dur.asDays(),\n            months: dur.months(),\n            hours: dur.hours(),\n            minutes: dur.minutes(),\n            seconds: dur.seconds(),\n        };\n    }\n\n    private getDiffBaseString(duration: duration.Duration) {\n        let days = duration.days();\n        let months = duration.months();\n        let s = \"\";\n        if (this.flat) {\n            let asDays = Math.floor(duration.asDays());\n            if (asDays > 0) s += `[${asDays} ${asDays === 1 ? \"day\" : \"days\"} ]`;\n        } else {\n            if (months > 0) s += months === 1 ? \"M [month] \" : \"M [months] \";\n            if (days > 0) s += days === 1 ? \"D [day] \" : \"D [days] \";\n        }\n        return s;\n    }\n\n    private relativeTimeAnalog() {\n        let duration = this.diffAsDuration();\n        let s = this.getDiffBaseString(duration);\n        return duration.format(`${s} HH:mm:ss`);\n    }\n\n    private relativeTimeDescriptive() {\n        let duration = this.diffAsDuration();\n        let s = this.getDiffBaseString(duration);\n        let dt = this.formatTimeDiff(duration);\n        if (dt.hours) s += dt.hours === 1 ? \"H [hour] \" : \"H [hours] \";\n        if (dt.minutes) s += dt.minutes === 1 ? \"m [minute] \" : \"m [minutes] \";\n        if (dt.seconds) s += dt.seconds === 1 ? \"ss [second] \" : \"ss [seconds] \";\n        return duration.format(s.trim());\n    }\n\n    private relativeTimeSummarized() {\n        return this.dayjs.local().fromNow(this.withoutSuffix);\n    }\n\n    replaceExtraNegatives(t: string) {\n        let f1 = t.indexOf(\"-\");\n        let f2 = t.lastIndexOf(\"-\");\n        if (f1 < 0 || f1 === f2) {\n            return t;\n        }\n        return `${t.slice(0, f1 + 1)}${t.slice(f1, t.length).replaceAll(\"-\", \"\")}`;\n    }\n\n    relativeTime(type: \"descriptive\" | \"analog\" | \"summarized\") {\n        if (type === \"analog\")\n            return this.replaceExtraNegatives(this.relativeTimeAnalog());\n        if (type === \"summarized\")\n            return this.replaceExtraNegatives(this.relativeTimeSummarized());\n        if (type === \"descriptive\")\n            return this.replaceExtraNegatives(this.relativeTimeDescriptive());\n        return \"\";\n    }\n\n    startOfDay() {\n        return dayjs().startOf(\"day\");\n    }\n\n    dayOfWeek() {\n        return dayjs().get(\"day\");\n    }\n\n    static filterByDateRange<T extends unknown>(\n        items: T[],\n        getDate: (item: T) => Date,\n        start: Date | string,\n        end?: Date | string,\n    ) {\n        let returnItems: T[] = [];\n        let startValue = (\n            typeof start === \"string\" ? new Date(start) : start\n        ).valueOf();\n        let endValue = (\n            typeof end === \"undefined\"\n                ? new Date()\n                : typeof end === \"string\"\n                    ? new Date(end)\n                    : end\n        ).valueOf();\n        for (const k of items) {\n            let val = getDate(k).valueOf();\n            if (val >= startValue && val <= endValue) {\n                returnItems.push(k);\n            }\n        }\n        return returnItems;\n    }\n    static formatDate(d: Date | string | number, withTime?: boolean, formatString?: string) {\n        const formatStr = formatString ? formatString : withTime ? \"MMM Do YYYY [at] h:mm a\" : \"MMM Do YYYY\";\n        return dayjs(d).format(formatStr);\n    }\n    static formattedQuantityToString(d: {\n        hours: number;\n        minutes: number;\n        seconds: number;\n    }) {\n        let s = \"\";\n        if (d.hours > 0) {\n            s += `${d.hours}:`;\n        }\n        if (d.minutes > 0) {\n            s += `${d.minutes}:`;\n        }\n        s += `${d.seconds > 0 ? d.seconds : \"00\"}`;\n        return s;\n    }\n    static formattedQuantityToDescriptiveString(d: {\n        hours: number;\n        minutes: number;\n        seconds: number;\n    }) {\n        let s = \"\";\n        if (d.hours > 0) {\n            s += `${d.hours} ${d.hours === 1 ? \"hour\" : \"hours\"} `;\n        }\n        if (d.minutes > 0) {\n            s += `${d.minutes} ${d.minutes === 1 ? \"minute\" : \"minutes\"} `;\n        }\n        if (d.seconds > 0) {\n            s += `${d.seconds} ${d.seconds === 1 ? \"second\" : \"seconds\"} `;\n        }\n        return s;\n    }\n    static formatTimeQuantity(seconds: number) {\n        let hr = Math.floor(seconds / 3600);\n        let min = Math.floor((seconds - hr * 3600) / 60);\n        let sec = Math.floor(seconds - (hr * 3600 + min * 60));\n        return {\n            hours: hr,\n            minutes: min,\n            seconds: sec,\n        };\n    }\n    static getTimePeriod(opt: TimePeriodOption) {\n        let timePeriodRecord: Record<\n            TimePeriodOption,\n            number | ((d: Date) => number)\n        > = {\n            \"24 hours\": 86400000,\n            \"1 week\": 604800000,\n            \"30 Days\": 2592000000, // 60 * 60 * 24 * 30 * 1000\n            \"60 Days\": 5184000000,\n            \"90 Days\": 7776000000,\n            \"Previous Year\": 31536000000, // 60 * 60 * 24 * 365 * 1000\n            \"6 Months\": 15768000000,\n            \"Year to Date\": (d) =>\n                d.valueOf() - new Date(`1/1/${d.getFullYear()}`).valueOf(),\n            \"All Time\": (d) => d.valueOf() - new Date(`1/1/1970`).valueOf(),\n        };\n        let f = timePeriodRecord[opt];\n        let _now = new Date();\n        if (typeof f === \"function\") {\n            return new Date(_now.valueOf() - f(_now));\n        } else {\n            return new Date(_now.valueOf() - f);\n        }\n    }\n    static thirtyDaysAgo() {\n        let n = 2592000000; // 60 * 60 * 24 * 30 * 1000\n        return new Date(new Date().valueOf() - n);\n    }\n    static consistentlyFormatDay(val: Date) {\n        return `${val.getMonth() + 1}/${val.getDate()}/${val.getFullYear()}`;\n    }\n    static groupByDay<J extends unknown>(\n        items: J[],\n        getDate: ((item: J) => Date | null),\n    ) {\n        let days: Record<string, J[]> = {};\n        for (const k of items) {\n            let d = getDate(k);\n            if (d) {\n                let s = DateTime.consistentlyFormatDay(d);\n                if (!(s in days)) {\n                    days[s] = [];\n                }\n                days[s].push(k);\n            }\n        }\n        return days;\n    }\n    static groupByHour<J extends unknown>(\n        items: J[],\n        getDate: ((item: J) => Date | null),\n    ) {\n        let days: Record<string, J[]> = {};\n        for (const k of items) {\n            let d = getDate(k);\n            if (d) {\n                let v = dayjs(d)\n                let s = v.format(\"HH\")\n                if (!(s in days)) {\n                    days[s] = [];\n                }\n                days[s].push(k);\n            }\n        }\n        return days;\n    }\n}\n\nexport const ensureDate = <T extends Date | null | undefined>(\n    d: Date | string | undefined | null,\n    _default: \"item\" | \"null\" | \"now\" | \"undefined\" = \"null\",\n) => {\n    return (\n        d instanceof Date\n            ? d\n            : typeof d === \"string\"\n                ? new Date(d)\n                : _default === \"item\"\n                    ? d\n                    : _default === \"now\"\n                        ? new Date()\n                        : _default === \"undefined\"\n                            ? undefined\n                            : null\n    ) as Date | T;\n};\n"]}