{"version":3,"sources":["../../src/navigation/getTocFromContent.ts"],"names":[],"mappings":";;;;;;AAAA,SAAS,0BAAuC;AAOzC,IAAM,qBAAqB,CAC9B,MAAqB,CAAC,GACtB,YACC;AACD,MAAI,SAAS,QAAQ,MAAM,IAAI,EAAE,OAAO,CAAC,MAAM,EAAE,KAAK,EAAE,WAAW,GAAG,CAAC;AACvE,MAAI,IAAoB,CAAC;AACzB,MAAI,IAAI,WAAW,OAAO,QAAQ;AAC9B,YAAQ;AAAA,MACJ,uDAAuD,IAAI,MAAM,2BAA2B,OAAO,MAAM;AAAA,IAC7G;AAAA,EACJ;AACA,MAAI,QAAQ,CAAC,OAAO,MAAM;AACtB,UAAM,WAAW,OAAO,CAAC,EAAE,KAAK;AAChC,MAAE,KAAK;AAAA,MACH,GAAG;AAAA,MACH,OAAO,mBAAmB,QAAQ;AAAA;AAAA;AAAA;AAAA,IAItC,CAAC;AAAA,EACL,CAAC;AACD,SAAO;AACX;AAMO,IAAM,oBAAoB,OAAO,YAAoB;AACxD,MAAI,WAAW,MAAM,mBAAmB,OAAO;AAC/C,SAAO;AAAA,IACH;AAAA,IACA;AAAA,EACJ;AACJ","sourcesContent":["import { getTableOfContents, TOCItemType } from 'fumadocs-core/server';\nimport { parseMarkdownTitle } from '../additionalParsers/mdx/getContentHeadings.js';\n\n\nexport type { TOCItemType }\n\n\nexport const getLatexTocEntries = (\n    toc: TOCItemType[] = [],\n    content: string,\n) => { \n    let titles = content.split(\"\\n\").filter((f) => f.trim().startsWith(\"#\"));\n    let t: TOCItemType[]  = [];\n    if (toc.length !== titles.length) {\n        console.error(\n            `Found different lengths for the toc. Fumadocs found ${toc.length} entries, and you found ${titles.length}.`,\n        );\n    }\n    toc.forEach((entry, i) => {\n        const newTitle = titles[i].trim();\n        t.push({\n            ...entry,\n            title: parseMarkdownTitle(newTitle),\n            // Removed this. No longer checking for validity and relying only on index. THe validity check was unreliable previously, but if this causes new issues revisit this.\n            // let s = Array(entry.depth).fill(\"#\").join(\"\");\n            // title: titles[i].startsWith(s) ? parseTitle(newTitle) : entry.title,\n        });\n    });\n    return t;\n};\n\n\n\n\n\nexport const getTocFromContent = async (content: string) => {\n    let tocItems = await getTableOfContents(content)\n    return getLatexTocEntries(\n        tocItems,\n        content\n    )\n}\n"]}