{"version":3,"sources":["../src/parsingUtilities/mdx/getNoteTypeDataFromPath.ts"],"names":["sortNoteTypeDataForParsing","appConfig","a","b","s","getNoteTypeDataFromPath","rootRelativePath","preSortedNoteTypes","f"],"mappings":"AAEO,IAAMA,EACTC,GAEOA,EAAU,UACZ,KAAK,CAACC,EAAGC,IAAMA,EAAE,GAAG,OAASD,EAAE,GAAG,MAAM,EACxC,IAAKE,IAAO,CACT,GAAGA,EACH,GAAIA,EAAE,GAAG,WAAW,GAAG,EAAIA,EAAE,GAAG,MAAM,CAAC,EAAIA,EAAE,EACjD,EAAE,EAGGC,EAA0B,CACnCC,EACAL,EACAM,KAEaA,GAAsBP,EAA2BC,CAAS,GAC9C,KAAMO,GAAMF,EAAiB,SAASE,EAAE,EAAE,CAAC","sourcesContent":["import { AppConfigSchemaOutput } from \"@ulld/types\";\n\nexport const sortNoteTypeDataForParsing = (\n    appConfig: AppConfigSchemaOutput,\n) => {\n    return appConfig.noteTypes\n        .sort((a, b) => b.fs.length - a.fs.length)\n        .map((s) => ({\n            ...s,\n            fs: s.fs.startsWith(\"/\") ? s.fs.slice(1) : s.fs,\n        }));\n};\n\nexport const getNoteTypeDataFromPath = (\n    rootRelativePath: string,\n    appConfig: AppConfigSchemaOutput,\n    preSortedNoteTypes?: ReturnType<typeof sortNoteTypeDataForParsing>,\n): AppConfigSchemaOutput[\"noteTypes\"][number] | undefined => {\n    let sorted = preSortedNoteTypes || sortNoteTypeDataForParsing(appConfig);\n    let docTypeData = sorted.find((f) => rootRelativePath.includes(f.fs));\n    return docTypeData;\n};\n"]}