{"version":3,"sources":["../src/internalDevTypes/helpers.ts"],"names":["getCurrentPackageVersions","data","k","buildStaticData_default","getPackageDataOnly","x","getInternalPackageRecord","getAppDataOnly","getInternalPackageNames","getInternalPackagesToTranspile","getInternalAppNames","getAllInternalNames","n"],"mappings":"yCAIO,IAAMA,EAA4B,IAGpC,CACD,IAAMC,EAAwC,CAAC,EAI/C,QAAWC,KAAMC,EACZ,oBACDF,EAAKC,EAAE,IAAI,EAAIA,EAAE,eAErB,OAAOD,CACX,EAGaG,EAAqB,IACtBD,EAAwC,oBAAoB,OAC/DE,GAAMA,EAAE,OAAS,SACtB,EAGSC,EAA2B,IAGnC,CACD,IAAML,EAAO,CAAC,EACd,QAAWC,KAAMC,EACZ,oBACDF,EAAKC,EAAE,IAAI,EAAIA,EAGnB,OAAOD,CACX,EAGaM,EAAiB,IAClBJ,EAAwC,oBAAoB,OAC/DE,GAAMA,EAAE,OAAS,KACtB,EAGSG,EAA0B,IAC5BJ,EAAmB,EAAE,IAAKC,GAAMA,EAAE,IAAI,EAGpCI,EAAiC,IACnCL,EAAmB,EACrB,OAAQC,GAAM,CAACA,EAAE,YAAY,EAC7B,IAAKA,GAAMA,EAAE,IAAI,EAGbK,EAAsB,IACxBH,EAAe,EAAE,IAAKF,GAAMA,EAAE,IAAI,EAGhCM,EAAsB,IACxBR,EAAkB,oBAAoB,IACxCS,GAAMA,EAAE,IACb","sourcesContent":["import type { InternalAppName } from \"@ulld/types\";\nimport internalBuildData from \"../utils/buildStaticData.json\";\nimport type { InternalBuildData, InternalPackageItem } from \"./main\";\n\nexport const getCurrentPackageVersions = (): Record<\n    InternalAppName,\n    string\n> => {\n    const data: Record<InternalAppName, string> = {} as Record<\n        InternalAppName,\n        string\n    >;\n    for (const k of (internalBuildData as InternalBuildData)\n        .internalPackageData) {\n        data[k.name] = k.currentVersion;\n    }\n    return data;\n};\n\n/** Returns only package data in the packages directory, not the apps directory. */\nexport const getPackageDataOnly = (): InternalPackageItem[] => {\n    return (internalBuildData as InternalBuildData).internalPackageData.filter(\n        (x) => x.type === \"package\",\n    );\n};\n\nexport const getInternalPackageRecord = (): Record<\n    InternalAppName,\n    InternalPackageItem\n> => {\n    const data = {} as Record<InternalAppName, InternalPackageItem>;\n    for (const k of (internalBuildData as InternalBuildData)\n        .internalPackageData) {\n        data[k.name] = k;\n    }\n\n    return data;\n};\n\n/** Returns only the package data in the app directory, not the packages directory */\nexport const getAppDataOnly = (): InternalPackageItem[] => {\n    return (internalBuildData as InternalBuildData).internalPackageData.filter(\n        (x) => x.type === \"app\",\n    );\n};\n\nexport const getInternalPackageNames = (): InternalAppName[] => {\n    return getPackageDataOnly().map((x) => x.name);\n};\n\nexport const getInternalPackagesToTranspile = (): InternalAppName[] => {\n    return getPackageDataOnly()\n        .filter((x) => !x.isTranspiled)\n        .map((x) => x.name);\n};\n\nexport const getInternalAppNames = (): InternalAppName[] => {\n    return getAppDataOnly().map((x) => x.name);\n};\n\nexport const getAllInternalNames = (): InternalAppName[] => {\n    return internalBuildData.internalPackageData.map(\n        (n) => n.name as InternalAppName,\n    );\n};\n"]}