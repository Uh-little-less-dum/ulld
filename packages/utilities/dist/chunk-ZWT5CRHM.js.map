{"version":3,"sources":["../src/utils/glob/getGlobServerSide.ts"],"names":[],"mappings":";;;;;;;;AACA,SAAS,YAAY;AAErB,OAAO,QAAQ;AACf,OAAO,UAAU;AAMV,IAAM,oBAAoB,OAC7B,OACA,cACC;AACD,MAAI,QAAQ,wBAAwB,MAAM,KAAK;AAC/C,MAAI,MAAO,MAAM;AAAA,IACb,MAAM;AAAA,IACN;AAAA,MACI,KAAK,UAAU;AAAA,MACf,QAAQ,MAAM,UAAU;AAAA,MACxB,OAAO,MAAM,SAAS;AAAA,IAC1B;AAAA,EACJ;AACA,MAAI,iBAAiB,MAAM,aAAa;AACxC,MAAI,gBAAgB;AAChB,UAAM,IAAI,IAAI,CAAC,MAAM,KAAK,KAAK,UAAU,QAAQ,CAAC,CAAC;AAAA,EACvD,OAAO;AACH,UAAM,IAAI,IAAI,CAAC,MAAM,iBAAiB,CAAC,CAAC;AAAA,EAC5C;AACA,MAAI,MAAM,SAAS,QAAQ;AACvB,UAAM,IAAI;AAAA,MAAO,CAAC,MACd,GACK,SAAS,iBAAiB,IAAI,KAAK,KAAK,UAAU,QAAQ,CAAC,CAAC,EAC5D,YAAY;AAAA,IACrB;AAAA,EACJ;AACA,SAAO;AACX","sourcesContent":["import { AppConfigSchemaOutput } from \"@ulld/types\";\nimport { glob } from \"glob\";\nimport { z } from \"zod\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { filePathGlobPropsSchema } from \"../../schemas/filePath/filePathInput.js\";\nimport { withForwardSlash } from \"../fsUtils.js\";\n\nexport type GlobInput = z.input<typeof filePathGlobPropsSchema>;\n\nexport const getGlobServerSide = async (\n    props: GlobInput,\n    appConfig: AppConfigSchemaOutput,\n) => {\n    let input = filePathGlobPropsSchema.parse(props);\n    let res = (await glob(\n        input.glob,\n        {\n            cwd: appConfig.fsRoot,\n            ignore: input.ignore || undefined,\n            nodir: input.type === \"files\",\n        },\n    )) as string[];\n    let returnAbsolute = input.returnAs === \"absolute\";\n    if (returnAbsolute) {\n        res = res.map((x) => path.join(appConfig.fsRoot, x));\n    } else {\n        res = res.map((x) => withForwardSlash(x));\n    }\n    if (input.type === \"dirs\") {\n        res = res.filter((x) =>\n            fs\n                .statSync(returnAbsolute ? x : path.join(appConfig.fsRoot, x))\n                .isDirectory(),\n        );\n    }\n    return res;\n};\n"]}