{"version":3,"sources":["../src/developmentUtilities/readDevelopmentAppConfig.ts"],"names":["fs","path","readDevelopmentAppConfig","dirName","_path","_envPath"],"mappings":"AAAA,OAAOA,MAAQ,KACf,OAAOC,MAAU,OAGV,IAAMC,EAA4BC,GAAuD,CAC5F,IAAIC,EAAQH,EAAK,KAAKE,EAAS,qBAAqB,EACpD,GAAG,CAACH,EAAG,WAAWI,CAAK,EACnB,GAAG,QAAQ,IAAI,wBAAwB,CACvC,IAAMC,EAAWJ,EAAK,KAAK,QAAQ,IAAI,wBAAyB,qBAAqB,EACjF,GAAGD,EAAG,WAAWK,CAAQ,EACrBD,EAAQC,MAER,OAER,KACI,QAGR,OAAO,KAAK,MAAML,EAAG,aAAaI,EAAO,CAAE,SAAU,OAAQ,CAAC,CAAC,CAC/D","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport type { AppConfigSchemaOutput } from \"@ulld/types\";\n\nexport const readDevelopmentAppConfig = (dirName: string): AppConfigSchemaOutput | undefined => {\n    let _path = path.join(dirName, \"appConfig.ulld.json\")\n    if(!fs.existsSync(_path)){\n        if(process.env.ULLD_ADDITIONAL_SOURCES){\n        const _envPath = path.join(process.env.ULLD_ADDITIONAL_SOURCES, \"appConfig.ulld.json\")\n            if(fs.existsSync(_envPath)){\n                _path = _envPath\n            } else {\n                return\n            }\n        } else {\n            return\n        }\n    }\n    return JSON.parse(fs.readFileSync(_path, { encoding: \"utf-8\" })) as AppConfigSchemaOutput\n    }\n"]}