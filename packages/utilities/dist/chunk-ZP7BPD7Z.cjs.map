{"version":3,"sources":["../src/utils/replaceContentByRegexMatch.ts"],"names":["replaceContentByMatch","content","match","group","newContent","matchValue"],"mappings":"AAEO,IAAMA,EAAwB,CAACC,EAAiBC,EAAyBC,EAAeC,IAA+D,CAC1J,GAAG,CAACF,EAAM,OACN,eAAQ,IAAI,kCAAkCA,CAAK,EAAE,EAC9CD,EAEX,IAAII,EAAaH,EAAM,SAASC,CAAK,EAErC,GADA,QAAQ,IAAI,UAAWD,CAAK,EACzB,CAACG,EACA,MAAM,IAAI,MAAM,yEAAyEF,CAAK,qBAAqB,OAAO,KAAKD,EAAM,MAAM,EAAE,KAAK,IAAI,CAAC,EAAE,EAI7J,OADQD,EAAQ,WAAWC,EAAM,CAAC,EAAG,OAAOE,GAAe,SAAWA,EAAaA,EAAWC,CAAU,CAAC,CAE7G","sourcesContent":["\n\nexport const replaceContentByMatch = (content: string, match: RegExpMatchArray, group: string, newContent: string | ((matchGroupValue: string) => string)) => {\n    if(!match.groups){\n        console.log(`No groups were found for match ${match}`)\n        return content\n    }\n    let matchValue = match.groups?.[group]\n    console.log(\"match: \", match)\n    if(!matchValue){\n        throw new Error(`An invalid match group was given to replaceContentByMatch. Looked for ${group} and found groups ${Object.keys(match.groups).join(\", \")}`)\n    }\n\n    let c = content.replaceAll(match[0], typeof newContent === \"string\" ? newContent : newContent(matchValue))\n    return c\n}\n"]}