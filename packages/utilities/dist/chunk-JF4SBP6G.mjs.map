{"version":3,"sources":["../src/utils/glob/getGlobServerSide.ts"],"names":["fs","path","glob","getGlobServerSide","props","appConfig","input","filePathGlobPropsSchema","res","returnAbsolute","x","withForwardSlash"],"mappings":"kFAAA,OAAOA,MAAQ,KACf,OAAOC,MAAU,OAEjB,OAAS,QAAAC,MAAY,OAOd,IAAMC,EAAoB,MAC7BC,EACAC,IACoB,CACpB,IAAMC,EAAQC,EAAwB,MAAMH,CAAK,EAC7CI,EAAO,MAAMN,EACbI,EAAM,KACN,CACI,IAAKD,EAAU,OACf,OAAQC,EAAM,QAAU,OACxB,MAAOA,EAAM,OAAS,OAC1B,CACJ,EACMG,EAAiBH,EAAM,WAAa,WAC1C,OAAIG,EACAD,EAAMA,EAAI,IAAKE,GAAMT,EAAK,KAAKI,EAAU,OAAQK,CAAC,CAAC,EAEnDF,EAAMA,EAAI,IAAKE,GAAMC,EAAiBD,CAAC,CAAC,EAExCJ,EAAM,OAAS,SACfE,EAAMA,EAAI,OAAQE,GACdV,EACK,SAASS,EAAiBC,EAAIT,EAAK,KAAKI,EAAU,OAAQK,CAAC,CAAC,EAC5D,YAAY,CACrB,GAEGF,CACX","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport type { AppConfigSchemaOutput } from \"@ulld/types\";\nimport { glob } from \"glob\";\nimport type { z } from \"zod\";\nimport { filePathGlobPropsSchema } from \"../../schemas/filePath/filePathInput.js\";\nimport { withForwardSlash } from \"../fsUtils.js\";\n\nexport type GlobInput = z.input<typeof filePathGlobPropsSchema>;\n\nexport const getGlobServerSide = async (\n    props: GlobInput,\n    appConfig: AppConfigSchemaOutput,\n): Promise<string[]> => {\n    const input = filePathGlobPropsSchema.parse(props);\n    let res = (await glob(\n        input.glob,\n        {\n            cwd: appConfig.fsRoot,\n            ignore: input.ignore || undefined,\n            nodir: input.type === \"files\",\n        },\n    ));\n    const returnAbsolute = input.returnAs === \"absolute\";\n    if (returnAbsolute) {\n        res = res.map((x) => path.join(appConfig.fsRoot, x));\n    } else {\n        res = res.map((x) => withForwardSlash(x));\n    }\n    if (input.type === \"dirs\") {\n        res = res.filter((x) =>\n            fs\n                .statSync(returnAbsolute ? x : path.join(appConfig.fsRoot, x))\n                .isDirectory(),\n        );\n    }\n    return res;\n};\n"]}