{"version":3,"sources":["../src/developmentUtilities/developmentOutput/main.ts"],"names":["DevelopmentOutput","DevelopmentTypescriptOutputs","props","items","data","item","functionPlacementMap","outputToFile","inputs","res"],"mappings":"kFASO,IAAMA,EAAN,cAAgCC,CAA6B,CAEhE,YAAYC,EAA2C,CACnD,MAAMA,CAAK,CACf,CAEA,OAAc,CACV,KAAK,eAAiB,EAC1B,CAEA,mBAAmBC,EAAqE,CACpF,IAAMC,EAAgD,CAClD,OAAQ,CAAC,EACT,KAAM,CAAC,EACP,OAAQ,CAAC,EACT,iBAAkB,CAAC,CACvB,EACA,QAAWC,KAAQF,EACZG,EAAqB,OAAO,SAASD,EAAK,GAAG,EAC5CD,EAAK,OAAO,KAAKC,CAAI,EACfC,EAAqB,OAAO,SAASD,EAAK,GAAG,EACnED,EAAK,OAAO,KAAKC,CAAI,EACEC,EAAqB,iBAAiB,SAASD,EAAK,GAAG,EAC9DD,EAAK,iBAAiB,KAAKC,CAAI,EAE/BD,EAAK,KAAK,KAAKC,CAAI,EAG3B,OAAOD,CACX,CAEA,eACID,EACAI,EACM,CACN,IAAMC,EAAS,KAAK,mBAAmBL,CAAK,EAC5C,QAAWE,KAAQG,EAAO,KAAM,CAE5B,IAAMC,EAAM,KAAKJ,EAAK,GAAG,EAAEA,EAAK,KAAK,EACrC,KAAK,gBAAkB;AAAA;AAAA,EAAOI,CAAG,EACrC,CACA,QAAWJ,KAAQG,EAAO,OAAQ,CAE9B,IAAMC,EAAM,KAAKJ,EAAK,GAAG,EAAEA,EAAK,KAAK,EACrC,KAAK,eAAiB,GAAGI,CAAG;AAAA,EAAK,KAAK,cAAc,EACxD,CACA,QAAWJ,KAAQG,EAAO,OAAQ,CAE9B,IAAMC,EAAM,KAAKJ,EAAK,GAAG,EAAEA,EAAK,KAAK,EACrC,KAAK,gBAAkB;AAAA;AAAA,EAAOI,CAAG,EACrC,CACA,QAAWJ,KAAQG,EAAO,iBAAkB,CAExC,IAAMC,EAAM,KAAKJ,EAAK,GAAG,EAAEA,EAAK,KAAK,EACrC,KAAK,eAAiB,GAAGI,CAAG;AAAA;AAAA,EAAO,KAAK,cAAc,EAC1D,CACA,YAAK,aAAa,KAAK,eAAgBF,CAAY,EAC5C,KAAK,cAChB,CACJ","sourcesContent":["import type {\n    DevelopmentOutputConstructorProps,\n    GenFileContentItem,\n    OutputToFileOpts,\n    SeparatedInputTypes,\n} from \"./types\";\nimport { DevelopmentTypescriptOutputs } from \"./typescriptOutputs\";\nimport { functionPlacementMap } from \"./staticData\";\n\nexport class DevelopmentOutput extends DevelopmentTypescriptOutputs {\n\n    constructor(props?: DevelopmentOutputConstructorProps) { \n        super(props)\n    }\n\n    clear(): void {\n        this.initialContent = \"\"\n    }\n\n    getSeperatedInputs(items: GenFileContentItem[]): SeparatedInputTypes<GenFileContentItem>{\n        const data: SeparatedInputTypes<GenFileContentItem> = {\n            prefix: [],\n            body: [],\n            suffix: [],\n            locationComments: []\n        }\n        for (const item of items) {\n            if(functionPlacementMap.prefix.includes(item.fnc)){\n                data.prefix.push(item)\n            } else if(functionPlacementMap.suffix.includes(item.fnc)){\ndata.suffix.push(item)\n            } else if (functionPlacementMap.locationComments.includes(item.fnc)) {\n                data.locationComments.push(item)\n            } else {\n                data.body.push(item)\n            }\n        }\n        return data\n    }\n\n    genFileContent(\n        items: GenFileContentItem[],\n        outputToFile?: OutputToFileOpts,\n    ): string {\n        const inputs = this.getSeperatedInputs(items)\n        for (const item of inputs.body) {\n            /* @ts-expect-error -- Half assing the types here, as this is only used during development. */\n            const res = this[item.fnc](item.props);\n            this.initialContent += `\\n\\n${res}`;\n        }\n        for (const item of inputs.prefix) {\n            /* @ts-expect-error -- Half assing the types here, as this is only used during development. */\n            const res = this[item.fnc](item.props);\n            this.initialContent = `${res}\\n${this.initialContent}`;\n        }\n        for (const item of inputs.suffix) {\n            /* @ts-expect-error -- Half assing the types here, as this is only used during development. */\n            const res = this[item.fnc](item.props);\n            this.initialContent += `\\n\\n${res}`;\n        }\n        for (const item of inputs.locationComments) {\n            /* @ts-expect-error -- Half assing the types here, as this is only used during development. */\n            const res = this[item.fnc](item.props);\n            this.initialContent = `${res}\\n\\n${this.initialContent}`;\n        }\n        this.outputToFile(this.initialContent, outputToFile);\n        return this.initialContent;\n    }\n}\n"]}