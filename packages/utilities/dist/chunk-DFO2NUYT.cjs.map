{"version":3,"sources":["../src/__scripts__/generatePlotThemeColors/handler.ts"],"names":["path","tinyColor","UlldThemeColorGenerator","_UlldThemeColorGenerator","primaryColor","colorFormat","s","color","colors","c","n","slices","complementColor","theme","root","colorMapPath","f","JsonFile","data"],"mappings":"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","sourcesContent":["import { JsonFile } from \"../../classes/file/jsonFile\";\nimport { UlldThemeColorSchema, AvailableColorStringFormats, UlldColorTheme, UlldThemeColorData } from \"../../types/colors\";\nimport path from 'path'\nimport tinyColor from \"tinycolor2\"\n\ntype TinyColor = ReturnType<typeof tinyColor>\n\nexport class UlldThemeColorGenerator {\n    data: UlldThemeColorSchema\n    primary: {\n        light: TinyColor,\n        dark: ReturnType<typeof tinyColor>,\n    }\n    constructor(primaryColor: string | {light: string, dark: string}, public colorFormat: AvailableColorStringFormats = \"hex\") { \n        this.primary = {\n        light: tinyColor(typeof primaryColor === \"string\" ? primaryColor : primaryColor.light),\n        dark: tinyColor(typeof primaryColor === \"string\" ? primaryColor : primaryColor.dark),\n        }\n        this.data = this.getThemeColorData()\n    }\n\n    formatHslString(s: string) {\n        return s\n            .replace(\"hsl(\", \"\")\n            .replace(\")\", \"\")\n            .split(\",\")\n            .map((s) => s.trim())\n            .join(\" \");\n    }\n    toColorFormatString(color: TinyColor): string{\n        if(this.colorFormat === \"hex\"){\n            return color.toHexString()\n        }\n        if(this.colorFormat === \"hsl\"){\n            return color.toHslString()\n        }\n        if(this.colorFormat === \"hsv\"){\n            return color.toHsvString()\n        }\n        if(this.colorFormat === \"rgb\"){\n            return color.toRgbString()\n        }\n        return color.toHexString()\n    }\n    formatColorArray(colors: TinyColor[]){\n        return colors.map((c) => this.toColorFormatString(c))\n    }\n    getAnalogousColors(color: TinyColor, n: number = 10, slices: number = 30) {\n        return color.analogous(n, slices)\n    }\n\n    getMonochromaticColors(color: TinyColor, n: number = 10) {\n        return color.monochromatic(n)\n    }\n    getSplitComplement(color: TinyColor){\n        return color.splitcomplement().map((c) => this.formatColorArray(this.getMonochromaticColors(c)))\n    }\n    getTriad(color: TinyColor){\n        return color.triad().map((c) => this.formatColorArray(this.getMonochromaticColors(c)))\n    }\n\n    getTetrad(color: TinyColor){\n        return color.tetrad().map((c) => this.formatColorArray(this.getMonochromaticColors(c)))\n    }\n    getComplement(color: TinyColor){\n        const complementColor = color.complement()\n        return {\n            complementColor: this.toColorFormatString(complementColor) as string,\n            complement: this.formatColorArray(this.getMonochromaticColors(complementColor))\n        } as Pick<UlldThemeColorData, \"complementColor\" | \"complement\">\n    }\n    getThemeColorData():UlldThemeColorSchema{\n         let d: UlldThemeColorSchema = {\n            light: {\n                analogous: this.formatColorArray(this.getAnalogousColors(this.primary.light)) as UlldThemeColorData[\"analogous\"],\n                monochromatic: this.formatColorArray(this.getMonochromaticColors(this.primary.light)) as UlldThemeColorData[\"monochromatic\"],\n                splitComplement: this.getSplitComplement(this.primary.light) as UlldThemeColorData[\"splitComplement\"], \n                triad: this.getSplitComplement(this.primary.light) as UlldThemeColorData[\"triad\"], \n                tetrad: this.getTetrad(this.primary.light) as UlldThemeColorData[\"tetrad\"], \n                ...this.getComplement(this.primary.light)\n            },\n            dark: {\n                analogous: this.formatColorArray(this.getAnalogousColors(this.primary.dark)) as UlldThemeColorData[\"analogous\"],\n                monochromatic: this.formatColorArray(this.getMonochromaticColors(this.primary.dark)) as UlldThemeColorData[\"monochromatic\"],\n                splitComplement: this.getSplitComplement(this.primary.dark) as UlldThemeColorData[\"splitComplement\"], \n                triad: this.getSplitComplement(this.primary.dark) as UlldThemeColorData[\"triad\"], \n                tetrad: this.getTetrad(this.primary.dark) as UlldThemeColorData[\"tetrad\"], \n                ...this.getComplement(this.primary.dark)\n            }\n        }\n        return d\n    }\n    static fromThemeName(theme: UlldColorTheme) {\n    let root = process.env.ULLD_DEV_ROOT;\n    if (!root) {\n        throw new Error(\n            `No dev root env variable found. Can not continue writing theme colors.`,\n        );\n    }\n    const colorMapPath = path.join(\n        root,\n        `packages/tailwindAndShad/src/shad/defaultThemes/colorMaps/${theme}.json`,\n    );\n        let f = new JsonFile<any>(colorMapPath)\n        if(!f.exists()){\n            throw new Error(`File does not exist while generating ULLD theme colors for theme ${theme}`)\n        }\n        let data = f.getJsonContent()\n        if(!data?.dark?.primary && !data?.light?.primary){\n            throw new Error(`Could not find primary colors in color map for ${theme}`)\n        }\n        return new UlldThemeColorGenerator({\n            dark: data.dark.primary,\n            light: data.light.primary,\n        })\n    }\n}\n"]}