{"version":3,"sources":["../../../src/parsingUtilities/mdx/getNoteTypeDataFromPath.ts"],"names":[],"mappings":";AAEO,IAAM,6BAA6B,CACtC,cACC;AACD,SAAO,UAAU,UACZ,KAAK,CAAC,GAAG,MAAM,EAAE,GAAG,SAAS,EAAE,GAAG,MAAM,EACxC,IAAI,CAAC,OAAO;AAAA,IACT,GAAG;AAAA,IACH,IAAI,EAAE,GAAG,WAAW,GAAG,IAAI,EAAE,GAAG,MAAM,CAAC,IAAI,EAAE;AAAA,EACjD,EAAE;AACV;AAEO,IAAM,0BAA0B,CACnC,kBACA,WACA,uBACyD;AACzD,MAAI,SAAS,sBAAsB,2BAA2B,SAAS;AACvE,MAAI,cAAc,OAAO,KAAK,CAAC,MAAM,iBAAiB,SAAS,EAAE,EAAE,CAAC;AACpE,SAAO;AACX","sourcesContent":["import { AppConfigSchemaOutput } from \"@ulld/types\";\n\nexport const sortNoteTypeDataForParsing = (\n    appConfig: AppConfigSchemaOutput,\n) => {\n    return appConfig.noteTypes\n        .sort((a, b) => b.fs.length - a.fs.length)\n        .map((s) => ({\n            ...s,\n            fs: s.fs.startsWith(\"/\") ? s.fs.slice(1) : s.fs,\n        }));\n};\n\nexport const getNoteTypeDataFromPath = (\n    rootRelativePath: string,\n    appConfig: AppConfigSchemaOutput,\n    preSortedNoteTypes?: ReturnType<typeof sortNoteTypeDataForParsing>,\n): AppConfigSchemaOutput[\"noteTypes\"][number] | undefined => {\n    let sorted = preSortedNoteTypes || sortNoteTypeDataForParsing(appConfig);\n    let docTypeData = sorted.find((f) => rootRelativePath.includes(f.fs));\n    return docTypeData;\n};\n"]}