{"version":3,"sources":["../../../../src/classes/thirdParty/googleApi/googleApiManager.ts"],"names":[],"mappings":";AAAO,IAAM,mBAAN,MAAuB;AAAA,EAC1B,cAAagIlB","sourcesContent":["export class GoogleApiManager {\n    constructor(){}\n    // scopes: string[] = [\n    //     'https://www.googleapis.com/auth/calendar.readonly',\n    //     'https://www.googleapis.com/auth/calendar',\n    //     'https://www.googleapis.com/auth/calendar',\n    // ];\n    // events: CalendarEvent[] = []\n    // calendar: calendar_v3.Calendar\n    // defaultCalendarId: string\n    // calAuth: {\n    //     type: string\n    //     project_id: string\n    //     private_key_id: string\n    //     private_key: string\n    //     client_email: string\n    //     client_id: string\n    //     auth_uri: string\n    //     token_uri: string\n    //     auth_provider_x509_cert_url: string\n    //     client_x509_cert_url: string\n    //     universe_domain: string\n    // }\n    // hasProperConfig: boolean = false\n    // constructor(_config?: ParsedAppConfig) {\n    //     const config = _config || getInternalConfig()\n    //     super(config)\n    //     if (!config.credentials?.googleServiceAccountJsonPath) {\n    //         throw new Error(\"Improper credentials to use the Calendar page. Set appConfig.credentials.googleServiceAccountJsonPath to the filepath of your Google service account's credentials in JSON format.\")\n    //     }\n    //     this.hasProperConfig = true\n    //     let calAuth = fs.readFileSync(config.credentials.googleServiceAccountJsonPath, { encoding: \"utf-8\" })\n    //     this.calAuth = JSON.parse(calAuth)\n    //     this.defaultCalendarId = process.env.GOOGLE_CALENDAR_ID!\n    //     this.calendar = this.createCalendar()\n    // }\n    // private getJwtClient() {\n    //     return new google.auth.JWT(\n    //         this.calAuth.client_email,\n    //         undefined,\n    //         this.calAuth.private_key,\n    //         this.scopes\n    //     );\n    // }\n    // private createCalendar() {\n    //     return google.calendar({\n    //         version: \"v3\",\n    //         auth: this.getJwtClient()\n    //     })\n    // }\n    // async deleteEvent(eventId: string, opts?: CalendarOptions) {\n    //     console.log(\"eventId: \", eventId)\n    //     return await this.calendar.events.delete({\n    //         calendarId: opts?.calendarId || this.defaultCalendarId,\n    //         eventId,\n    //         sendNotifications: false,\n    //     })\n    // }\n    // async addEvent(event: AddCalendarEventFormType, opts?: CalendarOptions) {\n    // }\n    // // TODO: Come back to this. Possibly related to using the root calendar instead of a created calendar in aiglinski414@gmail.com. Try that tomorrow\n    // async updateEvent(event: EventInput, opts?: CalendarOptions) {\n    //     console.log(\"event here \", event)\n    //     let params: calendar_v3.Params$Resource$Events$Update = {\n    //         calendarId: opts?.calendarId || this.defaultCalendarId,\n    //         eventId: event.id,\n    //         requestBody: {\n    //             anyoneCanAddSelf: event.anyoneCanAddSelf || undefined,\n    //             attachments: event.attachments || undefined,\n    //             description: event.description || undefined,\n    //             end: event.end ? {\n    //                 dateTime: event.end as string\n    //             } : undefined,\n    //             location: event.location || undefined,\n    //             start: event.start ? {\n    //                 dateTime: event.start as string\n    //             } : undefined,\n    //             status: event.status || undefined,\n    //             summary: event.title || undefined,\n    //             // transparency: event.transparency || undefined,\n    //             // visibility: event.visibility || undefined\n    //         }\n\n    //     }\n    //     // @ts-ignore\n    //     let res = await this.calendar.events.update(params)\n    //     console.log(\"res: \", res)\n    //     return res.data ? new CalendarEvent(res.data as calendar_v3.Schema$Event).toCalendarFormat() : null\n    // }\n    // async getEvents(opts?: CalendarOptions) {\n    //     return await this.listEvents(opts)\n    // }\n    // private getCompleteOptions(opts?: CalendarOptions): Required<CalendarOptions> {\n    //     let d = CalendarOptionsZod.parse(opts)\n    //     return {\n    //         calendarId: d?.calendarId || process.env.GOOGLE_CALENDAR_ID as string,\n    //         take: d?.take || 50,\n    //         includePast: typeof d?.includePast == \"undefined\" ? true : d.includePast,\n    //         sortBy: d?.sortBy || CalendarSortOptions.startTime\n    //     }\n    // }\n    // async listEvents(options?: CalendarOptions) {\n    //     let opts = this.getCompleteOptions(options)\n    //     try {\n    //         const res = await this.calendar.events.list({\n    //             calendarId: process.env.GOOGLE_CALENDAR_ID,\n    //             timeMin: options?.includePast ? new Date(\"1-1-1900\").toISOString() : new Date().toISOString(),\n    //             maxResults: opts.take,\n    //             singleEvents: true,\n    //             orderBy: opts.sortBy,\n    //         });\n    //         const events = res.data.items;\n    //         if (events) {\n    //             this.events = events.map(e => new CalendarEvent(e))\n    //         }\n    //         if (!events || events.length === 0) {\n    //             console.log('No upcoming events found.');\n    //             return;\n    //         }\n    //     } catch {\n    //         console.error(\"Unable to connect to Google calendar API\")\n    //     }\n    // }\n    // async getEventById({ eventId, calendarId }: { eventId: string, calendarId?: string }) {\n    //     return await this.calendar.events.get({\n    //         calendarId: calendarId || this.defaultCalendarId,\n    //         eventId\n    //     })\n    // }\n}\n"]}