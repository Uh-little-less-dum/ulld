{"version":3,"sources":["../../../../src/classes/file/main.js","../../../../src/classes/file/media/imageFile.ts"],"names":["path","fs"],"mappings":";;;;;;;;AAAA,OAAO,QAAQ;AACf,OAAO,UAAU;AACV,IAAM,WAAN,MAAe;AAAA,EAKlB,YAAYA,OAAM,QAAQ;AAJ1B;AACA;AACA;AACA;AAEI,SAAK,OAAOA;AACZ,SAAK,SAAS;AACd,SAAK,UAAU,KAAK,WAAW,MAAM;AAAA,EACzC;AAAA,EACA,cAAc;AACV,QAAI,IAAI,KAAK,SAAS,KAAK,IAAI,EAAE,MAAM,GAAG;AAC1C,WAAO,EAAE,CAAC;AAAA,EACd;AAAA,EACA,eAAe;AACX,QAAI,IAAI,KAAK,SAAS,KAAK,IAAI,EAAE,MAAM,GAAG;AAC1C,WAAO,IAAI,EAAE,EAAE,SAAS,CAAC,CAAC;AAAA,EAC9B;AAAA,EACA,UAAU;AACN,WAAO,GAAG,SAAS,KAAK,IAAI;AAAA,EAChC;AAAA,EACA,QAAQ;AACJ,QAAI,IAAI,KAAK,QAAQ;AACrB,WAAO,QAAQ,GAAG,YAAY,CAAC;AAAA,EACnC;AAAA,EACA,WAAW,OAAO;AACd,QAAI,SAAS,OAAO,UAAU,YAAY,QAAQ,KAAK,MAAM;AAC7D,QAAI,QAAQ;AACR,aAAO,KAAK;AAAA,IAChB;AACA,QAAI;AACA,aAAO,KAAK,QAAQ,KAAK,IAAI;AAAA,IACjC,SACO,KAAK;AACR,cAAQ,MAAM,wDAAwD,KAAK,IAAI,EAAE;AACjF,aAAO,KAAK;AAAA,IAChB;AAAA,EACJ;AAAA,EACA,mBAAmB;AACf,QAAI,CAAC,GAAG,WAAW,KAAK,OAAO,GAAG;AAC9B,SAAG,UAAU,KAAK,SAAS,EAAE,WAAW,KAAK,CAAC;AAAA,IAClD;AAAA,EACJ;AAAA,EACA,aAAa;AACT,QAAI,KAAK;AACL,aAAO,KAAK;AAChB,QAAI,OAAO,GAAG,aAAa,KAAK,MAAM,EAAE,UAAU,QAAQ,CAAC;AAC3D,SAAK,UAAU;AACf,WAAO;AAAA,EACX;AAAA,EACA,SAAS;AACL,WAAO,GAAG,WAAW,KAAK,IAAI;AAAA,EAClC;AAAA,EACA,WAAW;AACP,WAAO,KAAK,WAAW,EAAE,MAAM,IAAI;AAAA,EACvC;AAAA,EACA,YAAY,IAAI;AACZ,QAAI,QAAQ,KAAK,SAAS,EAAE,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;AAC/C,SAAK,UAAU,MAAM,KAAK,IAAI;AAAA,EAClC;AAAA,EACA,iBAAiB;AACb,QAAI,QAAQ,KAAK,SAAS;AAC1B,QAAI,WAAW,CAAC;AAChB,UAAM,QAAQ,CAAC,GAAG,MAAM;AACpB,UAAI,EAAE,KAAK,EAAE,WAAW,QAAQ,GAAG;AAC/B,iBAAS,KAAK,EAAE,SAAS,GAAG,OAAO,EAAE,CAAC;AAAA,MAC1C;AAAA,IACJ,CAAC;AACD,WAAO;AAAA,EACX;AAAA,EACA,mBAAmB;AACf,QAAI,SAAS,KAAK,OAAO;AACzB,QAAI,CAAC,QAAQ;AACT,YAAM,IAAI,MAAM,qBAAqB,KAAK,IAAI,aAAa;AAAA,IAC/D;AAAA,EACJ;AAAA,EACA,YAAY;AACR,WAAO,KAAK,MAAM,KAAK,WAAW,CAAC;AAAA,EACvC;AAAA,EACA,aAAa,SAAS;AAClB,QAAI,aAAa,WAAW,KAAK;AACjC,QAAI,CAAC,YAAY;AACb,aAAO,QAAQ,MAAM,iDAAiD;AAAA,IAC1E;AACA,SAAK,iBAAiB;AACtB,OAAG,cAAc,KAAK,MAAM,YAAY,EAAE,UAAU,QAAQ,CAAC;AAAA,EACjE;AACJ;;;ACxFA,OAAOC,SAAQ;AAEf,SAAS,SAAS;AAGX,IAAM,+BAA+B,EACvC,OAAO;AAAA,EACJ,QAAQ,EACH,MAAM;AAAA,IACH,EAAE,QAAQ,UAAU;AAAA,IACpB,EAAE,QAAQ,SAAS;AAAA,IACnB,EAAE,QAAQ,KAAK;AAAA,IACf,EAAE,QAAQ,MAAM;AAAA,IAChB,EAAE,QAAQ,MAAM;AAAA,EACpB,CAAC,EACA,QAAQ,KAAK;AAAA,EAClB,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE;AAAA,EAC9B,OAAO,EACF,MAAM,CAAC,EAAE,QAAQ,OAAO,GAAG,EAAE,QAAQ,QAAQ,GAAG,EAAE,QAAQ,OAAO,CAAC,CAAC,EACnE,QAAQ,QAAQ;AACzB,CAAC,EACA,QAAQ,CAAC,CAAC;AAER,IAAM,YAAN,cAAwB,SAAS;AAAA,EAGpC,YAAY,cAAsB;AAC9B,UAAM,cAAc,KAAK;AACzB,SAAK,OAAO;AAAA,EAChB;AAAA,EACA,MAAM,iBAAiB;AACnB,QAAI,KAAK,MAAM;AACX,aAAO,KAAK;AAAA,IAChB;AACA,QAAI,MAAM,MAAMA,IAAG,SAAS,SAAS,KAAK,IAAI;AAC9C,SAAK,OAAO;AACZ,WAAO;AAAA,EACX;AAAA,EACA,MAAM,WAAW;AACb,QAAI,OAAO,MAAM,KAAK,eAAe;AACrC,QAAI,CAAC,MAAM;AACP,YAAM,IAAI,MAAM,mCAAmC,KAAK,IAAI,EAAE;AAAA,IAClE;AACA,WAAO,yBAAyB,KAAK,SAAS,QAAQ,CAAC;AAAA,EAC3D;AAAA,EACA,MAAM,iBAAiB,QAAsD;AACzE,YAAQ,MAAM,kEAAkE;AAAA,EAWpF;AACJ","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nexport class FileData {\n    path;\n    _isDir;\n    dirname;\n    content;\n    constructor(path, _isDir) {\n        this.path = path;\n        this._isDir = _isDir;\n        this.dirname = this.getDirname(_isDir);\n    }\n    getFileName() {\n        let s = path.basename(this.path).split(\".\");\n        return s[0];\n    }\n    getExtension() {\n        let s = path.basename(this.path).split(\".\");\n        return `.${s[s.length - 1]}`;\n    }\n    getStat() {\n        return fs.statSync(this.path);\n    }\n    isDir() {\n        let s = this.getStat();\n        return Boolean(s?.isDirectory());\n    }\n    getDirname(isDir) {\n        let _isDir = typeof isDir === \"boolean\" ? isDir : this.isDir();\n        if (_isDir) {\n            return this.path;\n        }\n        try {\n            return path.dirname(this.path);\n        }\n        catch (err) {\n            console.error(`Could not get dirname. Path likely does not exist at ${this.path}`);\n            return this.path;\n        }\n    }\n    mkdirIfNotExists() {\n        if (!fs.existsSync(this.dirname)) {\n            fs.mkdirSync(this.dirname, { recursive: true });\n        }\n    }\n    getContent() {\n        if (this.content)\n            return this.content;\n        let data = fs.readFileSync(this.path, { encoding: \"utf-8\" });\n        this.content = data;\n        return data;\n    }\n    exists() {\n        return fs.existsSync(this.path);\n    }\n    getLines() {\n        return this.getContent().split(\"\\n\");\n    }\n    filterLines(cb) {\n        let lines = this.getLines().filter((l) => cb(l));\n        this.content = lines.join(\"\\n\");\n    }\n    getImportLines() {\n        let lines = this.getLines();\n        let lineData = [];\n        lines.forEach((l, i) => {\n            if (l.trim().startsWith(\"import\")) {\n                lineData.push({ content: l, index: i });\n            }\n        });\n        return lineData;\n    }\n    throwIfNotExists() {\n        let exists = this.exists();\n        if (!exists) {\n            throw new Error(`No file exists at ${this.path}. Aborting.`);\n        }\n    }\n    getAsJson() {\n        return JSON.parse(this.getContent());\n    }\n    writeContent(content) {\n        let newContent = content || this.content;\n        if (!newContent) {\n            return console.error(\"Could not write file content as none was found.\");\n        }\n        this.mkdirIfNotExists();\n        fs.writeFileSync(this.path, newContent, { encoding: \"utf-8\" });\n    }\n}\n","import { FileData } from \"../main.js\";\nimport fs from \"fs\";\n// import { removeBackground, Config } from \"@imgly/background-removal-node\";\nimport { z } from \"zod\";\n\n// TODO: Add this removeBackground image or the default exported function back into the app. Will likely have to copy the wasm and onnx files to the public directory as described in their docs [here](https://www.npmjs.com/package/@imgly/background-removal-node)\nexport const removeBackgroundConfigSchema = z\n    .object({\n        output: z\n            .union([\n                z.literal(\"x-alpha8\"),\n                z.literal(\"x-rgba8\"),\n                z.literal(\"png\"),\n                z.literal(\"jpeg\"),\n                z.literal(\"webp\"),\n            ])\n            .default(\"png\"),\n        quality: z.number().default(80),\n        model: z\n            .union([z.literal(\"small\"), z.literal(\"medium\"), z.literal(\"large\")])\n            .default(\"medium\"),\n    })\n    .default({});\n\nexport class ImageFile extends FileData {\n    path: string;\n    data?: string | Buffer;\n    constructor(absolutePath: string) {\n        super(absolutePath, false);\n        this.path = absolutePath;\n    }\n    async getImageSource() {\n        if (this.data) {\n            return this.data as Buffer | string;\n        }\n        let res = await fs.promises.readFile(this.path);\n        this.data = res;\n        return res;\n    }\n    async toBase64() {\n        let data = await this.getImageSource();\n        if (!data) {\n            throw new Error(`Could not gather image data for ${this.path}`);\n        }\n        return `data:image/png;base64,${data.toString(\"base64\")}`;\n    }\n    async removeBackground(config: z.infer<typeof removeBackgroundConfigSchema>) {\n        console.error(`Disabled removeBackground for now to address buidl errors later.`)\n        // let imgSource = await this.getImageSource();\n        // const blob = await removeBackground(imgSource, {\n        //     model: config.model,\n        //     output: {\n        //         format: `image/${config.output}`,\n        //         quality: config.quality\n        //     }\n        // });\n        // const buffer = Buffer.from(await blob.arrayBuffer());\n        // this.data = buffer;\n    }\n}\n"]}