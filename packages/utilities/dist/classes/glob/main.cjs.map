{"version":3,"sources":["../../../src/classes/glob/main.ts","../../../src/classes/file/main.js"],"names":["path"],"mappings":"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","sourcesContent":["import { globSync } from \"glob\";\nimport { SupportedFileType } from \"@ulld/types/enums\";\nimport { FileData } from \"../file/main.js\";\nimport path from \"path\";\n\n\nexport class UlldGlob {\n    constructor(public fsRoot: string) { }\n    /** Returns paths as absolute paths */\n    glob(pattern: string, ignore: string[] = [\"**node_modules**\"], includeDirs: boolean = true) {\n        return globSync(pattern, {\n            cwd: this.fsRoot,\n            ignore: ignore,\n            nodir: !includeDirs\n        }).map((f) => path.join(this.fsRoot, f))\n    }\n    filePathsOfType(fileType: SupportedFileType) {\n        return this.glob(`**/*.${fileType}`).map((f) => path.join(this.fsRoot, f));\n    }\n    filesOfType(fileType: SupportedFileType) {\n        return this.filePathsOfType(fileType).map((f) => new FileData(f));\n    }\n}\n","import fs from \"fs\";\nimport path from \"path\";\nexport class FileData {\n    path;\n    _isDir;\n    dirname;\n    content;\n    constructor(path, _isDir) {\n        this.path = path;\n        this._isDir = _isDir;\n        this.dirname = this.getDirname(_isDir);\n    }\n    getFileName() {\n        let s = path.basename(this.path).split(\".\");\n        return s[0];\n    }\n    getExtension() {\n        let s = path.basename(this.path).split(\".\");\n        return `.${s[s.length - 1]}`;\n    }\n    getStat() {\n        return fs.statSync(this.path);\n    }\n    isDir() {\n        let s = this.getStat();\n        return Boolean(s?.isDirectory());\n    }\n    getDirname(isDir) {\n        let _isDir = typeof isDir === \"boolean\" ? isDir : this.isDir();\n        if (_isDir) {\n            return this.path;\n        }\n        try {\n            return path.dirname(this.path);\n        }\n        catch (err) {\n            console.error(`Could not get dirname. Path likely does not exist at ${this.path}`);\n            return this.path;\n        }\n    }\n    mkdirIfNotExists() {\n        if (!fs.existsSync(this.dirname)) {\n            fs.mkdirSync(this.dirname, { recursive: true });\n        }\n    }\n    getContent() {\n        if (this.content)\n            return this.content;\n        let data = fs.readFileSync(this.path, { encoding: \"utf-8\" });\n        this.content = data;\n        return data;\n    }\n    exists() {\n        return fs.existsSync(this.path);\n    }\n    getLines() {\n        return this.getContent().split(\"\\n\");\n    }\n    filterLines(cb) {\n        let lines = this.getLines().filter((l) => cb(l));\n        this.content = lines.join(\"\\n\");\n    }\n    getImportLines() {\n        let lines = this.getLines();\n        let lineData = [];\n        lines.forEach((l, i) => {\n            if (l.trim().startsWith(\"import\")) {\n                lineData.push({ content: l, index: i });\n            }\n        });\n        return lineData;\n    }\n    throwIfNotExists() {\n        let exists = this.exists();\n        if (!exists) {\n            throw new Error(`No file exists at ${this.path}. Aborting.`);\n        }\n    }\n    getAsJson() {\n        return JSON.parse(this.getContent());\n    }\n    writeContent(content) {\n        let newContent = content || this.content;\n        if (!newContent) {\n            return console.error(\"Could not write file content as none was found.\");\n        }\n        this.mkdirIfNotExists();\n        fs.writeFileSync(this.path, newContent, { encoding: \"utf-8\" });\n    }\n}\n"]}