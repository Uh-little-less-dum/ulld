{"version":3,"sources":["../../../src/classes/query/componentDocs.ts"],"names":[],"mappings":";AAIO,IAAM,qBAAN,MAAyB;AAAA,EAC5B,cAAc;AAAA,EAAE;AAAA,EACR,kBACJ,MACA,OACO;AACP,QAAI,MAAM,QAAQ;AACd,UACI,CAAC,KAAK,iBAAiB;AAAA,QAAK,CAAC,MACzB,IAAI,OAAO,MAAM,QAAS,KAAK,EAAE,KAAK,CAAC;AAAA,MAC3C,GACF;AACE,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACQ,eAAe,MAAiB,OAAiC;AACrE,QAAI,OAAO,MAAM,MACX,MAAM,QAAQ,MAAM,GAAG,IACnB,MAAM,MACN,CAAC,MAAM,GAAG,IACd;AACN,QAAI,CAAC,MAAM;AACP,aAAO;AAAA,IACX,WAAW,CAAC,KAAK,KAAK,QAAQ;AAC1B,aAAO;AAAA,IACX;AACA,QAAI,KAAK,KAAK,IAAI,CAAC,MAAM,EAAE,YAAY,CAAC;AACxC,WAAO,KAAK,KAAK,KAAK,CAAC,MAAM,GAAG,SAAS,EAAE,YAAY,CAAC,CAAC;AAAA,EAC7D;AAAA,EACQ,oBACJ,MACA,OACO;AACP,WAAO,MAAM,WAAW,KAAK,eAAe,MAAM,WAAW;AAAA,EACjE;AAAA,EACQ,iBACJ,MACA,OACO;AACP,QAAI,CAAC,MAAM,OAAO;AACd,aAAO;AAAA,IACX;AACA,QAAI,KAAK,IAAI,OAAO,MAAM,KAAK;AAC/B,QAAI,GAAG,KAAK,KAAK,UAAU,GAAG;AAC1B,aAAO;AAAA,IACX;AACA,QACI,KAAK,iBAAiB,UACtB,KAAK,iBAAiB,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC,GAC9C;AACE,aAAO;AAAA,IACX;AACA,QAAI,GAAG,KAAK,KAAK,aAAa,GAAG;AAC7B,aAAO;AAAA,IACX;AACA,QAAI,KAAK,KAAK,UAAU,KAAK,KAAK,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC,GAAG;AACvD,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA,EAEA,UAAU,MAAiB,OAAiC;AACxD,WAAO;AAAA,MACH,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,IACT,EAAE,KAAK,CAAC,MAAM,EAAE,MAAM,KAAK,CAAC;AAAA,EAChC;AAAA,EACA,SAAS,OAAoB,OAAiC;AAC1D,WAAO,MAAM,OAAO,CAAC,MAAM,KAAK,UAAU,GAAG,KAAK,CAAC;AAAA,EACvD;AACJ","sourcesContent":["import { BuildStaticDataOutput } from \"@ulld/types\";\nimport { ComponentDocsQueryParams } from \"../../types/baseApp/componentDocsQuery.js\";\ntype QueryItem = BuildStaticDataOutput[\"componentDocs\"][number];\n\nexport class ComponentDocsQuery {\n    constructor() { }\n    private itemMatchesSyntax(\n        item: QueryItem,\n        query: ComponentDocsQueryParams,\n    ): boolean {\n        if (query.syntax) {\n            if (\n                !item.embeddableSyntax.some((a) =>\n                    new RegExp(query.syntax!, \"gmi\").test(a),\n                )\n            ) {\n                return false;\n            }\n        }\n        return true;\n    }\n    private itemMatchesTag(item: QueryItem, query: ComponentDocsQueryParams) {\n        let tags = query.tag\n            ? Array.isArray(query.tag)\n                ? query.tag\n                : [query.tag]\n            : false;\n        if (!tags) {\n            return true;\n        } else if (!item.tags.length) {\n            return false;\n        }\n        let tl = tags.map((t) => t.toLowerCase());\n        return item.tags.some((a) => tl.includes(a.toLowerCase()));\n    }\n    private itemMatchesPluginId(\n        item: QueryItem,\n        query: ComponentDocsQueryParams,\n    ): boolean {\n        return query.pluginId ? item.pluginName === query.pluginId : true\n    }\n    private itemMatchesQuery(\n        item: QueryItem,\n        query: ComponentDocsQueryParams,\n    ): boolean {\n        if (!query.query) {\n            return true;\n        }\n        let re = new RegExp(query.query);\n        if (re.test(item.pluginName)) {\n            return true;\n        }\n        if (\n            item.embeddableSyntax.length &&\n            item.embeddableSyntax.some((x) => re.test(x))\n        ) {\n            return true;\n        }\n        if (re.test(item.componentName)) {\n            return true;\n        }\n        if (item.tags.length && item.tags.some((x) => re.test(x))) {\n            return true;\n        }\n        return false;\n    }\n\n    queryItem(item: QueryItem, query: ComponentDocsQueryParams) {\n        return [\n            this.itemMatchesPluginId,\n            this.itemMatchesTag,\n            this.itemMatchesQuery,\n            this.itemMatchesSyntax,\n        ].some((f) => f(item, query));\n    }\n    queryAll(items: QueryItem[], query: ComponentDocsQueryParams) {\n        return items.filter((x) => this.queryItem(x, query))\n    }\n}\n"]}