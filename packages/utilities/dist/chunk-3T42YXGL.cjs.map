{"version":3,"sources":["../src/utils/stringUtils.ts"],"names":["distance","capitalize","val","camelCase","l","i","getFileExtension","path","pathHasExtension","ext","applyFileSuffix","extension","removeMathDollarSigns","_s","s","getAllRegexMatches","sortStringsBySimilarity","searchString","opts","caseSensitive","x","a","b","getMostSimilarString"],"mappings":"yCACA,OAAOA,MAAc,eAEd,IAAMC,EAAcC,GACvB,GAAGA,EAAI,CAAC,EAAE,YAAY,CAAC,GAAGA,EAAI,MAAM,CAAC,CAAC,GAG7BC,EAAaD,GACfA,EACF,WAAW,UAAW,GAAG,EACzB,MAAM,GAAG,EACT,IAAI,CAACE,EAAGC,IAAOA,IAAM,EAAID,EAAE,YAAY,EAAIH,EAAWG,CAAC,CAAE,EACzD,KAAK,EAAE,EAIHE,EAAoBC,GACnBA,EAAK,SAAS,GAAG,EAAIA,EAAK,MAAMA,EAAK,YAAY,GAAG,CAAC,EAAI,OAI1DC,EAAoBD,GAAiB,CAC9C,IAAIE,EAAMH,EAAiBC,CAAI,EAC/B,MAAO,GAAQE,GAAOA,EAAI,OAAS,GAAKA,EAAI,QAAU,EAC1D,EAEaC,EAAkB,CAACH,EAAcI,IACnCH,EAAiBD,CAAI,EAAIA,EAAO,GAAGA,CAAI,GAAGI,CAAS,GAIjDC,EAAyBC,GAAe,CACjD,IAAIC,EAAID,EAAG,KAAK,EAChB,OACIC,EAAE,WAAW,IAAI,GACjBA,EAAE,SAAS,IAAI,GACfC,EAAmBD,EAAG,QAAQ,EAAE,SAAW,EAEpCA,EAAE,WAAW,KAAM,EAAE,EAAE,KAAK,EAGnCA,EAAE,WAAW,GAAG,GAChBA,EAAE,SAAS,GAAG,GACdC,EAAmBD,EAAG,MAAM,EAAE,SAAW,EAElCA,EAAE,WAAW,IAAK,EAAE,EAAE,KAAK,EAE/BA,CACX,EAGaE,EAA0B,CAACC,EAAsBC,EAAgBC,EAAyB,KAC5FD,EAAK,IAAKE,IAAO,CAEpB,WAAYpB,EAASiB,EAAcG,EAAG,CAClC,cAAAD,CACJ,CAAC,EACD,MAAOC,CACX,EAAE,EAAE,KAAK,CAACC,EAAGC,IAAMD,EAAE,WAAaC,EAAE,WAAa,EAAID,EAAE,WAAaC,EAAE,WAAa,GAAK,CAAC,EAIhFC,EAAuB,CAACN,EAAsBC,EAAgBC,EAAyB,KACtFH,EAAwBC,EAAcC,EAAMC,CAAa,EAAE,CAAC,EAAE","sourcesContent":["import { getAllRegexMatches } from \"./getAllRegexMatches.js\";\nimport distance from \"jaro-winkler\"\n\nexport const capitalize = (val: string) =>\n    `${val[0].toUpperCase()}${val.slice(1)}`;\n\n\nexport const camelCase = (val: string) => {\n    return val\n        .replaceAll(/\\-|\\_/gm, \" \")\n        .split(\" \")\n        .map((l, i) => (i === 0 ? l.toLowerCase() : capitalize(l)))\n        .join(\"\");\n};\n\n\nexport const getFileExtension = (path: string) => {\n       return path.includes(\".\") ? path.slice(path.lastIndexOf(\".\")) : undefined\n    }\n\n// TODO: Improve this method. Create a server only variant and use the path node module.\nexport const pathHasExtension = (path: string) => {\n    let ext = getFileExtension(path)\n    return Boolean(ext && ext.length > 0 && ext.length <= 4)\n}\n\nexport const applyFileSuffix = (path: string, extension: `.${string}`) => {\n    return pathHasExtension(path) ? path : `${path}${extension}`;\n};\n\n\nexport const removeMathDollarSigns = (_s: string) => {\n    let s = _s.trim();\n    if (\n        s.startsWith(\"$$\") &&\n        s.endsWith(\"$$\") &&\n        getAllRegexMatches(s, /\\$\\$/gm).length === 2\n    ) {\n        return s.replaceAll(\"$$\", \"\").trim()\n    }\n    if(\n        s.startsWith(\"$\") &&\n        s.endsWith(\"$\") &&\n        getAllRegexMatches(s, /\\$/gm).length === 2\n    ) {\n        return s.replaceAll(\"$\", \"\").trim()\n    }\n    return s\n};\n\n\nexport const sortStringsBySimilarity = (searchString: string, opts: string[], caseSensitive: boolean = false) => {\n    return opts.map((x) => ({\n        /* @ts-ignore */\n        similarity: distance(searchString, x, {\n            caseSensitive\n        }),\n        value: x\n    })).sort((a, b) => a.similarity < b.similarity ? 1 : a.similarity > b.similarity ? -1 : 0)\n}\n\n\nexport const getMostSimilarString = (searchString: string, opts: string[], caseSensitive: boolean = false) => {\n       return sortStringsBySimilarity(searchString, opts, caseSensitive)[0].value\n}\n"]}