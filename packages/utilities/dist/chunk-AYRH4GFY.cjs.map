{"version":3,"sources":["../src/developmentUtilities/developmentOutput/outputUtils.ts"],"names":["path","DevelopmentOutputUtils","DevelopmentOutputFSUtils","props","body","opts","s","x","items","keys","k","_key"],"mappings":"yCAAA,OAAOA,MAAU,OAUV,IAAeC,EAAf,cAA8CC,CAAyB,CAE1E,YAAYC,EAA2C,CAAC,EAAG,CACvD,MAAM,EAFV,oBAAiB,GAGTA,EAAM,iBACN,KAAK,eAAiBA,EAAM,eAEpC,CAEU,6BACNA,EAC0D,CAC1D,MAAO,GAAGA,EAAM,UAAY,UAAY,EAAE,SAASA,EAAM,OAAO,GAAGA,EAAM,eAAiB,KAAKA,EAAM,cAAc,GAAK,EAAE,KAC9H,CAEU,yBACNA,EACoC,CACpC,MAAO,GAAGA,EAAM,UAAY,UAAY,EAAE,QAAQA,EAAM,OAAO,KACnE,CAEU,eACNC,EACAC,EACM,CACN,OAAIA,EAAK,gBACE,GAAGA,EAAK,eAAe;AAAA,EAAKD,CAAI,GAEpCA,CACX,CAEA,wBAAwBD,EAA6C,CACjE,IAAIG,EAAI,UACR,OAAIH,EAAM,aACNG,GAAK,SAELH,EAAM,cACNG,GAAK,GAAGH,EAAM,UAAU,IAExBG,GAAK,KAAKH,EAAM,UAAU,MAE9BG,GAAK,SAASN,EAAK,SAASA,EAAK,QAAQG,EAAM,UAAU,EAAGA,EAAM,gBAAgB,CAAC,IAC5EG,CACX,CAEA,oBAAuBH,EAAgH,CACnI,GAAI,CAACA,EAAM,OACP,OAAOA,EAAM,IAAI,IAAKI,IAAO,CACzB,MAAOJ,EAAM,SAASI,CAAC,EACvB,IAAK,MACT,EAAE,EAEN,IAAMC,EAA6B,CAAC,EAC9BC,EAAiB,CAAC,EACxB,QAAWC,KAAKP,EAAM,IAAK,CACvB,IAAMQ,EAAOR,EAAM,OAAOO,CAAC,EACtBD,EAAK,SAASE,CAAI,IACnBH,EAAM,KAAK,CACP,MAAOL,EAAM,SAASO,CAAC,EACvB,IAAKC,CACT,CAAC,EACDF,EAAK,KAAKE,CAAI,EAEtB,CACA,OAAOH,CACX,CAEU,2BACNL,EACAC,EACM,CACN,OAAID,EAAM,iBACC,GAAGC,CAAI;AAAA;AAAA,iBAAsBD,EAAM,OAAO,IAE9CC,CACX,CACJ","sourcesContent":["import path from \"path\";\nimport type {\n    CommonVariableDeclarationFields,\n    DevelopmentOutputConstructorProps,\n    GetRelativeImportStringProps,\n    ParsedArrayValues,\n    CommonArrayMethods\n} from \"./types\";\nimport { DevelopmentOutputFSUtils } from \"./fileSystemUtils\";\n\nexport abstract class DevelopmentOutputUtils extends DevelopmentOutputFSUtils {\n    initialContent = \"\";\n    constructor(props: DevelopmentOutputConstructorProps = {}) {\n        super();\n        if (props.initialContent) {\n            this.initialContent = props.initialContent;\n        }\n    }\n\n    protected getVariableDeclarationString(\n        props: CommonVariableDeclarationFields,\n    ): `${\"export \" | \"\"}const ${string}${`: ${string}` | \"\"} = ` {\n        return `${props.exportVar ? \"export \" : \"\"}const ${props.varName}${props.typescriptType ? `: ${props.typescriptType}` : \"\"} = `;\n    }\n\n    protected getTypeDeclarationString(\n        props: Pick<CommonVariableDeclarationFields, \"exportVar\" | \"varName\">,\n    ): `${\"export \" | \"\"}type ${string} = ` {\n        return `${props.exportVar ? \"export \" : \"\"}type ${props.varName} = `;\n    }\n\n    protected getInitialBody(\n        body: string,\n        opts: { prefixFirstLine?: string },\n    ): string {\n        if (opts.prefixFirstLine) {\n            return `${opts.prefixFirstLine}\\n${body}`;\n        }\n        return body;\n    }\n\n    getRelativeImportString(props: GetRelativeImportStringProps): string {\n        let s = \"import \";\n        if (props.typeImport) {\n            s += \"type \";\n        }\n        if (props.defaultExport) {\n            s += `${props.importName} `;\n        } else {\n            s += `{ ${props.importName} } `;\n        }\n        s += `from \"${path.relative(path.dirname(props.outputFile), props.importSourceFile)}\"`;\n        return s;\n    }\n\n    removeDuplicateKeys<T>(props: Omit<CommonArrayMethods<T>, \"getKey\"> & {getKey?: CommonArrayMethods<T>[\"getKey\"]}): ParsedArrayValues[] {\n        if (!props.getKey) {\n            return props.arr.map((x) => ({\n                value: props.getValue(x),\n                key: undefined,\n            }));\n        }\n        const items: ParsedArrayValues[] = [];\n        const keys: string[] = [];\n        for (const k of props.arr) {\n            const _key = props.getKey(k);\n            if (!keys.includes(_key)) {\n                items.push({\n                    value: props.getValue(k),\n                    key: _key,\n                });\n                keys.push(_key);\n            }\n        }\n        return items;\n    }\n\n    protected conditionallyExportDefault(\n        props: CommonVariableDeclarationFields,\n        body: string,\n    ): string {\n        if (props.defaultExportVar) {\n            return `${body}\\n\\nexport default ${props.varName};`;\n        }\n        return body;\n    }\n}\n"]}