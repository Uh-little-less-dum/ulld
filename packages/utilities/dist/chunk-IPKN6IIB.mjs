import { a as a$1 } from './chunk-LDM2XLX2.mjs';

var a=class extends a$1{constructor(t){super(t);}arrayToEnum(t){let e=this.getInitialBody(`export enum ${t.varName} {
`,t),n=this.removeDuplicateKeys(t);for(let r of n)e+=`    "${r.key}" = "${r.value}",
`;return e+="}",e}arrayToTypeUnion(t){return `${this.getTypeDeclarationString(t)}${t.arr.map(e=>t.getValue(e)).join(`
    | `)};
`}arrayToTypescriptRecord(t){let e=[],n=this.removeDuplicateKeys(t);for(let r of n)e.push(`    "${r.key}": ${r.value}`);return this.conditionallyExportDefault(t,`${this.getVariableDeclarationString(t)} {
${e.join(`,
`)}
}`)}rawInlineContent(t){return t.content}rawSuffixContent(t){return t.content}rawPrefixContent(t){return t.content}rawFileHeader(t){return `${t.content}

${this.initialContent}`}sourceLocationComment(t){return `// NOTE: Autogenerated from the content in ${t.sourceFile}`}generatedFromScriptComment(t){let e=t.package==="buildUtils"?t.package:`the ${t.package} package`;return `// NOTE: Generated as part of the ${t.scriptName} in ${e}.`}arrayToTypescriptArray(t){return `${this.getVariableDeclarationString(t)}[
${t.arr.map(e=>`    ${t.getValue(e)}`).join(`,
`)}
]${t.readOnly?" as const":""}${t.castToType?` as ${t.castToType}`:""};`}};

export { a };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=chunk-IPKN6IIB.mjs.map