{"version":3,"sources":["../../src/schemas/autoWrapMathSchema.ts","../../src/utils/latexUtils.ts"],"names":[],"mappings":";AAAA,SAAQ,SAAQ;;;ACyBT,IAAM,eAAe,CAAC,MAAc,UAAmB,SAAS;AACnE,QAAM,IAAI,UAAU,OAAO;AAC3B,MAAI,OAAO,KAAK,QAAQ,CAAC;AACzB,MAAK,SAAS,MAAQ,SAAS,KAAK,YAAY,CAAC,GAAI;AACjD,WAAO,GAAG,CAAC;AAAA,EACjB,IAAI;AAAA,EACJ,CAAC;AAAA,EACC;AACA,SAAO;AACX;;;AD9BO,IAAM,0BAA0B,EAAE,OAAO,EAAE,UAAU,CAAC,SAAiB,aAAa,MAAM,KAAK,CAAC;AAEhG,IAAM,2BAA2B,EAAE,OAAO,EAAE,UAAU,CAAC,SAAiB,aAAa,MAAM,IAAI,CAAC;AAEhG,IAAM,iCAAiC,EAAE,OAAO,EAAE,UAAU,CAAC,SAAoC,OAAO,aAAa,MAAM,KAAK,IAAI,IAAI;AAExI,IAAM,kCAAkC,EAAE,OAAO,EAAE,UAAU,CAAC,SAAoC,OAAO,aAAa,MAAM,IAAI,IAAI,IAAI","sourcesContent":["import {z} from 'zod'\nimport { autoWrapMath } from '../utils/latexUtils.js'\n\n\nexport const autoWrapMathInlineField = z.string().transform((data: string) => autoWrapMath(data, false))\n\nexport const autoWrapMathDisplayField = z.string().transform((data: string) => autoWrapMath(data, true))\n\nexport const autoWrapMathInlineNullishField = z.string().transform((data: string | null | undefined) => data ? autoWrapMath(data, false) : data)\n\nexport const autoWrapMathDisplayNullishField = z.string().transform((data: string | null | undefined) => data ? autoWrapMath(data, true) : data)\n","export const stringHasPairedKeys = (s: string, k: string) => {\n    if (!s || typeof s !== \"string\") return false\n    let i = s.indexOf(k)\n    return i !== -1 && i !== s.lastIndexOf(k)\n}\n\nexport const stringHasLatex = (s?: string | any) => {\n    if (!s || typeof s !== \"string\") return false\n    return stringHasPairedKeys(s, \"$\")\n}\n\nexport const stringHasMdx = (s?: string) => {\n    if (!s) return false\n    if (s.includes(\"<\") && s.includes(\">\")) return true\n    return [\n        \"_\",\n        \"*\",\n        \"-\",\n        \"$\"\n    ].some((k) => stringHasPairedKeys(s, k))\n}\n\n\n\n\nexport const autoWrapMath = (math: string, display: boolean = true) => {\n    const s = display ? \"$$\" : \"$\"\n    let _idx = math.indexOf(s)\n    if ((_idx === -1) || (_idx === math.lastIndexOf(s))) {\n        return `${s}\n${math}\n${s}`\n    }\n    return math\n}\n\n"]}