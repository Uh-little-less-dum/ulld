{"version":3,"sources":["../../../src/__scripts__/generateValidIconNameData/main.ts"],"names":["dev","DevelopmentOutput","validIconData","getValidIconData","locationComment","validIconNames","n","val","f","x"],"mappings":"oaAGA,IAAMA,EAAM,IAAIC,EAEVC,EAAgBC,EAAiB,EAEjCC,EAA8E,CAChF,IAAK,wBACL,MAAO,CACH,WACI,mFACR,CACJ,EAEMC,EAAiBH,EAAc,IAAKI,GAAMA,EAAE,IAAI,EAEtDN,EAAI,eACA,CACI,CACI,IAAK,mBACL,MAAO,CACH,IAAKK,EACL,SAAWE,GAAQ,IAAIA,CAAa,IACpC,QAAS,gBACT,UAAW,EACf,CACJ,EACAH,CACJ,EACA,CACI,SAAU,+DACV,qBAAsB,EAC1B,CACJ,EAEAJ,EAAI,MAAM,EAEVA,EAAI,eACA,CACI,CACI,IAAK,yBACL,MAAO,CACH,IAAKK,EACL,SAAWE,GAAQ,QAAQA,CAAa,IACxC,QAAS,oBACT,UAAW,GACX,SAAU,EACd,CACJ,EACA,CACI,IAAK,mBACL,MAAO,CACH,QACI,kFACR,CACJ,EACAH,CACJ,EACA,CACI,SAAU,kDACV,qBAAsB,EAC1B,CACJ,EAEAJ,EAAI,MAAM,EAEVA,EAAI,eACA,CACI,CACI,IAAK,cACL,MAAO,CACH,IAAKK,EACL,SAAWE,GAAQA,EACnB,OAASA,GAAQA,EACjB,UAAW,GACX,QAAS,wCACT,gBACI,kGACR,CACJ,EACAH,CACJ,EACA,CACI,SAAU,sDACV,qBAAsB,EAC1B,CACJ,EAGAJ,EAAI,MAAM,EAEVA,EAAI,eAAe,CACf,CACI,IAAK,mBACL,MAAO,CACH,QAAS,oFACb,CACJ,EACA,CACI,IAAK,yBACL,MAAO,CACH,IAAKE,EAAc,OAAQM,GAAMA,EAAE,OAAS,MAAM,EAAE,IAAKC,GAAMA,EAAE,IAAI,EACrE,SAAWF,GAAQ,IAAIA,CAAa,IACpC,QAAS,gBACT,UAAW,GACX,WAAY,kCAChB,CACJ,EACA,CACI,IAAK,mBACL,MAAO,CACH,QAAS,6DACb,CACJ,CACJ,EAAG,CACK,SAAU,8CACV,qBAAsB,EAC1B,CAAC","sourcesContent":["import { DevelopmentOutput } from \"../../developmentUtilities\";\nimport { getValidIconData } from \"./getValidIconNames\";\n\nconst dev = new DevelopmentOutput();\n\nconst validIconData = getValidIconData();\n\nconst locationComment: Parameters<DevelopmentOutput[\"genFileContent\"]>[0][number] = {\n    fnc: \"sourceLocationComment\",\n    props: {\n        sourceFile:\n            \"packages/utilities/src/__scripts__/generateValidIconNameData/getValidIconNames.ts\",\n    },\n};\n\nconst validIconNames = validIconData.map((n) => n.name)\n\ndev.genFileContent(\n    [\n        {\n            fnc: \"arrayToTypeUnion\",\n            props: {\n                arr: validIconNames,\n                getValue: (val) => `\"${val as string}\"`,\n                varName: \"ValidIconName\",\n                exportVar: true,\n            },\n        },\n        locationComment,\n    ],\n    {\n        filePath: \"packages/types/src/internallyGenerated/validIconNameUnion.ts\",\n        useUlldDevRootEnvVar: true,\n    },\n);\n\ndev.clear();\n\ndev.genFileContent(\n    [\n        {\n            fnc: \"arrayToTypescriptArray\",\n            props: {\n                arr: validIconNames,\n                getValue: (val) => `    \"${val as string}\"`,\n                varName: \"validIconNameList\",\n                exportVar: true,\n                readOnly: true,\n            },\n        },\n        {\n            fnc: \"rawSuffixContent\",\n            props: {\n                content:\n                    \"export type ValidIconNameDynamicallyGenerated = typeof validIconNameList[number]\",\n            },\n        },\n        locationComment,\n    ],\n    {\n        filePath: \"packages/types/src/enums/icons/validIconName.ts\",\n        useUlldDevRootEnvVar: true,\n    },\n);\n\ndev.clear();\n\ndev.genFileContent(\n    [\n        {\n            fnc: \"arrayToEnum\",\n            props: {\n                arr: validIconNames,\n                getValue: (val) => val as string,\n                getKey: (val) => val as string,\n                exportVar: true,\n                varName: \"ValidIconNameEnumDynamicallyGenerated\",\n                prefixFirstLine:\n                    \"/* eslint-disable @typescript-eslint/naming-convention -- Enum needs to match names in Lucide */\",\n            },\n        },\n        locationComment,\n    ],\n    {\n        filePath: \"packages/types/src/enums/icons/validIconNameEnum.ts\",\n        useUlldDevRootEnvVar: true,\n    },\n);\n\n\ndev.clear()\n\ndev.genFileContent([\n    {\n        fnc: \"rawPrefixContent\",\n        props: {\n            content: 'import type { ValidIconName } from \"../../internallyGenerated/validIconNameUnion\";'\n        }\n    },\n    {\n        fnc: \"arrayToTypescriptArray\",\n        props: {\n            arr: validIconData.filter((f) => f.type === \"logo\").map((x) => x.name),\n            getValue: (val) => `\"${val as string}\"`,\n            varName: \"logoIconNames\",\n            exportVar: true,\n            castToType: \"const satisfies ValidIconName[];\"\n        }\n    },\n    {\n        fnc: \"rawSuffixContent\",\n        props: {\n            content: \"export type LogoIconNames = (typeof logoIconNames)[number];\"\n        }\n    }\n], {\n        filePath: \"packages/types/src/enums/icons/iconTypes.ts\",\n        useUlldDevRootEnvVar: true\n    })\n"]}