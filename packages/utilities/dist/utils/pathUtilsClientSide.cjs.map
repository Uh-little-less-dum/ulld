{"version":3,"sources":["../../src/utils/fsUtils.ts","../../src/utils/pathUtilsClientSide.ts"],"names":[],"mappings":";AAEA,OAAO,WAAW;AAEX,IAAM,mBAAmB,CAAC,MAC7B,EAAE,WAAW,GAAG,IAAI,IAAI,IAAI,CAAC;;;ACI1B,IAAM,eAAe,CAAC,GAAW,WAAmB;AACvD,SAAO,EAAE,SAAS,MAAM;AAC5B;AAEO,IAAM,eAAe,CAAC,GAAW,WAAmB;AACvD,SAAO,EAAE,SAAS,MAAM,IAAI,IAAI,GAAG,MAAM,GAAG,iBAAiB,CAAC,CAAC;AACnE;AAGO,IAAM,eAAe,CAAC,WAA8B;AACvD,QAAM,KAAK,IAAI,gBAAgB;AAC/B,KAAG,IAAI,YAAY,OAAO,YAAY,KAAK;AAC3C,MAAI,OAAO,kBAAkB;AACzB,OAAG,IAAI,oBAAoB,MAAM;AAAA,EACrC;AACA,SAAO,WAAW,UAAU,OAAO,SAAS,CAAC,IAAI,GAAG,SAAS,CAAC;AAClE","sourcesContent":["import { filePathGlobPropsSchema } from \"../schemas/filePath/filePathInput.js\";\nimport { z } from \"zod\";\nimport axios from \"axios\";\n\nexport const withForwardSlash = (p: string) =>\n    p.startsWith(\"/\") ? p : `/${p}`;\n\nexport const withForwardSlashOptional = (p?: string) =>\n    typeof p === \"undefined\" ? undefined : withForwardSlash(p);\n\nexport const noTrailingSlash = (p: string) =>\n    p.endsWith(\"/\") ? p.slice(0, p.length - 1) : p;\n\nexport const withTrailingSlash = (p: string) => (p.endsWith(\"/\") ? p : `${p}/`);\n\nexport const makeHref = (s: string) => {\n    if (/^http(s?):\\/\\//gm.test(s)) {\n        return s;\n    }\n    if(typeof window === \"undefined\"){\n        return s\n    }\n    let isHttps = window?.location?.href.startsWith(\"http\")\n        ? window.location.href.startsWith(\"https\")\n        : process.env.NEXT_PUBLIC_PRODUCTION_REMOTE;\n    return `${isHttps ? \"https\" : \"http\"}://${s}`;\n};\n\nexport const noLeadingSlash = (p: string) =>\n    p.startsWith(\"/\") ? p.slice(1, p.length) : p;\n\nexport const setSlashes = ({\n    value,\n    leading,\n    trailing,\n}: {\n    value: string;\n    leading: boolean;\n    trailing: boolean;\n}) => {\n    let v = value;\n    v = leading ? withForwardSlash(v) : noLeadingSlash(v);\n    v = trailing ? withTrailingSlash(v) : noTrailingSlash(v);\n    return v;\n};\n\nexport const parentDir = (p: string) =>\n    p.indexOf(\"/\") >= 0 ? p.slice(0, p.lastIndexOf(\"/\")) : p;\n\nexport const getFilenameFromString = (p: string) =>\n    p.indexOf(\"/\") === -1 ? p : p.slice(p.lastIndexOf(\"/\") + 1, p.length);\n\nexport const ensureRootRelative = (p: string, fsRoot: string) =>\n    withForwardSlash(p.indexOf(fsRoot) === -1 ? p : p.split(fsRoot)[1]);\n\nexport const ensureAbsolute = (p: string, fsRoot: string) => {\n    return p.includes(fsRoot)\n        ? p\n        : `${fsRoot}${setSlashes({ value: p, leading: true, trailing: false })}`;\n};\n\nexport const getParentDirAndFilename = (\n    p: string,\n    ensureRootRelativeParent: boolean = true,\n    fsRoot: string,\n) => {\n    return {\n        parent: ensureRootRelativeParent\n            ? ensureRootRelative(parentDir(p), fsRoot)\n            : parentDir(p),\n        filename: getFilenameFromString(p),\n    };\n};\n\nexport const fileExtension = (path: string) => {\n    return path.split(\".\").at(-1);\n};\n\nexport const replacePrefix = (\n    content: string,\n    regex: string,\n    replaceWith: string = \"\",\n) => {\n    return content.startsWith(regex)\n        ? `${replaceWith}${content.split(regex)[1]}`\n        : content;\n};\n\nexport const replaceAppendix = (\n    content: string,\n    regex: string,\n    replaceWith: string = \"\",\n) => {\n    return content.endsWith(regex)\n        ? `${content.slice(0, content.length - regex.length)}${replaceWith}`\n        : content;\n};\n\nexport const getFsRootGlob = async (\n    props: z.input<typeof filePathGlobPropsSchema>,\n) => {\n    try {\n        let res = await axios.post(\"/api/glob\", props);\n        if(res.data.filePaths){\n            return res.data.filePaths as string[];\n        }\n    } catch (err) {\n        console.error(err);\n    }\n};\n","import { withForwardSlash } from \"./fsUtils.js\";\nimport monacoLanguages from \"../monaco/languages.js\";\n\nexport interface EditorModalConfig {\n    language?: (typeof monacoLanguages)[number] | \"mdx\";\n    contentId: string;\n    useExistingValue?: boolean;\n}\n\nexport const includesRoot = (p: string, fsRoot: string) => {\n    return p.includes(fsRoot);\n};\n\nexport const makeAbsolute = (p: string, fsRoot: string) => {\n    return p.includes(fsRoot) ? p : `${fsRoot}${withForwardSlash(p)}`;\n};\n\n\nexport const getEditorUrl = (config: EditorModalConfig) => {\n    const sp = new URLSearchParams();\n    sp.set(\"language\", config.language || \"mdx\");\n    if (config.useExistingValue) {\n        sp.set(\"useExistingValue\", \"true\");\n    }\n    return `/editor/${encodeURI(config.contentId)}?${sp.toString()}`;\n};\n"]}