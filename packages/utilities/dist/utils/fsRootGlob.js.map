{"version":3,"sources":["../../src/utils/fsRootGlob.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,SAA4B,0BAA0B;AAKtD,OAAO;AAYA,IAAM,aAAN,MAAiB;AAAA,EACpB,YAAmB,OAAuB;AAAvB;AAAA,EAAwB;AAAA,EAE3C,+BAA+B,KAAwD;AACnF,WAAO,IAAI,IAAI,KAAK,GAAG,CAAC;AAAA,EAC5B;AAAA,EAEA,eAAe,aAA0C;AACrD,QAAI,MAAM,KAAK,MAAM,YAAY,eAAe,QAAQ,KAAK,MAAM,SAAS,IAAI;AAChF,WAAO,GAAG,KAAK,MAAM,IAAI,IAAI,KAAK,+BAA+B,GAAG,CAAC;AAAA,EACzE;AAAA,EAEA,aAAa,aAA6C;AACtD,WAAO;AAAA,MACH,MAAM;AAAA,MACN,MAAM,KAAK,eAAe;AAAA,MAC1B,GAAG;AAAA,IACP;AAAA,EACJ;AAAA;AAAA,EAGA,YAAY,MAAgB;AACxB,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,eAAe,WAAkC,MAA0B;AAC7E,QAAI,MAAM,MAAM,kBAAkB,KAAK,aAAa,IAAI,GAAG,SAAS;AACpE,WAAO,MAAM,KAAK,YAAY,GAAG,IAAI,CAAC;AAAA,EAC1C;AACJ","sourcesContent":["import { SupportedFileType, supportedFileTypes } from \"@ulld/types/enums\"\nimport { filePathGlobPropsSchema } from \"../schemas/filePath/filePathInput.js\"\nimport { z } from 'zod'\nimport { ArrayUtilities } from \"./arrayUtilities.js\"\nimport { AppConfigSchemaOutput } from \"@ulld/types\"\nimport \"server-only\"\nimport { getGlobServerSide } from \"./glob/getGlobServerSide.js\"\n\ninterface FsRootGlobProps {\n    path: string\n    isSinglePath?: boolean\n    fileTypes?: SupportedFileType | SupportedFileType[]\n}\n\n\ntype GlobInput = z.input<typeof filePathGlobPropsSchema>\n\nexport class FsRootGlob {\n    constructor(public props: FsRootGlobProps){}\n\n    formatFileTypeArrayGlobPattern(fts: (SupportedFileType)[] | typeof supportedFileTypes) {\n        return `{${fts.join(\",\")}}`\n    }\n\n    getGlobPattern(defaultOpts?: Partial<GlobInput>): string {\n        let fts = this.props.fileTypes ? ArrayUtilities.beArray(this.props.fileTypes) : supportedFileTypes\n        return `${this.props.path}.${this.formatFileTypeArrayGlobPattern(fts)}`\n    }\n\n    getFetchOpts(defaultOpts?: Partial<GlobInput>): GlobInput {\n        return {\n            type: \"files\",\n            glob: this.getGlobPattern(),\n            ...defaultOpts\n        }\n    }\n\n    // TODO: Add method here to sort these results by the file types preffered order in the appConfig.\n    sortResults(vals: string[]) {\n        return vals\n    }\n\n    async getFileMatches(appConfig: AppConfigSchemaOutput, opts?: Partial<GlobInput>){\n        let res = await getGlobServerSide(this.getFetchOpts(opts), appConfig)\n        return res ? this.sortResults(res) : []\n    }\n}\n"]}