{"version":3,"sources":["../../../src/utils/media/streamFile.ts"],"names":[],"mappings":";;;AACA,OAAO,QAAQ;AAMR,IAAM,aAAa,CAAC,MAAc,YAAqD;AAC1F,QAAM,iBAAiB,GAAG,iBAAiB,MAAM,OAAO;AACxD,SAAO,IAAI,eAAe;AAAA,IACtB,MAAM,YAAY;AACd,qBAAe,GAAG,QAAQ,CAAC,UAAkB,WAAW,QAAQ,IAAI,WAAW,KAAK,CAAC,CAAC;AACtF,qBAAe,GAAG,OAAO,MAAM,WAAW,MAAM,CAAC;AACjD,qBAAe,GAAG,SAAS,CAAC,UAAiC,WAAW,MAAM,KAAK,CAAC;AAAA,IACxF;AAAA,IACA,SAAS;AACL,qBAAe,QAAQ;AAAA,IAC3B;AAAA,IACA,MAAM;AAAA,EACV,CAAC;AACL","sourcesContent":["import { StreamOptions } from \"stream\";\nimport fs from 'fs'\n\ntype OptionsType = (BufferEncoding | (StreamOptions<any> & { end: any, start: any }))\n\n\n\nexport const streamFile = (path: string, options: OptionsType): ReadableStream<Uint8Array> => {\n    const downloadStream = fs.createReadStream(path, options);\n    return new ReadableStream({\n        start(controller) {\n            downloadStream.on(\"data\", (chunk: Buffer) => controller.enqueue(new Uint8Array(chunk)));\n            downloadStream.on(\"end\", () => controller.close());\n            downloadStream.on(\"error\", (error: NodeJS.ErrnoException) => controller.error(error));\n        },\n        cancel() {\n            downloadStream.destroy();\n        },\n        type: \"bytes\"\n    });\n}\n"]}