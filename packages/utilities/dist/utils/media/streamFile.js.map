{"version":3,"sources":["../../../src/utils/media/streamFile.ts"],"names":["fs","streamFile","path","options","downloadStream","controller","chunk","error"],"mappings":"gCACA,OAAOA,MAAQ,KAMR,IAAMC,EAAa,CAACC,EAAcC,IAAqD,CAC1F,IAAMC,EAAiBJ,EAAG,iBAAiBE,EAAMC,CAAO,EACxD,OAAO,IAAI,eAAe,CACtB,MAAME,EAAY,CACdD,EAAe,GAAG,OAASE,GAAkBD,EAAW,QAAQ,IAAI,WAAWC,CAAK,CAAC,CAAC,EACtFF,EAAe,GAAG,MAAO,IAAMC,EAAW,MAAM,CAAC,EACjDD,EAAe,GAAG,QAAUG,GAAiCF,EAAW,MAAME,CAAK,CAAC,CACxF,EACA,QAAS,CACLH,EAAe,QAAQ,CAC3B,EACA,KAAM,OACV,CAAC,CACL","sourcesContent":["import { StreamOptions } from \"stream\";\nimport fs from 'fs'\n\ntype OptionsType = (BufferEncoding | (StreamOptions<any> & { end: any, start: any }))\n\n\n\nexport const streamFile = (path: string, options: OptionsType): ReadableStream<Uint8Array> => {\n    const downloadStream = fs.createReadStream(path, options);\n    return new ReadableStream({\n        start(controller) {\n            downloadStream.on(\"data\", (chunk: Buffer) => controller.enqueue(new Uint8Array(chunk)));\n            downloadStream.on(\"end\", () => controller.close());\n            downloadStream.on(\"error\", (error: NodeJS.ErrnoException) => controller.error(error));\n        },\n        cancel() {\n            downloadStream.destroy();\n        },\n        type: \"bytes\"\n    });\n}\n"]}