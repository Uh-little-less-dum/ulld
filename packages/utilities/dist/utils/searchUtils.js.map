{"version":3,"sources":["../../src/utils/searchUtils.ts"],"names":[],"mappings":";;;;;;AAIO,IAAM,0BAA0B,CAAC,UAA8B;AAClE,SAAO,MAAM,WAAW,oBAAoB,EAAE,EAAE,CAAC;AACrD;AAEO,IAAM,gBAAgB,CAAC,OAA6C;AACvE,MAAI,GAAG,YAAY;AACf,WAAO;AAAA,EACX;AACA,MAAI,GAAG,cAAc;AACjB,WAAO;AAAA,EACX;AACA,MAAI,GAAG,QAAQ,GAAG,KAAK,QAAQ;AAC3B,WAAO;AAAA,EACX;AACA,SAAO;AACX;AAEO,IAAM,qCAAqC,CAC9C,OACkB;AAClB,MAAI,OAAO,IAAI,gBAAgB;AAC/B,MAAI,CAAC,IAAI;AACL,WAAO;AAAA,EACX;AACA,MAAI,GAAG,OAAO;AACV,SAAK,IAAI,SAAS,GAAG,KAAK;AAAA,EAC9B;AACA,MAAI,GAAG,QAAQ,OAAO,GAAG,SAAS,UAAU;AACxC,SAAK,IAAI,QAAQ,GAAG,IAAI;AAAA,EAC5B;AACA,MAAI,GAAG,MAAM;AACT,eAAW,KAAK,eAAe,QAAQ,GAAG,IAAI,GAAG;AAC7C,WAAK,OAAO,QAAQ,CAAC;AAAA,IACzB;AAAA,EACJ;AACA,MAAI,GAAG,MAAM;AACT,SAAK,IAAI,QAAQ,GAAG,IAAI;AAAA,EAC5B;AACA,MAAI,GAAG,QAAQ;AACX,SAAK,IAAI,UAAU,MAAM;AAAA,EAC7B;AACA,MAAI,GAAG,QAAQ;AACX,eAAW,KAAK,eAAe,QAAQ,GAAG,MAAM,GAAG;AAC/C,WAAK,OAAO,UAAU,CAAC;AAAA,IAC3B;AAAA,EACJ;AACA,MAAI,GAAG,UAAU;AACb,eAAW,KAAK,eAAe,QAAQ,GAAG,QAAQ,GAAG;AACjD,WAAK,OAAO,YAAY,CAAC;AAAA,IAC7B;AAAA,EACJ;AACA,MAAI,GAAG,SAAS;AACZ,SAAK,IAAI,WAAW,GAAG,OAAO;AAAA,EAClC;AACA,MAAI,GAAG,UAAU;AACb,eAAW,KAAK,eAAe,QAAQ,GAAG,QAAQ,GAAG;AACjD,WAAK,OAAO,YAAY,EAAE,MAAM;AAAA,IACpC;AAAA,EACJ;AACA,MAAI,GAAG,WAAW;AACd,eAAW,KAAK,eAAe,QAAQ,GAAG,SAAS,GAAG;AAClD,WAAK,OAAO,aAAa,CAAC;AAAA,IAC9B;AAAA,EACJ;AACA,MAAI,GAAG,YAAY;AACf,eAAW,KAAK,eAAe,QAAQ,GAAG,UAAU,GAAG;AACnD,WAAK,OAAO,cAAc,CAAC;AAAA,IAC/B;AAAA,EACJ;AACA,MAAI,GAAG,cAAc;AACjB,SAAK,IAAI,gBAAgB,GAAG,YAAY;AAAA,EAC5C;AACA,MAAI,GAAG,YAAY;AACf,SAAK,IAAI,cAAc,GAAG,UAAU;AAAA,EACxC;AACA,SAAO;AACX;AAEO,IAAM,kCAAkC,CAAC,OAAwB;AACpE,SAAO;AAAA,IACH,MAAM,GAAG,QAAS,CAAC;AAAA,IACnB,QAAQ,GAAG,UAAW,CAAC;AAAA,IACvB,UAAU,GAAG,YAAa,CAAC;AAAA,EAC/B;AACJ;AAEO,IAAM,wBAAwB,CAAC,MAAuB;AACzD,aAAW,KAAK,EAAE,KAAK,GAAG;AACtB,QAAI,MAAM,EAAE,IAAI,CAAC;AACjB,QAAI,CAAC,KAAK;AACN,QAAE,OAAO,CAAC;AAAA,IACd;AAAA,EACJ;AACA,SAAO;AACX","sourcesContent":["import { LetterType, SearchAllSearchType } from \"../types/general.js\";\nimport { SearchAllParams } from \"../types/pageParams.js\";\nimport { ArrayUtilities } from \"./arrayUtilities.js\";\n\nexport const getFirstLetterWithLatex = (value: string): LetterType => {\n    return value.replaceAll(/\\\\|\\:|\\-|\\=|\\_/gm, \"\")[0] as LetterType;\n};\n\nexport const getSearchType = (sp: SearchAllParams): SearchAllSearchType => {\n    if (sp.equationId) {\n        return \"byEquation\";\n    }\n    if (sp.sequentialId) {\n        return \"bySequentialId\";\n    }\n    if (sp.tags && sp.tags.length) {\n        return \"byTag\";\n    }\n    return \"searchAll\";\n};\n\nexport const searchAllParamsToSearchParamsClass = (\n    sp?: Partial<SearchAllParams>,\n): URLSearchParams => {\n    let data = new URLSearchParams();\n    if (!sp) {\n        return data;\n    }\n    if (sp.query) {\n        data.set(\"query\", sp.query);\n    }\n    if (sp.page || typeof sp.page === \"number\") {\n        data.set(\"page\", sp.page);\n    }\n    if (sp.tags) {\n        for (const t of ArrayUtilities.beArray(sp.tags)) {\n            data.append(\"tags\", t);\n        }\n    }\n    if (sp.take) {\n        data.set(\"take\", sp.take);\n    }\n    if (sp.remote) {\n        data.set(\"remote\", \"true\");\n    }\n    if (sp.topics) {\n        for (const t of ArrayUtilities.beArray(sp.topics)) {\n            data.append(\"topics\", t);\n        }\n    }\n    if (sp.subjects) {\n        for (const t of ArrayUtilities.beArray(sp.subjects)) {\n            data.append(\"subjects\", t);\n        }\n    }\n    if (sp.perPage) {\n        data.set(\"perPage\", sp.perPage);\n    }\n    if (sp.tagRegex) {\n        for (const t of ArrayUtilities.beArray(sp.tagRegex)) {\n            data.append(\"tagRegex\", t.source);\n        }\n    }\n    if (sp.citations) {\n        for (const c of ArrayUtilities.beArray(sp.citations)) {\n            data.append(\"citations\", c);\n        }\n    }\n    if (sp.categories) {\n        for (const t of ArrayUtilities.beArray(sp.categories)) {\n            data.append(\"categories\", t);\n        }\n    }\n    if (sp.sequentialId) {\n        data.set(\"sequentialId\", sp.sequentialId);\n    }\n    if (sp.equationId) {\n        data.set(\"equationId\", sp.equationId);\n    }\n    return data;\n};\n\nexport const getTaggablesFromSearchAllParams = (sp: SearchAllParams) => {\n    return {\n        tags: sp.tags || ([] as string[]),\n        topics: sp.topics || ([] as string[]),\n        subjects: sp.subjects || ([] as string[]),\n    };\n};\n\nexport const clearNullSearchParams = (p: URLSearchParams) => {\n    for (const k of p.keys()) {\n        let val = p.get(k);\n        if (!val) {\n            p.delete(k);\n        }\n    }\n    return p;\n};\n"]}