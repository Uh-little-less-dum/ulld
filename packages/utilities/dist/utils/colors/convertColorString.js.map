{"version":3,"sources":["../../../src/utils/colors/convertColorString.ts"],"names":[],"mappings":";;;AAAA,OAAO,eAAe;AAGf,IAAM,qBAAqB,CAC9B,OACA,SAAsC,UACrC;AACD,MAAI,MAAM,QAAQ,KAAK,MAAM,IAAI;AAC7B,WAAO;AAAA,EACX;AACA,MAAI,WAAW,OAAO;AAClB,WAAO,UAAU,KAAK,EAAE,YAAY;AAAA,EACxC;AAEA,MAAI,WAAW,OAAO;AAClB,WAAO,UAAU,KAAK,EAAE,YAAY;AAAA,EACxC;AACA,MAAI,WAAW,OAAO;AAClB,WAAO,UAAU,KAAK,EAAE,YAAY;AAAA,EACxC;AACA,MAAI,WAAW,OAAO;AAClB,WAAO,UAAU,KAAK,EAAE,YAAY;AAAA,EACxC;AACJ","sourcesContent":["import tinycolor from \"tinycolor2\";\nimport { AvailableColorStringFormats } from \"../../types/colors.js\";\n\nexport const convertColorString = (\n    value: string,\n    format: AvailableColorStringFormats = \"hsl\",\n) => {\n    if (value.indexOf(\"var\") !== -1) {\n        return value;\n    }\n    if (format === \"hsl\") {\n        return tinycolor(value).toHslString();\n    }\n\n    if (format === \"hex\") {\n        return tinycolor(value).toHexString();\n    }\n    if (format === \"hsv\") {\n        return tinycolor(value).toHsvString();\n    }\n    if (format === \"rgb\") {\n        return tinycolor(value).toRgbString();\n    }\n};\n"]}