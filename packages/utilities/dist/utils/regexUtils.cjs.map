{"version":3,"sources":["../../src/utils/getAllRegexMatches.ts","../../src/utils/replaceContentByRegexMatch.ts"],"names":[],"mappings":";AAAO,IAAM,qBAAqB,CAAC,SAAiB,UAAkB;AAClE,MAAI,UAA6B,CAAC;AAElC,MAAI,IAAI;AACR,MAAI;AACJ,KAAG;AACC,QAAI,MAAM,KAAK,CAAC;AAChB,QAAI,GAAG;AACH,cAAQ,KAAK,CAAC;AAAA,IAClB;AAAA,EACJ,SAAS;AACT,SAAO;AACX;;;ACVO,IAAM,wBAAwB,CAAC,SAAiB,OAAyB,OAAe,eAA+D;AAC1J,MAAG,CAAC,MAAM,QAAO;AACb,YAAQ,IAAI,kCAAkC,KAAK,EAAE;AACrD,WAAO;AAAA,EACX;AACA,MAAI,aAAa,MAAM,SAAS,KAAK;AACrC,UAAQ,IAAI,WAAW,KAAK;AAC5B,MAAG,CAAC,YAAW;AACX,UAAM,IAAI,MAAM,yEAAyE,KAAK,qBAAqB,OAAO,KAAK,MAAM,MAAM,EAAE,KAAK,IAAI,CAAC,EAAE;AAAA,EAC7J;AAEA,MAAI,IAAI,QAAQ,WAAW,MAAM,CAAC,GAAG,OAAO,eAAe,WAAW,aAAa,WAAW,UAAU,CAAC;AACzG,SAAO;AACX","sourcesContent":["export const getAllRegexMatches = (content: string, regex: RegExp) => {\n    let results: RegExpExecArray[] = [];\n\n    let c = content;\n    let m;\n    do {\n        m = regex.exec(c);\n        if (m) {\n            results.push(m);\n        }\n    } while (m);\n    return results\n};\n","\n\nexport const replaceContentByMatch = (content: string, match: RegExpMatchArray, group: string, newContent: string | ((matchGroupValue: string) => string)) => {\n    if(!match.groups){\n        console.log(`No groups were found for match ${match}`)\n        return content\n    }\n    let matchValue = match.groups?.[group]\n    console.log(\"match: \", match)\n    if(!matchValue){\n        throw new Error(`An invalid match group was given to replaceContentByMatch. Looked for ${group} and found groups ${Object.keys(match.groups).join(\", \")}`)\n    }\n\n    let c = content.replaceAll(match[0], typeof newContent === \"string\" ? newContent : newContent(matchValue))\n    return c\n}\n"]}