{"version":3,"sources":["../../src/utils/fsRootGlob.ts"],"names":["supportedFileTypes","FsRootGlob","props","fts","defaultOpts","ArrayUtilities","vals","appConfig","opts","res","getGlobServerSide"],"mappings":"8KAAA,OAA4B,sBAAAA,MAA0B,oBAKtD,MAAO,cAYA,IAAMC,EAAN,KAAiB,CACpB,YAAmBC,EAAuB,CAAvB,WAAAA,CAAwB,CAE3C,+BAA+BC,EAAwD,CACnF,MAAO,IAAIA,EAAI,KAAK,GAAG,CAAC,GAC5B,CAEA,eAAeC,EAA0C,CACrD,IAAID,EAAM,KAAK,MAAM,UAAYE,EAAe,QAAQ,KAAK,MAAM,SAAS,EAAIL,EAChF,MAAO,GAAG,KAAK,MAAM,IAAI,IAAI,KAAK,+BAA+BG,CAAG,CAAC,EACzE,CAEA,aAAaC,EAA6C,CACtD,MAAO,CACH,KAAM,QACN,KAAM,KAAK,eAAe,EAC1B,GAAGA,CACP,CACJ,CAGA,YAAYE,EAAgB,CACxB,OAAOA,CACX,CAEA,MAAM,eAAeC,EAAkCC,EAA0B,CAC7E,IAAIC,EAAM,MAAMC,EAAkB,KAAK,aAAaF,CAAI,EAAGD,CAAS,EACpE,OAAOE,EAAM,KAAK,YAAYA,CAAG,EAAI,CAAC,CAC1C,CACJ","sourcesContent":["import { SupportedFileType, supportedFileTypes } from \"@ulld/types/enums\"\nimport { filePathGlobPropsSchema } from \"../schemas/filePath/filePathInput.js\"\nimport { z } from 'zod'\nimport { ArrayUtilities } from \"./arrayUtilities.js\"\nimport { AppConfigSchemaOutput } from \"@ulld/types\"\nimport \"server-only\"\nimport { getGlobServerSide } from \"./glob/getGlobServerSide.js\"\n\ninterface FsRootGlobProps {\n    path: string\n    isSinglePath?: boolean\n    fileTypes?: SupportedFileType | SupportedFileType[]\n}\n\n\ntype GlobInput = z.input<typeof filePathGlobPropsSchema>\n\nexport class FsRootGlob {\n    constructor(public props: FsRootGlobProps){}\n\n    formatFileTypeArrayGlobPattern(fts: (SupportedFileType)[] | typeof supportedFileTypes) {\n        return `{${fts.join(\",\")}}`\n    }\n\n    getGlobPattern(defaultOpts?: Partial<GlobInput>): string {\n        let fts = this.props.fileTypes ? ArrayUtilities.beArray(this.props.fileTypes) : supportedFileTypes\n        return `${this.props.path}.${this.formatFileTypeArrayGlobPattern(fts)}`\n    }\n\n    getFetchOpts(defaultOpts?: Partial<GlobInput>): GlobInput {\n        return {\n            type: \"files\",\n            glob: this.getGlobPattern(),\n            ...defaultOpts\n        }\n    }\n\n    // TODO: Add method here to sort these results by the file types preffered order in the appConfig.\n    sortResults(vals: string[]) {\n        return vals\n    }\n\n    async getFileMatches(appConfig: AppConfigSchemaOutput, opts?: Partial<GlobInput>){\n        let res = await getGlobServerSide(this.getFetchOpts(opts), appConfig)\n        return res ? this.sortResults(res) : []\n    }\n}\n"]}