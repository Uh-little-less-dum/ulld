{"version":3,"sources":["../../../src/utils/baseAppUtils/componentDocPathUtils.ts"],"names":["path","fs","componentDocsPathFromPluginComponent","pluginName","componentName","full","projectRoot","componentDocQueryObjectToUrl","query","url","t","docItemToComponentDocsFilePath","item","getComponentDocsContentFromItem","filePath","getItemsByQuery","buildData","ComponentDocsQuery","getPluginDocContentByIds","permitOppositeOfFullIfNotFound","x","content"],"mappings":"yEAAA,OAAOA,MAAU,OACjB,OAAOC,MAAQ,KAKR,IAAMC,EAAuC,CAChDC,EACAC,EACAC,EAAO,GACPC,IAEON,EAAK,KACRM,GAAe,QAAQ,IAAI,EAC3B,oBACA,gBACAD,EAAO,OAAS,QAChB,UAAUF,CAAU,EACpB,GAAG,UAAUC,CAAa,CAAC,MAC/B,EAISG,EAAgCC,GAA4C,CACrF,IAAMC,EAAM,IAAI,gBAChB,OAAGD,EAAM,MACJ,MAAM,QAAQA,EAAM,GAAG,EAAIA,EAAM,IAAM,CAACA,EAAM,GAAG,GAAG,QAASE,GAAM,CAChED,EAAI,OAAO,MAAOC,CAAC,CACvB,CAAC,EAEFF,EAAM,MACLC,EAAI,IAAI,OAAQ,MAAM,EAEvBD,EAAM,OACLC,EAAI,IAAI,QAASD,EAAM,KAAK,EAE7BA,EAAM,QACLC,EAAI,IAAI,SAAUD,EAAM,MAAM,EAE/BA,EAAM,UACLC,EAAI,IAAI,WAAYD,EAAM,QAAQ,EAE/B,kBAAkBC,EAAI,SAAS,CAAC,EAC3C,EAEaE,EAAiC,CAC1CC,EACAP,EAAO,KAEAH,EACHU,EAAK,WACLA,EAAK,cACLP,CACJ,EAGSQ,EAAkC,MAC3CD,EACAP,EAAO,KACuB,CAC9B,IAAMS,EAAWH,EAA+BC,EAAMP,CAAI,EAC1D,GAAI,GAACS,GAAY,CAACb,EAAG,WAAWa,CAAQ,GAGxC,OAAOb,EAAG,SAAS,SAASa,EAAU,CAAE,SAAU,OAAQ,CAAC,CAC/D,EAEaC,EAAkB,CAC3BC,EACAR,IAEiB,IAAIS,EAAmB,EACxB,SAASD,EAAU,cAAeR,CAAK,EAG9CU,EAA2B,MACpCF,EACAb,EACAC,EACAC,EAAO,GACPc,EAAiC,KAInB,CACd,IAAMP,EAAOI,EAAU,cAAc,KAAMI,GAC/BA,EAAE,aAAejB,GAAciB,EAAE,gBAAkBhB,CAC/D,EACA,GAAGQ,EAAM,CACL,IAAIS,EAAU,MAAMR,EAAgCD,EAAMP,CAAI,EAC9D,MAAG,CAACgB,GAAWF,IACXE,EAAU,MAAMR,EAAgCD,EAAM,CAACP,CAAI,GAExD,CACH,KAAAO,EACA,QAAAS,CACJ,CACJ,CACJ","sourcesContent":["import path from \"path\";\nimport fs from \"fs\";\nimport type { BuildStaticDataOutput } from \"@ulld/types\";\nimport type { ComponentDocsQueryParams } from \"../../types/baseApp/componentDocsQuery.js\";\nimport { ComponentDocsQuery } from \"../../classes/query/componentDocs.js\";\n\nexport const componentDocsPathFromPluginComponent = (\n    pluginName: string,\n    componentName: string,\n    full = false,\n    projectRoot?: string,\n): string => {\n    return path.join(\n        projectRoot || process.cwd(),\n        \"generatedMarkdown\",\n        \"componentDocs\",\n        full ? \"full\" : \"short\",\n        encodeURI(pluginName),\n        `${encodeURI(componentName)}.mdx`,\n    );\n};\n\n\nexport const componentDocQueryObjectToUrl = (query: ComponentDocsQueryParams): string => {\n    const url = new URLSearchParams()\n    if(query.tag){\n        (Array.isArray(query.tag) ? query.tag : [query.tag]).forEach((t) => {\n            url.append(\"tag\", t)\n        })\n    }\n    if(query.full){\n        url.set(\"full\", \"true\")\n    }\n    if(query.query){\n        url.set(\"query\", query.query)\n    }\n    if(query.syntax){\n        url.set(\"syntax\", query.syntax)\n    }\n    if(query.pluginId){\n        url.set(\"pluginId\", query.pluginId)\n    }\n    return `/componentDocs?${url.toString()}`\n}\n\nexport const docItemToComponentDocsFilePath = (\n    item: NonNullable<BuildStaticDataOutput[\"componentDocs\"]>[number],\n    full = false,\n): string => {\n    return componentDocsPathFromPluginComponent(\n        item.pluginName,\n        item.componentName,\n        full,\n    );\n};\n\nexport const getComponentDocsContentFromItem = async (\n    item: NonNullable<BuildStaticDataOutput[\"componentDocs\"]>[number],\n    full = false,\n): Promise<string | undefined> => {\n    const filePath = docItemToComponentDocsFilePath(item, full);\n    if (!filePath || !fs.existsSync(filePath)) {\n        return;\n    }\n    return fs.promises.readFile(filePath, { encoding: \"utf-8\" });\n};\n\nexport const getItemsByQuery = (\n    buildData: BuildStaticDataOutput,\n    query: ComponentDocsQueryParams,\n): ReturnType<InstanceType<typeof ComponentDocsQuery>[\"queryAll\"]> => {\n    const docQuery = new ComponentDocsQuery();\n    return docQuery.queryAll(buildData.componentDocs, query);\n};\n\nexport const getPluginDocContentByIds = async (\n    buildData: BuildStaticDataOutput,\n    pluginName: string,\n    componentName: string,\n    full = false,\n    permitOppositeOfFullIfNotFound = true\n): Promise<{\n    item: NonNullable<BuildStaticDataOutput[\"componentDocs\"]>[number]\n    content: string | undefined\n} | undefined> => {\n    const item = buildData.componentDocs.find((x) =>\n        Boolean(x.pluginName === pluginName && x.componentName === componentName),\n    );\n    if(item) {\n        let content = await getComponentDocsContentFromItem(item, full)\n        if(!content && permitOppositeOfFullIfNotFound){\n            content = await getComponentDocsContentFromItem(item, !full)\n        }\n        return {\n            item,\n            content\n        }\n    }\n};\n"]}