{"version":3,"sources":["../../../src/utils/baseAppUtils/getAllPlugins.ts","../../../src/utils/baseAppUtils/getPluginConfig.ts"],"names":[],"mappings":";AAEO,IAAM,gBAAgB,CAAC,cAAqC;AAC/D,MAAI,OAGE,UAAU;AAChB,aAAW,KAAK,UAAU,OAAO;AAC7B,WAAO,KAAK,OAAO,UAAU,MAAM,CAAiC,CAAC;AAAA,EACzE;AACA,SAAO;AACX;;;ACRO,IAAM,kBAAkB,CAAC,EAAC,YAAY,UAAS,MAGhD;AACF,SAAO,cAAc,SAAS,EAAE,KAAK,CAAC,MAAM,EAAE,eAAe,UAAU;AAC3E","sourcesContent":["import {  AppConfigSchemaOutput } from \"@ulld/types\";\n\nexport const getAllPlugins = (appConfig: AppConfigSchemaOutput) => { \n    let data: (\n        | AppConfigSchemaOutput[\"plugins\"][number]\n        | AppConfigSchemaOutput[\"slots\"][\"UI\"][number]\n    )[] = appConfig.plugins;\n    for (const k in appConfig.slots) {\n        data = data.concat(appConfig.slots[k as keyof typeof appConfig.slots]);\n    }\n    return data\n};\n","import { AppConfigSchemaOutput } from \"@ulld/types\";\nimport {getAllPlugins} from \"./getAllPlugins.js\"\n\nexport const getPluginConfig = ({pluginName, appConfig}: {\n    appConfig: AppConfigSchemaOutput,\n    pluginName: string\n}) => {\n    return getAllPlugins(appConfig).find((p) => p.pluginName === pluginName);\n};\n"]}