{"version":3,"sources":["../../src/utils/cors.ts"],"names":[],"mappings":";;;AACA,SAA2B,oBAAoB;AAExC,IAAM,iBAAiB,CAAC,KAA4B,UAAkB,QAAQ;AACjF,QAAM,SAAS,IAAI,QAAQ,IAAI,QAAQ,KAAK;AAC5C,SAAO;AAAA,IACH,QAAQ;AAAA,IACR,SAAS;AAAA,MACL,+BAA+B;AAAA,MAC/B,gBAAgB;AAAA,MAChB,gCAAgC;AAAA,MAChC,gCAAgC;AAAA,IACpC;AAAA,EACJ;AACJ;AAEO,IAAM,wBAAwB,OAAO,KAA4B,QAAwB;AAC5F,SAAO,IAAI,aAAa,MAAM,eAAe,GAAG,CAAC;AACrD","sourcesContent":["import { RequestContext } from \"next/dist/server/base-server\"\nimport { type NextRequest, NextResponse } from \"next/server\"\n\nexport const getCorsHeaders = (req: NextRequest | Request, _status: number = 200) => {\n    const origin = req.headers.get(\"origin\") || \"*\"\n    return {\n        status: _status,\n        headers: {\n            \"Access-Control-Allow-Origin\": origin,\n            \"Content-Type\": \"application/json\",\n            'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n            'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n        }\n    }\n}\n\nexport const optionsMethodResponse = async (req: NextRequest | Request, ctx: RequestContext) => {\n    return new NextResponse(null, getCorsHeaders(req))\n}\n"]}