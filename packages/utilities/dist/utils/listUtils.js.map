{"version":3,"sources":["../../src/utils/listUtils.ts"],"names":[],"mappings":";;;AAAO,IAAM,gBAAgB,CAAoB,QAAgB;AAC7D,SAAO,IAAI,KAAK,MAAM,KAAK,OAAO,IAAI,IAAI,MAAM,CAAC;AACrD;AAIO,IAAM,OAAO,CAAoB,GAAW,OAC/C,MAAM,CAAC,EACF,KAAK,CAAC,EACN,IAAI,CAAC,GAAG,MAAM,GAAG,CAAC,CAAC;AAGrB,IAAM,qBAAqB,CAAoB,SAAc;AAChE,MAAI,UAAe,CAAC;AACpB,aAAW,KAAK,MAAM;AACnB,QAAG,CAAC,QAAQ,SAAS,CAAC,GAAE;AACnB,cAAQ,KAAK,CAAC;AAAA,IAClB;AAAA,EACJ;AACA,SAAO;AACX","sourcesContent":["export const randomFromArr = <T extends unknown>(arr: T[]): T => {\n    return arr[Math.floor(Math.random() * arr.length)] as T\n}\n\n\n\nexport const forN = <T extends unknown>(n: number, cb: (idx: number) => T): T[] =>\n    Array(n)\n        .fill(0)\n        .map((_, i) => cb(i));\n\n\nexport const removeArrayOverlap = <T extends unknown>(data: T[]) => {\n    let newData: T[] = []\n    for (const k of data) {\n       if(!newData.includes(k)){\n            newData.push(k)\n        } \n    }\n    return newData\n}\n"]}