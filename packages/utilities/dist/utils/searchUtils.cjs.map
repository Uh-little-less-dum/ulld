{"version":3,"sources":["../../src/utils/searchUtils.ts"],"names":["getFirstLetterWithLatex","value","getSearchType","sp","searchAllParamsToSearchParamsClass","data","t","ArrayUtilities","c","getTaggablesFromSearchAllParams","clearNullSearchParams","p","k"],"mappings":"wEAIO,IAAMA,EAA2BC,GAC7BA,EAAM,WAAW,mBAAoB,EAAE,EAAE,CAAC,EAGxCC,EAAiBC,GACtBA,EAAG,WACI,aAEPA,EAAG,aACI,iBAEPA,EAAG,MAAQA,EAAG,KAAK,OACZ,QAEJ,YAGEC,EACTD,GACkB,CAClB,IAAIE,EAAO,IAAI,gBACf,GAAI,CAACF,EACD,OAAOE,EAQX,GANIF,EAAG,OACHE,EAAK,IAAI,QAASF,EAAG,KAAK,GAE1BA,EAAG,MAAQ,OAAOA,EAAG,MAAS,WAC9BE,EAAK,IAAI,OAAQF,EAAG,IAAI,EAExBA,EAAG,KACH,QAAWG,KAAKC,EAAe,QAAQJ,EAAG,IAAI,EAC1CE,EAAK,OAAO,OAAQC,CAAC,EAS7B,GANIH,EAAG,MACHE,EAAK,IAAI,OAAQF,EAAG,IAAI,EAExBA,EAAG,QACHE,EAAK,IAAI,SAAU,MAAM,EAEzBF,EAAG,OACH,QAAWG,KAAKC,EAAe,QAAQJ,EAAG,MAAM,EAC5CE,EAAK,OAAO,SAAUC,CAAC,EAG/B,GAAIH,EAAG,SACH,QAAWG,KAAKC,EAAe,QAAQJ,EAAG,QAAQ,EAC9CE,EAAK,OAAO,WAAYC,CAAC,EAMjC,GAHIH,EAAG,SACHE,EAAK,IAAI,UAAWF,EAAG,OAAO,EAE9BA,EAAG,SACH,QAAWG,KAAKC,EAAe,QAAQJ,EAAG,QAAQ,EAC9CE,EAAK,OAAO,WAAYC,EAAE,MAAM,EAGxC,GAAIH,EAAG,UACH,QAAWK,KAAKD,EAAe,QAAQJ,EAAG,SAAS,EAC/CE,EAAK,OAAO,YAAaG,CAAC,EAGlC,GAAIL,EAAG,WACH,QAAWG,KAAKC,EAAe,QAAQJ,EAAG,UAAU,EAChDE,EAAK,OAAO,aAAcC,CAAC,EAGnC,OAAIH,EAAG,cACHE,EAAK,IAAI,eAAgBF,EAAG,YAAY,EAExCA,EAAG,YACHE,EAAK,IAAI,aAAcF,EAAG,UAAU,EAEjCE,CACX,EAEaI,EAAmCN,IACrC,CACH,KAAMA,EAAG,MAAS,CAAC,EACnB,OAAQA,EAAG,QAAW,CAAC,EACvB,SAAUA,EAAG,UAAa,CAAC,CAC/B,GAGSO,EAAyBC,GAAuB,CACzD,QAAWC,KAAKD,EAAE,KAAK,EACTA,EAAE,IAAIC,CAAC,GAEbD,EAAE,OAAOC,CAAC,EAGlB,OAAOD,CACX","sourcesContent":["import { LetterType, SearchAllSearchType } from \"../types/general.js\";\nimport { SearchAllParams } from \"../types/pageParams.js\";\nimport { ArrayUtilities } from \"./arrayUtilities.js\";\n\nexport const getFirstLetterWithLatex = (value: string): LetterType => {\n    return value.replaceAll(/\\\\|\\:|\\-|\\=|\\_/gm, \"\")[0] as LetterType;\n};\n\nexport const getSearchType = (sp: SearchAllParams): SearchAllSearchType => {\n    if (sp.equationId) {\n        return \"byEquation\";\n    }\n    if (sp.sequentialId) {\n        return \"bySequentialId\";\n    }\n    if (sp.tags && sp.tags.length) {\n        return \"byTag\";\n    }\n    return \"searchAll\";\n};\n\nexport const searchAllParamsToSearchParamsClass = (\n    sp?: Partial<SearchAllParams>,\n): URLSearchParams => {\n    let data = new URLSearchParams();\n    if (!sp) {\n        return data;\n    }\n    if (sp.query) {\n        data.set(\"query\", sp.query);\n    }\n    if (sp.page || typeof sp.page === \"number\") {\n        data.set(\"page\", sp.page);\n    }\n    if (sp.tags) {\n        for (const t of ArrayUtilities.beArray(sp.tags)) {\n            data.append(\"tags\", t);\n        }\n    }\n    if (sp.take) {\n        data.set(\"take\", sp.take);\n    }\n    if (sp.remote) {\n        data.set(\"remote\", \"true\");\n    }\n    if (sp.topics) {\n        for (const t of ArrayUtilities.beArray(sp.topics)) {\n            data.append(\"topics\", t);\n        }\n    }\n    if (sp.subjects) {\n        for (const t of ArrayUtilities.beArray(sp.subjects)) {\n            data.append(\"subjects\", t);\n        }\n    }\n    if (sp.perPage) {\n        data.set(\"perPage\", sp.perPage);\n    }\n    if (sp.tagRegex) {\n        for (const t of ArrayUtilities.beArray(sp.tagRegex)) {\n            data.append(\"tagRegex\", t.source);\n        }\n    }\n    if (sp.citations) {\n        for (const c of ArrayUtilities.beArray(sp.citations)) {\n            data.append(\"citations\", c);\n        }\n    }\n    if (sp.categories) {\n        for (const t of ArrayUtilities.beArray(sp.categories)) {\n            data.append(\"categories\", t);\n        }\n    }\n    if (sp.sequentialId) {\n        data.set(\"sequentialId\", sp.sequentialId);\n    }\n    if (sp.equationId) {\n        data.set(\"equationId\", sp.equationId);\n    }\n    return data;\n};\n\nexport const getTaggablesFromSearchAllParams = (sp: SearchAllParams) => {\n    return {\n        tags: sp.tags || ([] as string[]),\n        topics: sp.topics || ([] as string[]),\n        subjects: sp.subjects || ([] as string[]),\n    };\n};\n\nexport const clearNullSearchParams = (p: URLSearchParams) => {\n    for (const k of p.keys()) {\n        let val = p.get(k);\n        if (!val) {\n            p.delete(k);\n        }\n    }\n    return p;\n};\n"]}