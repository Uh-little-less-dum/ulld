{"version":3,"sources":["../../../src/utils/build/additionalSourceFileStructure.ts"],"names":["path","fileItems","items","filePath","additionalFilePaths","getFlattenedFileItems","data","k"],"mappings":"iCAAA,OAAOA,MAAU,OA2BV,IAAMC,EAAyD,CAClE,MAAO,CACH,CACI,QAAS,aACT,SAAU,mBACV,QAAS,SACT,SAAWC,GAAUA,EAAM,SAAS,mBAAmB,EACvD,mBAAoB,GACpB,cAAgBC,GACT,2BAA2BA,EAAS,WAAW,SAASH,EAAK,GAAG,EAAE,EAAIG,EAAS,MAAM,SAASH,EAAK,GAAG,GAAG,MAAM,EAAIG,CAAQ,EAEtI,CACJ,EACA,OAAQ,CACJ,CACI,QAAS,KACT,SAAU,YACV,QAAS,SACT,cAAgBA,GAAaA,EAC7B,cAAe,EACnB,CACJ,EACA,KAAM,CACF,CACI,QAAS,qBACT,SAAU,qBACV,cAAe,IAAM,oBACzB,EACA,CACI,QAAS,kBACT,SAAU,QACV,SAAU,QACV,cAAgBA,GAAaA,CACjC,EACA,CACI,QAAS,sBACT,SAAU,sBACV,SAAU,sBACV,cAAe,IAAM,qBACzB,EACA,CACI,QAAS,OACT,SAAU,OACV,SAAU,OACV,cAAe,IAAM,YACzB,EACA,CACI,QAAS,wBACT,SAAU,wBACV,cAAgBA,GAAa,UAAUA,CAAQ,EACnD,CACJ,CACJ,EAGaC,EAAoC,CAC7C,QAAS,IACT,MAAO,CACH,GAAGH,EAAU,KACb,CACI,QAAS,SACT,MAAOA,EAAU,KACrB,EACA,CACI,QAAS,SACT,MAAO,CACH,CACI,QAAS,wBACT,SAAU,4BACV,MAAOA,EAAU,MACrB,CACJ,CACJ,CACJ,CACJ,EAEaI,EAAwB,IAAM,CACvC,IAAIC,EAA+B,CAAC,EACpC,QAAWC,KAAKN,EACZK,EAAOA,EAAK,OAAOL,EAAUM,CAA2B,CAAC,EAE7D,OAAOD,CACX","sourcesContent":["import path from \"path\";\nimport type { WithRequired } from \"../../types/utilityTypes.js\";\n\nexport type FilePathItem = {\n    subPath: string;\n    globPath?: string;\n    forceDirDisplay?: boolean;\n    rootGlob?: string;\n    allowMultiple?: boolean;\n    dirPath?: string;\n    includeDirContents?: boolean;\n    validate?: (files: string[]) => boolean;\n    items?: FilePathItem[];\n};\n\nexport type AdditionalSourceReplaceKey =\n    | \"<FILENAME>\"\n    | \"<PLUGIN_UNIQUE_ID>\"\n    | \"<NOT_EXISTING_PUBLIC_DIR>\"\n    | \"<PATH_AFTER>\";\n\ntype FileItemKey = \"style\" | \"public\" | \"root\";\n\nexport type FileItemWithRootGlob = WithRequired<FilePathItem, \"rootGlob\"> & {\n    getOutputPath: (relativeFilePath: string) => string;\n};\n\nexport const fileItems: Record<FileItemKey, FileItemWithRootGlob[]> = {\n    style: [\n        {\n            subPath: \"index.scss\",\n            rootGlob: \"styles/**/*.scss\",\n            dirPath: \"styles\",\n            validate: (items) => items.includes(\"styles/index.scss\"),\n            includeDirContents: true,\n            getOutputPath: (filePath) => {\n            return `src/styles/userProvided/${filePath.startsWith(`styles${path.sep}`) ? filePath.slice(`styles${path.sep}`.length) : filePath}`\n            }\n        },\n    ],\n    public: [\n        {\n            subPath: \"**\",\n            rootGlob: \"public/**\",\n            dirPath: \"public\",\n            getOutputPath: (filePath) => filePath,\n            allowMultiple: true,\n        },\n    ],\n    root: [\n        {\n            subPath: \"tailwind.config.ts\",\n            rootGlob: \"tailwind.config.ts\",\n            getOutputPath: () => \"tailwind.config.ts\",\n        },\n        {\n            subPath: \"anyFilename.bib\",\n            globPath: \"*.bib\",\n            rootGlob: \"*.bib\",\n            getOutputPath: (filePath) => filePath,\n        },\n        {\n            subPath: \"appConfig.ulld.json\",\n            globPath: \"appConfig.ulld.json\",\n            rootGlob: \"appConfig.ulld.json\",\n            getOutputPath: () => \"appConfig.ulld.json\",\n        },\n        {\n            subPath: \".env\",\n            globPath: \".env\",\n            rootGlob: \".env\",\n            getOutputPath: () => \".env.local\",\n        },\n        {\n            subPath: \"favicon.{ico,png,jpg}\",\n            rootGlob: \"favicon.{ico,png,jpg}\",\n            getOutputPath: (filePath) => `public/${filePath}`,\n        },\n    ],\n};\n\n\nexport const additionalFilePaths: FilePathItem = {\n    subPath: \"/\",\n    items: [\n        ...fileItems.root,\n        {\n            subPath: \"styles\",\n            items: fileItems.style,\n        },\n        {\n            subPath: \"public\",\n            items: [\n                {\n                    subPath: \"unreserved-public-dir\",\n                    globPath: \"<NOT_EXISTING_PUBLIC_DIR>\",\n                    items: fileItems.public,\n                },\n            ],\n        },\n    ],\n};\n\nexport const getFlattenedFileItems = () => {\n    let data: FileItemWithRootGlob[] = [];\n    for (const k in fileItems) {\n        data = data.concat(fileItems[k as keyof typeof fileItems]);\n    }\n    return data;\n};\n"]}