{"version":3,"sources":["../../../src/utils/build/copyJsonFilesToDist.ts"],"names":["globSync","fs","path","copyJsonFilesToDist","cwd","glob","files","f","prependUseClient","p","content","prependDirectives","dirName","ignore","distPaths"],"mappings":"iCAAA,OAAS,YAAAA,MAAgB,OACzB,OAAOC,MAAQ,KACf,OAAOC,MAAU,OAGV,IAAMC,EAAsB,CAACC,EAAaC,EAAe,gBAAiBC,IAAqB,CAC9FA,IACAA,EAAQN,EAASK,EAAM,CACnB,IAAKD,EACL,MAAO,EACX,CAAC,GAEL,QAAWG,KAAKD,EACZL,EAAG,OAAOC,EAAK,KAAKE,EAAKG,CAAC,EAAGL,EAAK,KAAKE,EAAKG,EAAE,QAAQ,OAAQ,OAAO,CAAC,CAAC,CAE/E,EAEMC,EAAoBC,GAAc,CACpC,IAAIC,EAAUT,EAAG,aAAaQ,EAAG,CAC7B,SAAU,OACd,CAAC,EACDR,EAAG,cACCQ,EACA;AAAA,EACNC,CAAO,GACD,CACI,SAAU,OACd,CACJ,CACJ,EAIaC,EAAoB,MAAOC,EAAiBC,IAAsB,CAC/Db,EAAS,gBAAiB,CAClC,IAAKE,EAAK,KAAKU,EAAS,KAAK,EAC7B,MAAO,GACP,SAAU,GACV,OAAAC,CACJ,CAAC,EACK,QAASN,GAAM,CACjB,IAAIO,EAAY,CACZ,IAAKP,EAAE,QAAQ,QAAS,QAAQ,EAAE,QAAQ,SAAU,MAAM,EAC1D,IAAKA,EAAE,QAAQ,QAAS,QAAQ,EAAE,QAAQ,SAAU,MAAM,CAC9D,EACKN,EAAG,WAAWa,EAAU,GAAG,IAC5B,QAAQ,MAAM,4BAA4BA,EAAU,GAAG,EAAE,EACzD,QAAQ,KAAK,GAGZb,EAAG,WAAWa,EAAU,GAAG,IAC5B,QAAQ,MAAM,4BAA4BA,EAAU,GAAG,EAAE,EACzD,QAAQ,KAAK,GAGjB,IAAIJ,EAAUT,EAAG,aAAaM,EAAG,CAC7B,SAAU,OACd,CAAC,GAEGG,EAAQ,SAAS,cAAc,GAAKA,EAAQ,SAAS,cAAc,KACnEF,EAAiBM,EAAU,GAAG,EAC9BN,EAAiBM,EAAU,GAAG,EAEtC,CAAC,EACDX,EAAoB,SAAS,CACjC","sourcesContent":["import { globSync } from \"glob\";\nimport fs from 'fs'\nimport path from 'path'\n\n\nexport const copyJsonFilesToDist = (cwd: string, glob: string = \"src/**/*.json\", files?: string[]) => {\n    if(!files){\n        files = globSync(glob, {\n            cwd: cwd,\n            nodir: true\n        })\n    }\n    for (const f of files) {\n        fs.cpSync(path.join(cwd, f), path.join(cwd, f.replace(\"src/\", \"dist/\")))\n    }\n}\n\nconst prependUseClient = (p: string) => {\n    let content = fs.readFileSync(p, {\n        encoding: \"utf-8\",\n    });\n    fs.writeFileSync(\n        p,\n        `\"use client\"\n${content}`,\n        {\n            encoding: \"utf-8\",\n        },\n    );\n};\n\n\n\nexport const prependDirectives = async (dirName: string, ignore?: string[]) => {\n    let files = globSync(\"**/*.{tsx,ts}\", {\n        cwd: path.join(dirName, \"src\"),\n        nodir: true,\n        absolute: true,\n        ignore\n    });\n    files.forEach((f) => {\n        let distPaths = {\n            cjs: f.replace(\"/src/\", \"/dist/\").replace(/\\.tsx?/, \".cjs\"),\n            esm: f.replace(\"/src/\", \"/dist/\").replace(/\\.tsx?/, \".mjs\"),\n        };\n        if (!fs.existsSync(distPaths.cjs)) {\n            console.error(`Could not find dist path ${distPaths.cjs}`);\n            process.exit();\n        }\n\n        if (!fs.existsSync(distPaths.esm)) {\n            console.error(`Could not find dist path ${distPaths.esm}`);\n            process.exit();\n        }\n\n        let content = fs.readFileSync(f, {\n            encoding: \"utf-8\",\n        });\n\n        if (content.includes('\"use client\"') || content.includes(\"'use client'\")) {\n            prependUseClient(distPaths.cjs);\n            prependUseClient(distPaths.esm);\n        }\n    });\n    copyJsonFilesToDist(__dirname);\n};\n"]}