{"version":3,"sources":["../../../src/utils/build/additionalSourceFileStructure.ts"],"names":[],"mappings":";;;AAAA,OAAO,UAAU;AA2BV,IAAM,YAAyD;AAAA,EAClE,OAAO;AAAA,IACH;AAAA,MACI,SAAS;AAAA,MACT,UAAU;AAAA,MACV,SAAS;AAAA,MACT,UAAU,CAAC,UAAU,MAAM,SAAS,mBAAmB;AAAA,MACvD,oBAAoB;AAAA,MACpB,eAAe,CAAC,aAAa;AAC7B,eAAO,2BAA2B,SAAS,WAAW,SAAS,KAAK,GAAG,EAAE,IAAI,SAAS,MAAM,SAAS,KAAK,GAAG,GAAG,MAAM,IAAI,QAAQ;AAAA,MAClI;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,QAAQ;AAAA,IACJ;AAAA,MACI,SAAS;AAAA,MACT,UAAU;AAAA,MACV,SAAS;AAAA,MACT,eAAe,CAAC,aAAa;AAAA,MAC7B,eAAe;AAAA,IACnB;AAAA,EACJ;AAAA,EACA,MAAM;AAAA,IACF;AAAA,MACI,SAAS;AAAA,MACT,UAAU;AAAA,MACV,eAAe,MAAM;AAAA,IACzB;AAAA,IACA;AAAA,MACI,SAAS;AAAA,MACT,UAAU;AAAA,MACV,UAAU;AAAA,MACV,eAAe,CAAC,aAAa;AAAA,IACjC;AAAA,IACA;AAAA,MACI,SAAS;AAAA,MACT,UAAU;AAAA,MACV,UAAU;AAAA,MACV,eAAe,MAAM;AAAA,IACzB;AAAA,IACA;AAAA,MACI,SAAS;AAAA,MACT,UAAU;AAAA,MACV,UAAU;AAAA,MACV,eAAe,MAAM;AAAA,IACzB;AAAA,IACA;AAAA,MACI,SAAS;AAAA,MACT,UAAU;AAAA,MACV,eAAe,CAAC,aAAa,UAAU,QAAQ;AAAA,IACnD;AAAA,EACJ;AACJ;AAGO,IAAM,sBAAoC;AAAA,EAC7C,SAAS;AAAA,EACT,OAAO;AAAA,IACH,GAAG,UAAU;AAAA,IACb;AAAA,MACI,SAAS;AAAA,MACT,OAAO,UAAU;AAAA,IACrB;AAAA,IACA;AAAA,MACI,SAAS;AAAA,MACT,OAAO;AAAA,QACH;AAAA,UACI,SAAS;AAAA,UACT,UAAU;AAAA,UACV,OAAO,UAAU;AAAA,QACrB;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;AAEO,IAAM,wBAAwB,MAAM;AACvC,MAAI,OAA+B,CAAC;AACpC,aAAW,KAAK,WAAW;AACvB,WAAO,KAAK,OAAO,UAAU,CAA2B,CAAC;AAAA,EAC7D;AACA,SAAO;AACX","sourcesContent":["import path from \"path\";\nimport type { WithRequired } from \"../../types/utilityTypes.js\";\n\nexport type FilePathItem = {\n    subPath: string;\n    globPath?: string;\n    forceDirDisplay?: boolean;\n    rootGlob?: string;\n    allowMultiple?: boolean;\n    dirPath?: string;\n    includeDirContents?: boolean;\n    validate?: (files: string[]) => boolean;\n    items?: FilePathItem[];\n};\n\nexport type AdditionalSourceReplaceKey =\n    | \"<FILENAME>\"\n    | \"<PLUGIN_UNIQUE_ID>\"\n    | \"<NOT_EXISTING_PUBLIC_DIR>\"\n    | \"<PATH_AFTER>\";\n\ntype FileItemKey = \"style\" | \"public\" | \"root\";\n\nexport type FileItemWithRootGlob = WithRequired<FilePathItem, \"rootGlob\"> & {\n    getOutputPath: (relativeFilePath: string) => string;\n};\n\nexport const fileItems: Record<FileItemKey, FileItemWithRootGlob[]> = {\n    style: [\n        {\n            subPath: \"index.scss\",\n            rootGlob: \"styles/**/*.scss\",\n            dirPath: \"styles\",\n            validate: (items) => items.includes(\"styles/index.scss\"),\n            includeDirContents: true,\n            getOutputPath: (filePath) => {\n            return `src/styles/userProvided/${filePath.startsWith(`styles${path.sep}`) ? filePath.slice(`styles${path.sep}`.length) : filePath}`\n            }\n        },\n    ],\n    public: [\n        {\n            subPath: \"**\",\n            rootGlob: \"public/**\",\n            dirPath: \"public\",\n            getOutputPath: (filePath) => filePath,\n            allowMultiple: true,\n        },\n    ],\n    root: [\n        {\n            subPath: \"tailwind.config.ts\",\n            rootGlob: \"tailwind.config.ts\",\n            getOutputPath: () => \"tailwind.config.ts\",\n        },\n        {\n            subPath: \"anyFilename.bib\",\n            globPath: \"*.bib\",\n            rootGlob: \"*.bib\",\n            getOutputPath: (filePath) => filePath,\n        },\n        {\n            subPath: \"appConfig.ulld.json\",\n            globPath: \"appConfig.ulld.json\",\n            rootGlob: \"appConfig.ulld.json\",\n            getOutputPath: () => \"appConfig.ulld.json\",\n        },\n        {\n            subPath: \".env\",\n            globPath: \".env\",\n            rootGlob: \".env\",\n            getOutputPath: () => \".env.local\",\n        },\n        {\n            subPath: \"favicon.{ico,png,jpg}\",\n            rootGlob: \"favicon.{ico,png,jpg}\",\n            getOutputPath: (filePath) => `public/${filePath}`,\n        },\n    ],\n};\n\n\nexport const additionalFilePaths: FilePathItem = {\n    subPath: \"/\",\n    items: [\n        ...fileItems.root,\n        {\n            subPath: \"styles\",\n            items: fileItems.style,\n        },\n        {\n            subPath: \"public\",\n            items: [\n                {\n                    subPath: \"unreserved-public-dir\",\n                    globPath: \"<NOT_EXISTING_PUBLIC_DIR>\",\n                    items: fileItems.public,\n                },\n            ],\n        },\n    ],\n};\n\nexport const getFlattenedFileItems = () => {\n    let data: FileItemWithRootGlob[] = [];\n    for (const k in fileItems) {\n        data = data.concat(fileItems[k as keyof typeof fileItems]);\n    }\n    return data;\n};\n"]}