{"version":3,"sources":["../src/classes/query/componentDocs.ts"],"names":["ComponentDocsQuery","item","query","a","tags","tl","t","re","x","f","items"],"mappings":"AAIO,IAAMA,EAAN,KAAyB,CAC5B,aAAc,CAAE,CACR,kBACJC,EACAC,EACO,CACP,MAAI,EAAAA,EAAM,QAEF,CAACD,EAAK,iBAAiB,KAAME,GACzB,IAAI,OAAOD,EAAM,OAAS,KAAK,EAAE,KAAKC,CAAC,CAC3C,EAMZ,CACQ,eAAeF,EAAiBC,EAAiC,CACrE,IAAIE,EAAOF,EAAM,IACX,MAAM,QAAQA,EAAM,GAAG,EACnBA,EAAM,IACN,CAACA,EAAM,GAAG,EACd,GACN,GAAKE,GAEE,GAAI,CAACH,EAAK,KAAK,OAClB,MAAO,OAFP,OAAO,GAIX,IAAII,EAAKD,EAAK,IAAKE,GAAMA,EAAE,YAAY,CAAC,EACxC,OAAOL,EAAK,KAAK,KAAME,GAAME,EAAG,SAASF,EAAE,YAAY,CAAC,CAAC,CAC7D,CACQ,oBACJF,EACAC,EACO,CACP,OAAOA,EAAM,SAAWD,EAAK,aAAeC,EAAM,SAAW,EACjE,CACQ,iBACJD,EACAC,EACO,CACP,GAAI,CAACA,EAAM,MACP,MAAO,GAEX,IAAIK,EAAK,IAAI,OAAOL,EAAM,KAAK,EAa/B,MAZI,GAAAK,EAAG,KAAKN,EAAK,UAAU,GAIvBA,EAAK,iBAAiB,QACtBA,EAAK,iBAAiB,KAAMO,GAAMD,EAAG,KAAKC,CAAC,CAAC,GAI5CD,EAAG,KAAKN,EAAK,aAAa,GAG1BA,EAAK,KAAK,QAAUA,EAAK,KAAK,KAAMO,GAAMD,EAAG,KAAKC,CAAC,CAAC,EAI5D,CAEA,UAAUP,EAAiBC,EAAiC,CACxD,MAAO,CACH,KAAK,oBACL,KAAK,eACL,KAAK,iBACL,KAAK,iBACT,EAAE,KAAMO,GAAMA,EAAER,EAAMC,CAAK,CAAC,CAChC,CACA,SAASQ,EAAoBR,EAAiC,CAC1D,OAAOQ,EAAM,OAAQF,GAAM,KAAK,UAAUA,EAAGN,CAAK,CAAC,CACvD,CACJ","sourcesContent":["import { BuildStaticDataOutput } from \"@ulld/types\";\nimport { ComponentDocsQueryParams } from \"../../types/baseApp/componentDocsQuery.js\";\ntype QueryItem = BuildStaticDataOutput[\"componentDocs\"][number];\n\nexport class ComponentDocsQuery {\n    constructor() { }\n    private itemMatchesSyntax(\n        item: QueryItem,\n        query: ComponentDocsQueryParams,\n    ): boolean {\n        if (query.syntax) {\n            if (\n                !item.embeddableSyntax.some((a) =>\n                    new RegExp(query.syntax!, \"gmi\").test(a),\n                )\n            ) {\n                return false;\n            }\n        }\n        return true;\n    }\n    private itemMatchesTag(item: QueryItem, query: ComponentDocsQueryParams) {\n        let tags = query.tag\n            ? Array.isArray(query.tag)\n                ? query.tag\n                : [query.tag]\n            : false;\n        if (!tags) {\n            return true;\n        } else if (!item.tags.length) {\n            return false;\n        }\n        let tl = tags.map((t) => t.toLowerCase());\n        return item.tags.some((a) => tl.includes(a.toLowerCase()));\n    }\n    private itemMatchesPluginId(\n        item: QueryItem,\n        query: ComponentDocsQueryParams,\n    ): boolean {\n        return query.pluginId ? item.pluginName === query.pluginId : true\n    }\n    private itemMatchesQuery(\n        item: QueryItem,\n        query: ComponentDocsQueryParams,\n    ): boolean {\n        if (!query.query) {\n            return true;\n        }\n        let re = new RegExp(query.query);\n        if (re.test(item.pluginName)) {\n            return true;\n        }\n        if (\n            item.embeddableSyntax.length &&\n            item.embeddableSyntax.some((x) => re.test(x))\n        ) {\n            return true;\n        }\n        if (re.test(item.componentName)) {\n            return true;\n        }\n        if (item.tags.length && item.tags.some((x) => re.test(x))) {\n            return true;\n        }\n        return false;\n    }\n\n    queryItem(item: QueryItem, query: ComponentDocsQueryParams) {\n        return [\n            this.itemMatchesPluginId,\n            this.itemMatchesTag,\n            this.itemMatchesQuery,\n            this.itemMatchesSyntax,\n        ].some((f) => f(item, query));\n    }\n    queryAll(items: QueryItem[], query: ComponentDocsQueryParams) {\n        return items.filter((x) => this.queryItem(x, query))\n    }\n}\n"]}