{"version":3,"sources":["../../src/styleUtilities/generateThemePlotColors.ts","../../src/classes/file/jsonFile.js"],"names":["path","globSync","fs","JsonFile","FileData","__publicField","content","indentation","newContent","coloringPalette","formatHslString","s","flattenColorPalette","c","format","lightData","items","item","generateThemePlotColors","root","colorMapPath","files","p","colorData","file","primary","colorMap","fn"],"mappings":"kFAAA,OAAOA,MAAU,OACjB,OAAS,YAAAC,MAAgB,OCAzB,OAAOC,MAAQ,KACR,IAAMC,EAAN,cAAuBC,CAAS,CAEnC,YAAYJ,EAAM,CACd,MAAMA,EAAM,EAAK,EAFrBK,EAAA,aAGI,KAAK,KAAOL,CAChB,CACA,gBAAiB,CACb,YAAK,iBAAiB,EACf,KAAK,MAAM,KAAK,WAAW,CAAC,CACvC,CACA,aAAaM,EAASC,EAAc,EAAG,CACnC,IAAIC,EAAaF,GAAW,KAAK,QACjC,GAAI,CAACE,EACD,MAAM,IAAI,MAAM,6CAA6C,EAE7D,OAAOA,GAAe,WACtBA,EAAa,KAAK,UAAUA,EAAY,KAAMD,CAAW,GAE7DL,EAAG,cAAc,KAAK,KAAMM,EAAY,CAAE,SAAU,OAAQ,CAAC,CACjE,CACJ,EDnBA,OAAON,MAAQ,KACf,OAAOO,MAEA,mBAGP,IAAMC,EAAmBC,GACXA,EAAE,QAAQ,OAAQ,EAAE,EAAE,QAAQ,IAAK,EAAE,EAAE,MAAM,GAAG,EAAE,IAAKA,GAAMA,EAAE,KAAK,CAAC,EAAE,KAAK,GAAG,EAKvFC,EAAsB,CAACC,EAAWC,EAAsB,QAAU,CAEpE,IAAIC,EAAYN,EAAgBI,EAAGC,CAAM,EACrCE,EAAiD,CAAC,EACtD,QAAWC,KAAQF,EACfC,EAAM,KAAK,CACP,MAAON,EAAgBK,EAAUE,CAA8B,EAAE,KAAe,EAChF,WAAYP,EAAgBK,EAAUE,CAA8B,EAC/D,YAAsB,CAC/B,CAAC,EAEL,OAAOD,CACX,EAEME,EAA0B,IAAM,CAClC,IAAIC,EAAO,QAAQ,IAAI,cACvB,GAAI,CAACA,EACD,MAAM,IAAI,MACN,wEACJ,EAEJ,IAAMC,EAAepB,EAAK,KACtBmB,EACA,2DACJ,EACIE,EAAQpB,EAAS,SAAU,CAC3B,IAAKmB,EACL,SAAU,EACd,CAAC,EACI,OAAQE,GAAM,CAACA,EAAE,SAAS,MAAM,CAAC,EACjC,IAAKA,GAAM,IAAInB,EAASmB,CAAC,CAAC,EAC3BC,EAAsC,CAAC,EAC3C,QAAWC,KAAQH,EAAO,CACtB,IAAIf,EAAUkB,EAAK,eAAe,EAI9BC,EAAU,CACV,MAAOnB,EAAQ,MAAM,QACrB,KAAMA,EAAQ,KAAK,OACvB,EACIoB,EAAW,CACX,MAAOd,EAAoBa,EAAQ,KAAK,EACxC,KAAMb,EAAoBa,EAAQ,IAAI,CAC1C,EACIE,EAAKH,EAAK,YAAY,EAC1BD,EAAUI,CAAoB,EAAID,CACtC,CACAxB,EAAG,cACCF,EAAK,KAAK,UAAW,4BAA4B,EACjD,KAAK,UAAUuB,EAAW,KAAM,CAAC,EACjC,CACI,SAAU,OACd,CACJ,CACJ,EAEAL,EAAwB","sourcesContent":["import path from \"path\";\nimport { globSync } from \"glob\";\nimport { JsonFile } from \"../classes/file/jsonFile.js\";\nimport fs from \"fs\"\nimport coloringPalette, {\n    ColorFormat,\n} from \"coloring-palette\";\nimport { ThemeColorGradientRecord, UlldColorTheme } from \"../types/colors.js\";\n\nconst formatHslString = (s: string) => {\n       return s.replace(\"hsl(\", \"\").replace(\")\", \"\").split(\",\").map((s) => s.trim()).join(\" \")\n       \n        \n    }\n\nconst flattenColorPalette = (c: string, format: ColorFormat = \"hsl\") => {\n    // TODO: Might need to remove this being called as the default function\n    let lightData = coloringPalette(c, format);\n    let items: { color: string; foreground: string }[] = [];\n    for (const item in lightData) {\n        items.push({\n            color: formatHslString(lightData[item as keyof typeof lightData].color as string),\n            foreground: formatHslString(lightData[item as keyof typeof lightData]\n                .contrastText as string),\n        });\n    }\n    return items;\n};\n\nconst generateThemePlotColors = () => {\n    let root = process.env.ULLD_DEV_ROOT;\n    if (!root) {\n        throw new Error(\n            `No dev root env variable found. Can not continue writing theme colors.`,\n        );\n    }\n    const colorMapPath = path.join(\n        root,\n        \"packages/tailwindAndShad/src/shad/defaultThemes/colorMaps\",\n    );\n    let files = globSync(\"*.json\", {\n        cwd: colorMapPath,\n        absolute: true,\n    })\n        .filter((p) => !p.includes(\"-raw\"))\n        .map((p) => new JsonFile(p));\n    let colorData: ThemeColorGradientRecord = {} as ThemeColorGradientRecord;\n    for (const file of files) {\n        let content = file.getJsonContent() as Record<\n            \"light\" | \"dark\",\n            Record<string, string>\n        >;\n        let primary = {\n            light: content.light.primary,\n            dark: content.dark.primary,\n        };\n        let colorMap = {\n            light: flattenColorPalette(primary.light),\n            dark: flattenColorPalette(primary.dark),\n        };\n        let fn = file.getFileName();\n        colorData[fn as UlldColorTheme] = colorMap;\n    }\n    fs.writeFileSync(\n        path.join(__dirname, \"./themeColorGradients.json\"),\n        JSON.stringify(colorData, null, 4),\n        {\n            encoding: \"utf-8\",\n        },\n    );\n};\n\ngenerateThemePlotColors();\n","import { FileData } from \"./main.js\";\nimport fs from \"fs\";\nexport class JsonFile extends FileData {\n    path;\n    constructor(path) {\n        super(path, false);\n        this.path = path;\n    }\n    getJsonContent() {\n        this.throwIfNotExists();\n        return JSON.parse(this.getContent());\n    }\n    writeContent(content, indentation = 2) {\n        let newContent = content || this.content;\n        if (!newContent) {\n            throw new Error(`Cannot write content. No content was found.`);\n        }\n        if (typeof newContent === \"object\") {\n            newContent = JSON.stringify(newContent, null, indentation);\n        }\n        fs.writeFileSync(this.path, newContent, { encoding: \"utf-8\" });\n    }\n}\n"]}