{"version":3,"sources":["../../src/styleUtilities/generateThemePlotColors.ts","../../src/classes/file/jsonFile.js"],"names":["path","fs","s"],"mappings":";;;;;;;;AAAA,OAAO,UAAU;AACjB,SAAS,gBAAgB;;;ACAzB,OAAO,QAAQ;AACR,IAAM,WAAN,cAAuB,SAAS;AAAA,EAEnC,YAAYA,OAAM;AACd,UAAMA,OAAM,KAAK;AAFrB;AAGI,SAAK,OAAOA;AAAA,EAChB;AAAA,EACA,iBAAiB;AACb,SAAK,iBAAiB;AACtB,WAAO,KAAK,MAAM,KAAK,WAAW,CAAC;AAAA,EACvC;AAAA,EACA,aAAa,SAAS,cAAc,GAAG;AACnC,QAAI,aAAa,WAAW,KAAK;AACjC,QAAI,CAAC,YAAY;AACb,YAAM,IAAI,MAAM,6CAA6C;AAAA,IACjE;AACA,QAAI,OAAO,eAAe,UAAU;AAChC,mBAAa,KAAK,UAAU,YAAY,MAAM,WAAW;AAAA,IAC7D;AACA,OAAG,cAAc,KAAK,MAAM,YAAY,EAAE,UAAU,QAAQ,CAAC;AAAA,EACjE;AACJ;;;ADnBA,OAAOC,SAAQ;AACf,OAAO,qBAEA;AAGP,IAAM,kBAAkB,CAAC,MAAc;AAChC,SAAO,EAAE,QAAQ,QAAQ,EAAE,EAAE,QAAQ,KAAK,EAAE,EAAE,MAAM,GAAG,EAAE,IAAI,CAACC,OAAMA,GAAE,KAAK,CAAC,EAAE,KAAK,GAAG;AAGzF;AAEJ,IAAM,sBAAsB,CAAC,GAAW,SAAsB,UAAU;AAEpE,MAAI,YAAY,gBAAgB,GAAG,MAAM;AACzC,MAAI,QAAiD,CAAC;AACtD,aAAW,QAAQ,WAAW;AAC1B,UAAM,KAAK;AAAA,MACP,OAAO,gBAAgB,UAAU,IAA8B,EAAE,KAAe;AAAA,MAChF,YAAY,gBAAgB,UAAU,IAA8B,EAC/D,YAAsB;AAAA,IAC/B,CAAC;AAAA,EACL;AACA,SAAO;AACX;AAEA,IAAM,0BAA0B,MAAM;AAClC,MAAI,OAAO,QAAQ,IAAI;AACvB,MAAI,CAAC,MAAM;AACP,UAAM,IAAI;AAAA,MACN;AAAA,IACJ;AAAA,EACJ;AACA,QAAM,eAAe,KAAK;AAAA,IACtB;AAAA,IACA;AAAA,EACJ;AACA,MAAI,QAAQ,SAAS,UAAU;AAAA,IAC3B,KAAK;AAAA,IACL,UAAU;AAAA,EACd,CAAC,EACI,OAAO,CAAC,MAAM,CAAC,EAAE,SAAS,MAAM,CAAC,EACjC,IAAI,CAAC,MAAM,IAAI,SAAS,CAAC,CAAC;AAC/B,MAAI,YAAsC,CAAC;AAC3C,aAAW,QAAQ,OAAO;AACtB,QAAI,UAAU,KAAK,eAAe;AAIlC,QAAI,UAAU;AAAA,MACV,OAAO,QAAQ,MAAM;AAAA,MACrB,MAAM,QAAQ,KAAK;AAAA,IACvB;AACA,QAAI,WAAW;AAAA,MACX,OAAO,oBAAoB,QAAQ,KAAK;AAAA,MACxC,MAAM,oBAAoB,QAAQ,IAAI;AAAA,IAC1C;AACA,QAAI,KAAK,KAAK,YAAY;AAC1B,cAAU,EAAoB,IAAI;AAAA,EACtC;AACA,EAAAD,IAAG;AAAA,IACC,KAAK,KAAK,WAAW,4BAA4B;AAAA,IACjD,KAAK,UAAU,WAAW,MAAM,CAAC;AAAA,IACjC;AAAA,MACI,UAAU;AAAA,IACd;AAAA,EACJ;AACJ;AAEA,wBAAwB","sourcesContent":["import path from \"path\";\nimport { globSync } from \"glob\";\nimport { JsonFile } from \"../classes/file/jsonFile.js\";\nimport fs from \"fs\"\nimport coloringPalette, {\n    ColorFormat,\n} from \"coloring-palette\";\nimport { ThemeColorGradientRecord, UlldColorTheme } from \"../types/colors.js\";\n\nconst formatHslString = (s: string) => {\n       return s.replace(\"hsl(\", \"\").replace(\")\", \"\").split(\",\").map((s) => s.trim()).join(\" \")\n       \n        \n    }\n\nconst flattenColorPalette = (c: string, format: ColorFormat = \"hsl\") => {\n    // TODO: Might need to remove this being called as the default function\n    let lightData = coloringPalette(c, format);\n    let items: { color: string; foreground: string }[] = [];\n    for (const item in lightData) {\n        items.push({\n            color: formatHslString(lightData[item as keyof typeof lightData].color as string),\n            foreground: formatHslString(lightData[item as keyof typeof lightData]\n                .contrastText as string),\n        });\n    }\n    return items;\n};\n\nconst generateThemePlotColors = () => {\n    let root = process.env.ULLD_DEV_ROOT;\n    if (!root) {\n        throw new Error(\n            `No dev root env variable found. Can not continue writing theme colors.`,\n        );\n    }\n    const colorMapPath = path.join(\n        root,\n        \"packages/tailwindAndShad/src/shad/defaultThemes/colorMaps\",\n    );\n    let files = globSync(\"*.json\", {\n        cwd: colorMapPath,\n        absolute: true,\n    })\n        .filter((p) => !p.includes(\"-raw\"))\n        .map((p) => new JsonFile(p));\n    let colorData: ThemeColorGradientRecord = {} as ThemeColorGradientRecord;\n    for (const file of files) {\n        let content = file.getJsonContent() as Record<\n            \"light\" | \"dark\",\n            Record<string, string>\n        >;\n        let primary = {\n            light: content.light.primary,\n            dark: content.dark.primary,\n        };\n        let colorMap = {\n            light: flattenColorPalette(primary.light),\n            dark: flattenColorPalette(primary.dark),\n        };\n        let fn = file.getFileName();\n        colorData[fn as UlldColorTheme] = colorMap;\n    }\n    fs.writeFileSync(\n        path.join(__dirname, \"./themeColorGradients.json\"),\n        JSON.stringify(colorData, null, 4),\n        {\n            encoding: \"utf-8\",\n        },\n    );\n};\n\ngenerateThemePlotColors();\n","import { FileData } from \"./main.js\";\nimport fs from \"fs\";\nexport class JsonFile extends FileData {\n    path;\n    constructor(path) {\n        super(path, false);\n        this.path = path;\n    }\n    getJsonContent() {\n        this.throwIfNotExists();\n        return JSON.parse(this.getContent());\n    }\n    writeContent(content, indentation = 2) {\n        let newContent = content || this.content;\n        if (!newContent) {\n            throw new Error(`Cannot write content. No content was found.`);\n        }\n        if (typeof newContent === \"object\") {\n            newContent = JSON.stringify(newContent, null, indentation);\n        }\n        fs.writeFileSync(this.path, newContent, { encoding: \"utf-8\" });\n    }\n}\n"]}