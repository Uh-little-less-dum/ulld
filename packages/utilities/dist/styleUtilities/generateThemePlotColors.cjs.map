{"version":3,"sources":["../../src/styleUtilities/generateThemePlotColors.ts","../../src/classes/file/main.js","../../src/classes/file/jsonFile.js"],"names":["path","fs","s"],"mappings":"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","sourcesContent":["import path from \"path\";\nimport { globSync } from \"glob\";\nimport { JsonFile } from \"../classes/file/jsonFile.js\";\nimport fs from \"fs\"\nimport coloringPalette, {\n    ColorFormat,\n} from \"coloring-palette\";\nimport { ThemeColorGradientRecord, UlldColorTheme } from \"../types/colors.js\";\n\nconst formatHslString = (s: string) => {\n       return s.replace(\"hsl(\", \"\").replace(\")\", \"\").split(\",\").map((s) => s.trim()).join(\" \")\n       \n        \n    }\n\nconst flattenColorPalette = (c: string, format: ColorFormat = \"hsl\") => {\n    // TODO: Might need to remove this being called as the default function\n    let lightData = coloringPalette(c, format);\n    let items: { color: string; foreground: string }[] = [];\n    for (const item in lightData) {\n        items.push({\n            color: formatHslString(lightData[item as keyof typeof lightData].color as string),\n            foreground: formatHslString(lightData[item as keyof typeof lightData]\n                .contrastText as string),\n        });\n    }\n    return items;\n};\n\nconst generateThemePlotColors = () => {\n    let root = process.env.ULLD_DEV_ROOT;\n    if (!root) {\n        throw new Error(\n            `No dev root env variable found. Can not continue writing theme colors.`,\n        );\n    }\n    const colorMapPath = path.join(\n        root,\n        \"packages/tailwindAndShad/src/shad/defaultThemes/colorMaps\",\n    );\n    let files = globSync(\"*.json\", {\n        cwd: colorMapPath,\n        absolute: true,\n    })\n        .filter((p) => !p.includes(\"-raw\"))\n        .map((p) => new JsonFile(p));\n    let colorData: ThemeColorGradientRecord = {} as ThemeColorGradientRecord;\n    for (const file of files) {\n        let content = file.getJsonContent() as Record<\n            \"light\" | \"dark\",\n            Record<string, string>\n        >;\n        let primary = {\n            light: content.light.primary,\n            dark: content.dark.primary,\n        };\n        let colorMap = {\n            light: flattenColorPalette(primary.light),\n            dark: flattenColorPalette(primary.dark),\n        };\n        let fn = file.getFileName();\n        colorData[fn as UlldColorTheme] = colorMap;\n    }\n    fs.writeFileSync(\n        path.join(__dirname, \"./themeColorGradients.json\"),\n        JSON.stringify(colorData, null, 4),\n        {\n            encoding: \"utf-8\",\n        },\n    );\n};\n\ngenerateThemePlotColors();\n","import fs from \"fs\";\nimport path from \"path\";\nexport class FileData {\n    path;\n    _isDir;\n    dirname;\n    content;\n    constructor(path, _isDir) {\n        this.path = path;\n        this._isDir = _isDir;\n        this.dirname = this.getDirname(_isDir);\n    }\n    getFileName() {\n        let s = path.basename(this.path).split(\".\");\n        return s[0];\n    }\n    getExtension() {\n        let s = path.basename(this.path).split(\".\");\n        return `.${s[s.length - 1]}`;\n    }\n    getStat() {\n        return fs.statSync(this.path);\n    }\n    isDir() {\n        let s = this.getStat();\n        return Boolean(s?.isDirectory());\n    }\n    getDirname(isDir) {\n        let _isDir = typeof isDir === \"boolean\" ? isDir : this.isDir();\n        if (_isDir) {\n            return this.path;\n        }\n        try {\n            return path.dirname(this.path);\n        }\n        catch (err) {\n            console.error(`Could not get dirname. Path likely does not exist at ${this.path}`);\n            return this.path;\n        }\n    }\n    mkdirIfNotExists() {\n        if (!fs.existsSync(this.dirname)) {\n            fs.mkdirSync(this.dirname, { recursive: true });\n        }\n    }\n    getContent() {\n        if (this.content)\n            return this.content;\n        let data = fs.readFileSync(this.path, { encoding: \"utf-8\" });\n        this.content = data;\n        return data;\n    }\n    exists() {\n        return fs.existsSync(this.path);\n    }\n    getLines() {\n        return this.getContent().split(\"\\n\");\n    }\n    filterLines(cb) {\n        let lines = this.getLines().filter((l) => cb(l));\n        this.content = lines.join(\"\\n\");\n    }\n    getImportLines() {\n        let lines = this.getLines();\n        let lineData = [];\n        lines.forEach((l, i) => {\n            if (l.trim().startsWith(\"import\")) {\n                lineData.push({ content: l, index: i });\n            }\n        });\n        return lineData;\n    }\n    throwIfNotExists() {\n        let exists = this.exists();\n        if (!exists) {\n            throw new Error(`No file exists at ${this.path}. Aborting.`);\n        }\n    }\n    getAsJson() {\n        return JSON.parse(this.getContent());\n    }\n    writeContent(content) {\n        let newContent = content || this.content;\n        if (!newContent) {\n            return console.error(\"Could not write file content as none was found.\");\n        }\n        this.mkdirIfNotExists();\n        fs.writeFileSync(this.path, newContent, { encoding: \"utf-8\" });\n    }\n}\n","import { FileData } from \"./main.js\";\nimport fs from \"fs\";\nexport class JsonFile extends FileData {\n    path;\n    constructor(path) {\n        super(path, false);\n        this.path = path;\n    }\n    getJsonContent() {\n        this.throwIfNotExists();\n        return JSON.parse(this.getContent());\n    }\n    writeContent(content, indentation = 2) {\n        let newContent = content || this.content;\n        if (!newContent) {\n            throw new Error(`Cannot write content. No content was found.`);\n        }\n        if (typeof newContent === \"object\") {\n            newContent = JSON.stringify(newContent, null, indentation);\n        }\n        fs.writeFileSync(this.path, newContent, { encoding: \"utf-8\" });\n    }\n}\n"]}