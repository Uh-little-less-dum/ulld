import { DevelopmentOutputUtils } from "./outputUtils";
import type {
    ArrayToEnumStringProps,
    ArrayToTypescriptArrayProps,
    ArrayToTypescriptObjectProps,
    ArrayToTypeUnionProps,
    DevelopmentOutputConstructorProps,
    DevelopmentOutputFunctionPropMap,
    RawContentProps,
    SourceLocationCommentProps,
    GeneratedFromScriptCommentProps
} from "./types";

export class DevelopmentTypescriptOutputs
extends DevelopmentOutputUtils
    implements DevelopmentOutputFunctionPropMap  {
    constructor(props?: DevelopmentOutputConstructorProps) {
        super(props);
    }

    arrayToEnum<T>(props: ArrayToEnumStringProps<T>): string {
        let body = this.getInitialBody(`export enum ${props.varName} {\n`, props);
        const items = this.removeDuplicateKeys(props)
        for (const item of items) {
            body += `    "${item.key}" = "${item.value}",\n`;
        }
        body += "}";
        return body;
    }

    arrayToTypeUnion<T>(props: ArrayToTypeUnionProps<T>): string {
        return `${this.getTypeDeclarationString(props)}${props.arr.map((t) => props.getValue(t)).join("\n    | ")};\n`;
    }

    arrayToTypescriptRecord<T>(props: ArrayToTypescriptObjectProps<T>): string {
        const lines: string[] = [];
        const items = this.removeDuplicateKeys(props)
        for (const item of items) {
            lines.push(`    "${item.key}": ${item.value}`);
        }
        return this.conditionallyExportDefault(
            props,
            `${this.getVariableDeclarationString(props)} {\n${lines.join(",\n")}\n}`,
        );
    }

    rawInlineContent(props: RawContentProps): string {
        return props.content
    }


    rawSuffixContent(props: RawContentProps): string {
        return props.content
    }

    rawPrefixContent(props: RawContentProps): string {
        return props.content
    }

    rawFileHeader(props: RawContentProps): string {
        return `${props.content}\n\n${this.initialContent}`
    }

    sourceLocationComment(props: SourceLocationCommentProps): string {
        return `// NOTE: Autogenerated from the content in ${props.sourceFile}`
    }

    generatedFromScriptComment(props: GeneratedFromScriptCommentProps): string {
        const _package = props.package === "buildUtils" ? props.package : `the ${props.package} package`
        return `// NOTE: Generated as part of the ${props.scriptName} in ${_package}.`
    }

    arrayToTypescriptArray<T>(props: ArrayToTypescriptArrayProps<T>): string {
        return `${this.getVariableDeclarationString(props)}[\n${props.arr.map((a) => `    ${props.getValue(a)}`).join(",\n")}\n]${props.readOnly ? " as const" : ""}${props.castToType ? ` as ${props.castToType}` : ""};`
    }
}
