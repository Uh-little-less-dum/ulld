{"version":3,"sources":["../src/zod/navigationConfig.ts"],"names":[],"mappings":";AAAA,SAAS,SAAS;AAElB,SAAS,yBAAyB;AAqBlC,IAAM,uBAAuB;AAAA,EACzB,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AACf;AAKO,IAAM,gBAAgB,EACxB,OAAO,EACP,OAAO,CAAC,MAAM,kBAAkB,SAAS,CAA2B,CAAC;AAE1E,IAAI,qBAAqB,EAAE,MAAM;AAAA,EAC7B,EAAE,QAAQ,SAAS;AAAA,EACnB,EAAE,QAAQ,QAAQ;AAAA,EAClB,EAAE,QAAQ,MAAM;AAAA,EAChB,EAAE,QAAQ,MAAM;AACpB,CAAC;AAED,IAAM,oBAAoB,EACb,MAAM;AAAA,EACH,EAAE,OAAO;AAAA,IACL,MAAM;AAAA,IACN,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,IAC1B,OAAO,EAAE,OAAO,EAAE,SAAS;AAAA,IAC3B,MAAM,EAAE,SAAS,EAAE,SAAS;AAAA,IAC5B,SAAS,EAAE,SAAS,EAAE,SAAS;AAAA,EACnC,CAAC;AAAA,EACD,EAAE,OAAO,EAAE,SAAS,8BAA8B;AACtD,CAAC;AAEb,IAAM,mBAAmB,EACZ,MAAM;AAAA,EACH,EAAE,OAAO,EAAE,SAAS,oBAAoB;AAAA,EACxC,EAAE,OAAO;AAAA,IACL,OAAO,EAAE,OAAO;AAAA,IAChB,MAAM,cAAc,SAAS;AAAA,IAC7B,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,IAC1B,SAAS,EAAE,SAAS,EAAE,SAAS;AAAA,EACnC,CAAC;AACL,CAAC;AAEb,IAAM,mBAAmB,EACZ,OAAO;AAAA,EACJ,YAAY,EAAE,OAAO,EAAE,QAAQ,qBAAqB,UAAU;AAAA,EAC9D,WAAW,EAAE,OAAO,EAAE,QAAQ,qBAAqB,SAAS;AAAA,EAC5D,UAAU,EAAE,OAAO,EAAE,QAAQ,qBAAqB,QAAQ;AAAA,EAC1D,WAAW,EAAE,OAAO,EAAE,QAAQ,qBAAqB,SAAS;AAChE,CAAC;AAGb,IAAM,yBAAmE,EAC5D,OAAO;AAAA,EACJ,YAAY,EAAE,OAAO;AAAA,EACrB,WAAW,EAAE,OAAO;AAAA,EACpB,UAAU,EAAE,OAAO;AAAA,EACnB,WAAW,EAAE,OAAO;AACxB,CAAC;AAGb,IAAM,yBAAyB,EAClB,OAAO;AAAA,EACJ,MAAM,EACD,OAAO,EACP,QAAQ,IAAI,EACZ;AAAA,IACG;AAAA,EACJ;AAAA,EACJ,SAAS,EACJ,OAAO,EACP,QAAQ,GAAG,EACX;AAAA,IACG;AAAA,EACJ;AACR,CAAC;AAGb,IAAM,+BAA+E,EACxE,OAAO;AAAA,EACJ,MAAM,EACD,OAAO;AAAA,EACZ,SAAS,EACJ,OAAO;AAChB,CAAC;AAEb,IAAM,+BAA+B,EAAE,OAAO;AAAA,EACtC,kBAAkB,uBAAuB,QAAQ;AAAA,IACzC,MAAM;AAAA,IACN,SAAS;AAAA,EACb,CAAC;AAAA,EACL,iBAAiB,iBACZ;AAAA,IACG;AAAA,EACJ,EACC,QAAQ,oBAAoB;AAAA,EACjC,aACI,iBAAiB,MAAM,EACtB,QAAQ,CAAC,CAAC,EACV;AAAA,IACG;AAAA,EACJ;AAAA,EACJ,cAAc,kBACT,MAAM,EACN,QAAQ,CAAC,CAAC,EACV;AAAA,IACG;AAAA,EACJ;AACR,CAAC;AAGE,IAAM,yBAAyB,6BAA6B,QAAQ,CAAC,CAAC;AAGtE,IAAM,+BAA+E,6BAA6B,MAAM,EAAE,OAAO;AAAA,EACpI,cAAc,kBAAkB,MAAM;AAAA,EACtC,aAAa,iBAAiB,MAAM;AAAA,EACpC,cAAc;AAAA,EACd,iBAAiB;AAAA,EACjB,kBAAkB;AACtB,CAAC,CAAC","sourcesContent":["import { z } from \"zod\";\nimport { ValidIconName } from \"@ulld/icons/dynamic\";\nimport { validIconNameList } from \"@ulld/types/validIconNameList\";\nimport { ZodOutputSchema } from \"../types.js\";\n\ntype V = {\n    icon: ValidIconName;\n    Icon?: never;\n};\n\ntype F = {\n    Icon: React.FC<{ className: string }>;\n    icon?: never;\n};\n\ntype B = {\n    href?: string;\n    onClick?: () => any;\n    label?: string;\n};\n\nexport type SidebarLink = (B & V) | (B & F);\n\nconst defaultResultLengths = {\n    categories: 12,\n    equations: 10,\n    snippets: 10,\n    searchAll: 12,\n};\n\n// Had to abort the actual enum for tsc to compile types generated by zod without exceeding the size limit, but should be able to resolve that issue with explicitly defined types when time allows to enable intellisense on the user's end.\n// export const iconNameField = z.enum(validIconNameList);\n\nexport const iconNameField = z\n    .string()\n    .refine((s) => validIconNameList.includes(s as string | ValidIconName));\n\nlet linkLocationSchema = z.union([\n    z.literal(\"sidebar\"),\n    z.literal(\"navbar\"),\n    z.literal(\"both\"),\n    z.literal(\"none\"),\n]);\n\nconst sidebarLinkSchema = z\n            .union([\n                z.object({\n                    icon: iconNameField,\n                    href: z.string().optional(),\n                    label: z.string().optional(),\n                    Icon: z.function().optional(),\n                    onClick: z.function().optional(),\n                }),\n                z.string().describe(\"The id of the document type.\"),\n            ])\n\nconst navbarLinkSchema = z\n            .union([\n                z.string().describe(\"A document type id\"),\n                z.object({\n                    label: z.string(),\n                    icon: iconNameField.optional(),\n                    href: z.string().optional(),\n                    onClick: z.function().optional(),\n                }),\n            ])\n\nconst maxResultsSchema = z\n            .object({\n                categories: z.number().default(defaultResultLengths.categories),\n                equations: z.number().default(defaultResultLengths.equations),\n                snippets: z.number().default(defaultResultLengths.snippets),\n                searchAll: z.number().default(defaultResultLengths.searchAll),\n            })\n\n\nconst maxResultsSchemaOutput: ZodOutputSchema<typeof maxResultsSchema> = z\n            .object({\n                categories: z.number(),\n                equations: z.number(),\n                snippets: z.number(),\n                searchAll: z.number()\n            })\n\n\nconst navbarBreakpointSchema = z\n            .object({\n                full: z\n                    .number()\n                    .default(1024)\n                    .describe(\n                        \"Pixel width at which the navbar will display all of it's contents.\",\n                    ),\n                minimal: z\n                    .number()\n                    .default(640)\n                    .describe(\n                        \"Pixel width at which the navbar will display a minimal bit of content to render properly on more narrow screens. All pixel widths below this value will render a navbar with only required content. With many layouts, this means that pixel widths below this value will render only a search bar.\",\n                    ),\n            })\n\n\nconst navbarBreakpointSchemaOutput: ZodOutputSchema<typeof navbarBreakpointSchema> = z\n            .object({\n                full: z\n                    .number(),\n                minimal: z\n                    .number()\n            })\n\nconst _navigationConfigSchemaInner = z.object({\n        navbarBreakpoint: navbarBreakpointSchema.default({\n                full: 1024,\n                minimal: 640,\n            }),\n        maxResultLength: maxResultsSchema\n            .describe(\n                \"The default length of search results to be retrieved for each search result type. Default values will likely work well for the default layout, but as more layouts become available this setting may be adjusted to fit different search result layouts.\",\n            )\n            .default(defaultResultLengths),\n        navbarLinks: \n            navbarLinkSchema.array()\n            .default([])\n            .describe(\n                \"Either the document type id or the internalLink id to be to included in the navbar.\",\n            ),\n        sidebarLinks: sidebarLinkSchema \n            .array()\n            .default([])\n            .describe(\n                \"Either the document type id or the internalLink id to be to included in the navbar.\",\n            ),\n    })\n\n\nexport const navigationConfigSchema = _navigationConfigSchemaInner.default({});\n\n\nexport const navigationConfigSchemaOutput: ZodOutputSchema<typeof navigationConfigSchema> = _navigationConfigSchemaInner.merge(z.object({\n    sidebarLinks: sidebarLinkSchema.array(),\n    navbarLinks: navbarLinkSchema.array(),\n    snippetsLink: linkLocationSchema,\n    maxResultLength: maxResultsSchemaOutput,\n    navbarBreakpoint: navbarBreakpointSchemaOutput\n}))\n\n"]}