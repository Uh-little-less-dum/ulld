{"version":3,"sources":["../../src/developer/slotsSchema.ts"],"names":[],"mappings":"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","sourcesContent":["import { z, ZodTypeAny } from \"zod\";\nimport { SlotMap } from \"./slotMapRootType.js\";\nimport buildStaticData from \"@ulld/utilities/buildStaticData.json\" with {type: \"json\"};\n\nexport const configPluginSchema = z\n    .object({\n        name: z.string(),\n        version: z.string().default(\"latest\"),\n    })\n    .transform((x) => ({\n        name: x.name,\n        version:\n            x.name in buildStaticData.currentPackageVersions\n                ? buildStaticData.currentPackageVersions[x.name as keyof typeof buildStaticData.currentPackageVersions]\n              : \"latest\",\n    }));\n\nconst pluginConfigTransform = (\n    val:\n        | string\n        | z.input<typeof configPluginSchema>\n        | string[]\n        | z.input<typeof configPluginSchema>[],\n): z.output<typeof configPluginSchema>[] => {\n    let vals = Array.isArray(val) ? val : [val];\n    return vals.map((v) =>\n        typeof v === \"string\"\n            ? {\n                name: v,\n                version:\n                    v in buildStaticData.currentPackageVersions\n                        ? buildStaticData.currentPackageVersions[\n                        v as keyof typeof buildStaticData.currentPackageVersions\n                        ]\n                        : \"latest\",\n            }\n            : configPluginSchema.parse(v),\n    );\n};\n\n// TODO: Type this with  {[k in keyof typeof slots]: ZodTypeAny} once the rest of the slots have been created in the base app and then generated to the slotMap file.\n\nexport const slotFields: Record<keyof SlotMap, ZodTypeAny> = {\n    navigation: z\n        .union([\n            z.string(),\n            z.string().array(),\n            configPluginSchema,\n            configPluginSchema.array(),\n        ])\n        .default(\"@ulld/navigation\")\n        .transform(pluginConfigTransform),\n    // plot: z\n    //     .union([z.string(), z.string().array(), configPluginSchema, configPluginSchema.array()])\n    //     .default(\"@ulld/plot\")\n    //     .transform(pluginConfigTransform),\n    bibliography: z\n        .union([\n            z.string(),\n            z.string().array(),\n            configPluginSchema,\n            configPluginSchema.array(),\n        ])\n        .default(\"@ulld/bib-manager\")\n        .transform(pluginConfigTransform),\n    // calendar: z\n    //     .union([z.string(), z.string().array(), configPluginSchema, configPluginSchema.array()])\n    //     .default(\"@ulld/calendar\")\n    //     .transform(pluginConfigTransform),\n    commandPalette: z\n        .union([\n            z.string(),\n            z.string().array(),\n            configPluginSchema,\n            configPluginSchema.array(),\n        ])\n        .default(\"@ulld/command-palette\")\n        .transform(pluginConfigTransform),\n    editor: z\n        .union([\n            z.string(),\n            z.string().array(),\n            configPluginSchema,\n            configPluginSchema.array(),\n        ])\n        .default(\"@ulld/editor\")\n        .transform(pluginConfigTransform),\n    math: z\n        .union([\n            z.string(),\n            z.string().array(),\n            configPluginSchema,\n            configPluginSchema.array(),\n        ])\n        .default(\"@ulld/equations\")\n        .transform(pluginConfigTransform),\n    form: z\n        .union([\n            z.string(),\n            z.string().array(),\n            configPluginSchema,\n            configPluginSchema.array(),\n        ])\n        .default(\"@ulld/full-form\")\n        .transform(pluginConfigTransform),\n    // icons: z\n    // .union([z.string(), z.string().array(), configPluginSchema, configPluginSchema.array()])\n    // .default(\"@ulld/icons\")\n    // .transform(pluginConfigTransform),\n    // notebook: z\n    //     .union([z.string(), z.string().array(), configPluginSchema, configPluginSchema.array()])\n    //     .default(\"@ulld/notebook\")\n    //     .transform(pluginConfigTransform),\n    // kanban: z\n    //     .union([z.string(), z.string().array(), configPluginSchema, configPluginSchema.array()])\n    //     .default(\"@ulld/kanban\")\n    //     .transform(pluginConfigTransform),\n    dashboard: z\n        .union([\n            z.string(),\n            z.string().array(),\n            configPluginSchema,\n            configPluginSchema.array(),\n        ])\n        .default(\"@ulld/landing-layouts\")\n        .transform(pluginConfigTransform),\n    // logger: z\n    //     .union([z.string(), z.string().array(), configPluginSchema, configPluginSchema.array()])\n    //     .default(\"@ulld/logger\")\n    //     .transform(pluginConfigTransform),\n    // journal: z\n    //     .union([z.string(), z.string().array(), configPluginSchema, configPluginSchema.array()])\n    //     .default(\"@ulld/journal\")\n    //     .transform(pluginConfigTransform),\n    // noteNetwork: z\n    //     .union([z.string(), z.string().array(), configPluginSchema, configPluginSchema.array()])\n    //     .default(\"@ulld/note-network\")\n    //     .transform(pluginConfigTransform),\n    pdf: z\n        .union([\n            z.string(),\n            z.string().array(),\n            configPluginSchema,\n            configPluginSchema.array(),\n        ])\n        .default(\"@ulld/pdf\")\n        .transform(pluginConfigTransform),\n    snippets: z\n        .union([\n            z.string(),\n            z.string().array(),\n            configPluginSchema,\n            configPluginSchema.array(),\n        ])\n        .default(\"@ulld/snippets\")\n        .transform(pluginConfigTransform),\n    taskManager: z\n        .union([\n            z.string(),\n            z.string().array(),\n            configPluginSchema,\n            configPluginSchema.array(),\n        ])\n        .default(\"@ulld/task-manager\")\n        .transform(pluginConfigTransform),\n    // whiteboard: z\n    //     .union([z.string(), z.string().array(), configPluginSchema, configPluginSchema.array()])\n    //     .default(\"@ulld/whiteboard\")\n    //     .transform(pluginConfigTransform),\n    // components: z.record(z.string(), z.string()).default({}),\n    // parsers: z.record(z.string(), z.string()).default({}),\n    UI: z\n        .union([\n            z.string(),\n            z.string().array(),\n            configPluginSchema,\n            configPluginSchema.array(),\n        ])\n        .default(\"@ulld/ui\")\n        .transform(pluginConfigTransform),\n};\n\nexport const pluginSlotSchema = z.object(slotFields);\n\n// TODO: Remove this and rely on generated zod object.\nexport const ulldSlots = Object.keys(slotFields);\n"]}