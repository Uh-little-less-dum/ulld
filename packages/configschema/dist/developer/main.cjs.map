{"version":3,"sources":["../../src/developer/main.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,SAAS;AAkBlB,SAAS,qCAAqC;AAEvC,IAAM,kBACT;AAMG,IAAM,yBAAyB,EAAE,OAAO;AAAA,EAC3C,YAAY,EAAE,OAAO;AAAA,EACrB,OAAO,EACF,OAAO,EACP;AAAA,IACG;AAAA,EACJ;AAAA,EACJ,UAAU,EAAE,OAAO,EAAE,QAAQ,eAAe;AAAA,EAC5C,MAAM,cAAc,SAAS;AAAA,EAC7B,YAAY,sBAAsB,MAAM,EAAE,QAAQ,CAAC,CAAC;AAAA,EACpD,SAAS,gBAAgB,QAAQ,CAAC,CAAC;AAAA,EACnC,mBAAmB,8BAA8B,SAAS;AAAA,EAC1D,MAAM,iBAAiB,SAAS;AAAA,EAChC,UAAU,qBAAqB,SAAS;AAAA,EACxC,OAAO,2BAA2B,MAAM,EAAE,QAAQ,CAAC,CAAC;AAAA,EACpD,QAAQ,mBAAmB,QAAQ,CAAC,CAAC;AAAA,EACrC,iBAAiB,qBAAqB,MAAM,EAAE,QAAQ,CAAC,CAAC;AAAA,EACxD,gBAAgB,2BAA2B,QAAQ,CAAC,CAAC;AAAA,EACrD,UAAU,qBAAqB,QAAQ,CAAC,CAAC;AAAA,EACzC,eAAe,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,0EAA0E,EAAE,UAAU,6BAA6B;AAAA,EACjK,QAAQ,EAAE,OAAO;AAAA,IACb,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,sEAAsE;AAAA,IAC3G,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,wFAAwF;AAAA,EAChI,CAAC,EAAE,QAAQ,CAAC,CAAC;AACjB,CAAC;AAEM,IAAM,wBAAwB,uBAAuB;AAAA,EACxD,CAAC,SAAS;AACN,QAAI,KAAK,YAAY,CAAC,KAAK,SAAS,OAAO;AACvC,WAAK,SAAS,QAAQ,KAAK;AAAA,IAC/B;AACA,WAAO;AAAA,EACX;AACJ;AAEO,IAAM,qCAAqC,uBAAuB;AAAA,EACrE;AAAA,IACI,UAAU,EAAE,OAAO,EAAE,OAAO,CAAC,MAAM,MAAM,eAAe;AAAA,EAC5D;AACJ","sourcesContent":["import { z } from \"zod\";\nimport { componentConfigSchema } from \"./componentSchema.js\";\nimport { pluginParserMap } from \"./parserSchema.js\";\nimport { pluginSettingsSchema } from \"./pluginSettingsSchema.js\";\nimport { pluginAdditionalPageSchema } from \"./pluginPageSchema.js\";\nimport { pluginEventsSchema } from \"./pluginEventsSchema.js\";\nimport {\n    InternalDeveloperConfigInput as DCI,\n    InternalDeveloperConfigInputWithoutGeneric,\n} from \"./types/developerConfig.js\";\nimport { slotKeySchema } from \"./slotKeySchema.js\";\nimport { trpcConfigSchema } from \"./trpcConfigSchema.js\";\nimport { additionalImportsConfigSchema } from \"./additionalImportsConfigSchema.js\";\nimport { PluginSlotKey } from \"./slotMapType.js\";\nimport { navigationLinkSchema } from \"./navigationLink.js\";\nimport { pluginCommandPaletteSchema } from \"./commandPalette.js\";\nimport { tailwindPluginConfig } from \"./tailwind.js\";\nexport { parserKeyList } from \"./parserSchema.js\";\nimport { transformExportStringOptional } from \"@ulld/utilities/transformExportString\";\n\nexport const defaultPluginId =\n    \"THIS IS AUTOMATICALLY GENERATED. Do not apply this key yourself. It will be overwritten.\";\n\n// WARN: Removed this type checking for now as the output value was returning the input type with too many optionals.\n// export const developerConfigSchema: z.ZodType<DeveloperConfigInput> = z\n\n\nexport const _developerConfigSchema = z.object({\n    pluginName: z.string(),\n    label: z\n        .string()\n        .describe(\n            \"For display purposes. Does not need to match npm the way pluginName does.\",\n        ),\n    pluginId: z.string().default(defaultPluginId),\n    slot: slotKeySchema.optional(),\n    components: componentConfigSchema.array().default([]),\n    parsers: pluginParserMap.default({}),\n    additionalImports: additionalImportsConfigSchema.optional(),\n    trpc: trpcConfigSchema.optional(),\n    settings: pluginSettingsSchema.optional(),\n    pages: pluginAdditionalPageSchema.array().default([]),\n    events: pluginEventsSchema.default({}),\n    navigationLinks: navigationLinkSchema.array().default([]),\n    commandPalette: pluginCommandPaletteSchema.default([]),\n    tailwind: tailwindPluginConfig.default({}),\n    documentation: z.string().optional().describe(\"An optional export of an mdx file that describes the use of your plugin.\").transform(transformExportStringOptional),\n    styles: z.object({\n        root: z.string().optional().describe(\"Optional export of a scss file that should be imported to all pages.\"),\n        mdx: z.string().optional().describe(\"Optional export of a scss file that should be imported to pages with mdx content only.\"),\n    }).default({})\n});\n\nexport const developerConfigSchema = _developerConfigSchema.transform(\n    (data) => {\n        if (data.settings && !data.settings.title) {\n            data.settings.title = data.pluginName;\n        }\n        return data;\n    },\n);\n\nexport const internalBuildDeveloperConfigSchema = _developerConfigSchema.extend(\n    {\n        pluginId: z.string().refine((s) => s !== defaultPluginId),\n    },\n);\n\nexport type DeveloperConfigOutput = z.output<typeof developerConfigSchema>;\nexport type DeveloperConfigInput<\n    T extends PluginSlotKey | undefined = undefined,\n> = DCI<T>;\nexport type DeveloperConfigInputWithoutGeneric =\n    InternalDeveloperConfigInputWithoutGeneric;\nexport type ParserKey = keyof DeveloperConfigOutput[\"parsers\"];\n"]}