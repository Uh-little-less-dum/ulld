{"version":3,"sources":["../src/developer/slotsSchema.ts"],"names":[],"mappings":";AAAA,SAAS,SAAqB;AAE9B,SAAS,iCAAiC;AAK1C,IAAM,yBAAyB,EAC1B,OAAO;AAAA,EACJ,MAAM,EAAE,OAAO;AAAA,EACf,SAAS,EAAE,OAAO,EAAE,QAAQ,QAAQ;AACxC,CAAC;AAEE,IAAM,qBAAqB,uBAAuB,UAAU,CAAC,MAAM;AAClE,QAAM,yBAAyB,0BAA0B;AACzD,SAAO;AAAA,IACH,MAAM,EAAE;AAAA,IACR,SACI,EAAE,QAAQ,yBACJ,uBAAuB,EAAE,IAAuB,IAChD;AAAA,EACd;AACJ,CAAC;AAEL,IAAM,wBAAwB,CAC1B,QAKwC;AACxC,MAAI,OAAO,MAAM,QAAQ,GAAG,IAAI,MAAM,CAAC,GAAG;AAC1C,QAAM,yBAAyB,0BAA0B;AACzD,SAAO,KAAK;AAAA,IAAI,CAAC,MACb,OAAO,MAAM,WACP;AAAA,MACE,MAAM;AAAA,MACN,SACI,KAAK,yBACC,uBAAuB,CAAoB,IAC3C;AAAA,IACd,IACE,mBAAmB,MAAM,CAAC;AAAA,EACpC;AACJ;AAEA,IAAM,kBAAkB,EAAE,MAAM;AAAA,EAC5B,EAAE,OAAO;AAAA,EACT,EAAE,OAAO,EAAE,MAAM;AAAA,EACjB;AAAA,EACA,mBAAmB,MAAM;AAC7B,CAAC;AAEM,IAAM,iBAAoD;AAAA,EAC7D,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,gBAAgB;AAAA,EAChB,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,MAAM;AAAA,EACN,WAAW;AAAA,EACX,KAAK;AAAA,EACL,UAAU;AAAA,EACV,aAAa;AAAA,EACb,IAAI;AACR;AAIO,IAAM,aAAgD;AAAA,EACzD,YAAY,eAAe,WACtB,QAAQ,kBAAkB,EAC1B,UAAU,qBAAqB;AAAA,EACpC,cAAc,eAAe,aACxB,QAAQ,mBAAmB,EAC3B,UAAU,qBAAqB;AAAA,EACpC,gBAAgB,eAAe,eAC1B,QAAQ,uBAAuB,EAC/B,UAAU,qBAAqB;AAAA,EACpC,QAAQ,eAAe,OAClB,QAAQ,cAAc,EACtB,UAAU,qBAAqB;AAAA,EACpC,MAAM,eAAe,KAChB,QAAQ,iBAAiB,EACzB,UAAU,qBAAqB;AAAA,EACpC,MAAM,eAAe,KAChB,QAAQ,iBAAiB,EACzB,UAAU,qBAAqB;AAAA,EACpC,WAAW,eAAe,UACrB,QAAQ,uBAAuB,EAC/B,UAAU,qBAAqB;AAAA,EACpC,KAAK,eAAe,IAAI,QAAQ,WAAW,EAAE,UAAU,qBAAqB;AAAA,EAC5E,UAAU,eAAe,SACpB,QAAQ,gBAAgB,EACxB,UAAU,qBAAqB;AAAA,EACpC,aAAa,eAAe,YACvB,QAAQ,oBAAoB,EAC5B,UAAU,qBAAqB;AAAA,EACpC,IAAI,eAAe,GAAG,QAAQ,UAAU,EAAE,UAAU,qBAAqB;AAC7E;AAEO,IAAM,mBAAmB,EAAE,OAAO,UAAU;AAE5C,IAAM,yBAAmE,EAAE,OAAO;AAAA,EACrF,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,gBAAgB;AAAA,EAChB,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,MAAM;AAAA,EACN,WAAW;AAAA,EACX,KAAK;AAAA,EACL,UAAU;AAAA,EACV,aAAa;AAAA,EACb,IAAI;AACR,CAAC;AAGM,IAAM,YAAY,OAAO,KAAK,UAAU","sourcesContent":["import { z, ZodTypeAny } from \"zod\";\nimport { SlotMap } from \"./slotMapRootType.js\";\nimport { getCurrentPackageVersions } from \"@ulld/utilities/internalDataHelpers\";\nimport { InternalAppName } from \"@ulld/types\";\nimport { ZodOutputSchema } from \"../types.js\";\n\n\nconst configPluginSchemaBase = z\n    .object({\n        name: z.string(),\n        version: z.string().default(\"latest\"),\n    })\n\nexport const configPluginSchema = configPluginSchemaBase.transform((x) => {\n        const currentPackageVersions = getCurrentPackageVersions();\n        return {\n            name: x.name,\n            version:\n                x.name in currentPackageVersions\n                    ? currentPackageVersions[x.name as InternalAppName]\n                    : \"latest\",\n        };\n    });\n\nconst pluginConfigTransform = (\n    val:\n        | string\n        | z.input<typeof configPluginSchema>\n        | string[]\n        | z.input<typeof configPluginSchema>[],\n): z.output<typeof configPluginSchema>[] => {\n    let vals = Array.isArray(val) ? val : [val];\n    const currentPackageVersions = getCurrentPackageVersions();\n    return vals.map((v) =>\n        typeof v === \"string\"\n            ? {\n                name: v,\n                version:\n                    v in currentPackageVersions\n                        ? currentPackageVersions[v as InternalAppName]\n                        : \"latest\",\n            }\n            : configPluginSchema.parse(v),\n    );\n};\n\nconst slotFieldSchema = z.union([\n    z.string(),\n    z.string().array(),\n    configPluginSchema,\n    configPluginSchema.array(),\n]);\n\nexport const slotFieldsBase: Record<keyof SlotMap, ZodTypeAny> = {\n    navigation: slotFieldSchema,\n    bibliography: slotFieldSchema,\n    commandPalette: slotFieldSchema,\n    editor: slotFieldSchema,\n    math: slotFieldSchema,\n    form: slotFieldSchema,\n    dashboard: slotFieldSchema,\n    pdf: slotFieldSchema,\n    snippets: slotFieldSchema,\n    taskManager: slotFieldSchema,\n    UI: slotFieldSchema,\n};\n\n// TODO: Type this with  {[k in keyof typeof slots]: ZodTypeAny} once the rest of the slots have been created in the base app and then generated to the slotMap file.\n\nexport const slotFields: Record<keyof SlotMap, ZodTypeAny> = {\n    navigation: slotFieldsBase.navigation\n        .default(\"@ulld/navigation\")\n        .transform(pluginConfigTransform),\n    bibliography: slotFieldsBase.bibliography\n        .default(\"@ulld/bib-manager\")\n        .transform(pluginConfigTransform),\n    commandPalette: slotFieldsBase.commandPalette\n        .default(\"@ulld/command-palette\")\n        .transform(pluginConfigTransform),\n    editor: slotFieldsBase.editor\n        .default(\"@ulld/editor\")\n        .transform(pluginConfigTransform),\n    math: slotFieldsBase.math\n        .default(\"@ulld/equations\")\n        .transform(pluginConfigTransform),\n    form: slotFieldsBase.form\n        .default(\"@ulld/full-form\")\n        .transform(pluginConfigTransform),\n    dashboard: slotFieldsBase.dashboard\n        .default(\"@ulld/landing-layouts\")\n        .transform(pluginConfigTransform),\n    pdf: slotFieldsBase.pdf.default(\"@ulld/pdf\").transform(pluginConfigTransform),\n    snippets: slotFieldsBase.snippets\n        .default(\"@ulld/snippets\")\n        .transform(pluginConfigTransform),\n    taskManager: slotFieldsBase.taskManager\n        .default(\"@ulld/task-manager\")\n        .transform(pluginConfigTransform),\n    UI: slotFieldsBase.UI.default(\"@ulld/ui\").transform(pluginConfigTransform),\n};\n\nexport const pluginSlotSchema = z.object(slotFields);\n\nexport const pluginSlotSchemaOutput: ZodOutputSchema<typeof pluginSlotSchema> = z.object({\n    navigation: configPluginSchemaBase,\n    bibliography: configPluginSchemaBase,\n    commandPalette: configPluginSchemaBase,\n    editor: configPluginSchemaBase,\n    math: configPluginSchemaBase,\n    form: configPluginSchemaBase,\n    dashboard: configPluginSchemaBase,\n    pdf: configPluginSchemaBase,\n    snippets: configPluginSchemaBase,\n    taskManager: configPluginSchemaBase,\n    UI: configPluginSchemaBase,\n})\n\n// TODO: Remove this and rely on generated zod object.\nexport const ulldSlots = Object.keys(slotFields);\n"]}