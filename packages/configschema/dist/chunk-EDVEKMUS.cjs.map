{"version":3,"sources":["../src/zod/codeConfig.ts"],"names":[],"mappings":";;;;;;;;AAAA,SAAS,SAAS;AAGlB,OAAO,oBAAoB;AAEpB,IAAM,gBAGT;AAAA,EACA,MAAM;AAAA,EACN,OAAO;AACX;AAEA,IAAM,qBAAqB,EAAE,OAAO;AAAA,EAChC,OAAO,EACF,OAAO;AAAA,IACJ,MAAM,oBACD,QAAQ,cAAc,IAAI,EAC1B;AAAA,MACG;AAAA,IACJ;AAAA,IACJ,OAAO,oBACF,QAAQ,cAAc,KAAK,EAC3B;AAAA,MACG;AAAA,IACJ;AAAA,EACR,CAAC,EACA,QAAQ;AAAA,IACL,MAAM;AAAA,IACN,OAAO;AAAA,EACX,CAAC;AAAA,EACL,QAAQ;AAAA,EACR,oBAAoB,EACf,OAAO;AAAA,IACJ,cAAc,EACT,OAAO;AAAA,MACJ,gBAAgB,EACX,QAAQ,EACR,SAAS,oCAAoC,EAC7C,QAAQ,IAAI;AAAA,MACjB,eAAe,EACV,QAAQ,EACR,SAAS,gCAAgC,EACzC,QAAQ,IAAI;AAAA,MACjB,WAAW,EACN,QAAQ,EACR,SAAS,gCAAgC,EACzC,QAAQ,KAAK;AAAA,MAClB,gBAAgB,EACX,QAAQ,EACR,SAAS,qCAAqC,EAC9C,QAAQ,KAAK;AAAA,MAClB,UAAU,EACL,QAAQ,EACR,SAAS,+BAA+B,EACxC,QAAQ,KAAK;AAAA,IACtB,CAAC,EACA,QAAQ,CAAC,CAAC;AAAA,IACf,iBAAiB,EACZ,KAAK,cAAc,EACnB;AAAA,MACG,EAAE,OAAO;AAAA,QACL,QAAQ,EAAE,KAAK,cAAc;AAAA,QAC7B,OAAO,EAAE,KAAK,cAAc;AAAA,MAChC,CAAC;AAAA,IACL,EACC,QAAQ;AAAA,MACL,QAAQ;AAAA,MACR,OAAO;AAAA,IACX,CAAC,EACA,UAAU,CAAC,MAAM;AACd,aAAO,OAAO,MAAM,WACd;AAAA,QACE,OAAO;AAAA,QACP,QAAQ;AAAA,MACZ,IACE;AAAA,IACV,CAAC;AAAA,EACT,CAAC,EACA,QAAQ,CAAC,CAAC;AACnB,CAAC;AAEM,IAAM,mBAAmB,mBAAmB,QAAQ,CAAC,CAAC;AAEtD,IAAM,yBAAyB,mBAAmB,SAAS;AAAA,EAC9D,QAAQ;AACZ,CAAC","sourcesContent":["import { z } from \"zod\";\nimport { monacoEditorConfigSchema } from \"./codeEditorConfig.js\";\nimport { shikiThemeValidator } from \"./codeThemeSchemas.js\";\nimport shikiLanguages from \"@ulld/utilities/shikiLanguages\";\n\nexport const defaultThemes: {\n    dark: z.output<typeof shikiThemeValidator>;\n    light: z.output<typeof shikiThemeValidator>;\n} = {\n    dark: \"dracula\",\n    light: \"material-theme-lighter\",\n};\n\nconst code_config_schema = z.object({\n    theme: z\n        .object({\n            dark: shikiThemeValidator\n                .default(defaultThemes.dark)\n                .describe(\n                    \"Syntax highlighting theme to be used when in dark mode. Can be overriden with the ?shikiHlDark=dracula search param.\",\n                ),\n            light: shikiThemeValidator\n                .default(defaultThemes.light)\n                .describe(\n                    \"Syntax highlighting theme to be used when in light mode. Can be overriden with the ?shikiHlLight=nord search param.\",\n                ),\n        })\n        .default({\n            dark: \"dracula\",\n            light: \"material-theme-lighter\",\n        }),\n    editor: monacoEditorConfigSchema,\n    syntaxHighlighting: z\n        .object({\n            transformers: z\n                .object({\n                    regexHighlight: z\n                        .boolean()\n                        .describe(\"shiki#transformerMetaWordHighlight\")\n                        .default(true),\n                    lineHighlight: z\n                        .boolean()\n                        .describe(\"shiki#transformerMetaHighlight\")\n                        .default(true),\n                    lineFocus: z\n                        .boolean()\n                        .describe(\"shiki#transformerNotationFocus\")\n                        .default(false),\n                    lineErrorLevel: z\n                        .boolean()\n                        .describe(\"shiki#transformerNotationErrorLevel\")\n                        .default(false),\n                    lineDiff: z\n                        .boolean()\n                        .describe(\"shiki#transformerNotationDiff\")\n                        .default(false),\n                })\n                .default({}),\n            defaultLanguage: z\n                .enum(shikiLanguages)\n                .or(\n                    z.object({\n                        inline: z.enum(shikiLanguages),\n                        block: z.enum(shikiLanguages),\n                    }),\n                )\n                .default({\n                    inline: \"zsh\",\n                    block: \"python\",\n                })\n                .transform((x) => {\n                    return typeof x === \"string\"\n                        ? {\n                            block: x,\n                            inline: x,\n                        }\n                        : x;\n                }),\n        })\n        .default({}),\n});\n\nexport const codeConfigSchema = code_config_schema.default({});\n\nexport const codeConfigSchemaOutput = code_config_schema.required({\n    editor: true,\n});\n\nexport type CodeConfigSchema = z.infer<typeof codeConfigSchema>;\nexport type CodeConfigSchemaInput = z.input<typeof codeConfigSchema>;\nexport type CodeConfigSchemaOutput = z.output<typeof codeConfigSchema>;\n"]}