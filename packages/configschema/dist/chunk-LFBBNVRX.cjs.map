{"version":3,"sources":["../src/zod/ui/textConfig.ts"],"names":[],"mappings":";AAAA,SAAS,SAAS;AAIlB,IAAM,mBAAmB,EAAE,MAAM;AAAA,EAC7B,EAAE,QAAQ,KAAK;AAAA,EACf,EAAE,QAAQ,KAAK;AAAA,EACf,EAAE,QAAQ,KAAK;AAAA,EACf,EAAE,QAAQ,KAAK;AAAA,EACf,EAAE,QAAQ,KAAK;AAAA,EACf,EAAE,QAAQ,KAAK;AAAA,EACf,EAAE,QAAQ,KAAK;AAAA,EACf,EAAE,QAAQ,KAAK;AAAA,EACf,EAAE,QAAQ,KAAK;AACnB,CAAC;AAGD,IAAM,kBAAkB,EAAE,MAAM;AAAA,EAC5B,EAAE,QAAQ,QAAQ;AAAA,EAClB,EAAE,QAAQ,MAAM;AAAA,EAChB,EAAE,QAAQ,QAAQ;AACtB,CAAC;AAGM,IAAM,mBAAmB,EAAE,OAAO;AAAA,EACrC,MAAM,EAAE,OAAO,EAAE,SAAS,8IAA8I;AAAA,EACxK,QAAQ;AAAA,EACR,OAAO;AACX,CAAC;AAGD,IAAM,sBAAsB,EAAE,MAAM;AAAA,EAC5B,iBAAiB,MAAM;AAAA,EACvB,EAAE,QAAQ,SAAS;AAAA;AACvB,CAAC;AAGE,IAAM,mBAAmB,EAAE,OAAO;AAAA,EACrC,kBAAkB,EAAE,QAAQ,EAAE,QAAQ,KAAK,EAAE,SAAS,+CAA+C;AAAA,EACrG,WAAW,oBAAoB,QAAQ,SAAS,EAAE,SAAS,iEAAiE;AAChI,CAAC,EAAE,QAAQ,CAAC,CAAC;AAIN,IAAM,yBAAmE,EAAE,OAAO;AAAA,EACrF,kBAAkB,EAAE,QAAQ;AAAA,EAC5B,WAAW;AACf,CAAC","sourcesContent":["import { z } from \"zod\";\nimport { ZodOutputSchema } from \"../../types.js\";\n\n\nconst fontWeightSchema = z.union([\n    z.literal(\"100\"),\n    z.literal(\"200\"),\n    z.literal(\"300\"),\n    z.literal(\"400\"),\n    z.literal(\"500\"),\n    z.literal(\"600\"),\n    z.literal(\"700\"),\n    z.literal(\"800\"),\n    z.literal(\"900\"),\n])\n\n\nconst fontStyleSchema = z.union([\n    z.literal(\"italic\"),\n    z.literal(\"bold\"),\n    z.literal(\"normal\"),\n])\n\n\nexport const fontConfigSchema = z.object({\n    path: z.string().describe(\"Should be an absolute path. As this is only required at build time, it is not necessary for this path to be a child of the fsRoot directory.\"),\n    weight: fontWeightSchema,\n    style: fontStyleSchema\n})\n\n\nconst fontPathFieldSchema = z.union([\n        fontConfigSchema.array(),\n        z.literal(\"default\") // change this to accept multiple fonts as a string and automate the layout file write accordingly.\n    ])\n\n\nexport const textConfigSchema = z.object({\n    blockQuoteItalic: z.boolean().default(false).describe(\"Whether or not to italicize block quote text.\"),\n    fontPaths: fontPathFieldSchema.default(\"default\").describe(\"An array of font config objects to be bundled during the build.\")\n}).default({})\n\n\n\nexport const textConfigSchemaOutput: ZodOutputSchema<typeof textConfigSchema> = z.object({\n    blockQuoteItalic: z.boolean(),\n    fontPaths: fontPathFieldSchema\n})\n"]}