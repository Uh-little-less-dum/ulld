{"version":3,"sources":["../src/zod/secondaryConfigParse/getParsableExtensions.ts"],"sourcesContent":["import { replaceRecursively } from \"@ulld/utilities/utils/general\";\nimport type { AppConfigSchemaOutput } from \"../main.js\";\nimport { z } from 'zod'\n\nexport const markdownExtensions = z.union([\n    z.literal(\".mdx\"),\n    z.literal(\".md\"),\n])\n\nexport const defaultParsableFileExtensions = z.union([\n    z.literal(\".mdx\"),\n    z.literal(\".md\"),\n    z.literal(\".ipynb\"),\n])\n\n\nexport const parsableFileExtensions = z.union([\n    z.literal(\".csv\"),\n    z.literal(\".tsv\"),\n    z.literal(\".excel\"),\n    z.literal(\".numpy\"),\n    z.literal(\".html\"),\n    z.literal(\".pickle\"),\n    z.literal(\".db\"),\n    z.literal(\".sql\"),\n    z.literal(\".pdf\"),\n    z.literal(\".json\"),\n    z.literal(\".tex\"),\n    z.literal(\".hdf5\"),\n])\n\n\nexport const currentParsableExtensions = defaultParsableFileExtensions\n\nexport const allParsableFileExtensionSchema = z.union([\n    defaultParsableFileExtensions,\n    parsableFileExtensions\n])\n\n\nexport type ParsableExtensionsSchema = z.input<typeof defaultParsableFileExtensions> | z.input<typeof parsableFileExtensions>\n\nexport type MarkdownFileExtensions = z.input<typeof markdownExtensions>\n\n\nexport type ActiveParsableExtensions = z.input<typeof currentParsableExtensions>\n\n\nexport const getParsableExtensions = (config: AppConfigSchemaOutput): (z.input<typeof defaultParsableFileExtensions> | z.input<typeof parsableFileExtensions>)[] => {\n    let parsable: (z.input<typeof defaultParsableFileExtensions> | z.input<typeof parsableFileExtensions>)[] = [\n        \".mdx\",\n        \".ipynb\"\n    ]\n    // Extra logic here to make more file extensions become available based on either internal progress or through configured plugins.\n    return parsable\n}\n\nexport const getFileTypeAppendices = (parsableExtensions: ReturnType<typeof getParsableExtensions>) => {\n    let ext: Record<ParsableExtensionsSchema, string> = {} as Record<ParsableExtensionsSchema, string>\n    for (const k of parsableExtensions) {\n        ext[k] = replaceRecursively(k, /\\./gmi, \"\")\n    }\n    return ext\n}\n\n"],"mappings":";AAAA,SAAS,0BAA0B;AAEnC,SAAS,SAAS;AAEX,IAAM,qBAAqB,EAAE,MAAM;AAAA,EACtC,EAAE,QAAQ,MAAM;AAAA,EAChB,EAAE,QAAQ,KAAK;AACnB,CAAC;AAEM,IAAM,gCAAgC,EAAE,MAAM;AAAA,EACjD,EAAE,QAAQ,MAAM;AAAA,EAChB,EAAE,QAAQ,KAAK;AAAA,EACf,EAAE,QAAQ,QAAQ;AACtB,CAAC;AAGM,IAAM,yBAAyB,EAAE,MAAM;AAAA,EAC1C,EAAE,QAAQ,MAAM;AAAA,EAChB,EAAE,QAAQ,MAAM;AAAA,EAChB,EAAE,QAAQ,QAAQ;AAAA,EAClB,EAAE,QAAQ,QAAQ;AAAA,EAClB,EAAE,QAAQ,OAAO;AAAA,EACjB,EAAE,QAAQ,SAAS;AAAA,EACnB,EAAE,QAAQ,KAAK;AAAA,EACf,EAAE,QAAQ,MAAM;AAAA,EAChB,EAAE,QAAQ,MAAM;AAAA,EAChB,EAAE,QAAQ,OAAO;AAAA,EACjB,EAAE,QAAQ,MAAM;AAAA,EAChB,EAAE,QAAQ,OAAO;AACrB,CAAC;AAGM,IAAM,4BAA4B;AAElC,IAAM,iCAAiC,EAAE,MAAM;AAAA,EAClD;AAAA,EACA;AACJ,CAAC;AAWM,IAAM,wBAAwB,CAAC,WAA8H;AAChK,MAAI,WAAuG;AAAA,IACvG;AAAA,IACA;AAAA,EACJ;AAEA,SAAO;AACX;AAEO,IAAM,wBAAwB,CAAC,uBAAiE;AACnG,MAAI,MAAgD,CAAC;AACrD,aAAW,KAAK,oBAAoB;AAChC,QAAI,CAAC,IAAI,mBAAmB,GAAG,SAAS,EAAE;AAAA,EAC9C;AACA,SAAO;AACX;","names":[]}