{"version":3,"sources":["../../src/zod/searchParamOverrides/main.ts","../../src/zod/jupyter/nbconvert.ts","../../src/zod/codeThemeSchemas.ts","../../src/zod/applySearchParamOverride.ts"],"names":["z"],"mappings":"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","sourcesContent":["import { z } from \"zod\";\nimport { AppConfigSchemaOutput } from \"../main.js\";\nimport { nbConvertTemplateOptions } from \"../jupyter/nbconvert.js\";\nimport { shikiThemeValidator } from \"../codeThemeSchemas.js\";\n\n// TODO: Create more thorough documentation on the available searchParm overrides.\nconst fields = {\n    colab: z.coerce.boolean(),\n    kernel: z.string(),\n    nbgrader: z.coerce.boolean(),\n    nbReadOnly: z.coerce.boolean(),\n    nbConvertExec: z.coerce.boolean(),\n    nbConvertTemp: nbConvertTemplateOptions,\n    shikiHlLight: shikiThemeValidator,\n    shikiHlDark: shikiThemeValidator,\n}\n\n\nexport const configSearchParamOverrideSchema = z.object(fields).partial()\n\n\nexport type ConfigSearchParamSchemaInput = z.input<typeof configSearchParamOverrideSchema>\nexport type ConfigSearchParamSchemaOutput = z.output<typeof configSearchParamOverrideSchema>\n\n\n\nexport const applyConfigOverrideMap: { [k in keyof typeof fields]: ((baseConfig: AppConfigSchemaOutput, override: ConfigSearchParamSchemaOutput) => AppConfigSchemaOutput) } = {\n    colab: (baseConfig, override) => {\n        if (override.colab) {\n            baseConfig.jupyter.jupyterReactProps.collaborative = true\n        }\n        return baseConfig\n    },\n    kernel: (baseConfig, override) => {\n        if (override.kernel) {\n            baseConfig.jupyter.kernel = override.kernel\n        }\n        return baseConfig\n    },\n    nbgrader: (baseConfig, override) => {\n        if (override.nbgrader) {\n            baseConfig.jupyter.jupyterNotebookProps.nbgrader = override.nbgrader\n        }\n        return baseConfig\n    },\n    nbReadOnly: (baseConfig, override) => {\n        if (override.nbReadOnly) {\n            baseConfig.jupyter.jupyterNotebookProps.readOnly = override.nbReadOnly\n        }\n        return baseConfig\n    },\n    nbConvertExec: (baseConfig, override) => {\n        if (override.nbConvertExec) {\n            baseConfig.jupyter.nbConvert.execute = override.nbConvertExec\n        }\n        return baseConfig\n    },\n    nbConvertTemp: (baseConfig, override) => {\n        if (override.nbConvertTemp) {\n            baseConfig.jupyter.nbConvert.nbConvertTemplate = override.nbConvertTemp\n        }\n        return baseConfig\n    },\n    shikiHlDark: (baseConfig, override) => {\n        if (override.shikiHlDark) {\n            baseConfig.code.theme.dark = override.shikiHlDark\n        }\n        return baseConfig\n    },\n    shikiHlLight: (baseConfig, override) => {\n        if (override.shikiHlLight) {\n            baseConfig.code.theme.light = override.shikiHlLight\n        }\n        return baseConfig\n    },\n}\n","import { z } from \"zod\";\n\nexport const nbConvertTemplateOptions = z.union([\n    z.literal(\"lab\"),\n    z.literal(\"classic\"),\n    z.literal(\"reveal\"),\n    z.string()\n])\n\nexport const nbConvertConfigSchema = z.object({\n    nbconvertPath: z.string().optional().describe(\"The path to nbConvert. This option will likely be deprecated.\"),\n    conversionTimeout: z.number().default(300).describe(\"The timeout in seconds with which to allow Jupyter notebooks to be converted to other formats. This option will likely be deprecated as the ability to output notebooks in alternative formats such as a pdf is being pushed back.\"),\n    customConversionFunction: z.object({\n        pdf: z.function().args(z.string().describe(\"Path to the notebook\"), z.string().describe(\"Output directory\")).returns(z.string().describe(\"utf-8 encoded string\"))\n    }).partial().optional(),\n    execute: z.boolean().default(false).describe(\"Whether or not to execute notebooks before converting via nbConvert. Can be overriden with the ?nbConvertExec=true of ?nbConvertExec=false search param.\"),\n    nbConvertTemplate: nbConvertTemplateOptions.default(\"classic\").describe(\"The template option that is passed to nbConvert. Can be overridden by the search param ?nbConvertTemp=lab or ?nbConvertTemp=classic\"),\n    notebookOutputDir: z.string().default(\"/generated\").describe(\"The fsRoot relative file path where converted notebooks should be saved.\")\n})\n","import {z} from 'zod';\n\n\nexport const availableShikiThemes = [\n    \"andromeeda\",\n    \"aurora-x\",\n    \"ayu-dark\",\n    \"catppuccin-frappe\",\n    \"catppuccin-latte\",\n    \"catppuccin-macchiato\",\n    \"catppuccin-mocha\",\n    \"dark-plus\",\n    \"dracula\",\n    \"dracula-soft\",\n    \"github-dark\",\n    \"github-dark-dimmed\",\n    \"github-light\",\n    \"light-plus\",\n    \"material-theme\",\n    \"material-theme-darker\",\n    \"material-theme-lighter\",\n    \"material-theme-ocean\",\n    \"material-theme-palenight\",\n    \"min-dark\",\n    \"min-light\",\n    \"monokai\",\n    \"night-owl\",\n    \"nord\",\n    \"one-dark-pro\",\n    \"poimandres\",\n    \"red\",\n    \"rose-pine\",\n    \"rose-pine-dawn\",\n    \"rose-pine-moon\",\n    \"slack-dark\",\n    \"slack-ochin\",\n    \"solarized-dark\",\n    \"solarized-light\",\n    \"synthwave-84\",\n    \"tokyo-night\",\n    \"vesper\",\n    \"vitesse-black\",\n    \"vitesse-dark\",\n    \"vitesse-light\"\n] as const;\n\nexport type ShikiTheme = typeof availableShikiThemes[number]\n\nexport const shikiThemeValidator = z.union([\n    z.literal(\"andromeeda\"),\n    z.literal(\"aurora-x\"),\n    z.literal(\"ayu-dark\"),\n    z.literal(\"catppuccin-frappe\"),\n    z.literal(\"catppuccin-latte\"),\n    z.literal(\"catppuccin-macchiato\"),\n    z.literal(\"catppuccin-mocha\"),\n    z.literal(\"dark-plus\"),\n    z.literal(\"dracula\"),\n    z.literal(\"dracula-soft\"),\n    z.literal(\"github-dark\"),\n    z.literal(\"github-dark-dimmed\"),\n    z.literal(\"github-light\"),\n    z.literal(\"light-plus\"),\n    z.literal(\"material-theme\"),\n    z.literal(\"material-theme-darker\"),\n    z.literal(\"material-theme-lighter\"),\n    z.literal(\"material-theme-ocean\"),\n    z.literal(\"material-theme-palenight\"),\n    z.literal(\"min-dark\"),\n    z.literal(\"min-light\"),\n    z.literal(\"monokai\"),\n    z.literal(\"night-owl\"),\n    z.literal(\"nord\"),\n    z.literal(\"one-dark-pro\"),\n    z.literal(\"poimandres\"),\n    z.literal(\"red\"),\n    z.literal(\"rose-pine\"),\n    z.literal(\"rose-pine-dawn\"),\n    z.literal(\"rose-pine-moon\"),\n    z.literal(\"slack-dark\"),\n    z.literal(\"slack-ochin\"),\n    z.literal(\"solarized-dark\"),\n    z.literal(\"solarized-light\"),\n    z.literal(\"synthwave-84\"),\n    z.literal(\"tokyo-night\"),\n    z.literal(\"vesper\"),\n    z.literal(\"vitesse-black\"),\n    z.literal(\"vitesse-dark\"),\n    z.literal(\"vitesse-light\")\n]);\n","import { AppConfigSchemaOutput } from \"./main.js\"\nimport { ConfigSearchParamSchemaInput, configSearchParamOverrideSchema, applyConfigOverrideMap } from \"./searchParamOverrides/main.js\"\n\nexport const applySearchParamConfigOverride = <T extends ConfigSearchParamSchemaInput | object>(baseConfig: AppConfigSchemaOutput, searchParams: T): AppConfigSchemaOutput => {\n    let sp = configSearchParamOverrideSchema.parse(searchParams)\n    let bc = baseConfig\n    Object.keys(sp).forEach((k) => {\n        bc = applyConfigOverrideMap[k as keyof typeof sp](baseConfig, sp)\n    })\n    return bc\n}\n"]}