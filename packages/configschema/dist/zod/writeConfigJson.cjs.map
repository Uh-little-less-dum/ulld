{"version":3,"sources":["../../src/zod/writeConfigJson.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,QAAQ;AACf,OAAO,UAAU;AACjB,SAAS,uBAAuB;AAGzB,IAAM,kBAAkB,OAAO,QAA8B,oBAA4B;AAC5F,MAAI,SAAS,gBAAgB,MAAM,MAAM;AACzC,QAAM,aAAa,gBAAgB,iBAAiB;AAAA,IAChD,MAAM;AAAA,IACN,gBAAgB;AAAA,IAChB,YAAY,CAAE,eAAgB;AAAA,EAClC,CAAC;AACD,QAAM,GAAG,SAAS,UAAU,KAAK,KAAK,iBAAiB,qBAAqB,GAAG,KAAK,UAAU,MAAM,GAAG,EAAC,UAAU,QAAO,CAAC;AAC1H,SAAO,MAAM,GAAG,SAAS,UAAU,KAAK,KAAK,iBAAiB,sBAAsB,GAAG,KAAK,UAAU,UAAU,GAAG,EAAC,UAAU,QAAO,CAAC;AAC1I","sourcesContent":["import { AppConfigSchemaInput, appConfigSchema } from \"./main.js\";\nimport fs from 'fs'\nimport path from 'path'\nimport { zodToJsonSchema } from \"zod-to-json-schema\";\n\n\nexport const writeConfigJson = async (config: AppConfigSchemaInput, targetDirectory: string) => {\n    let parsed = appConfigSchema.parse(config)\n    const jsonSchema = zodToJsonSchema(appConfigSchema, {\n        name: \"UlldAppConfig\",\n        \"$refStrategy\": \"relative\",\n        \"basePath\": [ targetDirectory ]\n    })\n    await fs.promises.writeFile(path.join(targetDirectory, \"appConfig.ulld.json\"), JSON.stringify(parsed), {encoding: \"utf-8\"})\n    return await fs.promises.writeFile(path.join(targetDirectory, \"jsonSchema.ulld.json\"), JSON.stringify(jsonSchema), {encoding: \"utf-8\"})\n}\n"]}