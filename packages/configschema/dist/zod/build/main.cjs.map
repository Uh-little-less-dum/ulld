{"version":3,"sources":["../../../src/zod/build/main.ts","../../../src/zod/build/database/database.ts","../../../src/zod/build/database/postgres.ts","../../../src/zod/build/additional/additionalUserContent.ts"],"names":["z"],"mappings":";AAAA,SAAS,KAAAA,UAAS;;;ACAlB,SAAS,KAAAA,UAAS;;;ACAlB,SAAS,SAAS;AAEX,IAAM,uBAAuB,EAC/B,OAAO;AAAA,EACJ,MAAM,EAAE,OAAO,OAAO,EAAE,IAAI,EAAE,QAAQ,IAAI;AAAA,EAC1C,QAAQ,EAAE,OAAO,EAAE,QAAQ,MAAM;AAAA,EACjC,eAAe,EAAE,OAAO,EAAE,QAAQ,EAAE;AACxC,CAAC,EACA,QAAQ,CAAC,CAAC,EACV;AAAA,EAAO,CAAC,SACL,QAAQ,KAAK,kBAAkB,MAAO,KAAK,QAAQ,KAAK,MAAO;AACnE,EACC,UAAU,CAAC,SAAS;AACjB,MAAI,KAAK,iBAAiB,KAAK,kBAAkB,IAAI;AACjD,WAAO;AAAA,MACH,eAAe,KAAK;AAAA,IACxB;AAAA,EACJ;AACA,SAAO;AAAA,IACH,MAAM,KAAK;AAAA,IACX,QAAQ,KAAK;AAAA,EACjB;AACJ,CAAC;;;ADnBE,IAAM,yBAAyB;AAAA,EAClC;AAAA,EACA;AACJ;AAEO,IAAM,sBAAsBA,GAC9B,OAAO;AAAA,EACJ,MAAMA,GACD,KAAK,sBAAsB,EAC3B,QAAQ,UAAU;AAAA,EACvB,UAAU;AAAA,EACV,YAAYA,GACP,MAAM,CAACA,GAAE,QAAQ,OAAO,GAAGA,GAAE,QAAQ,MAAM,CAAC,CAAC,EAC7C,QAAQ,OAAO;AACxB,CAAC,EACA,QAAQ,CAAC,CAAC,EACV;AAAA,EACG,CAAC,SACG,CAAC,QAAQ,KAAK,SAAS,cAAc,CAAC,KAAK,QAAQ;AAAA,EACvD;AAAA,IACI,SACI;AAAA,EACR;AACJ;;;AE1BJ,SAAS,KAAAA,UAAS;AAIlB,IAAM,oBAAoB,CAAC,OAAO,QAAQ,OAAO,OAAO,MAAM;AAC9D,IAAM,yBAAyB,CAAC,OAAO,OAAO,OAAO,KAAK;AAEnD,IAAM,wBAAwBA,GAChC,OAAO;AAAA,EACJ,KAAKA,GAAE,OAAO,EAAE,SAAS;AAAA,EACzB,SAASA,GACJ,OAAO,EACP;AAAA,IACG,CAAC,MAAM;AACH,UAAI,KAAK,EAAE,MAAM,GAAG,EAAE,GAAG,EAAE;AAC3B,UAAI,CAAC;AAAI,eAAO;AAChB,aAAO,uBAAuB,SAAS,EAAE;AAAA,IAC7C;AAAA,IACA;AAAA,MACI,SAAS;AAAA,EAC3B,uBAAuB,KAAK,IAAI,CAAC;AAAA,IACnB;AAAA,EACJ,EACC,SAAS;AAAA,EACd,MAAMA,GACD,OAAO,EACP;AAAA,IACG,CAAC,MAAM;AACH,UAAI,KAAK,EAAE,MAAM,GAAG,EAAE,GAAG,EAAE;AAC3B,UAAI,CAAC;AAAI,eAAO;AAChB,aAAO,kBAAkB,SAAS,EAAE;AAAA,IACxC;AAAA,IACA;AAAA,MACI,SAAS;AAAA,EAC3B,kBAAkB,KAAK,IAAI,CAAC;AAAA,IACd;AAAA,EACJ,EACC,SAAS;AAClB,CAAC,EACA,QAAQ,CAAC,CAAC;;;AHnCR,IAAM,kBAAkBA,GAC1B,OAAO;AAAA,EACJ,UAAU,oBAAoB,QAAQ,CAAC,CAAC;AAAA,EACxC;AACJ,CAAC,EACA,QAAQ,CAAC,CAAC","sourcesContent":["import { z } from \"zod\";\nimport { databaseBuildSchema } from \"./database/database.js\";\nimport { additionalUserContent } from \"./additional/additionalUserContent.js\";\n\nexport const buildOnlySchema = z\n    .object({\n        database: databaseBuildSchema.default({}),\n        additionalUserContent: additionalUserContent,\n    })\n    .default({});\n","import { z } from \"zod\";\nimport { postgresConfigSchema } from \"./postgres.js\";\n\nexport const ulldSupportedDatabases = [\n    \"postgres\",\n    \"sqlite\",\n] as const\n\nexport const databaseBuildSchema = z\n    .object({\n        type: z\n            .enum(ulldSupportedDatabases)\n            .default(\"postgres\"),\n        postgres: postgresConfigSchema,\n        prioritize: z\n            .union([z.literal(\"speed\"), z.literal(\"size\")])\n            .default(\"speed\"),\n    })\n    .default({})\n    .refine(\n        (data) =>\n            !Boolean(data.type === \"postgres\" && !data.postgres),\n        {\n            message:\n                \"If you set the database type to 'Postgres', you must also provide a postgres configuration with either a port number and a database name, or a connection URI.\",\n        },\n    );\n","import { z } from \"zod\";\n\nexport const postgresConfigSchema = z\n    .object({\n        port: z.coerce.number().int().default(5432),\n        dbName: z.string().default(\"ulld\"),\n        connectionURI: z.string().default(\"\"),\n    })\n    .default({})\n    .refine((data) =>\n        Boolean(data.connectionURI !== \"\" || (data.port && data.dbName)),\n    )\n    .transform((data) => {\n        if (data.connectionURI && data.connectionURI !== \"\") {\n            return {\n                connectionURI: data.connectionURI,\n            };\n        }\n        return {\n            port: data.port,\n            dbName: data.dbName,\n        };\n    });\n","import { z } from \"zod\";\n\n\n// PRIORITY: Double check these file types. Can definitely add some to the imageExtensions, and might have to remove some from the faviconExtensions.\nconst validImageExtends = [\"jpg\", \"jpeg\", \"svg\", \"png\", \"webp\"];\nconst validFaviconExtensions = [\"ico\", \"png\", \"jpg\", \"svg\"];\n\nexport const additionalUserContent = z\n    .object({\n        css: z.string().optional(),\n        favicon: z\n            .string()\n            .refine(\n                (s) => {\n                    let _s = s.split(\".\").at(-1);\n                    if (!_s) return false;\n                    return validFaviconExtensions.includes(_s);\n                },\n                {\n                    message: `Your favicon must be of a valid favicon type. Currently supported extensions are:\n${validFaviconExtensions.join(\"\\n\")}`,\n                },\n            )\n            .optional(),\n        logo: z\n            .string()\n            .refine(\n                (s) => {\n                    let _s = s.split(\".\").at(-1);\n                    if (!_s) return false;\n                    return validImageExtends.includes(_s);\n                },\n                {\n                    message: `Your logo must be of a valid image type. Currently supported image extensions are:\n${validImageExtends.join(\"\\n\")}`,\n                },\n            )\n            .optional(),\n    })\n    .default({});\n"]}