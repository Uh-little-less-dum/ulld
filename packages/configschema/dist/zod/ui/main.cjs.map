{"version":3,"sources":["../../../src/zod/ui/main.ts","../../../src/zod/ui/tableConfig.ts","../../../src/zod/ui/textConfig.ts","../../../src/zod/ui/mediaConfig.ts","../../../src/zod/configUtilitySchemas.ts","../../../src/zod/ui/colorsConfig.ts","../../../src/zod/ui/defaultColorMap.ts"],"names":["z"],"mappings":"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","sourcesContent":["import { z } from \"zod\";\nimport { tableUIConfigSchema } from \"./tableConfig.js\";\nimport { textConfigSchema } from \"./textConfig.js\";\nimport { mediaConfigSchema } from \"./mediaConfig.js\";\nimport { colorsConfigSchema } from \"./colorsConfig.js\";\nimport { themeSchema } from \"@ulld/tailwind/themeUtils\";\n\nexport const mainUIConfigSchema = z\n    .object({\n        table: tableUIConfigSchema,\n        text: textConfigSchema,\n        media: mediaConfigSchema,\n        colors: colorsConfigSchema,\n        theme: themeSchema.default(\"ulld\"),\n        autoApplyMdxTitles: z.boolean().default(true)\n    })\n    .default({});\n","import { z } from \"zod\";\n\nexport const tableUIConfigSchema = z.object({\n    maxHeight: z.union([z.string(), z.number()]).default(300).describe(\"The default height at which to limit tables. This can be overridden for each not individually in that note's front matter. If the value is a string, it must be able to be interpretted by css-in-tsx syntax. Numbers will automatically be interpreted as pixels.\").transform((a) => typeof a === \"number\" ? `${a}px` : a)\n}).default({})\n","import { z } from \"zod\";\n\n\nconst fontWeightSchema = z.union([\n    z.literal(\"100\"),\n    z.literal(\"200\"),\n    z.literal(\"300\"),\n    z.literal(\"400\"),\n    z.literal(\"500\"),\n    z.literal(\"600\"),\n    z.literal(\"700\"),\n    z.literal(\"800\"),\n    z.literal(\"900\"),\n])\n\n\nconst fontStyleSchema = z.union([\n    z.literal(\"italic\"),\n    z.literal(\"bold\"),\n    z.literal(\"normal\"),\n])\n\n\nexport const fontConfigSchema = z.object({\n    path: z.string().describe(\"Should be an absolute path. As this is only required at build time, it is not necessary for this path to be a child of the fsRoot directory.\"),\n    weight: fontWeightSchema,\n    style: fontStyleSchema\n})\n\n\nexport const textConfigSchema = z.object({\n    blockQuoteItalic: z.boolean().default(false).describe(\"Whether or not to italicize block quote text.\"),\n    fontPaths: z.union([\n        fontConfigSchema.array(),\n        z.literal(\"default\") // change this to accept multiple fonts as a string and automate the layout file write accordingly.\n    ]).default(\"default\").describe(\"An array of font config objects to be bundled during the build.\")\n}).default({})\n","import { z } from \"zod\";\nimport { zodPathStringField } from \"../configUtilitySchemas.js\";\n\n\nexport const mediaConfigSchema = z.object({\n    imageMap: z.record(z.string().describe(\"An alias to more easily embed this image throughout your notes.\"), zodPathStringField(\"The fsRoot relative path at which this image can be found.\")).default({}),\n    includeDefaultImageMap: z.boolean().default(true).describe(\"Whether or not to include a default image map of light weight svg images that respond to the theme's colors to be easily embedded by their alias. Can be disabled to minimize the build size if they are unlikely to be used.\"),\n    imageRemoteTest: z.instanceof(RegExp).array().default([]),\n})\n.default({})\n// .transform((a) => {\n//     return {\n//         ...a,\n//         imageMap: a.includeDefaultImageMap ? {\n//             ...a,\n//         } : a\n//     }\n// })\n","import { z } from 'zod'\nimport globToRegExp from 'glob-to-regexp'\nimport { withForwardSlash } from '@ulld/utilities/utils/fsUtils'\n\n\nexport const logLevelSchema = z.union([\n    z.literal(\"debug\"),\n    z.literal(\"verbose\"),\n    z.literal(\"info\"),\n    z.literal(\"none\"),\n])\n\nexport type LogLevel = z.input<typeof logLevelSchema>\n\nexport const zodPathGlobTransform = (a: string | RegExp): {\n    original: string,\n    regex: RegExp\n} => {\n    if (typeof a === \"string\") {\n        return {\n            original: a,\n            regex: globToRegExp(a, { extended: true, globstar: true })\n        }\n    }\n    return {\n        original: a.source,\n        regex: a\n    }\n}\n\nexport const zodWithForwardSlashTransform = <T extends string | null | undefined>(a: T) => {\n    if (a) {\n        return withForwardSlash(a)\n    }\n    return a\n}\n\n\nexport const zodPathStringField = (desc?: string, optional?: boolean) => desc ? optional ? z.string().optional().describe(desc).transform((a) => a && withForwardSlash(a) as string | undefined) : z.string().describe(desc).transform((a) => a && withForwardSlash(a) as string) : optional ? z.string().optional().transform((a) => a && withForwardSlash(a) as string | undefined) : z.string().transform((a) => a && withForwardSlash(a) as string)\n\n\n\nexport const zodPathWithGlobField = (desc?: string, optional?: boolean) => desc ? optional ? z.union([\n    z.string(),\n    z.instanceof(RegExp)\n]).optional().describe(desc).transform((a) => a ? zodPathGlobTransform(a) : a) : z.union([\n    z.string(),\n    z.instanceof(RegExp)\n]).describe(desc).transform(zodPathGlobTransform) : optional ? z.union([\n    z.string(),\n    z.instanceof(RegExp)\n]).optional().transform((a) => a ? zodPathGlobTransform(a) : a) : z.union([\n    z.string(),\n    z.instanceof(RegExp)\n]).transform(zodPathGlobTransform)\n\n","import { z } from \"zod\";\nimport { defaultUlldColorMap } from \"./defaultColorMap.js\";\nimport { convertColorString } from \"@ulld/utilities/convertColorString\";\n\nconst colorTransformOptional = (val?: string | null) => val ? convertColorString(val) : undefined;\n\nconst colorScaleKeys = [\n    \"50\",\n    \"100\",\n    \"200\",\n    \"300\",\n    \"400\",\n    \"500\",\n    \"600\",\n    \"700\",\n    \"800\",\n    \"900\",\n    \"950\",\n] as const;\n\n// TODO: Add support for color gradients here.\n// const gradientObjectSchema = z.object({\n//     50: z.string().transform(colorTransform),\n//     100: z.string().transform(colorTransform),\n//     200: z.string().transform(colorTransform),\n//     300: z.string().transform(colorTransform),\n//     400: z.string().transform(colorTransform),\n//     500: z.string().transform(colorTransform),\n//     600: z.string().transform(colorTransform),\n//     700: z.string().transform(colorTransform),\n//     800: z.string().transform(colorTransform),\n//     900: z.string().transform(colorTransform),\n//     950: z.string().transform(colorTransform),\n// });\n\ntype T = { [k in (typeof colorScaleKeys)[number]]: string };\n\nconst getObj = (c: string[]): T => {\n    let ob: T = {} as T;\n    colorScaleKeys.forEach((k, i) => {\n        ob[k] = c[i];\n    });\n    return ob;\n};\n\n// TODO: Populate these color values with a default list and override them as they're populated in the appConfig to make sure they are available to developers throughout the app. Make sure these are mapped to css variables with a reliable naming convention to make them available without direct access to the config.\n\nexport const colorGroup = z.object({\n    dark: z.string().optional().transform(colorTransformOptional),\n    light: z.string().optional().transform(colorTransformOptional),\n});\n\nexport type ColorGroup = z.output<typeof colorGroup>;\n\nconst colorValue = z\n    .union([\n        colorGroup,\n        z.string().transform((c) => convertColorString(c, \"hsl\")),\n    ])\n    .nullish()\n    .transform((a) => {\n        if (!a) return undefined;\n        if (typeof a === \"string\") {\n            return {\n                dark: a,\n                light: a,\n            } as {\n                dark: string;\n                light: string;\n            };\n        }\n        if (!(\"dark\" in a)) {\n            return {\n                dark: a.light,\n                light: a.light,\n            } as {\n                dark: string;\n                light: string;\n            };\n        }\n        return a;\n    });\n\nconst configColors = z.union([\n    z.literal(\"red\"),\n    z.literal(\"orange\"),\n    z.literal(\"amber\"),\n    z.literal(\"yellow\"),\n    z.literal(\"lime\"),\n    z.literal(\"green\"),\n    z.literal(\"emerald\"),\n    z.literal(\"teal\"),\n    z.literal(\"cyan\"),\n    z.literal(\"sky\"),\n    z.literal(\"blue\"),\n    z.literal(\"indigo\"),\n    z.literal(\"purple\"),\n    z.literal(\"fuchsia\"),\n    z.literal(\"pink\"),\n    z.literal(\"rose\"),\n    z.literal(\"slate\"),\n    z.literal(\"gray\"),\n    z.literal(\"stone\"),\n    z.literal(\"zinc\"),\n    z.literal(\"info\"),\n    z.literal(\"error\"),\n    z.literal(\"warning\"),\n    z.literal(\"alert\"),\n    z.literal(\"success\"),\n    z.literal(\"primary\"),\n    z.literal(\"secondary\"),\n    z.literal(\"success\"),\n]);\n\nexport type ConfigColorKey = z.input<typeof configColors>;\n\nexport const colorsConfigSchema = z\n    .record(z.string(), colorValue)\n    .default(defaultUlldColorMap);\n\nexport type ColorGroupType = z.infer<typeof colorGroup>;\n\nexport type ColorsConfigSchemaType = z.infer<typeof colorsConfigSchema>;\nexport type ColorsConfigSchemaInput = z.input<typeof colorsConfigSchema>;\n\nexport type ConfigColorValueType = z.infer<typeof colorValue>;\nexport type ConfigColorValueTypeWithId = z.output<typeof colorValue> & {\n    colorId: string;\n};\n","import { ConfigColorKey } from \"./colorsConfig.js\";\n\nexport const defaultUlldColorMap: {\n    [k in ConfigColorKey]: string | { dark: string; light: string };\n} = {\n    success: \"#16a34a\",\n    info: \"#0284c7\",\n    error: \"#dc2626\",\n    sky: \"#07c8f9\",\n    yellow: \"#ffff24\",\n    blue: \"#00a1e4\",\n    orange: \"#ff7d00\",\n    green: \"#89fc00\",\n    red: \"#ff0000\",\n    purple: \"#9908ff\",\n    pink: \"#dc0073\",\n    amber: {\n        dark: \"#f59e0b\",\n        light: \"#d97706\",\n    },\n    lime: {\n        dark: \"#84cc16\",\n        light: \"#65a30d\",\n    },\n    emerald: {\n        dark: \"#10b981\",\n        light: \"#059669\",\n    },\n    teal: {\n        dark: \"#14b8a6\",\n        light: \"#0d9488\",\n    },\n    cyan: {\n        dark: \"#06b6d4\",\n        light: \"#0891b2\",\n    },\n    indigo: {\n        dark: \"#6366f1\",\n        light: \"#4f46e5\",\n    },\n    fuchsia: {\n        dark: \"#d946ef\",\n        light: \"#c026d3\",\n    },\n    rose: {\n        dark: \"#f43f5e\",\n        light: \"#e11d48\",\n    },\n    slate: {\n        dark: \"#64748b\",\n        light: \"#475569\",\n    },\n    gray: {\n        dark: \"#6b7280\",\n        light: \"#4b5563\",\n    },\n    stone: {\n        dark: \"#78716c\",\n        light: \"#57534e\",\n    },\n    zinc: {\n        dark: \"#71717a\",\n        light: \"#52525b\",\n    },\n    warning: \"#eab308\",\n    alert: \"#3b82f6\",\n    primary: \"hsl(var(--primary))\",\n    secondary: \"hsl(var(--secondary))\",\n};\n"]}