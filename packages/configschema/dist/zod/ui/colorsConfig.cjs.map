{"version":3,"sources":["../../../src/zod/ui/colorsConfig.ts","../../../src/zod/ui/defaultColorMap.ts"],"names":[],"mappings":"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","sourcesContent":["import { z } from \"zod\";\nimport { defaultUlldColorMap } from \"./defaultColorMap.js\";\nimport { convertColorString } from \"@ulld/utilities/convertColorString\";\n\nconst colorTransformOptional = (val?: string | null) => val ? convertColorString(val) : undefined;\n\nconst colorScaleKeys = [\n    \"50\",\n    \"100\",\n    \"200\",\n    \"300\",\n    \"400\",\n    \"500\",\n    \"600\",\n    \"700\",\n    \"800\",\n    \"900\",\n    \"950\",\n] as const;\n\n// TODO: Add support for color gradients here.\n// const gradientObjectSchema = z.object({\n//     50: z.string().transform(colorTransform),\n//     100: z.string().transform(colorTransform),\n//     200: z.string().transform(colorTransform),\n//     300: z.string().transform(colorTransform),\n//     400: z.string().transform(colorTransform),\n//     500: z.string().transform(colorTransform),\n//     600: z.string().transform(colorTransform),\n//     700: z.string().transform(colorTransform),\n//     800: z.string().transform(colorTransform),\n//     900: z.string().transform(colorTransform),\n//     950: z.string().transform(colorTransform),\n// });\n\ntype T = { [k in (typeof colorScaleKeys)[number]]: string };\n\nconst getObj = (c: string[]): T => {\n    let ob: T = {} as T;\n    colorScaleKeys.forEach((k, i) => {\n        ob[k] = c[i];\n    });\n    return ob;\n};\n\n// TODO: Populate these color values with a default list and override them as they're populated in the appConfig to make sure they are available to developers throughout the app. Make sure these are mapped to css variables with a reliable naming convention to make them available without direct access to the config.\n\nexport const colorGroup = z.object({\n    dark: z.string().optional().transform(colorTransformOptional),\n    light: z.string().optional().transform(colorTransformOptional),\n});\n\nexport type ColorGroup = z.output<typeof colorGroup>;\n\nconst colorValue = z\n    .union([\n        colorGroup,\n        z.string().transform((c) => convertColorString(c, \"hsl\")),\n    ])\n    .nullish()\n    .transform((a) => {\n        if (!a) return undefined;\n        if (typeof a === \"string\") {\n            return {\n                dark: a,\n                light: a,\n            } as {\n                dark: string;\n                light: string;\n            };\n        }\n        if (!(\"dark\" in a)) {\n            return {\n                dark: a.light,\n                light: a.light,\n            } as {\n                dark: string;\n                light: string;\n            };\n        }\n        return a;\n    });\n\nconst configColors = z.union([\n    z.literal(\"red\"),\n    z.literal(\"orange\"),\n    z.literal(\"amber\"),\n    z.literal(\"yellow\"),\n    z.literal(\"lime\"),\n    z.literal(\"green\"),\n    z.literal(\"emerald\"),\n    z.literal(\"teal\"),\n    z.literal(\"cyan\"),\n    z.literal(\"sky\"),\n    z.literal(\"blue\"),\n    z.literal(\"indigo\"),\n    z.literal(\"purple\"),\n    z.literal(\"fuchsia\"),\n    z.literal(\"pink\"),\n    z.literal(\"rose\"),\n    z.literal(\"slate\"),\n    z.literal(\"gray\"),\n    z.literal(\"stone\"),\n    z.literal(\"zinc\"),\n    z.literal(\"info\"),\n    z.literal(\"error\"),\n    z.literal(\"warning\"),\n    z.literal(\"alert\"),\n    z.literal(\"success\"),\n    z.literal(\"primary\"),\n    z.literal(\"secondary\"),\n    z.literal(\"success\"),\n]);\n\nexport type ConfigColorKey = z.input<typeof configColors>;\n\nexport const colorsConfigSchema = z\n    .record(z.string(), colorValue)\n    .default(defaultUlldColorMap);\n\nexport type ColorGroupType = z.infer<typeof colorGroup>;\n\nexport type ColorsConfigSchemaType = z.infer<typeof colorsConfigSchema>;\nexport type ColorsConfigSchemaInput = z.input<typeof colorsConfigSchema>;\n\nexport type ConfigColorValueType = z.infer<typeof colorValue>;\nexport type ConfigColorValueTypeWithId = z.output<typeof colorValue> & {\n    colorId: string;\n};\n","import { ConfigColorKey } from \"./colorsConfig.js\";\n\nexport const defaultUlldColorMap: {\n    [k in ConfigColorKey]: string | { dark: string; light: string };\n} = {\n    success: \"#16a34a\",\n    info: \"#0284c7\",\n    error: \"#dc2626\",\n    sky: \"#07c8f9\",\n    yellow: \"#ffff24\",\n    blue: \"#00a1e4\",\n    orange: \"#ff7d00\",\n    green: \"#89fc00\",\n    red: \"#ff0000\",\n    purple: \"#9908ff\",\n    pink: \"#dc0073\",\n    amber: {\n        dark: \"#f59e0b\",\n        light: \"#d97706\",\n    },\n    lime: {\n        dark: \"#84cc16\",\n        light: \"#65a30d\",\n    },\n    emerald: {\n        dark: \"#10b981\",\n        light: \"#059669\",\n    },\n    teal: {\n        dark: \"#14b8a6\",\n        light: \"#0d9488\",\n    },\n    cyan: {\n        dark: \"#06b6d4\",\n        light: \"#0891b2\",\n    },\n    indigo: {\n        dark: \"#6366f1\",\n        light: \"#4f46e5\",\n    },\n    fuchsia: {\n        dark: \"#d946ef\",\n        light: \"#c026d3\",\n    },\n    rose: {\n        dark: \"#f43f5e\",\n        light: \"#e11d48\",\n    },\n    slate: {\n        dark: \"#64748b\",\n        light: \"#475569\",\n    },\n    gray: {\n        dark: \"#6b7280\",\n        light: \"#4b5563\",\n    },\n    stone: {\n        dark: \"#78716c\",\n        light: \"#57534e\",\n    },\n    zinc: {\n        dark: \"#71717a\",\n        light: \"#52525b\",\n    },\n    warning: \"#eab308\",\n    alert: \"#3b82f6\",\n    primary: \"hsl(var(--primary))\",\n    secondary: \"hsl(var(--secondary))\",\n};\n"]}