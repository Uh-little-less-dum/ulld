{"version":3,"sources":["../../src/zod/codeConfig.ts","../../src/zod/codeEditorConfig.ts","../../src/zod/codeThemeSchemas.ts"],"names":["z"],"mappings":"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","sourcesContent":["import { z } from \"zod\";\nimport { monacoEditorConfigSchema } from \"./codeEditorConfig.js\";\nimport { shikiThemeValidator } from \"./codeThemeSchemas.js\";\nimport shikiLanguages from \"@ulld/utilities/shikiLanguages\";\n\nexport const defaultThemes: {\n    dark: z.output<typeof shikiThemeValidator>;\n    light: z.output<typeof shikiThemeValidator>;\n} = {\n    dark: \"dracula\",\n    light: \"material-theme-lighter\",\n};\n\nconst code_config_schema = z.object({\n    theme: z\n        .object({\n            dark: shikiThemeValidator\n                .default(defaultThemes.dark)\n                .describe(\n                    \"Syntax highlighting theme to be used when in dark mode. Can be overriden with the ?shikiHlDark=dracula search param.\",\n                ),\n            light: shikiThemeValidator\n                .default(defaultThemes.light)\n                .describe(\n                    \"Syntax highlighting theme to be used when in light mode. Can be overriden with the ?shikiHlLight=nord search param.\",\n                ),\n        })\n        .default({\n            dark: \"dracula\",\n            light: \"material-theme-lighter\",\n        }),\n    editor: monacoEditorConfigSchema,\n    syntaxHighlighting: z\n        .object({\n            transformers: z\n                .object({\n                    regexHighlight: z\n                        .boolean()\n                        .describe(\"shiki#transformerMetaWordHighlight\")\n                        .default(true),\n                    lineHighlight: z\n                        .boolean()\n                        .describe(\"shiki#transformerMetaHighlight\")\n                        .default(true),\n                    lineFocus: z\n                        .boolean()\n                        .describe(\"shiki#transformerNotationFocus\")\n                        .default(false),\n                    lineErrorLevel: z\n                        .boolean()\n                        .describe(\"shiki#transformerNotationErrorLevel\")\n                        .default(false),\n                    lineDiff: z\n                        .boolean()\n                        .describe(\"shiki#transformerNotationDiff\")\n                        .default(false),\n                })\n                .default({}),\n            defaultLanguage: z\n                .enum(shikiLanguages)\n                .or(\n                    z.object({\n                        inline: z.enum(shikiLanguages),\n                        block: z.enum(shikiLanguages),\n                    }),\n                )\n                .default({\n                    inline: \"zsh\",\n                    block: \"python\",\n                })\n                .transform((x) => {\n                    return typeof x === \"string\"\n                        ? {\n                            block: x,\n                            inline: x,\n                        }\n                        : x;\n                }),\n        })\n        .default({}),\n});\n\nexport const codeConfigSchema = code_config_schema.default({});\n\nexport const codeConfigSchemaOutput = code_config_schema.required({\n    editor: true,\n});\n\nexport type CodeConfigSchema = z.infer<typeof codeConfigSchema>;\nexport type CodeConfigSchemaInput = z.input<typeof codeConfigSchema>;\nexport type CodeConfigSchemaOutput = z.output<typeof codeConfigSchema>;\n","import { z } from 'zod'\n\n\nconst monacoSupportedLanguage = z.string()\n\nexport const monacoEditorConfigSchema = z.object({\n    defaultLangauge: monacoSupportedLanguage.default(\"python\"),\n    useVimMode: z.boolean().default(false)\n}).default({})\n","import {z} from 'zod';\n\n\nexport const availableShikiThemes = [\n    \"andromeeda\",\n    \"aurora-x\",\n    \"ayu-dark\",\n    \"catppuccin-frappe\",\n    \"catppuccin-latte\",\n    \"catppuccin-macchiato\",\n    \"catppuccin-mocha\",\n    \"dark-plus\",\n    \"dracula\",\n    \"dracula-soft\",\n    \"github-dark\",\n    \"github-dark-dimmed\",\n    \"github-light\",\n    \"light-plus\",\n    \"material-theme\",\n    \"material-theme-darker\",\n    \"material-theme-lighter\",\n    \"material-theme-ocean\",\n    \"material-theme-palenight\",\n    \"min-dark\",\n    \"min-light\",\n    \"monokai\",\n    \"night-owl\",\n    \"nord\",\n    \"one-dark-pro\",\n    \"poimandres\",\n    \"red\",\n    \"rose-pine\",\n    \"rose-pine-dawn\",\n    \"rose-pine-moon\",\n    \"slack-dark\",\n    \"slack-ochin\",\n    \"solarized-dark\",\n    \"solarized-light\",\n    \"synthwave-84\",\n    \"tokyo-night\",\n    \"vesper\",\n    \"vitesse-black\",\n    \"vitesse-dark\",\n    \"vitesse-light\"\n] as const;\n\nexport type ShikiTheme = typeof availableShikiThemes[number]\n\nexport const shikiThemeValidator = z.union([\n    z.literal(\"andromeeda\"),\n    z.literal(\"aurora-x\"),\n    z.literal(\"ayu-dark\"),\n    z.literal(\"catppuccin-frappe\"),\n    z.literal(\"catppuccin-latte\"),\n    z.literal(\"catppuccin-macchiato\"),\n    z.literal(\"catppuccin-mocha\"),\n    z.literal(\"dark-plus\"),\n    z.literal(\"dracula\"),\n    z.literal(\"dracula-soft\"),\n    z.literal(\"github-dark\"),\n    z.literal(\"github-dark-dimmed\"),\n    z.literal(\"github-light\"),\n    z.literal(\"light-plus\"),\n    z.literal(\"material-theme\"),\n    z.literal(\"material-theme-darker\"),\n    z.literal(\"material-theme-lighter\"),\n    z.literal(\"material-theme-ocean\"),\n    z.literal(\"material-theme-palenight\"),\n    z.literal(\"min-dark\"),\n    z.literal(\"min-light\"),\n    z.literal(\"monokai\"),\n    z.literal(\"night-owl\"),\n    z.literal(\"nord\"),\n    z.literal(\"one-dark-pro\"),\n    z.literal(\"poimandres\"),\n    z.literal(\"red\"),\n    z.literal(\"rose-pine\"),\n    z.literal(\"rose-pine-dawn\"),\n    z.literal(\"rose-pine-moon\"),\n    z.literal(\"slack-dark\"),\n    z.literal(\"slack-ochin\"),\n    z.literal(\"solarized-dark\"),\n    z.literal(\"solarized-light\"),\n    z.literal(\"synthwave-84\"),\n    z.literal(\"tokyo-night\"),\n    z.literal(\"vesper\"),\n    z.literal(\"vitesse-black\"),\n    z.literal(\"vitesse-dark\"),\n    z.literal(\"vitesse-light\")\n]);\n"]}