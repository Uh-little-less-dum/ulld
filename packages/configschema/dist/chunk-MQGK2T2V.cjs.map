{"version":3,"sources":["../src/__scripts__/gatherProtectedPaths.ts"],"names":[],"mappings":";AAAA,OAAO,QAAQ;AACf,OAAO,UAAU;AAEjB,IAAM,aAAa,KAAK;AAAA,EACpB;AAAA,EACA;AACJ;AAOA,IAAM,WAAW,QAAQ,IAAI;AAE7B,IAAM,gBAAgB,CAAC,MAAsB;AACzC,MAAI,EAAE,WAAW,GAAG,KAAK,EAAE,SAAS,GAAG,GAAG;AACtC,WAAO,EAAE,SAAS,KAAK,IAAI,OAAO;AAAA,EACtC;AACA,SAAO;AACX;AAEA,IAAM,qBAAqB,CAAC,MAAsB;AAC9C,MAAI,QAAQ,EAAE,MAAM,GAAG,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,YAAY,KAAK,EAAE,SAAS,CAAC,CAAC;AAC3E,MAAI,MAAM,CAAC,MAAM,OAAO;AACpB,UAAM,IAAI;AAAA,MACN,yEAAyE,CAAC;AAAA,IAC9E;AAAA,EACJ;AACA,UAAQ,MAAM,MAAM,CAAC,EAAE,IAAI,CAAC,MAAM,cAAc,CAAC,CAAC;AAClD,SAAO,MAAM,KAAK,GAAG;AACzB;AAEO,IAAM,uBAAuB,CAAC,OAAiB,oBAA4B;AAC9E,QAAM,iBAAkC,CAAC;AAIzC,aAAW,KAAK,OAAO;AACnB,UAAM,OAAO,GAAG,aAAa,GAAG,EAAE,UAAU,QAAQ,CAAC;AACrD,QAAI,KAAK;AACT,UAAM,YAAY;AAClB,QAAI,GAAG,KAAK,IAAI,GAAG;AACf,YAAM,gBAAgB,EAAE,QAAQ,UAAU,EAAE;AAC5C,UAAI,UAAU,UAAU,KAAK,IAAI;AACjC,UAAI,IAAS;AAAA,QACT,UAAU;AAAA,QACV,OAAO,mBAAmB,aAAa;AAAA,MAC3C;AACA,UAAI,SAAS,QAAQ,QAAQ,SAAS,QAAQ,SAAS;AACnD,UAAE,UAAU;AAAA,UACR,MAAM,QAAQ,OAAO;AAAA,UACrB,SAAS,QAAQ,OAAO;AAAA,QAC5B;AAAA,MACJ;AACA,qBAAe,KAAK,CAAC;AAAA,IACzB;AAAA,EACJ;AACA,EAAC,gBAAwB,iBAAiB;AAC1C,SAAO;AAIX","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\n\nconst targetPath = path.join(\n    __dirname,\n    \"../../../utilities/src/utils/buildStaticData.json\",\n);\n\ntype ProtectedPath = {\n    filePath: string;\n    route: string;\n};\n\nconst testRoot = process.env.ULLD_TEST_ROOT;\n\nconst getSplitValue = (w: string): string => {\n    if (w.startsWith(\"[\") && w.endsWith(\"]\")) {\n        return w.includes(\"...\") ? \"**\" : \"*\";\n    }\n    return w;\n};\n\nconst getCalculatedRoute = (p: string): string => {\n    let split = p.split(\"/\").filter((w) => ![\"\", \"page.tsx\", \"src\"].includes(w));\n    if (split[0] !== \"app\") {\n        throw new Error(\n            `protected route does not appear to be within the app directory. Check ${p}`,\n        );\n    }\n    split = split.slice(1).map((w) => getSplitValue(w));\n    return split.join(\"/\")\n};\n\nexport const gatherProtectedPaths = (files: string[], propsExtendsMap: object) => {\n    const protectedPaths: ProtectedPath[] = [];\n    // let targetData = JSON.parse(\n    //     fs.readFileSync(targetPath, { encoding: \"utf-8\" }),\n    // );\n    for (const k of files) {\n        const data = fs.readFileSync(k, { encoding: \"utf-8\" });\n        let re = /ULLD\\:\\s*protected-path/gm;\n        const pageForRe = /pageFor:(?<slot>[\\w]*)\\/(?<subSlot>[\\w]*)/gm\n        if (re.test(data)) {\n            const shortenedPath = k.replace(testRoot, \"\");\n            let pageFor = pageForRe.exec(data)\n            let d: any = {\n                filePath: shortenedPath,\n                route: getCalculatedRoute(shortenedPath),\n            }\n            if((pageFor?.groups?.slot && pageFor?.groups?.subSlot)){\n                d.pageFor = {\n                    slot: pageFor.groups.slot,\n                    subSlot: pageFor.groups.subSlot\n                }\n            }\n            protectedPaths.push(d);\n        }\n    }\n    (propsExtendsMap as any).protectedPaths = protectedPaths;\n    return propsExtendsMap\n    // fs.writeFileSync(targetPath, JSON.stringify(targetData, null, 4), {\n    //     encoding: \"utf-8\",\n    // });\n};\n"]}