{"version":3,"sources":["../src/zod/jupyter/main.ts","../src/defaults/generalDefaults.json"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,SAAS,SAAS;;;ACAlB;AAAA,EACE,SAAW;AAAA,IACT,aAAe;AAAA,IACf,QAAU;AAAA,IACV,aAAe;AAAA,EACjB;AACF;;;ADIA,IAAM,2BAA2B,EAAE,OAAO;AAAA,EAC9B,QAAQ,EAAE,OAAO;AAAA,EACjB,QAAQ,EAAE,OAAO;AACrB,CAAC;AAEF,IAAM,0BAA0B,EAClC,MAAM;AAAA,EACH,EAAE,OAAO;AAAA,EACT;AACJ,CAAC,EACA,UAAU,CAAC,MAAM;AACd,MAAI,OAAO,MAAM,UAAU;AACvB,WAAO;AAAA,EACX;AACA,MAAI,QAAQ,EAAE,MAAM,IAAI;AACxB,MAAI,aAAa,MAAM,UAAU,CAAC,MAAM,EAAE,SAAS,gBAAgB,CAAC;AACpE,MAAI,aAAa,GAAG;AAChB,WAAO;AAAA,MACH,QAAQ,GAAG,CAAC;AAAA;AAAA,MACZ,QAAQ;AAAA,IACZ;AAAA,EACJ;AACA,SAAO;AAAA,IACH,QAAQ,GAAG,MAAM,MAAM,GAAG,UAAU,EAAE,KAAK,IAAI,CAAC;AAAA;AAAA,IAChD,QAAQ;AAAA,EAAK,MAAM,MAAM,aAAa,CAAC,CAAC;AAAA,EAC5C;AACJ,CAAC;AAEE,IAAM,sBAAsB,EAAE,OAAO;AAAA,EACxC,SAAS,EACJ,QAAQ,EACR,QAAQ,KAAK,EACb;AAAA,IACG;AAAA,EACJ;AAAA,EACJ,aAAa,EACR,OAAO,EACP,QAAQ,wBAAE,QAAQ,WAAW,EAC7B;AAAA,IACG;AAAA,EACJ;AAAA;AAAA,EAEJ,sBAAsB,EAAE,OAAO,EAAE,QAAQ,SAAS;AAAA,EAClD,cAAc,EACT,OAAO,EACP,SAAS,EACT;AAAA,IACG;AAAA,EACJ;AAAA,EACJ,aAAa,EACR,OAAO,EACP,IAAI,EACJ,QAAQ,wBAAE,QAAQ,WAAW,EAC7B;AAAA,IACG;AAAA,EACJ;AAAA,EACJ,oBAAoB,EACf,QAAQ,EACR,QAAQ,IAAI,EACZ;AAAA,IACG;AAAA,EACJ;AAAA,EACJ,QAAQ,EACH,OAAO,EACP,QAAQ,wBAAE,QAAQ,MAAM,EACxB;AAAA,IACG;AAAA,EACJ;AAAA,EACJ,mBAAmB;AAAA,EACnB,WAAW,sBAAsB,QAAQ,CAAC,CAAC;AAAA,EAC3C,sBAAsB;AAAA,EACtB,mBAAmB,EACd;AAAA,IACG,EAAE,OAAO;AAAA,IACT;AAAA,EACJ,EACC,QAAQ,CAAC,CAAC;AACnB,CAAC;AAEM,IAAM,4BAAyE,oBAAoB;AAAA,EACtG,EAAE,OAAO;AAAA,IACL,SAAS,EAAE,QAAQ;AAAA,IACnB,aAAa,EAAE,OAAO;AAAA,IACtB,mBAAmB;AAAA,IACnB,sBAAsB,EAAE,OAAO;AAAA,IAC/B,aAAa,EAAE,OAAO;AAAA,IACtB,oBAAoB,EAAE,QAAQ;AAAA,IAC9B,QAAQ,EAAE,OAAO;AAAA,IACjB,WAAW;AAAA,IACX,sBAAsB;AAAA,IACtB,mBAAmB,EAAE,OAAO,EAAE,OAAO,GAAG,wBAAwB;AAAA,EACpE,CAAC;AACL","sourcesContent":["import { z } from \"zod\";\nimport {\n    jupyterReactConfigSchema,\n    jupyterReactConfigSchemaOutput,\n} from \"./jupyterReact.js\";\nimport { jupyterNotebookPropsSchema, jupyterNotebookPropsSchemaOutput } from \"./jupyterNotebook.js\";\nimport { nbConvertConfigSchema, nbConvertConfigSchemaOutput } from \"./nbconvert.js\";\nimport d from \"../../defaults/generalDefaults.json\" with { type: \"json\" };\nimport { ZodOutputSchema } from \"../../types.js\";\n\nconst prefixSuffixObjectSchema = z.object({\n            prefix: z.string(),\n            suffix: z.string(),\n        })\n\nexport const jupyterCellWrapperField = z\n    .union([\n        z.string(),\n        prefixSuffixObjectSchema,\n    ])\n    .transform((s) => {\n        if (typeof s === \"object\") {\n            return s;\n        }\n        let lines = s.split(\"\\n\");\n        let inputIndex = lines.findIndex((x) => x.includes(\"<<Cell-Input>>\"));\n        if (inputIndex < 0) {\n            return {\n                prefix: `${s}\\n`,\n                suffix: \"\",\n            };\n        }\n        return {\n            prefix: `${lines.slice(0, inputIndex).join(\"\\n\")}\\n`,\n            suffix: `\\n${lines.slice(inputIndex + 1)}`,\n        };\n    });\n\nexport const jupyterConfigSchema = z.object({\n    execute: z\n        .boolean()\n        .default(false)\n        .describe(\n            \"Whether or not to execute notebook cells immediately after loading.\",\n        ),\n    environment: z\n        .string()\n        .default(d.jupyter.environment)\n        .describe(\n            \"The *absolute* path to the python environment with which to open Jupyter cells and notebooks.\",\n        ),\n    // TODO: Come back and turn this into a refined string with supported themes within the data-layer package, until an internally developed package using monaco is available.\n    syntaxHighlightTheme: z.string().default(\"dracula\"),\n    jupyterToken: z\n        .string()\n        .optional()\n        .describe(\n            \"A secure token with which to connect to the jupyter server instance. This token must also be present in the jupyter_server_config.py file related to that environment. Any 64 character random string of alpha-numeric characters will work.\",\n        ),\n    jupyterPort: z\n        .number()\n        .int()\n        .default(d.jupyter.jupyterPort)\n        .describe(\n            \"Port on which JupyterServer instance is running. This value must match the value in your local jupyter server config.\",\n        ),\n    initiallyFoldCells: z\n        .boolean()\n        .default(true)\n        .describe(\n            \"Whether or not to initally fold jupyter input cells that are embedded within mdx notes.\",\n        ),\n    kernel: z\n        .string()\n        .default(d.jupyter.kernel)\n        .describe(\n            \"Kernel name to use. Can be overriden with the search param ?kernel=someKernelName\",\n        ),\n    jupyterReactProps: jupyterReactConfigSchema,\n    nbConvert: nbConvertConfigSchema.default({}),\n    jupyterNotebookProps: jupyterNotebookPropsSchema,\n    cellInputWrappers: z\n        .record(\n            z.string(),\n            jupyterCellWrapperField,\n        )\n        .default({}),\n});\n\nexport const jupyterConfigSchemaOutput: ZodOutputSchema<typeof jupyterConfigSchema> = jupyterConfigSchema.merge(\n    z.object({\n        execute: z.boolean(),\n        environment: z.string(),\n        jupyterReactProps: jupyterReactConfigSchemaOutput,\n        syntaxHighlightTheme: z.string(),\n        jupyterPort: z.number(),\n        initiallyFoldCells: z.boolean(),\n        kernel: z.string(),\n        nbConvert: nbConvertConfigSchemaOutput,\n        jupyterNotebookProps: jupyterNotebookPropsSchemaOutput,\n        cellInputWrappers: z.record(z.string(), prefixSuffixObjectSchema)\n    }),\n);\n","{\n  \"jupyter\": {\n    \"environment\": \"/opt/anaconda3/bin/python\",\n    \"kernel\": \"python3\",\n    \"jupyterPort\": 21521\n  }\n}\n"]}