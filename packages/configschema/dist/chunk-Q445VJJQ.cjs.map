{"version":3,"sources":["../src/zod/codeConfig.ts"],"names":[],"mappings":";;;;;;;;;AAAA,SAAsB,SAAS;AAG/B,OAAO,oBAAoB;AAGpB,IAAM,gBAGT;AAAA,EACA,MAAM;AAAA,EACN,OAAO;AACX;AAGA,IAAM,iBAAiB,EACd,OAAO;AAAA,EACJ,MAAM,oBACD,QAAQ,cAAc,IAAI,EAC1B;AAAA,IACG;AAAA,EACJ;AAAA,EACJ,OAAO,oBACF,QAAQ,cAAc,KAAK,EAC3B;AAAA,IACG;AAAA,EACJ;AACR,CAAC;AAET,IAAM,uBAAuB,EAAE,OAAO;AAAA,EAClC,MAAM;AAAA,EACN,OAAO;AACX,CAAC;AAED,IAAM,yBAAyB,EACd,OAAO;AAAA,EACJ,gBAAgB,EACX,QAAQ,EACR,SAAS,oCAAoC,EAC7C,QAAQ,IAAI;AAAA,EACjB,eAAe,EACV,QAAQ,EACR,SAAS,gCAAgC,EACzC,QAAQ,IAAI;AAAA,EACjB,WAAW,EACN,QAAQ,EACR,SAAS,gCAAgC,EACzC,QAAQ,KAAK;AAAA,EAClB,gBAAgB,EACX,QAAQ,EACR,SAAS,qCAAqC,EAC9C,QAAQ,KAAK;AAAA,EAClB,UAAU,EACL,QAAQ,EACR,SAAS,+BAA+B,EACxC,QAAQ,KAAK;AACtB,CAAC;AAEjB,IAAM,+BAA+E,EAAE,OAAO;AAAA,EAC1E,gBAAgB,EACX,QAAQ;AAAA,EACb,eAAe,EACV,QAAQ;AAAA,EACb,WAAW,EACN,QAAQ;AAAA,EACb,gBAAgB,EACX,QAAQ;AAAA,EACb,UAAU,EACL,QAAQ;AACjC,CAAC;AAED,IAAM,6BAA8B,EAAE,OAAO;AAAA,EACrB,QAAQ,EAAE,KAAK,cAAc;AAAA,EAC7B,OAAO,EAAE,KAAK,cAAc;AAChC,CAAC;AAGrB,IAAM,0BAA0B,EACvB,OAAO;AAAA,EACJ,cAAc,uBAAuB,QAAQ,CAAC,CAAC;AAAA,EAC/C,iBAAiB,EACZ,KAAK,cAAc,EACnB;AAAA,IACE;AAAA,EACH,EACC,QAAQ;AAAA,IACL,QAAQ;AAAA,IACR,OAAO;AAAA,EACX,CAAC,EACA,UAAU,CAAC,MAAM;AACd,WAAO,OAAO,MAAM,WACd;AAAA,MACE,OAAO;AAAA,MACP,QAAQ;AAAA,IACZ,IACE;AAAA,EACV,CAAC;AACT,CAAC;AAET,IAAM,gCAAiF,EAAE,OAAO;AAAA,EAC5F,cAAc;AAAA,EACd,iBAAiB;AACrB,CAAC;AAEM,IAAM,qBAAqB,EAAE,OAAO;AAAA,EACvC,OAAO,eACF,QAAQ;AAAA,IACL,MAAM;AAAA,IACN,OAAO;AAAA,EACX,CAAC;AAAA,EACL,QAAQ;AAAA,EACR,oBAAoB,wBACf,QAAQ,CAAC,CAAC;AACnB,CAAC;AAEM,IAAM,mBAAmB,mBAAmB,QAAQ,CAAC,CAAC;AAEtD,IAAM,yBAAmE,mBAAmB,MAAM,EAAE,OAAO;AAAA,EAC9G,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,oBAAoB;AACxB,CAAC,CAAC","sourcesContent":["import { transformer, z } from \"zod\";\nimport { monacoEditorConfigSchema, monacoEditorConfigSchemaOutput } from \"./codeEditorConfig.js\";\nimport { shikiThemeValidator } from \"./codeThemeSchemas.js\";\nimport shikiLanguages from \"@ulld/utilities/shikiLanguages\";\nimport { ZodOutputSchema } from \"../types.js\";\n\nexport const defaultThemes: {\n    dark: z.output<typeof shikiThemeValidator>;\n    light: z.output<typeof shikiThemeValidator>;\n} = {\n    dark: \"dracula\",\n    light: \"material-theme-lighter\",\n};\n\n\nconst codeThemeField = z\n        .object({\n            dark: shikiThemeValidator\n                .default(defaultThemes.dark)\n                .describe(\n                    \"Syntax highlighting theme to be used when in dark mode. Can be overriden with the ?shikiHlDark=dracula search param.\",\n                ),\n            light: shikiThemeValidator\n                .default(defaultThemes.light)\n                .describe(\n                    \"Syntax highlighting theme to be used when in light mode. Can be overriden with the ?shikiHlLight=nord search param.\",\n                ),\n        })\n\nconst codeThemeFieldOutput = z.object({\n    dark: shikiThemeValidator,\n    light: shikiThemeValidator\n})\n\nconst shikiTransformersField = z\n                .object({\n                    regexHighlight: z\n                        .boolean()\n                        .describe(\"shiki#transformerMetaWordHighlight\")\n                        .default(true),\n                    lineHighlight: z\n                        .boolean()\n                        .describe(\"shiki#transformerMetaHighlight\")\n                        .default(true),\n                    lineFocus: z\n                        .boolean()\n                        .describe(\"shiki#transformerNotationFocus\")\n                        .default(false),\n                    lineErrorLevel: z\n                        .boolean()\n                        .describe(\"shiki#transformerNotationErrorLevel\")\n                        .default(false),\n                    lineDiff: z\n                        .boolean()\n                        .describe(\"shiki#transformerNotationDiff\")\n                        .default(false),\n                })\n\nconst shikiTransformersFieldOutput: ZodOutputSchema<typeof shikiTransformersField> = z.object({\n                    regexHighlight: z\n                        .boolean(),\n                    lineHighlight: z\n                        .boolean(),\n                    lineFocus: z\n                        .boolean(),\n                    lineErrorLevel: z\n                        .boolean(),\n                    lineDiff: z\n                        .boolean()\n})\n\nconst defaultLanguageOutputField =  z.object({\n                        inline: z.enum(shikiLanguages),\n                        block: z.enum(shikiLanguages),\n                    })\n\n\nconst syntaxHighlightingField = z\n        .object({\n            transformers: shikiTransformersField.default({}),\n            defaultLanguage: z\n                .enum(shikiLanguages)\n                .or(\n                   defaultLanguageOutputField,\n                )\n                .default({\n                    inline: \"zsh\",\n                    block: \"python\",\n                })\n                .transform((x) => {\n                    return typeof x === \"string\"\n                        ? {\n                            block: x,\n                            inline: x,\n                        }\n                        : x;\n                }),\n        })\n\nconst syntaxHighlightingFieldOutput: ZodOutputSchema<typeof syntaxHighlightingField> = z.object({\n    transformers: shikiTransformersFieldOutput,\n    defaultLanguage: defaultLanguageOutputField\n})\n\nexport const code_config_schema = z.object({\n    theme: codeThemeField\n        .default({\n            dark: \"dracula\",\n            light: \"material-theme-lighter\",\n        }),\n    editor: monacoEditorConfigSchema,\n    syntaxHighlighting: syntaxHighlightingField \n        .default({}),\n});\n\nexport const codeConfigSchema = code_config_schema.default({});\n\nexport const codeConfigSchemaOutput: ZodOutputSchema<typeof codeConfigSchema> = code_config_schema.merge(z.object({\n    theme: codeThemeFieldOutput,\n    editor: monacoEditorConfigSchemaOutput,\n    syntaxHighlighting: syntaxHighlightingFieldOutput\n}));\n\nexport type CodeConfigSchema = z.infer<typeof codeConfigSchema>;\nexport type CodeConfigSchemaInput = z.input<typeof codeConfigSchema>;\nexport type CodeConfigSchemaOutput = z.output<typeof codeConfigSchema>;\n"]}