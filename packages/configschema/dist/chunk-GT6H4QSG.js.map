{"version":3,"sources":["../src/zod/searchParamOverrides/main.ts"],"sourcesContent":["import { z } from \"zod\";\nimport { AppConfigSchemaOutput } from \"../main.js\";\nimport { nbConvertTemplateOptions } from \"../jupyter/nbconvert.js\";\nimport { shikiThemeValidator } from \"../codeThemeSchemas.js\";\n\n// TODO: Create more thorough documentation on the available searchParm overrides.\nconst fields = {\n    colab: z.coerce.boolean(),\n    kernel: z.string(),\n    nbgrader: z.coerce.boolean(),\n    nbReadOnly: z.coerce.boolean(),\n    nbConvertExec: z.coerce.boolean(),\n    nbConvertTemp: nbConvertTemplateOptions,\n    shikiHlLight: shikiThemeValidator,\n    shikiHlDark: shikiThemeValidator,\n}\n\n\nexport const configSearchParamOverrideSchema = z.object(fields).partial()\n\n\nexport type ConfigSearchParamSchemaInput = z.input<typeof configSearchParamOverrideSchema>\nexport type ConfigSearchParamSchemaOutput = z.output<typeof configSearchParamOverrideSchema>\n\n\n\nexport const applyConfigOverrideMap: { [k in keyof typeof fields]: ((baseConfig: AppConfigSchemaOutput, override: ConfigSearchParamSchemaOutput) => AppConfigSchemaOutput) } = {\n    colab: (baseConfig, override) => {\n        if (override.colab) {\n            baseConfig.jupyter.jupyterReactProps.collaborative = true\n        }\n        return baseConfig\n    },\n    kernel: (baseConfig, override) => {\n        if (override.kernel) {\n            baseConfig.jupyter.kernel = override.kernel\n        }\n        return baseConfig\n    },\n    nbgrader: (baseConfig, override) => {\n        if (override.nbgrader) {\n            baseConfig.jupyter.jupyterNotebookProps.nbgrader = override.nbgrader\n        }\n        return baseConfig\n    },\n    nbReadOnly: (baseConfig, override) => {\n        if (override.nbReadOnly) {\n            baseConfig.jupyter.jupyterNotebookProps.readOnly = override.nbReadOnly\n        }\n        return baseConfig\n    },\n    nbConvertExec: (baseConfig, override) => {\n        if (override.nbConvertExec) {\n            baseConfig.jupyter.nbConvert.execute = override.nbConvertExec\n        }\n        return baseConfig\n    },\n    nbConvertTemp: (baseConfig, override) => {\n        if (override.nbConvertTemp) {\n            baseConfig.jupyter.nbConvert.nbConvertTemplate = override.nbConvertTemp\n        }\n        return baseConfig\n    },\n    shikiHlDark: (baseConfig, override) => {\n        if (override.shikiHlDark) {\n            baseConfig.code.theme.dark = override.shikiHlDark\n        }\n        return baseConfig\n    },\n    shikiHlLight: (baseConfig, override) => {\n        if (override.shikiHlLight) {\n            baseConfig.code.theme.light = override.shikiHlLight\n        }\n        return baseConfig\n    },\n}\n"],"mappings":";;;;;;;;AAAA,SAAS,SAAS;AAMlB,IAAM,SAAS;AAAA,EACX,OAAO,EAAE,OAAO,QAAQ;AAAA,EACxB,QAAQ,EAAE,OAAO;AAAA,EACjB,UAAU,EAAE,OAAO,QAAQ;AAAA,EAC3B,YAAY,EAAE,OAAO,QAAQ;AAAA,EAC7B,eAAe,EAAE,OAAO,QAAQ;AAAA,EAChC,eAAe;AAAA,EACf,cAAc;AAAA,EACd,aAAa;AACjB;AAGO,IAAM,kCAAkC,EAAE,OAAO,MAAM,EAAE,QAAQ;AAQjE,IAAM,yBAAkK;AAAA,EAC3K,OAAO,CAAC,YAAY,aAAa;AAC7B,QAAI,SAAS,OAAO;AAChB,iBAAW,QAAQ,kBAAkB,gBAAgB;AAAA,IACzD;AACA,WAAO;AAAA,EACX;AAAA,EACA,QAAQ,CAAC,YAAY,aAAa;AAC9B,QAAI,SAAS,QAAQ;AACjB,iBAAW,QAAQ,SAAS,SAAS;AAAA,IACzC;AACA,WAAO;AAAA,EACX;AAAA,EACA,UAAU,CAAC,YAAY,aAAa;AAChC,QAAI,SAAS,UAAU;AACnB,iBAAW,QAAQ,qBAAqB,WAAW,SAAS;AAAA,IAChE;AACA,WAAO;AAAA,EACX;AAAA,EACA,YAAY,CAAC,YAAY,aAAa;AAClC,QAAI,SAAS,YAAY;AACrB,iBAAW,QAAQ,qBAAqB,WAAW,SAAS;AAAA,IAChE;AACA,WAAO;AAAA,EACX;AAAA,EACA,eAAe,CAAC,YAAY,aAAa;AACrC,QAAI,SAAS,eAAe;AACxB,iBAAW,QAAQ,UAAU,UAAU,SAAS;AAAA,IACpD;AACA,WAAO;AAAA,EACX;AAAA,EACA,eAAe,CAAC,YAAY,aAAa;AACrC,QAAI,SAAS,eAAe;AACxB,iBAAW,QAAQ,UAAU,oBAAoB,SAAS;AAAA,IAC9D;AACA,WAAO;AAAA,EACX;AAAA,EACA,aAAa,CAAC,YAAY,aAAa;AACnC,QAAI,SAAS,aAAa;AACtB,iBAAW,KAAK,MAAM,OAAO,SAAS;AAAA,IAC1C;AACA,WAAO;AAAA,EACX;AAAA,EACA,cAAc,CAAC,YAAY,aAAa;AACpC,QAAI,SAAS,cAAc;AACvB,iBAAW,KAAK,MAAM,QAAQ,SAAS;AAAA,IAC3C;AACA,WAAO;AAAA,EACX;AACJ;","names":[]}