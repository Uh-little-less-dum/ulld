{"version":3,"sources":["../src/buildStaticData/main.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,SAAS,SAAS;AAKlB,OAAO,eAAe;AACtB,SAAS,0BAA0B;AAEnC,IAAM,wBAAwB,CAAC,uBAAiC;AAC5D,MAAI,MAA8B,CAAC;AACnC,aAAW,KAAK,oBAAoB;AAChC,QAAI,CAAC,IAAI,mBAAmB,GAAG,SAAS,EAAE;AAAA,EAC9C;AACA,SAAO;AACX;AAGO,IAAM,wBAAwB,EAAE,OAAO;AAAA,EAC1C,QAAQ,EAAE,OAAO;AAAA,EACjB,iBAAiB,qBAAqB,MAAM,EAAE,QAAQ,CAAC,CAAC,EAAE,UAAU,CAAC,MAAM;AAAA,IAAC,GAAG;AAAA,IAC/E;AAAA,MACI,OAAO;AAAA,MACP,MAAM;AAAA,MACN,MAAM;AAAA,IACV;AAAA,EACA,CAAC;AAAA,EACD,cAAc,yBAAyB,MAAM,EAAE,QAAQ,CAAC,CAAC;AAAA,EACzD,eAAe,6BAA6B,MAAM,EAAE,QAAQ,CAAC,CAAC;AAAA,EAC9D,mBAAmB,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;AAAA,EAChD,iBAAiB,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;AAClD,CAAC,EAAE,UAAU,CAAC,MAAM;AAChB,SAAO;AAAA,IACH,GAAG;AAAA,IACH,oBAAoB,UAAU;AAAA,IAC9B,4BAA4B,sBAAsB,UAAU,sBAAsB;AAAA,IAClF,uBAAuB,UAAU;AAAA,IACjC,WAAW;AAAA,MACP,OAAO;AAAA,QACH;AAAA,QAAQ;AAAA,QAAO;AAAA,QAAQ;AAAA,QAAO;AAAA,QAAQ;AAAA,MAC1C;AAAA,IACJ;AAAA,EACJ;AACJ,CAAC","sourcesContent":["import { z } from \"zod\";\nimport { navigationLinkSchema } from \"../developer/navigationLink.js\";\nimport { settingsPageOutputSchema } from \"./settingsPage.js\";\nimport type { ValidIconName } from \"@ulld/icons\";\nimport { componentDocumentationSchema } from \"./componentDocumentation.js\";\nimport buildData from \"@ulld/utilities/buildStaticData.json\"\nimport { replaceRecursively } from \"@ulld/utilities/general\";\n\nconst getFileTypeAppendices = (parsableExtensions: string[]) => {\n    let ext: Record<string, string> = {} as Record<string, string>\n    for (const k of parsableExtensions) {\n        ext[k] = replaceRecursively(k, /\\./gmi, \"\")\n    }\n    return ext\n}\n\n\nexport const buildStaticDataSchema = z.object({\n    fsRoot: z.string(),\n    navigationLinks: navigationLinkSchema.array().default([]).transform((a) => [...a, \n    {\n        label: \"Settings\",\n        href: \"/settings\",\n        icon: \"cog\" as ValidIconName\n    },\n    ]),\n    settingPages: settingsPageOutputSchema.array().default([]),\n    componentDocs: componentDocumentationSchema.array().default([]),\n    transpilePackages: z.string().array().default([]),\n    tailwindSources: z.string().array().default([])\n}).transform((a) => {\n    return {\n        ...a,\n        parsableExtensions: buildData.parsableFileExtensions,\n        filetypeSpecificAppendices: getFileTypeAppendices(buildData.parsableFileExtensions),\n        internalDocumentTypes: buildData.internalDocumentTypes,\n        fileTypes: {\n            image: [\n                \"jpeg\", \"jpg\", \"webp\", \"png\", \"heif\", \"gif\"\n            ]\n        }\n    }\n})\n\n"]}