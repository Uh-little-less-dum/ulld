{"version":3,"sources":["../../src/__scripts__/generateSlotMap.ts","../../src/__scripts__/gatherProtectedPaths.ts","../../src/__scripts__/gatherReservedPublicPaths.ts","../../src/zod/documentConfigSchema.ts","../../src/zod/configUtilitySchemas.ts","../../src/zod/navigationConfig.ts","../../src/zod/internalDocumentTypes.ts","../../src/__scripts__/getInternalDocumentTypes.ts","../../src/__scripts__/getTestStaticBuildData.ts","../../src/buildStaticData/main.ts","../../src/developer/navigationLink.ts","../../src/developer/navigationLinkType.ts","../../src/buildStaticData/settingsPage.ts","../../src/buildStaticData/componentDocumentation.ts"],"names":["globSync","path","fs","files","z","withForwardSlash","targetPath","testRoot"],"mappings":"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","sourcesContent":["import { globSync } from \"glob\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { capitalize } from \"@ulld/utilities/stringUtils\";\nimport { slotTypes } from \"@ulld/utilities/types\";\nimport { gatherProtectedPaths } from \"./gatherProtectedPaths\";\nimport { gatherReservedPublicPaths } from \"./gatherReservedPublicPaths\";\nimport { getInternalDocumentTypes } from \"./getInternalDocumentTypes\";\nimport { writeTestStaticBuildData } from \"./getTestStaticBuildData\";\n\nconst testRoot = process.env.ULLD_TEST_ROOT;\n\nconst buildDataPath = path.join(__dirname, \"../../../utilities/src/utils/buildStaticData.json\")\n\n\n\nconst _propsExtendsMap = JSON.parse(fs.readFileSync(buildDataPath, {encoding: \"utf-8\"}))\n\nif (!testRoot) {\n    throw new Error(\n        \"ULLD_TEST_ROOT environment variable ws not present at run time in the generateSlotMap script.\",\n    );\n}\n\nconst targetDir = path.join(testRoot, \"/src\");\n\nconst mdxPath = path.join(\n    __dirname,\n    \"../../../../apps/website/content/embeddedDocs/developer/slotMap.txt\",\n);\nconst typePath = path.join(__dirname, \"../developer/slotMapType.ts\");\nconst typeRootPath = path.join(__dirname, \"../developer/slotMapRootType.ts\");\nconst zodSlotKeyPath = path.join(__dirname, \"../developer/slotKeySchema.ts\");\nconst staticBuildDataPath = path.join(\n    __dirname,\n    \"../../../utilities/src/utils/buildStaticData.json\",\n);\n\nconst files = globSync(`**/*.{tsx,ts}`, {\n    ignore: \"**/node_modules/**\",\n    cwd: targetDir,\n});\n\nif (!fs.existsSync(staticBuildDataPath)) {\n    throw new Error(`staticBuildDataPath ${staticBuildDataPath} does not exist.`);\n}\n\nlet items: {\n    path: string;\n    parentSlot: string;\n    subSlot: string;\n    clientOnly: boolean;\n    inReduxProvider: boolean;\n    type?: string;\n    propsExtends?: string;\n}[] = [];\n\nlet staticBuildData = gatherProtectedPaths(files.map((f) => path.join(targetDir, f)), _propsExtendsMap);\n\nfor (const k of files) {\n    let content = fs.readFileSync(path.join(targetDir, k), { encoding: \"utf-8\" });\n    let lineOne = content.split(\"\\n\")[0].trim();\n    if (lineOne.startsWith(\"// Slot:\")) {\n        let words = lineOne.replace(\"// Slot: \", \"\").split(\" \");\n        let slots = words\n            .find((w) => w.includes(\"/\"))\n            .split(\"/\")\n            .map((s) => s.trim());\n        let type =\n            words\n                .find((w) => w.startsWith(\"type:\"))\n                ?.replace(\"type:\", \"\")\n                .trim() || \"component\";\n        let propsExtends = words\n            .find((w) => w.startsWith(\"propsExtends:\"))\n            ?.replace(\"propsExtends:\", \"\")\n            .trim();\n        if (slots.length !== 2) {\n            throw new Error(`Misformed slot string at ${k}`);\n        }\n        if (!slotTypes.includes(type as any)) {\n            throw new Error(`No slotData type found for ${type}.`);\n        }\n        if (\n            Boolean(\n                // propsExtends && !(propsExtends in ((staticBuildData as any)?.propsExtendsMap as any)?.propsExtendsMap),\n                propsExtends && !(propsExtends in (staticBuildData as any)?.propsExtendsMap)\n            )\n        ) {\n            /* @ts-ignore */\n            staticBuildData.propsExtendsMap[propsExtends] = \"FIX ME\";\n            console.warn(\n                `Slot prop can not extend ${propsExtends}. It was is not included in the propsExtendsMap object. Added a temporary place holder.`,\n            );\n        }\n        const newItem = {\n            path: k,\n            parentSlot: slots[0],\n            subSlot: slots[1],\n            clientOnly: content.includes(\"clientOnly\"),\n            inReduxProvider: content.includes(\"inReduxProvider\"),\n            relativePath: `src/${k}`,\n            type,\n            propsExtends,\n        };\n        let hasItem = items.find((f) =>\n            Boolean(\n                f.parentSlot === newItem.parentSlot && f.subSlot === newItem.subSlot,\n            ),\n        );\n        if (hasItem) {\n            throw new Error(`Found duplicate slots at:\nparentSlot: ${hasItem.parentSlot}\nsubSlot: ${hasItem.subSlot}\npath: ${hasItem.path}\n----\nparentSlot: ${newItem.parentSlot}\nsubSlot: ${newItem.subSlot}\npath: ${newItem.path}\n`);\n        }\n\n        items.push(newItem);\n    }\n}\n\nlet slotMap: Record<\n    string,\n    Record<\n        string,\n        Pick<\n            (typeof items)[0],\n            \"inReduxProvider\" | \"clientOnly\" | \"path\" | \"type\" | \"propsExtends\"\n        >\n    >\n> = {};\n\nfor (const k of items) {\n    if (!slotMap[k.parentSlot]) {\n        slotMap[k.parentSlot] = {};\n    }\n    slotMap[k.parentSlot][k.subSlot] = {\n        path: `src/${k.path}`,\n        clientOnly: k.clientOnly,\n        inReduxProvider: k.inReduxProvider,\n        type: k.type,\n        propsExtends: k.propsExtends,\n    };\n}\n\nconst targetPath = path.join(\n    __dirname,\n    \"../../../utilities/src/utils/slotMap.json\",\n);\n\nlet mdxSlotMap = `interface SlotMap {\n`;\n\nfor (const k in slotMap) {\n    mdxSlotMap += `    \"${k}\": {\\n`;\n    for (const l in slotMap[k as keyof typeof slotMap]) {\n        mdxSlotMap += `        ${l}: string,\\n`;\n    }\n    mdxSlotMap += \"    }, \\n\";\n}\n\nmdxSlotMap += \"}\";\n\nlet slotKeyContent = `\nexport const slotKeySchema = z.union([\n`;\n\nlet slotSubKeys: Record<string, string> = {};\nlet subSlotsByKeys: Record<string, string[]> = {};\nlet subslotSchemas: string[] = [];\nlet addedParentSlots: string[] = [];\n\nconst makeValidSymbol = (val: string) => {\n    return val.replaceAll(\"-\", \"_\").replaceAll(\" \", \"_\");\n};\n\nfor (const k of items) {\n    if (!addedParentSlots.includes(k.parentSlot)) {\n        slotKeyContent += `    z.literal(\"${k.parentSlot}\"),\n`;\n        addedParentSlots.push(k.parentSlot);\n    }\n    if (!(k.parentSlot in slotSubKeys)) {\n        subSlotsByKeys[k.parentSlot] = [];\n        let name = `${k.parentSlot}SubkeySchema`;\n        subslotSchemas.push(name);\n        slotSubKeys[k.parentSlot] = `\nexport const ${makeValidSymbol(name)} = z.union([\n`;\n    }\n    if (k.subSlot) {\n        subSlotsByKeys[k.parentSlot].push(k.subSlot);\n        slotSubKeys[k.parentSlot] += `    z.literal(\"${k.subSlot}\"),\n`;\n    }\n}\n\nslotKeyContent += \"])\";\nfor (const k in slotSubKeys) {\n    if (subSlotsByKeys[k].length < 2) {\n        let re = /z\\.union\\(\\[[.|\\n|\\r|\\w|\\W]*z\\.literal\\(\"(?<content>[\\w|\\S|\\s]*)\"\\)\\,?/gm \n        let foundContent = re.exec(slotSubKeys[k])\n        if(!foundContent){\n            throw new Error(`No content was found for a slot with a single component, that can't be applied to a union of slot keys. Tried replacing ${k}.`)\n        }\n        slotSubKeys[k] = `${slotSubKeys[k].slice(0, slotSubKeys[k].indexOf(\"=\") + 1)} z.literal(\"${foundContent[1]}\")`\n    } else {\n        slotSubKeys[k] += \"])\";\n    }\n}\n\n\nconst formatTypeSymbol = (k: string) => {\n       return `${makeValidSymbol(capitalize(k))}SubSlots` \n    }\n\nconst slotKeyFileContent = `\nimport { z } from 'zod';\n\n${slotKeyContent}\n\n${Object.values(slotSubKeys).join(\"\\n\\n\")}\n\n`;\n\nfs.writeFileSync(mdxPath, mdxSlotMap, { encoding: \"utf-8\" });\n\nfs.writeFileSync(\n    typeRootPath,\n    `export ${mdxSlotMap}\n`,\n    { encoding: \"utf-8\" },\n);\n\nfs.writeFileSync(\n    typePath,\n    `import { SlotMap as SM } from \"./slotMapRootType\";\n\nexport type PluginSlotKey = keyof SM\n\n${Object.keys(slotSubKeys)\n        .map(\n            (k) =>\n                `export type ${formatTypeSymbol(k)} = keyof SM[\"${k}\"]`,\n        )\n        .join(\"\\n\\n\")}\n\nexport type AnySubSlotKey = ${Object.keys(slotSubKeys).map((t) => formatTypeSymbol(t)).join(\" | \")};\n`,\n    { encoding: \"utf-8\" },\n);\n\nfs.writeFileSync(targetPath, JSON.stringify(slotMap, null, 4), {\n    encoding: \"utf-8\",\n});\n\nfs.writeFileSync(zodSlotKeyPath, slotKeyFileContent, {\n    encoding: \"utf-8\",\n});\n\nconst reservedPublicDirs = gatherReservedPublicPaths();\n\n(staticBuildData as any).reservedPublicDirs = reservedPublicDirs;\n\n(staticBuildData as any).internalDocumentTypes = getInternalDocumentTypes()\n\nfs.writeFileSync(\n    staticBuildDataPath,\n    JSON.stringify(staticBuildData, null, 4),\n    { encoding: \"utf-8\" },\n);\n\nwriteTestStaticBuildData()\n\nconsole.log(`Wrote slotMap to @ulld/utilities/slotMap.json`);\n","import fs from \"fs\";\nimport path from \"path\";\n\nconst targetPath = path.join(\n    __dirname,\n    \"../../../utilities/src/utils/buildStaticData.json\",\n);\n\ntype ProtectedPath = {\n    filePath: string;\n    route: string;\n};\n\nconst testRoot = process.env.ULLD_TEST_ROOT;\n\nconst getSplitValue = (w: string): string => {\n    if (w.startsWith(\"[\") && w.endsWith(\"]\")) {\n        return w.includes(\"...\") ? \"**\" : \"*\";\n    }\n    return w;\n};\n\nconst getCalculatedRoute = (p: string): string => {\n    let split = p.split(\"/\").filter((w) => ![\"\", \"page.tsx\", \"src\"].includes(w));\n    if (split[0] !== \"app\") {\n        throw new Error(\n            `protected route does not appear to be within the app directory. Check ${p}`,\n        );\n    }\n    split = split.slice(1).map((w) => getSplitValue(w));\n    return split.join(\"/\")\n};\n\nexport const gatherProtectedPaths = (files: string[], propsExtendsMap: object) => {\n    const protectedPaths: ProtectedPath[] = [];\n    // let targetData = JSON.parse(\n    //     fs.readFileSync(targetPath, { encoding: \"utf-8\" }),\n    // );\n    for (const k of files) {\n        const data = fs.readFileSync(k, { encoding: \"utf-8\" });\n        let re = /ULLD\\:\\s*protected-path/gm;\n        const pageForRe = /pageFor:(?<slot>[\\w]*)\\/(?<subSlot>[\\w]*)/gm\n        if (re.test(data)) {\n            const shortenedPath = k.replace(testRoot, \"\");\n            let pageFor = pageForRe.exec(data)\n            let d: any = {\n                filePath: shortenedPath,\n                route: getCalculatedRoute(shortenedPath),\n            }\n            if((pageFor?.groups?.slot && pageFor?.groups?.subSlot)){\n                d.pageFor = {\n                    slot: pageFor.groups.slot,\n                    subSlot: pageFor.groups.subSlot\n                }\n            }\n            protectedPaths.push(d);\n        }\n    }\n    (propsExtendsMap as any).protectedPaths = protectedPaths;\n    return propsExtendsMap\n    // fs.writeFileSync(targetPath, JSON.stringify(targetData, null, 4), {\n    //     encoding: \"utf-8\",\n    // });\n};\n","import path from \"path\";\nimport fs from \"fs\";\nimport { globSync } from \"glob\";\n\nexport const gatherReservedPublicPaths = (\n    root: string = process.env.ULLD_TEST_ROOT,\n) => {\n    const publicDir = path.join(root, \"public\");\n\n    const paths = globSync(\"*\", {\n        cwd: publicDir,\n    }).filter((p) => fs.statSync(path.join(publicDir, p)).isDirectory());\n\n    return paths;\n};\n","import { z } from \"zod\";\nimport { zodWithForwardSlashTransform } from \"./configUtilitySchemas.js\";\nimport { withForwardSlash } from \"@ulld/utilities/utils/fsUtils\";\nimport {\n    makeValidId,\n    makeValidIdOnlyLetters,\n} from \"@ulld/utilities/utils/identity\";\nimport { iconNameField } from \"./navigationConfig.js\";\n\nconst parsableSearchParam = z.union([\n    z.string(),\n    z.string().array(),\n    z.number(),\n    z.number().array(),\n]);\n\nconst docTypeColorGroup = z.object({\n    bg: z\n        .string()\n        .optional()\n        .describe(\n            \"Css classes to be appended to UI specific to this doc type. Tailwind classes will work.\",\n        ),\n    fg: z\n        .string()\n        .optional()\n        .describe(\n            \"Css classes to be appended to UI specific to this doc type. Tailwind classes will work.\",\n        ),\n});\n\n\n\nexport const docTypeUISchema = z\n    .object({\n        styles: z\n            .object({\n                dark: docTypeColorGroup.default({}),\n                light: docTypeColorGroup.default({}),\n                // combined_classes: z\n                //     .string()\n                //     .optional()\n                //     .describe(\n                //         \"Css classes to be applied to elements related to this specific document type.\",\n                //     ),\n            })\n            .default({})\n            // .transform((a) => {\n            //     return {\n            //         dark: a.dark,\n            //         light: a.light,\n            //         // combined_classes:\n            //         //     a.combined_classes ||\n            //         //     `${a.dark.bg || \"\"} ${a.dark.fg || \"\"} ${a.light.bg || \"\"} ${a.light.fg || \"\"}`,\n            //     };\n            // }),\n    })\n    .default({});\n\nexport const zodDocTypeInput = z\n    .string()\n    .transform(makeValidIdOnlyLetters)\n    .brand(\"DocTypeName\");\n\n// NOTE: I'm removing the following keys to minimize the config to where the app currently is, not to where I want it to be. Can add them back in as the app's capabilities grow to make use of them.\n// 1. contentType: documentConfigContentTypeSchema\nexport const documentTypeConfigSchemaBase = z.object({\n    id: z\n        .string()\n        .optional()\n        .describe(\"A unique key to be used internally to deal with this doctype.\"),\n    docType: zodDocTypeInput.optional().describe(\n        \"A unique key which describes the nature of this document type: 'MathNote', 'Journal', 'References', etc...\",\n    ),\n    filePathPattern: z\n        .string()\n        .optional()\n        .describe(\n            \"A glob style string to test a file path for this note type. Should return true if a given file is of this note type.\",\n        ),\n    matchWeight: z\n        .number()\n        .min(0)\n        .max(100)\n        .default(50)\n        .describe(\n            \"An extra weight between 0 and 100 to apply to matches. This can be very important when the location of one document type exists as a child of another, in which case an increased weight should be applied to the child document type. Default: 50\",\n        ),\n    // contentType: documentConfigContentTypeSchema.default(\"mdx\")\n    fs: z\n        .string()\n        .describe(\n            \"The path to the root of the directory which holds this document type. This path must be both relative to the appConfig.fsRoot folder and a child of it. For example, a root directory at '/Users/steve/Desktop/notes' might have folders within it of /Users/steve/Desktop/notes/math and /Users/steve/Desktop/notes/physics. These appConfig.noteTypes[0].fs should be '/math' and the latter should be '/physics'.\",\n        )\n        .transform(withForwardSlash),\n    url: z\n        .string()\n        .describe(\"The url at which this note should be displayed.\")\n        .transform(zodWithForwardSlashTransform),\n    urlQuery: z\n        .record(z.string(), parsableSearchParam)\n        .optional()\n        .describe(\n            \"Url search paramters to be appended to generated buttons and links for this doc type in some cases. Useful for things like populating an initial list or opening with certain default override-able settings.\",\n        )\n        .default({}),\n    keywords: z\n        .string()\n        .array()\n        .default([])\n        .describe(\n            \"Keywords to help with search results and command sorting related to this document type.\",\n        ),\n    label: z\n        .string()\n        .describe(\n            \"The label to be used for this document type where automatically generated links, commands and buttons are referencing it.\",\n        ),\n    topicLabel: z\n        .string()\n        .optional()\n        .describe(\n            \"Replace references to the 'topic' tag with this label. This is useful for things like managing freelance work, where 'topics' might better be described as 'Jobs' or 'Clients'.\",\n        ),\n    subjectLabel: z\n        .string()\n        .optional()\n        .describe(\n            \"Replace references to the 'subject' tag with this label. This is useful for things like managing freelance work, where 'subjects' might better be described as 'Jobs' or 'Clients'.\",\n        ),\n    autoTag: z\n        .string()\n        .array()\n        .default([])\n        .describe(\n            \"Automatically append these tags to all notes of this document type. This can also be done interactively through the app's UI after it is built.\",\n        ),\n    autoTopic: z\n        .string()\n        .array()\n        .default([])\n        .describe(\n            \"Automatically append these topics to all notes of this document type. This can also be done interactively through the app's UI after it is built.\",\n        ),\n    autoSubject: z\n        .string()\n        .array()\n        .default([])\n        .describe(\n            \"Automatically append these subjects to all notes of this document type. This can also be done interactively through the app's UI after it is built.\",\n        ),\n    UI: docTypeUISchema.default({}),\n    icon: iconNameField.default(\"ulld\"),\n    inSidebar: z.boolean().default(false),\n    inNavbar: z.boolean().default(false),\n});\n\nexport const documentTypeConfigSchema = documentTypeConfigSchemaBase\n    .partial({\n        url: true,\n    })\n    // .superRefine((a) => {\n    //     if (!a.docType) {\n    //         a.docType = makeValidId(a.id || a.label);\n    //     }\n    //     return a;\n    // })\n    .transform((a) => {\n        const _id = makeValidId(a.id || a.label);\n        return {\n            ...a,\n            // docType: a.docType ||\n            id: a.id || _id,\n            url: a.url || `/${_id}`,\n        };\n    });\n\nexport type DocumentTypeConfig = z.output<typeof documentTypeConfigSchema>;\nexport type DocumentTypeConfigInput = z.input<typeof documentTypeConfigSchema>;\n","import { z } from 'zod'\nimport globToRegExp from 'glob-to-regexp'\nimport { withForwardSlash } from '@ulld/utilities/utils/fsUtils'\n\n\nexport const logLevelSchema = z.union([\n    z.literal(\"debug\"),\n    z.literal(\"verbose\"),\n    z.literal(\"info\"),\n    z.literal(\"none\"),\n])\n\nexport type LogLevel = z.input<typeof logLevelSchema>\n\nexport const zodPathGlobTransform = (a: string | RegExp): {\n    original: string,\n    regex: RegExp\n} => {\n    if (typeof a === \"string\") {\n        return {\n            original: a,\n            regex: globToRegExp(a, { extended: true, globstar: true })\n        }\n    }\n    return {\n        original: a.source,\n        regex: a\n    }\n}\n\nexport const zodWithForwardSlashTransform = <T extends string | null | undefined>(a: T) => {\n    if (a) {\n        return withForwardSlash(a)\n    }\n    return a\n}\n\n\nexport const zodPathStringField = (desc?: string, optional?: boolean) => desc ? optional ? z.string().optional().describe(desc).transform((a) => a && withForwardSlash(a) as string | undefined) : z.string().describe(desc).transform((a) => a && withForwardSlash(a) as string) : optional ? z.string().optional().transform((a) => a && withForwardSlash(a) as string | undefined) : z.string().transform((a) => a && withForwardSlash(a) as string)\n\n\n\nexport const zodPathWithGlobField = (desc?: string, optional?: boolean) => desc ? optional ? z.union([\n    z.string(),\n    z.instanceof(RegExp)\n]).optional().describe(desc).transform((a) => a ? zodPathGlobTransform(a) : a) : z.union([\n    z.string(),\n    z.instanceof(RegExp)\n]).describe(desc).transform(zodPathGlobTransform) : optional ? z.union([\n    z.string(),\n    z.instanceof(RegExp)\n]).optional().transform((a) => a ? zodPathGlobTransform(a) : a) : z.union([\n    z.string(),\n    z.instanceof(RegExp)\n]).transform(zodPathGlobTransform)\n\n","import { z } from \"zod\";\nimport {\n    ValidIconName,\n} from \"@ulld/icons/dynamic\";\nimport { DocumentTypeConfig } from \"./documentConfigSchema.js\";\nimport allIcons from \"@ulld/icons/names\"\n\n// PRIORITY: Parsing the user's app config needs to write the document types to the file first, and then reparse everything else afterwards so they are accessible. It's not ideal, but it can be reworked once the entire build process is in place.\n//\ntype V = {\n    icon: ValidIconName;\n    Icon?: never;\n};\n\ntype F = {\n    Icon: React.FC<{ className: string }>;\n    icon?: never;\n};\n\ntype B = {\n    href?: string;\n    onClick?: () => void;\n    label?: string;\n};\n\nexport type SidebarLink = (B & V) | (B & F);\n\nconst defaultResultLengths = {\n    categories: 12,\n    equations: 10,\n    snippets: 10,\n    searchAll: 12,\n};\n\nexport const iconNameField = z.enum(allIcons)\n\nlet docTypeList: DocumentTypeConfig[] | null = null;\n\nlet linkLocationSchema = z.union([\n    z.literal(\"sidebar\"),\n    z.literal(\"navbar\"),\n    z.literal(\"both\"),\n    z.literal(\"none\"),\n])\n\nexport const navigationConfigSchema = z\n    .object({\n        navbarBreakpoint: z\n            .object({\n                full: z\n                    .number()\n                    .default(1024)\n                    .describe(\n                        \"Pixel width at which the navbar will display all of it's contents.\",\n                    ),\n                minimal: z\n                    .number()\n                    .default(640)\n                    .describe(\n                        \"Pixel width at which the navbar will display a minimal bit of content to render properly on more narrow screens. All pixel widths below this value will render a navbar with only required content. With many layouts, this means that pixel widths below this value will render only a search bar.\",\n                    ),\n            })\n            .default({\n                full: 1024,\n                minimal: 640,\n            }),\n        maxResultLength: z\n            .object({\n                categories: z.number().default(defaultResultLengths.categories),\n                equations: z.number().default(defaultResultLengths.equations),\n                snippets: z.number().default(defaultResultLengths.snippets),\n                searchAll: z.number().default(defaultResultLengths.searchAll),\n            })\n            .describe(\n                \"The default length of search results to be retrieved for each search result type. Default values will likely work well for the default layout, but as more layouts become available this setting may be adjusted to fit different search result layouts.\",\n            )\n            .default(defaultResultLengths),\n        bookmarkLink: linkLocationSchema.optional().default(\"navbar\"),\n        syncLink: linkLocationSchema.optional().default(\"sidebar\"),\n        fileSystemToggle: linkLocationSchema.optional(),\n        darkmodeToggle: linkLocationSchema.optional().default(\"sidebar\"),\n        settings: linkLocationSchema.optional(),\n        equationsLink: linkLocationSchema.optional(),\n        snippetsLink: linkLocationSchema.optional().default(\"sidebar\"),\n        backupData: linkLocationSchema.optional(),\n        navbarLinks: z\n            .union([\n                z.string().describe(\"A document type id\"),\n                z.object({\n                    label: z.string(),\n                    icon: iconNameField.optional(),\n                    href: z.string().optional(),\n                    onClick: z.function().optional(),\n                }),\n            ])\n            .array()\n            .default([])\n            .describe(\n                \"Either the document type id or the internalLink id to be to included in the navbar.\",\n            ),\n        // RESUME: Come back and figure out this TS error.\n        sidebarLinks: z\n            .union([\n                z.object({\n                    icon: iconNameField,\n                    href: z.string().optional(),\n                    label: z.string().optional(),\n                    Icon: z.function().optional(),\n                    onClick: z.function().optional(),\n                }),\n                z.string().describe(\"The id of the document type.\"),\n            ])\n            .array()\n            .default([])\n            .describe(\n                \"Either the document type id or the internalLink id to be to included in the navbar.\",\n            )\n    })\n    .default({});\n\n\nexport type InternalNavigationKeys = keyof Pick<z.output<typeof navigationConfigSchema>, \"bookmarkLink\" | \"syncLink\" | \"fileSystemToggle\" | \"darkmodeToggle\" | \"settings\" | \"equationsLink\" | \"snippetsLink\" | \"backupData\">\n","import { Route } from \"next\";\nimport { documentTypeConfigSchemaBase } from \"./documentConfigSchema.js\";\nimport { z } from 'zod'\n\n// TODO: This zod object needs to be updated to include the rest of these internal types.\n// TODO: Add a field to each type of whether or not it is eligible for the sidebar navigation or top palette navigation to filter these and make them available to the user config.\nexport const internalDocTypes = z.union([\n    z.literal(\"bookmarks\"),\n    z.literal(\"snippets\")\n])\n\n\nexport const internalDocumentTypeConfigSchema = documentTypeConfigSchemaBase.partial({\n    fs: true\n})\n\nexport type InternalDocumentConfigType = z.output<typeof internalDocumentTypeConfigSchema>\n\nexport const internalDocumentTypes: z.input<typeof internalDocumentTypeConfigSchema>[] = [\n    {\n        \"id\": \"bookmarks\",\n        \"keywords\": [\n            \"bookmarks\"\n        ],\n        \"url\": \"/bookmarks\" as Route,\n        \"label\": \"Bookmarks\",\n        \"docType\": \"bookmarks\",\n    },\n    {\n        \"id\": \"settings\",\n        \"keywords\": [\n            \"settings\"\n        ],\n        \"url\": \"/settings\" as Route,\n        \"label\": \"Settings\",\n        \"docType\": \"none\",\n    },\n    {\n        \"id\": \"pdfs\",\n        \"keywords\": [\n            \"pdf\",\n            \"papers\",\n            \"research\"\n        ],\n        \"url\": \"/pdf\" as Route,\n        \"label\": \"Pdfs\",\n        \"docType\": \"pdf-collection\",\n        \"fs\": \"/resources/pdf\",\n    },\n    {\n        \"id\": \"bibliography\",\n        \"keywords\": [\n            \"bib\",\n            \"references\",\n            \"citations\"\n        ],\n        \"url\": \"/bibliography\" as Route,\n        \"label\": \"Bibliography\",\n        \"docType\": \"bibliography\",\n    },\n    {\n        \"id\": \"addSnippets\",\n        \"url\": \"/snippets/add\" as Route,\n        \"label\": \"Add Snippets\",\n        \"docType\": \"none\",\n    },\n    {\n        \"id\": \"snippets\",\n        \"url\": \"/snippets\" as Route,\n        \"label\": \"Snippets\",\n        \"docType\": \"snippet\",\n    },\n]\n","import {\n    internalDocumentTypes,\n    internalDocumentTypeConfigSchema,\n} from \"../zod/internalDocumentTypes\";\n\nexport const getInternalDocumentTypes = () => {\n    return internalDocumentTypeConfigSchema.array().parse(internalDocumentTypes);\n};\n","import fs from \"fs\";\nimport path from \"path\";\nimport { BuildStaticDataInput } from \"../buildStaticData/types\";\nimport { buildStaticDataSchema } from \"../buildStaticData/main\";\n\nexport const writeTestStaticBuildData = (\n    targetPath: string = process.env.ULLD_TEST_ROOT,\n) => {\n    let testData: BuildStaticDataInput = {\n        fsRoot: targetPath,\n    };\n    const target = path.join(targetPath, \"ulldBuildData.json\");\n\n    const data = buildStaticDataSchema.parse(testData);\n\n    fs.writeFileSync(target, JSON.stringify(data, null, 4), {\n        encoding: \"utf-8\",\n    });\n    console.log(`Wrote ulldBuildData.json to ${target}`)\n};\n\n\n\n","import { z } from \"zod\";\nimport { navigationLinkSchema } from \"../developer/navigationLink.js\";\nimport { settingsPageOutputSchema } from \"./settingsPage.js\";\nimport type { ValidIconName } from \"@ulld/icons\";\nimport { componentDocumentationSchema } from \"./componentDocumentation.js\";\nimport buildData from \"@ulld/utilities/buildStaticData.json\" with { type: \"json\" };\nimport { replaceRecursively } from \"@ulld/utilities/general\";\n\nconst getFileTypeAppendices = (parsableExtensions: string[]) => {\n    let ext: Record<string, string> = {} as Record<string, string>;\n    for (const k of parsableExtensions) {\n        ext[k] = replaceRecursively(k, /\\./gim, \"\");\n    }\n    return ext;\n};\n\nexport const buildStaticDataSchema = z\n    .object({\n        fsRoot: z.string(),\n        navigationLinks: navigationLinkSchema\n            .array()\n            .default([])\n            .transform((a) => [\n                ...a,\n                {\n                    label: \"Settings\",\n                    href: \"/settings\",\n                    icon: \"cog\" as ValidIconName,\n                },\n            ]),\n        settingPages: settingsPageOutputSchema.array().default([]),\n        componentDocs: componentDocumentationSchema.array().default([]),\n        transpilePackages: z.string().array().default([]),\n        tailwindSources: z.string().array().default([]),\n    })\n    .transform((a) => {\n        return {\n            ...a,\n            parsableExtensions: buildData.parsableFileExtensions,\n            filetypeSpecificAppendices: getFileTypeAppendices(\n                buildData.parsableFileExtensions,\n            ),\n            internalDocumentTypes: buildData.internalDocumentTypes,\n            fileTypes: {\n                image: [\"jpeg\", \"jpg\", \"webp\", \"png\", \"heif\", \"gif\"],\n            },\n        };\n    });\n","import {z} from 'zod'\nimport { navigationLinkCategory } from './navigationLinkType.js'\n\n\nexport const navigationLinkSchema = z.object({\n    label: z.string(),\n    href: z.string(),\n    icon: z.string().optional(),\n    pluginName: z.string().optional(),\n    category: navigationLinkCategory.default(\"general\")\n})\n","import type { ValidIconName } from \"@ulld/icons\";\nimport { z } from 'zod'\n\nexport const navigationLinkCategory = z.union([\n    z.literal(\"math\"),\n    z.literal(\"snippets\"),\n    z.literal(\"code\"),\n    z.literal(\"AI\"),\n    z.literal(\"ML\"),\n    z.literal(\"writing\"),\n    z.literal(\"search\"),\n    z.literal(\"notebooks\"),\n    z.literal(\"database\"),\n    z.literal(\"work\"),\n    z.literal(\"school\"),\n    z.literal(\"organization\"),\n    z.literal(\"task-management\"),\n    z.literal(\"academic\"),\n    z.literal(\"research\"),\n    z.literal(\"project-planning\"),\n    z.literal(\"calendar\"),\n    z.literal(\"general\")\n])\n\n\nexport type NavigationLinkCategory = z.input<typeof navigationLinkCategory>\n\nexport type NavigationLinkType = {\n    label: string;\n    href: string;\n    icon?: ValidIconName;\n    category?: NavigationLinkCategory\n};\n","import { z } from \"zod\";\n\nexport const settingsPageOutputSchema = z.object({\n    title: z.string().optional(),\n    subtitle: z.string().optional(),\n    href: z.string(),\n    pluginName: z.string(),\n})\n","import { z } from \"zod\";\n\nexport const componentDocumentationSchema = z.object({\n    pluginName: z.string(),\n    componentName: z.string(),\n    embeddableSyntax: z.string().describe(\"The syntax for the component as it appears in JSX. Synonymous with the regexToInclude property in the developer config.\").array().default([]),\n    urls: z.object({\n        short: z.string().optional(),\n        full: z.string().optional()\n    }),\n    filePaths: z.object({\n        short: z.string().optional(),\n        full: z.string().optional()\n    }),\n    tags: z.string().array().default([]),\n    componentId: z.string()\n})\n"]}