{"version":3,"sources":["../../src/__scripts__/generateDefaultConfig.ts"],"sourcesContent":["import {\n    AppConfigSchemaInput,\n    AppConfigSchemaOutput,\n    appConfigSchema,\n} from \"../zod/main\";\nimport fs from \"fs\";\nimport path from \"path\";\n\n\nconst targetPath = path.join(\n    __dirname,\n    \"../defaults/generatedDefaultConfigs/base.json\",\n);\nconst physicsMathPath = path.join(\n    __dirname,\n    \"../defaults/generatedDefaultConfigs/physicsMath.json\",\n);\nconst baseTargetPath =\n    \"/Users/bigsexy/Desktop/current/ulldApp/appConfig.ulld.json\";\n\nconst dummyConfig: AppConfigSchemaInput = {\n    fsRoot: \"/Users/bigsexy/Desktop/notes/content\",\n};\n\nconst physicsMathConfig: AppConfigSchemaInput = {\n    fsRoot: \"/Users/bigsexy/Desktop/notes/content\",\n    noteTypes: [\n        {\n            fs: \"physics\",\n            id: \"physics\",\n            label: \"Physics\",\n            icon: \"physics\",\n        },\n        {\n            fs: \"math\",\n            id: \"math\",\n            label: \"Math\",\n            icon: \"math\",\n        },\n    ],\n};\n\nconst personalConfig: AppConfigSchemaInput = {\n    fsRoot: \"/Users/bigsexy/Desktop/notes/content\",\n    code: {\n        editor: {\n            useVimMode: true,\n        },\n    },\n    noteTypes: [\n        {\n            fs: \"physics\",\n            id: \"physics\",\n            label: \"Physics\",\n            icon: \"physics\",\n        },\n        {\n            fs: \"math\",\n            id: \"math\",\n            label: \"Math\",\n            icon: \"math\",\n        },\n\n        {\n            fs: \"cheatsheets\",\n            id: \"cheatsheet\",\n            label: \"Cheatsheets\",\n            icon: \"newspaper\",\n        },\n        {\n            fs: \"docs\",\n            id: \"docs\",\n            label: \"Docs\",\n            icon: \"paperclip\",\n        },\n        {\n            fs: \"guides\",\n            id: \"guide\",\n            label: \"Guides\",\n            icon: \"gem\",\n        },\n        {\n            fs: \"health\",\n            id: \"health\",\n            label: \"Health\",\n            icon: \"heart\",\n        },\n        {\n            fs: \"journal\",\n            id: \"journal\",\n            label: \"Journal\",\n            icon: \"pen\",\n        },\n\n        {\n            fs: \"quickNotes\",\n            id: \"quickNotes\",\n            label: \"Quick Notes\",\n            icon: \"calendar-plus-2\",\n        },\n        {\n            fs: \"quickThoughts\",\n            id: \"quickThoughts\",\n            label: \"Quick Thought\",\n            icon: \"clock\",\n        },\n        {\n            fs: \"recipes\",\n            id: \"recipes\",\n            label: \"Recipes\",\n            icon: \"egg\",\n        },\n        {\n            fs: \"references\",\n            id: \"references\",\n            label: \"References\",\n            icon: \"glasses\",\n        },\n        {\n            fs: \"tech\",\n            id: \"tech\",\n            label: \"Tech\",\n            icon: \"cpu\",\n        },\n    ],\n};\n\nconst configs: { path: string; config: AppConfigSchemaOutput }[] = [\n    {\n        path: targetPath,\n        config: appConfigSchema.parse(dummyConfig),\n    },\n    {\n        path: baseTargetPath,\n        config: appConfigSchema.parse(physicsMathConfig),\n    },\n    {\n        path: physicsMathPath,\n        config: appConfigSchema.parse(physicsMathConfig),\n    },\n    {\n        path: path.join(\n            __dirname,\n            \"../defaults/generatedDefaultConfigs/personal/appConfig.ulld.json\",\n        ),\n        config: appConfigSchema.parse(personalConfig),\n    },\n    {\n        path: \"/Users/bigsexy/dev-utils/ulld/appConfig.ulld.json\",\n        config: appConfigSchema.parse(personalConfig),\n    },\n];\n\nfor (const k of configs) {\n    if (k.config) {\n        let exists = fs.existsSync(k.path);\n        if (!exists) {\n            throw new Error(\n                `parsedBaseConfig targetPath does not exist at ${k.path}`,\n            );\n        }\n        fs.writeFileSync(k.path, JSON.stringify(k.config, null, 4), {\n            encoding: \"utf-8\",\n        });\n        console.log(`Wrote default config to ${k.path}`);\n    }\n}\n"],"mappings":"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","names":[]}