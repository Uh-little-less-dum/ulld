{"version":3,"sources":["../../src/__scripts__/generateSlotMap.ts"],"sourcesContent":["import { globSync } from \"glob\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { capitalize } from \"@ulld/utilities/stringUtils\";\nimport { slotTypes } from \"@ulld/utilities/types\";\nimport { gatherProtectedPaths } from \"./gatherProtectedPaths\";\nimport { gatherReservedPublicPaths } from \"./gatherReservedPublicPaths\";\nimport { getInternalDocumentTypes } from \"./getInternalDocumentTypes\";\nimport { writeTestStaticBuildData } from \"./getTestStaticBuildData\";\n\nconst testRoot = process.env.ULLD_TEST_ROOT;\n\nconst buildDataPath = path.join(__dirname, \"../../../utilities/src/utils/buildStaticData.json\")\n\n\n\nconst _propsExtendsMap = JSON.parse(fs.readFileSync(buildDataPath, {encoding: \"utf-8\"}))\n\nif (!testRoot) {\n    throw new Error(\n        \"ULLD_TEST_ROOT environment variable ws not present at run time in the generateSlotMap script.\",\n    );\n}\n\nconst targetDir = path.join(testRoot, \"/src\");\n\nconst mdxPath = path.join(\n    __dirname,\n    \"../../../../apps/website/content/embeddedDocs/developer/slotMap.txt\",\n);\nconst typePath = path.join(__dirname, \"../developer/slotMapType.ts\");\nconst typeRootPath = path.join(__dirname, \"../developer/slotMapRootType.ts\");\nconst zodSlotKeyPath = path.join(__dirname, \"../developer/slotKeySchema.ts\");\nconst staticBuildDataPath = path.join(\n    __dirname,\n    \"../../../utilities/src/utils/buildStaticData.json\",\n);\n\nconst files = globSync(`**/*.{tsx,ts}`, {\n    ignore: \"**/node_modules/**\",\n    cwd: targetDir,\n});\n\nif (!fs.existsSync(staticBuildDataPath)) {\n    throw new Error(`staticBuildDataPath ${staticBuildDataPath} does not exist.`);\n}\n\nlet items: {\n    path: string;\n    parentSlot: string;\n    subSlot: string;\n    clientOnly: boolean;\n    inReduxProvider: boolean;\n    type?: string;\n    propsExtends?: string;\n}[] = [];\n\nlet staticBuildData = gatherProtectedPaths(files.map((f) => path.join(targetDir, f)), _propsExtendsMap);\n\nfor (const k of files) {\n    let content = fs.readFileSync(path.join(targetDir, k), { encoding: \"utf-8\" });\n    let lineOne = content.split(\"\\n\")[0].trim();\n    if (lineOne.startsWith(\"// Slot:\")) {\n        let words = lineOne.replace(\"// Slot: \", \"\").split(\" \");\n        let slots = words\n            .find((w) => w.includes(\"/\"))\n            .split(\"/\")\n            .map((s) => s.trim());\n        let type =\n            words\n                .find((w) => w.startsWith(\"type:\"))\n                ?.replace(\"type:\", \"\")\n                .trim() || \"component\";\n        let propsExtends = words\n            .find((w) => w.startsWith(\"propsExtends:\"))\n            ?.replace(\"propsExtends:\", \"\")\n            .trim();\n        if (slots.length !== 2) {\n            throw new Error(`Misformed slot string at ${k}`);\n        }\n        if (!slotTypes.includes(type as any)) {\n            throw new Error(`No slotData type found for ${type}.`);\n        }\n        if (\n            Boolean(\n                // propsExtends && !(propsExtends in ((staticBuildData as any)?.propsExtendsMap as any)?.propsExtendsMap),\n                propsExtends && !(propsExtends in (staticBuildData as any)?.propsExtendsMap)\n            )\n        ) {\n            /* @ts-ignore */\n            staticBuildData.propsExtendsMap[propsExtends] = \"FIX ME\";\n            console.warn(\n                `Slot prop can not extend ${propsExtends}. It was is not included in the propsExtendsMap object. Added a temporary place holder.`,\n            );\n        }\n        const newItem = {\n            path: k,\n            parentSlot: slots[0],\n            subSlot: slots[1],\n            clientOnly: content.includes(\"clientOnly\"),\n            inReduxProvider: content.includes(\"inReduxProvider\"),\n            relativePath: `src/${k}`,\n            type,\n            propsExtends,\n        };\n        let hasItem = items.find((f) =>\n            Boolean(\n                f.parentSlot === newItem.parentSlot && f.subSlot === newItem.subSlot,\n            ),\n        );\n        if (hasItem) {\n            throw new Error(`Found duplicate slots at:\nparentSlot: ${hasItem.parentSlot}\nsubSlot: ${hasItem.subSlot}\npath: ${hasItem.path}\n----\nparentSlot: ${newItem.parentSlot}\nsubSlot: ${newItem.subSlot}\npath: ${newItem.path}\n`);\n        }\n\n        items.push(newItem);\n    }\n}\n\nlet slotMap: Record<\n    string,\n    Record<\n        string,\n        Pick<\n            (typeof items)[0],\n            \"inReduxProvider\" | \"clientOnly\" | \"path\" | \"type\" | \"propsExtends\"\n        >\n    >\n> = {};\n\nfor (const k of items) {\n    if (!slotMap[k.parentSlot]) {\n        slotMap[k.parentSlot] = {};\n    }\n    slotMap[k.parentSlot][k.subSlot] = {\n        path: `src/${k.path}`,\n        clientOnly: k.clientOnly,\n        inReduxProvider: k.inReduxProvider,\n        type: k.type,\n        propsExtends: k.propsExtends,\n    };\n}\n\nconst targetPath = path.join(\n    __dirname,\n    \"../../../utilities/src/utils/slotMap.json\",\n);\n\nlet mdxSlotMap = `interface SlotMap {\n`;\n\nfor (const k in slotMap) {\n    mdxSlotMap += `    \"${k}\": {\\n`;\n    for (const l in slotMap[k as keyof typeof slotMap]) {\n        mdxSlotMap += `        ${l}: string,\\n`;\n    }\n    mdxSlotMap += \"    }, \\n\";\n}\n\nmdxSlotMap += \"}\";\n\nlet slotKeyContent = `\nexport const slotKeySchema = z.union([\n`;\n\nlet slotSubKeys: Record<string, string> = {};\nlet subSlotsByKeys: Record<string, string[]> = {};\nlet subslotSchemas: string[] = [];\nlet addedParentSlots: string[] = [];\n\nconst makeValidSymbol = (val: string) => {\n    return val.replaceAll(\"-\", \"_\").replaceAll(\" \", \"_\");\n};\n\nfor (const k of items) {\n    if (!addedParentSlots.includes(k.parentSlot)) {\n        slotKeyContent += `    z.literal(\"${k.parentSlot}\"),\n`;\n        addedParentSlots.push(k.parentSlot);\n    }\n    if (!(k.parentSlot in slotSubKeys)) {\n        subSlotsByKeys[k.parentSlot] = [];\n        let name = `${k.parentSlot}SubkeySchema`;\n        subslotSchemas.push(name);\n        slotSubKeys[k.parentSlot] = `\nexport const ${makeValidSymbol(name)} = z.union([\n`;\n    }\n    if (k.subSlot) {\n        subSlotsByKeys[k.parentSlot].push(k.subSlot);\n        slotSubKeys[k.parentSlot] += `    z.literal(\"${k.subSlot}\"),\n`;\n    }\n}\n\nslotKeyContent += \"])\";\nfor (const k in slotSubKeys) {\n    if (subSlotsByKeys[k].length < 2) {\n        let re = /z\\.union\\(\\[[.|\\n|\\r|\\w|\\W]*z\\.literal\\(\"(?<content>[\\w|\\S|\\s]*)\"\\)\\,?/gm \n        let foundContent = re.exec(slotSubKeys[k])\n        if(!foundContent){\n            throw new Error(`No content was found for a slot with a single component, that can't be applied to a union of slot keys. Tried replacing ${k}.`)\n        }\n        slotSubKeys[k] = `${slotSubKeys[k].slice(0, slotSubKeys[k].indexOf(\"=\") + 1)} z.literal(\"${foundContent[1]}\")`\n    } else {\n        slotSubKeys[k] += \"])\";\n    }\n}\n\n\nconst formatTypeSymbol = (k: string) => {\n       return `${makeValidSymbol(capitalize(k))}SubSlots` \n    }\n\nconst slotKeyFileContent = `\nimport { z } from 'zod';\n\n${slotKeyContent}\n\n${Object.values(slotSubKeys).join(\"\\n\\n\")}\n\n`;\n\nfs.writeFileSync(mdxPath, mdxSlotMap, { encoding: \"utf-8\" });\n\nfs.writeFileSync(\n    typeRootPath,\n    `export ${mdxSlotMap}\n`,\n    { encoding: \"utf-8\" },\n);\n\nfs.writeFileSync(\n    typePath,\n    `import { SlotMap as SM } from \"./slotMapRootType\";\n\nexport type PluginSlotKey = keyof SM\n\n${Object.keys(slotSubKeys)\n        .map(\n            (k) =>\n                `export type ${formatTypeSymbol(k)} = keyof SM[\"${k}\"]`,\n        )\n        .join(\"\\n\\n\")}\n\nexport type AnySubSlotKey = ${Object.keys(slotSubKeys).map((t) => formatTypeSymbol(t)).join(\" | \")};\n`,\n    { encoding: \"utf-8\" },\n);\n\nfs.writeFileSync(targetPath, JSON.stringify(slotMap, null, 4), {\n    encoding: \"utf-8\",\n});\n\nfs.writeFileSync(zodSlotKeyPath, slotKeyFileContent, {\n    encoding: \"utf-8\",\n});\n\nconst reservedPublicDirs = gatherReservedPublicPaths();\n\n(staticBuildData as any).reservedPublicDirs = reservedPublicDirs;\n\n(staticBuildData as any).internalDocumentTypes = getInternalDocumentTypes()\n\nfs.writeFileSync(\n    staticBuildDataPath,\n    JSON.stringify(staticBuildData, null, 4),\n    { encoding: \"utf-8\" },\n);\n\nwriteTestStaticBuildData()\n\nconsole.log(`Wrote slotMap to @ulld/utilities/slotMap.json`);\n"],"mappings":"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","names":[]}