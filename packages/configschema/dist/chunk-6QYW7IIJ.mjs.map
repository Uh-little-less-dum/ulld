{"version":3,"sources":["../src/zod/build/database/database.ts"],"sourcesContent":["import { z } from \"zod\";\nimport { postgresConfigSchema, postgresConfigSchemaOutput } from \"./postgres.js\";\nimport { ZodOutputSchema } from \"../../../types.js\";\n\nexport const ulldSupportedDatabases = [\n    \"postgres\",\n    \"sqlite\",\n] as const\n\nexport const databaseBuildSchema = z\n    .object({\n        type: z\n            .enum(ulldSupportedDatabases)\n            .default(\"postgres\"),\n        postgres: postgresConfigSchema,\n        prioritize: z\n            .union([z.literal(\"speed\"), z.literal(\"size\")])\n            .default(\"speed\"),\n    })\n    .default({})\n    .refine(\n        (data) =>\n            !Boolean(data.type === \"postgres\" && !data.postgres),\n        {\n            message:\n                \"If you set the database type to 'Postgres', you must also provide a postgres configuration with either a port number and a database name, or a connection URI.\",\n        },\n    );\n\n\nexport const databaseBuildSchemaOutput: ZodOutputSchema<typeof databaseBuildSchema> = z\n    .object({\n        type: z\n            .enum(ulldSupportedDatabases),\n        postgres: postgresConfigSchemaOutput,\n        prioritize: z\n            .union([z.literal(\"speed\"), z.literal(\"size\")])\n    })\n"],"mappings":";;;;;;AAAA,SAAS,SAAS;AAIX,IAAM,yBAAyB;AAAA,EAClC;AAAA,EACA;AACJ;AAEO,IAAM,sBAAsB,EAC9B,OAAO;AAAA,EACJ,MAAM,EACD,KAAK,sBAAsB,EAC3B,QAAQ,UAAU;AAAA,EACvB,UAAU;AAAA,EACV,YAAY,EACP,MAAM,CAAC,EAAE,QAAQ,OAAO,GAAG,EAAE,QAAQ,MAAM,CAAC,CAAC,EAC7C,QAAQ,OAAO;AACxB,CAAC,EACA,QAAQ,CAAC,CAAC,EACV;AAAA,EACG,CAAC,SACG,CAAC,QAAQ,KAAK,SAAS,cAAc,CAAC,KAAK,QAAQ;AAAA,EACvD;AAAA,IACI,SACI;AAAA,EACR;AACJ;AAGG,IAAM,4BAAyE,EACjF,OAAO;AAAA,EACJ,MAAM,EACD,KAAK,sBAAsB;AAAA,EAChC,UAAU;AAAA,EACV,YAAY,EACP,MAAM,CAAC,EAAE,QAAQ,OAAO,GAAG,EAAE,QAAQ,MAAM,CAAC,CAAC;AACtD,CAAC;","names":[]}