import { Subject } from "./subject";
import { Topic } from "./topic";
import type { Prisma, MdxNote as PrismaMdxNote } from "@ulld/database/internalDatabaseTypes";
import { MdxNoteProtocol } from "./protocols/mdxNote";
import { Tag } from "./tag";
import { BibEntry } from "./BibEntry";
import { DocTypes } from "@ulld/configschema/configUtilityTypes/docTypes";
import { ParsedAppConfig } from "@ulld/configschema/types";
import { Definition } from "./definition";
import { MdxNotePlainObject } from "../../schemas/search/parsing";
import { AutoSettingWithRegex } from "../../trpc/types.d";
import { ValueSearchTableItem } from "../../trpcTypes/valueTableSearch";
import { ZodFrontMatterOutput } from "@ulld/state/classes/frontMatter/zodFrontMatterObject";
import { FromMdxStringOpts, MdxNoteFromStringInput, MdxNoteFromStringOutput, MdxNoteIntriguingValSummaryInput, MdxNoteIntriguingValSummaryOutput, MdxNotePropsInput, MdxNotePropsOutput, MdxNoteSummaryInput, MdxNoteSummaryOutput } from "./schemas/general";
import { ActiveParsableExtensions } from "@ulld/configschema/zod/secondaryConfigParse/getParsableExtensions";
export interface MdxNoteFlattened {
}
export interface ParseMdxStringProps {
    bareAss?: boolean;
    parseDefinitions?: boolean;
    id?: number;
    rootRelativePath?: string;
    docType?: DocTypes;
}
export type FromMdxStringParams = {
    content: string;
    urlSlug: string;
    rootRelativePath?: undefined;
    docType?: DocTypes;
    getBookmarkState?: boolean;
} | {
    content: string;
    urlSlug?: undefined;
    rootRelativePath: string;
    docType?: DocTypes | undefined;
    getBookmarkState?: boolean;
};
export interface InternalMdxNote extends Omit<PrismaMdxNote, "id"> {
    id?: number;
    tags: string[];
    citations: string[];
    subjects: string[];
    topics: string[];
}
export declare class MdxNote extends MdxNoteProtocol {
    id: number | undefined | null;
    title?: string | undefined | null;
    latexTitle?: string | null;
    summary?: string | null;
    raw?: string | null;
    floatImages: boolean;
    formatted?: string | null;
    citations: BibEntry[];
    topics: Topic[];
    subjects: Subject[];
    definitions: Definition[];
    tags: Tag[];
    importantValues: number[];
    quickLinkId?: string | null;
    href?: string | null;
    citationsListOrder: string[];
    outgoingQuickLinks: string[];
    equationIds: string[];
    ftExtension: ActiveParsableExtensions;
    isProtected?: boolean | null;
    sequentialKey?: string | null;
    rootRelativePath?: string | null;
    sequentialIndex?: number | null;
    frontMatter?: ZodFrontMatterOutput | null;
    remoteUrl?: string | null;
    trackRemote: boolean;
    noLog: boolean;
    noteType?: DocTypes;
    imageSrc?: string | undefined | null;
    bookmarked: boolean;
    lastSync: Date | undefined | null;
    saveFormatted: boolean;
    firstSync?: Date | null;
    constructor(props: MdxNotePropsOutput | MdxNoteSummaryOutput | MdxNoteFromStringOutput | MdxNoteIntriguingValSummaryOutput);
    toPlainObject(partial?: boolean | Partial<Record<keyof MdxNotePlainObject, true>>): {
        id?: number | undefined;
        title?: string | undefined;
        latexTitle?: string | null | undefined;
        summary?: string | null | undefined;
        raw?: string | undefined;
        floatImages?: boolean | undefined;
        citations?: {
            readingList: {
                name: string;
                description: string | null;
                createdAt?: any;
                lastUpdate?: any;
            }[];
            tags: {
                value: string;
                kanbanId: number | null;
            }[];
            OwnWork: boolean;
            ColleaguesWork: boolean;
            read: boolean;
            PdfPath: string;
            citationGroups: {
                name: string;
                description?: string | null | undefined;
            }[];
            id?: string | null | undefined;
            htmlCitation?: string | null | undefined;
            BibId?: number | null | undefined;
            address?: string | null | undefined;
            annote?: string | null | undefined;
            author?: string | null | undefined;
            booktitle?: string | null | undefined;
            chapter?: string | null | undefined;
            crossref?: string | null | undefined;
            doi?: string | null | undefined;
            edition?: string | null | undefined;
            editor?: string | null | undefined;
            email?: string | null | undefined;
            howpublished?: string | null | undefined;
            institution?: string | null | undefined;
            journal?: string | null | undefined;
            month?: string | null | undefined;
            note?: string | null | undefined;
            number?: string | null | undefined;
            organization?: string | null | undefined;
            pages?: string | null | undefined;
            publisher?: string | null | undefined;
            school?: string | null | undefined;
            series?: string | null | undefined;
            title?: string | null | undefined;
            volume?: string | null | undefined;
            type?: string | null | undefined;
            year?: string | null | undefined;
            numpages?: string | null | undefined;
            url?: string | null | undefined;
            issue?: string | null | undefined;
            issn?: string | null | undefined;
            abstract?: string | null | undefined;
            urldate?: string | undefined;
            keywords?: string | null | undefined;
            copyright?: string | null | undefined;
            tempPageIndex?: number | null | undefined;
        }[] | undefined;
        topics?: {
            value: string;
        }[] | undefined;
        subjects?: {
            value: string;
        }[] | undefined;
        definitions?: {
            id: string;
            label?: string | null | undefined;
            content?: string | null | undefined;
            mdxNoteId?: number | null | undefined;
        }[] | undefined;
        tags?: {
            value: string;
            kanbanId: number | null;
        }[] | undefined;
        quickLinkId?: string | null | undefined;
        href?: string | null | undefined;
        citationsListOrder?: string[] | undefined;
        outgoingQuickLinks?: string[] | undefined;
        equationIds?: string[] | undefined;
        ftExtension?: ".mdx" | ".md" | ".ipynb" | undefined;
        isProtected?: boolean | undefined;
        sequentialKey?: string | null | undefined;
        sequentialIndex?: number | null | undefined;
        frontMatter?: {
            tags?: any;
            id?: any;
            title?: any;
            summary?: any;
            importantValues?: any;
            topics?: any;
            sequentialKey?: any;
            subjects?: any;
            created?: any;
            updated?: any;
            sequential?: any;
            tableStyles?: any;
        } | undefined;
        remoteUrl?: string | null | undefined;
        trackRemote?: boolean | undefined;
        noteType?: (string & import("zod").BRAND<"DocTypeName">) | undefined;
        bookmarked?: boolean | undefined;
        lastSync?: any;
        firstSync?: any;
        rootRelativePath?: string | undefined;
        formatted?: string | null | undefined;
        importantValues?: number[] | undefined;
        saveFormatted?: boolean | undefined;
        imageSrc?: string | null | undefined;
    };
    zodSummaryParse(): Promise<{
        tags: Tag[];
        id: number | null;
        href: string | null;
        title: string;
        noteType: string & import("zod").BRAND<"DocTypeName">;
        bookmarked: boolean;
        isProtected: boolean | null;
        latexTitle: string | null;
        summary: string | null;
        citationsListOrder: string[];
        importantValues: number[];
        sequentialIndex: number | null;
        floatImages: boolean;
        trackRemote: boolean;
        outgoingQuickLinks: string[];
        lastSync: Date | null;
        topics: Topic[];
        subjects: Subject[];
        equationIds: string[];
        noLog: boolean;
        saveFormatted: boolean;
        rootRelativePath?: string | null | undefined;
        formatted?: string | null | undefined;
        remoteUrl?: string | null | undefined;
        firstSync?: Date | null | undefined;
        sequentialList?: {
            sequentialKey: string;
        } | null | undefined;
        sequentialKey?: string | null | undefined;
        quickLinkId?: string | null | undefined;
    }>;
    zodParse(): Promise<{
        tags: {
            value: string;
            kanbanId: number | null;
        }[];
        title: string;
        citations: {
            readingList: {
                name: string;
                description: string | null;
                createdAt?: any;
                lastUpdate?: any;
            }[];
            tags: {
                value: string;
                kanbanId: number | null;
            }[];
            OwnWork: boolean;
            ColleaguesWork: boolean;
            read: boolean;
            PdfPath: string;
            citationGroups: {
                name: string;
                description?: string | null | undefined;
            }[];
            id?: string | null | undefined;
            htmlCitation?: string | null | undefined;
            BibId?: number | null | undefined;
            address?: string | null | undefined;
            annote?: string | null | undefined;
            author?: string | null | undefined;
            booktitle?: string | null | undefined;
            chapter?: string | null | undefined;
            crossref?: string | null | undefined;
            doi?: string | null | undefined;
            edition?: string | null | undefined;
            editor?: string | null | undefined;
            email?: string | null | undefined;
            howpublished?: string | null | undefined;
            institution?: string | null | undefined;
            journal?: string | null | undefined;
            month?: string | null | undefined;
            note?: string | null | undefined;
            number?: string | null | undefined;
            organization?: string | null | undefined;
            pages?: string | null | undefined;
            publisher?: string | null | undefined;
            school?: string | null | undefined;
            series?: string | null | undefined;
            title?: string | null | undefined;
            volume?: string | null | undefined;
            type?: string | null | undefined;
            year?: string | null | undefined;
            numpages?: string | null | undefined;
            url?: string | null | undefined;
            issue?: string | null | undefined;
            issn?: string | null | undefined;
            abstract?: string | null | undefined;
            urldate?: string | undefined;
            keywords?: string | null | undefined;
            copyright?: string | null | undefined;
            tempPageIndex?: number | null | undefined;
        }[];
        noteType: string & import("zod").BRAND<"DocTypeName">;
        bookmarked: boolean;
        isProtected: boolean;
        rootRelativePath: string;
        importantValues: number[];
        floatImages: boolean;
        trackRemote: boolean;
        definitions: {
            id: string;
            label?: string | null | undefined;
            content?: string | null | undefined;
            mdxNoteId?: number | null | undefined;
        }[];
        raw: string;
        saveFormatted: boolean;
        ftExtension: ".mdx" | ".md" | ".ipynb";
        id?: number | undefined;
        href?: string | null | undefined;
        latexTitle?: string | null | undefined;
        formatted?: string | null | undefined;
        citationsListOrder?: string[] | undefined;
        imageSrc?: string | null | undefined;
        sequentialIndex?: number | null | undefined;
        remoteUrl?: string | null | undefined;
        outgoingQuickLinks?: string[] | undefined;
        firstSync?: any;
        lastSync?: any;
        topics?: {
            value: string;
        }[] | undefined;
        sequentialKey?: string | null | undefined;
        subjects?: {
            value: string;
        }[] | undefined;
        quickLinkId?: string | null | undefined;
        equationIds?: string[] | undefined;
        frontMatter?: {
            tags?: any;
            id?: any;
            title?: any;
            summary?: any;
            importantValues?: any;
            topics?: any;
            sequentialKey?: any;
            subjects?: any;
            created?: any;
            updated?: any;
            sequential?: any;
            tableStyles?: any;
        } | undefined;
        summary?: string | null | undefined;
    }>;
    getDatabaseCitation(id: string[]): Promise<{
        id: string;
        htmlCitation: string | null;
    }[]>;
    parseCitations<T extends string | undefined>(content?: T): Promise<T extends string ? string : string | undefined>;
    log(val: string | object): void;
    whereUniqueInput(): {
        id: number | undefined;
    } & {
        id?: number;
        rootRelativePath?: string;
        quickLink?: string;
        AND?: Prisma.MdxNoteWhereInput | Prisma.MdxNoteWhereInput[];
        OR?: Prisma.MdxNoteWhereInput[];
        NOT?: Prisma.MdxNoteWhereInput | Prisma.MdxNoteWhereInput[];
        isProtected?: Prisma.BoolNullableFilter<"MdxNote"> | boolean | null;
        dietSummaryKey?: Prisma.StringNullableFilter<"MdxNote"> | string | null;
        title?: Prisma.StringFilter<"MdxNote"> | string;
        latexTitle?: Prisma.StringNullableFilter<"MdxNote"> | string | null;
        noteType?: Prisma.StringFilter<"MdxNote"> | string;
        content?: Prisma.StringFilter<"MdxNote"> | string;
        formatted?: Prisma.StringNullableFilter<"MdxNote"> | string | null;
        summary?: Prisma.StringNullableFilter<"MdxNote"> | string | null;
        citationsListOrder?: Prisma.StringNullableListFilter<"MdxNote">;
        importantValues?: Prisma.FloatNullableListFilter<"MdxNote">;
        imageSrc?: Prisma.StringNullableFilter<"MdxNote"> | string | null;
        href?: Prisma.StringFilter<"MdxNote"> | string;
        sequentialKey?: Prisma.StringNullableFilter<"MdxNote"> | string | null;
        sequentialIndex?: Prisma.FloatNullableFilter<"MdxNote"> | number | null;
        floatImages?: Prisma.BoolFilter<"MdxNote"> | boolean;
        remoteUrl?: Prisma.StringNullableFilter<"MdxNote"> | string | null;
        trackRemote?: Prisma.BoolFilter<"MdxNote"> | boolean;
        outgoingQuickLinks?: Prisma.StringNullableListFilter<"MdxNote">;
        bookmarked?: Prisma.BoolFilter<"MdxNote"> | boolean;
        firstSync?: Prisma.DateTimeFilter<"MdxNote"> | Date | string;
        lastSync?: Prisma.DateTimeFilter<"MdxNote"> | Date | string;
        topics?: Prisma.TopicListRelationFilter;
        subjects?: Prisma.SubjectListRelationFilter;
        tags?: Prisma.TagListRelationFilter;
        citations?: Prisma.BibEntryListRelationFilter;
        sequentialList?: Prisma.XOR<Prisma.SequentialNoteListNullableRelationFilter, Prisma.SequentialNoteListWhereInput> | null;
        ReadingList?: Prisma.ReadingListListRelationFilter;
        equations?: Prisma.EquationListRelationFilter;
        definitions?: Prisma.DefinitionListRelationFilter;
        toDo?: Prisma.ToDoListRelationFilter;
    };
    whereInput(): {
        id: number | undefined;
    } & {
        id?: number;
        rootRelativePath?: string;
        quickLink?: string;
        AND?: Prisma.MdxNoteWhereInput | Prisma.MdxNoteWhereInput[];
        OR?: Prisma.MdxNoteWhereInput[];
        NOT?: Prisma.MdxNoteWhereInput | Prisma.MdxNoteWhereInput[];
        isProtected?: Prisma.BoolNullableFilter<"MdxNote"> | boolean | null;
        dietSummaryKey?: Prisma.StringNullableFilter<"MdxNote"> | string | null;
        title?: Prisma.StringFilter<"MdxNote"> | string;
        latexTitle?: Prisma.StringNullableFilter<"MdxNote"> | string | null;
        noteType?: Prisma.StringFilter<"MdxNote"> | string;
        content?: Prisma.StringFilter<"MdxNote"> | string;
        formatted?: Prisma.StringNullableFilter<"MdxNote"> | string | null;
        summary?: Prisma.StringNullableFilter<"MdxNote"> | string | null;
        citationsListOrder?: Prisma.StringNullableListFilter<"MdxNote">;
        importantValues?: Prisma.FloatNullableListFilter<"MdxNote">;
        imageSrc?: Prisma.StringNullableFilter<"MdxNote"> | string | null;
        href?: Prisma.StringFilter<"MdxNote"> | string;
        sequentialKey?: Prisma.StringNullableFilter<"MdxNote"> | string | null;
        sequentialIndex?: Prisma.FloatNullableFilter<"MdxNote"> | number | null;
        floatImages?: Prisma.BoolFilter<"MdxNote"> | boolean;
        remoteUrl?: Prisma.StringNullableFilter<"MdxNote"> | string | null;
        trackRemote?: Prisma.BoolFilter<"MdxNote"> | boolean;
        outgoingQuickLinks?: Prisma.StringNullableListFilter<"MdxNote">;
        bookmarked?: Prisma.BoolFilter<"MdxNote"> | boolean;
        firstSync?: Prisma.DateTimeFilter<"MdxNote"> | Date | string;
        lastSync?: Prisma.DateTimeFilter<"MdxNote"> | Date | string;
        topics?: Prisma.TopicListRelationFilter;
        subjects?: Prisma.SubjectListRelationFilter;
        tags?: Prisma.TagListRelationFilter;
        citations?: Prisma.BibEntryListRelationFilter;
        sequentialList?: Prisma.XOR<Prisma.SequentialNoteListNullableRelationFilter, Prisma.SequentialNoteListWhereInput> | null;
        ReadingList?: Prisma.ReadingListListRelationFilter;
        equations?: Prisma.EquationListRelationFilter;
        definitions?: Prisma.DefinitionListRelationFilter;
        toDo?: Prisma.ToDoListRelationFilter;
    };
    checkIfExistsWithoutId(): Prisma.MdxNoteWhereInput | false;
    parseLatexTitle(): Promise<void>;
    canSave(): boolean;
    createInput(autoSettings: AutoSettingWithRegex[] | undefined, config: ParsedAppConfig): Prisma.MdxNoteCreateInput | undefined;
    importantValueDifferences(n: number, absoluteValue?: boolean): number[];
    createArgs(autoSettings: AutoSettingWithRegex[] | undefined, config: ParsedAppConfig): Prisma.MdxNoteCreateArgs<import("@prisma/client/runtime/library").DefaultArgs> | undefined;
    connectOrCreateArgs(autoSettings: AutoSettingWithRegex[] | undefined, config: ParsedAppConfig): Prisma.MdxNoteCreateOrConnectWithoutTagsInput | undefined;
    upsertArgs(autoSettings: AutoSettingWithRegex[] | undefined, config: ParsedAppConfig): Prisma.MdxNoteUpsertArgs<import("@prisma/client/runtime/library").DefaultArgs> | undefined;
    checkAutoProperties(autoSettings: AutoSettingWithRegex[] | undefined, config: ParsedAppConfig): void;
    formatMermaidComponent(m: RegExpMatchArray): string | undefined;
    parseMermaidElement(content: string): void;
    _parseTags<T extends string | undefined>(content?: T): string;
    _parseVideoTimeLinks<T extends string | undefined>(content?: T): T extends string ? string : string | undefined;
    _parseQuickLinks<T extends string | undefined>(content?: T): Promise<T extends string ? string : string | undefined>;
    static parseMdxString(content: string, opts?: ParseMdxStringProps): Promise<string>;
    parseBareAss(): string;
    parse(): Promise<string>;
    citationIdList(): string[];
    flattenForClient(): MdxNoteFlattened;
    sortCitationsByPageIndex(): void;
    toValueSearchTableItem(): ValueSearchTableItem;
    populateFromRemote(): Promise<void>;
    setNoteType(config?: ParsedAppConfig): void;
    static fromMdxString(props: MdxNoteFromStringInput, _opts?: FromMdxStringOpts): Promise<MdxNote>;
    static fromPrisma(item: Partial<MdxNotePropsInput>): MdxNote;
    static asIntriguingValueSummary(item: MdxNoteIntriguingValSummaryInput): MdxNote;
    static asSummary(_item: MdxNoteSummaryInput): MdxNote;
    static fromList(n: (MdxNote | PrismaMdxNote)[] | undefined | null): MdxNote[];
}
export type MdxNoteAsPlainObject = ReturnType<MdxNote["toPlainObject"]>;
//# sourceMappingURL=MdxNote.d.ts.map