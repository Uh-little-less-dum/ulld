import type { Prisma, BibEntry as PrismaBibEntry } from "@ulld/database/internalDatabaseTypes";
import { CitationGroup } from "./CitationGroup";
import { MdxNote } from "./MdxNote";
import { PartialReadingListEntry, ReadingList } from "./readingList";
import { Tag } from "./tag";
import { BibCore } from "./Bib";
import type { BibFilePresenter } from "bibtex";
import { ParsedBibEntryProps } from "./schemas/general";
import { Topic } from "./topic";
import { Subject } from "./subject";
export type BibEntryPrismaAcceptedTypes = BibEntry | PrismaBibEntry | (Partial<PrismaBibEntry> & {
    id: string;
}) | PartialReadingListEntry["bibEntries"][number];
export interface BibEntrySummarySheetOutput {
    title: string;
    author: string;
    journal: string;
    tags: string[];
}
export interface BibEntryDataTableOutput {
    id: string;
    title: string;
    author: string;
    read: boolean;
    added?: Date;
}
export declare class BibEntry {
    Bib: BibCore | undefined;
    prismaEntry?: PrismaBibEntry;
    id: string;
    htmlCitation: string | null;
    tempPageIndex?: number | null;
    BibId?: number | null;
    readingList?: ReadingList[] | undefined | null;
    OwnWork?: boolean;
    ColleaguesWork?: boolean;
    read?: boolean;
    PdfPath?: string | null;
    address?: string | null;
    annote?: string | null;
    author?: string | null;
    booktitle?: string | null;
    chapter?: string | null;
    crossref?: string | null;
    doi?: string | null;
    edition?: string | null;
    editor?: string | null;
    email?: string | null;
    howpublished?: string | null;
    institution?: string | null;
    journal?: string | null;
    month?: string | null;
    note?: string | null;
    number?: string | null;
    organization?: string | null;
    pages?: string | null;
    publisher?: string | null;
    school?: string | null;
    series?: string | null;
    title?: string | null;
    volume?: string | null;
    type?: string | null;
    year?: string | null;
    numpages?: string | null;
    url?: string | null;
    issue?: string | null;
    issn?: string | null;
    abstract?: string | null;
    urldate?: string | null;
    keywords?: string | null;
    copyright?: string | null;
    added: Date | string;
    citationGroups: CitationGroup[];
    tags: Tag[];
    topics: Topic[];
    subjects: Subject[];
    MdxNotes: MdxNote[] | null;
    constructor(props: ParsedBibEntryProps, tempPageIndex?: number);
    toPlainObject(): {
        id: string;
        htmlCitation: string | null;
        BibId: number | null | undefined;
        readingList: {
            name: string;
            bibEntries: any[];
            description: string | null;
            createdAt: Date;
            lastUpdate: Date;
            ipynbNotes: any[];
            mdxNotes: any[];
        }[] | undefined;
        OwnWork: boolean | undefined;
        ColleaguesWork: boolean | undefined;
        read: boolean | undefined;
        PdfPath: string | null | undefined;
        address: string | null | undefined;
        annote: string | null | undefined;
        author: string | null | undefined;
        booktitle: string | null | undefined;
        chapter: string | null | undefined;
        crossref: string | null | undefined;
        doi: string | null | undefined;
        edition: string | null | undefined;
        editor: string | null | undefined;
        email: string | null | undefined;
        howpublished: string | null | undefined;
        institution: string | null | undefined;
        journal: string | null | undefined;
        month: string | null | undefined;
        note: string | null | undefined;
        number: string | null | undefined;
        organization: string | null | undefined;
        pages: string | null | undefined;
        publisher: string | null | undefined;
        school: string | null | undefined;
        series: string | null | undefined;
        title: string | null | undefined;
        volume: string | null | undefined;
        type: string | null | undefined;
        year: string | null | undefined;
        numpages: string | null | undefined;
        url: string | null | undefined;
        issue: string | null | undefined;
        issn: string | null | undefined;
        abstract: string | null | undefined;
        urldate: string | null | undefined;
        keywords: string | null | undefined;
        copyright: string | null | undefined;
        citationGroups: {
            name: string;
            description?: string | null | undefined;
        }[] | undefined;
        tags: {
            value: string;
        }[];
        MdxNote: MdxNote[] | null;
        tempPageIndex: number | null | undefined;
    };
    whereUniqueInput(): Prisma.BibEntryWhereUniqueInput;
    whereInput(): Prisma.BibEntryWhereInput;
    createInput(noBibId?: boolean): Prisma.BibEntryCreateInput;
    createArgs(): Prisma.BibEntryCreateArgs;
    upsertArgs(noBibId?: boolean): Prisma.BibEntryUpsertArgs;
    connectOrCreateArgs(noBibId?: boolean): Prisma.BibEntryCreateOrConnectWithoutBibInput;
    connectArgs(): Prisma.BibEntryWhereUniqueInput;
    tagList(): string[];
    toSummarySheet(): BibEntrySummarySheetOutput;
    toDataTable(): BibEntryDataTableOutput;
    formatCitationForPageSpecificOutput(html: string, pageIndex: number): string;
    toHtml(): React.ReactNode;
    static fromPrisma(item: Omit<PrismaBibEntry, "added"> & {
        added?: Date | string;
    }): BibEntry;
    static fromFs(item: BibFilePresenter["entries_raw"][number], htmlCitation?: string): BibEntry;
    static fromId(id: string): Promise<BibEntry | null>;
    static fromFsList(items: BibFilePresenter["entries_raw"]): BibEntry[];
    static fromList(items: BibEntryPrismaAcceptedTypes[] | null | undefined): BibEntry[];
}
//# sourceMappingURL=BibEntry.d.ts.map